/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2019 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */

/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
uint32_t value[]= {2047,2059,2072,2084,2097,2109,2122,2134,2147,2160,2172,2185,
		2197,2210,2222,2235,2247,2260,2272,2285,2297,2310,2322,2335,
		2347,2360,2372,2384,2397,2409,2421,2434,2446,2458,2471,2483,
		2495,2508,2520,2532,2544,2556,2569,2581,2593,2605,2617,2629,
		2641,2653,2665,2677,2689,2701,2713,2725,2737,2748,2760,2772,
		2784,2795,2807,2819,2830,2842,2854,2865,2877,2888,2900,2911,
		2922,2934,2945,2956,2967,2979,2990,3001,3012,3023,3034,3045,
		3056,3067,3078,3089,3100,3110,3121,3132,3142,3153,3163,3174,
		3184,3195,3205,3216,3226,3236,3246,3257,3267,3277,3287,3297,
		3307,3316,3326,3336,3346,3356,3365,3375,3384,3394,3403,3413,
		3422,3431,3440,3450,3459,3468,3477,3486,3495,3504,3512,3521,
		3530,3538,3547,3556,3564,3572,3581,3589,3597,3605,3614,3622,
		3630,3638,3645,3653,3661,3669,3676,3684,3691,3699,3706,3714,
		3721,3728,3735,3742,3749,3756,3763,3770,3777,3783,3790,3796,
		3803,3809,3816,3822,3828,3834,3840,3846,3852,3858,3864,3870,
		3875,3881,3887,3892,3897,3903,3908,3913,3918,3923,3928,3933,
		3938,3943,3948,3952,3957,3961,3966,3970,3974,3978,3982,3987,
		3990,3994,3998,4002,4006,4009,4013,4016,4020,4023,4026,4029,
		4032,4035,4038,4041,4044,4047,4049,4052,4054,4057,4059,4061,
		4063,4065,4067,4069,4071,4073,4075,4076,4078,4079,4081,4082,
		4083,4085,4086,4087,4088,4089,4089,4090,4091,4091,4092,4092,
		4092,4093,4093,4093,4093,4093,4093,4093,4092,4092,4091,4091,
		4090,4090,4089,4088,4087,4086,4085,4084,4083,4082,4080,4079,
		4077,4076,4074,4072,4070,4068,4066,4064,4062,4060,4058,4055,
		4053,4050,4048,4045,4042,4040,4037,4034,4031,4028,4024,4021,
		4018,4014,4011,4007,4004,4000,3996,3992,3989,3985,3980,3976,
		3972,3968,3963,3959,3954,3950,3945,3941,3936,3931,3926,3921,
		3916,3911,3905,3900,3895,3889,3884,3878,3873,3867,3861,3855,
		3849,3843,3837,3831,3825,3819,3813,3806,3800,3793,3787,3780,
		3773,3766,3760,3753,3746,3739,3732,3724,3717,3710,3703,3695,
		3688,3680,3672,3665,3657,3649,3641,3634,3626,3618,3609,3601,
		3593,3585,3577,3568,3560,3551,3543,3534,3525,3517,3508,3499,
		3490,3481,3472,3463,3454,3445,3436,3427,3417,3408,3399,3389,
		3380,3370,3360,3351,3341,3331,3321,3312,3302,3292,3282,3272,
		3262,3251,3241,3231,3221,3210,3200,3190,3179,3169,3158,3148,
		3137,3126,3116,3105,3094,3083,3072,3062,3051,3040,3029,3018,
		3007,2995,2984,2973,2962,2951,2939,2928,2917,2905,2894,2882,
		2871,2859,2848,2836,2825,2813,2801,2790,2778,2766,2754,2743,
		2731,2719,2707,2695,2683,2671,2659,2647,2635,2623,2611,2599,
		2587,2575,2563,2550,2538,2526,2514,2501,2489,2477,2465,2452,
		2440,2428,2415,2403,2391,2378,2366,2353,2341,2328,2316,2303,
		2291,2279,2266,2254,2241,2229,2216,2203,2191,2178,2166,2153,
		2141,2128,2116,2103,2090,2078,2065,2053,2040,2028,2015,2003,
		1990,1977,1965,1952,1940,1927,1915,1902,1890,1877,1864,1852,
		1839,1827,1814,1802,1790,1777,1765,1752,1740,1727,1715,1702,
		1690,1678,1665,1653,1641,1628,1616,1604,1592,1579,1567,1555,
		1543,1530,1518,1506,1494,1482,1470,1458,1446,1434,1422,1410,
		1398,1386,1374,1362,1350,1339,1327,1315,1303,1292,1280,1268,
		1257,1245,1234,1222,1211,1199,1188,1176,1165,1154,1142,1131,
		1120,1109,1098,1086,1075,1064,1053,1042,1031,1021,1010,999,
		988,977,967,956,945,935,924,914,903,893,883,872,
		862,852,842,831,821,811,801,791,781,772,762,752,
		742,733,723,713,704,694,685,676,666,657,648,639,
		630,621,612,603,594,585,576,568,559,550,542,533,
		525,516,508,500,492,484,475,467,459,452,444,436,
		428,421,413,405,398,390,383,376,369,361,354,347,
		340,333,327,320,313,306,300,293,287,280,274,268,
		262,256,250,244,238,232,226,220,215,209,204,198,
		193,188,182,177,172,167,162,157,152,148,143,139,
		134,130,125,121,117,113,108,104,101,97,93,89,
		86,82,79,75,72,69,65,62,59,56,53,51,
		48,45,43,40,38,35,33,31,29,27,25,23,
		21,19,17,16,14,13,11,10,9,8,7,6,
		5,4,3,3,2,2,1,1,0,0,0,0,
		0,0,0,1,1,1,2,2,3,4,4,5,
		6,7,8,10,11,12,14,15,17,18,20,22,
		24,26,28,30,32,34,36,39,41,44,46,49,
		52,55,58,61,64,67,70,73,77,80,84,87,
		91,95,99,103,106,111,115,119,123,127,132,136,
		141,145,150,155,160,165,170,175,180,185,190,196,
		201,206,212,218,223,229,235,241,247,253,259,265,
		271,277,284,290,297,303,310,316,323,330,337,344,
		351,358,365,372,379,387,394,402,409,417,424,432,
		440,448,455,463,471,479,488,496,504,512,521,529,
		537,546,555,563,572,581,589,598,607,616,625,634,
		643,653,662,671,680,690,699,709,718,728,737,747,
		757,767,777,786,796,806,816,826,836,847,857,867,
		877,888,898,909,919,930,940,951,961,972,983,993,
		1004,1015,1026,1037,1048,1059,1070,1081,1092,1103,1114,1126,
		1137,1148,1159,1171,1182,1193,1205,1216,1228,1239,1251,1263,
		1274,1286,1298,1309,1321,1333,1345,1356,1368,1380,1392,1404,
		1416,1428,1440,1452,1464,1476,1488,1500,1512,1524,1537,1549,
		1561,1573,1585,1598,1610,1622,1635,1647,1659,1672,1684,1696,
		1709,1721,1733,1746,1758,1771,1783,1796,1808,1821,1833,1846,
		1858,1871,1883,1896,1908,1921,1933,1946,1959,1971,1984,1996,
		2009,2021,2034,2047};
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc2;

DAC_HandleTypeDef hdac;

TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
uint16_t i=0;
int sinus =0;
uint16_t adc_value=0;
uint32_t frequenz;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_DAC_Init(void);
static void MX_TIM6_Init(void);
static void MX_ADC2_Init(void);
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void setFrequency(uint16_t value){
	if (value<100)
		value=100;
	frequenz = (uint32_t)((double)((value-100)*(62500-4)/(4096-100)+4)); //basierend auf einer 32M Hz Clock
	//TIM6->ARR = frequenz;
	//TIM6->ARR = 5;
}




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{

	//	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
		//HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value[i]);
		i++;
		if(i==1022)
			i=0;
}


void startSinus(){
	HAL_TIM_Base_Start_IT(&htim6);
}

void endSinus(){
	HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);
	HAL_TIM_Base_Stop_IT(&htim6);
}

void startDreiecksignal(){
	HAL_TIM_Base_Start(&htim6);
	HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_2047);
	HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
}

void stopDreiecksignal(){
	HAL_TIM_Base_Stop(&htim6);
	HAL_DAC_Stop(&hdac, DAC_CHANNEL_1);

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  adc_value = HAL_ADC_GetValue(&hadc2);
  setFrequency(adc_value);

}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_DAC_Init();
  MX_TIM6_Init();
  MX_ADC2_Init();
  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
  HAL_ADC_Start_IT(&hadc2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
startSinus();
while (1)
  {
 HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 HAL_Delay(1000);

	/*  setFrequency(500);
	  startSinus();
	  setFrequency(1000);
	  HAL_Delay(1000);
	  endSinus();
	  HAL_Delay(1000);
	  startDreiecksignal();
	  HAL_Delay(1000);
	  stopDreiecksignal();
	  HAL_Delay(1000);*/
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 64;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
  hadc2.Init.ContinuousConvMode = DISABLE;
  hadc2.Init.DiscontinuousConvMode = DISABLE;
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc2.Init.NbrOfConversion = 1;
  hadc2.Init.DMAContinuousRequests = DISABLE;
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}

/**
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};

  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
  if (HAL_DAC_Init(&hdac) != HAL_OK)
  {
    Error_Handler();
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 100;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
  htim6.Init.Prescaler = 1;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 1000;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
