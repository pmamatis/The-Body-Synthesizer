
Body-Synthezier_Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007654  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  08007828  08007828  00017828  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ac8  08007ac8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007ac8  08007ac8  00017ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ad0  08007ad0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ad0  08007ad0  00017ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ad4  08007ad4  00017ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000074  08007b4c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000504  08007b4c  00020504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001267b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002689  00000000  00000000  0003271f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00034da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  00035af8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a7d  00000000  00000000  00036798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000127a4  00000000  00000000  0005a215  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0170  00000000  00000000  0006c9b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013cb29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042f0  00000000  00000000  0013cb7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800780c 	.word	0x0800780c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	0800780c 	.word	0x0800780c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b96e 	b.w	8000f1c <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468c      	mov	ip, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f040 8083 	bne.w	8000d6e <__udivmoddi4+0x116>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	d947      	bls.n	8000cfe <__udivmoddi4+0xa6>
 8000c6e:	fab2 f282 	clz	r2, r2
 8000c72:	b142      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c74:	f1c2 0020 	rsb	r0, r2, #32
 8000c78:	fa24 f000 	lsr.w	r0, r4, r0
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	4097      	lsls	r7, r2
 8000c80:	ea40 0c01 	orr.w	ip, r0, r1
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c90:	fa1f fe87 	uxth.w	lr, r7
 8000c94:	fb08 c116 	mls	r1, r8, r6, ip
 8000c98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9c:	fb06 f10e 	mul.w	r1, r6, lr
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000caa:	f080 8119 	bcs.w	8000ee0 <__udivmoddi4+0x288>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8116 	bls.w	8000ee0 <__udivmoddi4+0x288>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	193c      	adds	r4, r7, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cd6:	f080 8105 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f240 8102 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	443c      	add	r4, r7
 8000ce4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce8:	eba4 040e 	sub.w	r4, r4, lr
 8000cec:	2600      	movs	r6, #0
 8000cee:	b11d      	cbz	r5, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	b902      	cbnz	r2, 8000d02 <__udivmoddi4+0xaa>
 8000d00:	deff      	udf	#255	; 0xff
 8000d02:	fab2 f282 	clz	r2, r2
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	d150      	bne.n	8000dac <__udivmoddi4+0x154>
 8000d0a:	1bcb      	subs	r3, r1, r7
 8000d0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d10:	fa1f f887 	uxth.w	r8, r7
 8000d14:	2601      	movs	r6, #1
 8000d16:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d1a:	0c21      	lsrs	r1, r4, #16
 8000d1c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d24:	fb08 f30c 	mul.w	r3, r8, ip
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000d2c:	1879      	adds	r1, r7, r1
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0xe2>
 8000d34:	428b      	cmp	r3, r1
 8000d36:	f200 80e9 	bhi.w	8000f0c <__udivmoddi4+0x2b4>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1ac9      	subs	r1, r1, r3
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d48:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x10c>
 8000d54:	193c      	adds	r4, r7, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x10a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80d9 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e7bf      	b.n	8000cee <__udivmoddi4+0x96>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x12e>
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	f000 80b1 	beq.w	8000eda <__udivmoddi4+0x282>
 8000d78:	2600      	movs	r6, #0
 8000d7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7e:	4630      	mov	r0, r6
 8000d80:	4631      	mov	r1, r6
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f683 	clz	r6, r3
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d14a      	bne.n	8000e24 <__udivmoddi4+0x1cc>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0x140>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80b8 	bhi.w	8000f08 <__udivmoddi4+0x2b0>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	468c      	mov	ip, r1
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	d0a8      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000da6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000daa:	e7a5      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f603 	lsr.w	r6, r0, r3
 8000db4:	4097      	lsls	r7, r2
 8000db6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbe:	40d9      	lsrs	r1, r3
 8000dc0:	4330      	orrs	r0, r6
 8000dc2:	0c03      	lsrs	r3, r0, #16
 8000dc4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dc8:	fa1f f887 	uxth.w	r8, r7
 8000dcc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb06 f108 	mul.w	r1, r6, r8
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	fa04 f402 	lsl.w	r4, r4, r2
 8000dde:	d909      	bls.n	8000df4 <__udivmoddi4+0x19c>
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000de6:	f080 808d 	bcs.w	8000f04 <__udivmoddi4+0x2ac>
 8000dea:	4299      	cmp	r1, r3
 8000dec:	f240 808a 	bls.w	8000f04 <__udivmoddi4+0x2ac>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	443b      	add	r3, r7
 8000df4:	1a5b      	subs	r3, r3, r1
 8000df6:	b281      	uxth	r1, r0
 8000df8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dfc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb00 f308 	mul.w	r3, r0, r8
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x1c4>
 8000e0c:	1879      	adds	r1, r7, r1
 8000e0e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e12:	d273      	bcs.n	8000efc <__udivmoddi4+0x2a4>
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d971      	bls.n	8000efc <__udivmoddi4+0x2a4>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4439      	add	r1, r7
 8000e1c:	1acb      	subs	r3, r1, r3
 8000e1e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e22:	e778      	b.n	8000d16 <__udivmoddi4+0xbe>
 8000e24:	f1c6 0c20 	rsb	ip, r6, #32
 8000e28:	fa03 f406 	lsl.w	r4, r3, r6
 8000e2c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e30:	431c      	orrs	r4, r3
 8000e32:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e36:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e3e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e42:	431f      	orrs	r7, r3
 8000e44:	0c3b      	lsrs	r3, r7, #16
 8000e46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4a:	fa1f f884 	uxth.w	r8, r4
 8000e4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e56:	fb09 fa08 	mul.w	sl, r9, r8
 8000e5a:	458a      	cmp	sl, r1
 8000e5c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e60:	fa00 f306 	lsl.w	r3, r0, r6
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x220>
 8000e66:	1861      	adds	r1, r4, r1
 8000e68:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e6c:	d248      	bcs.n	8000f00 <__udivmoddi4+0x2a8>
 8000e6e:	458a      	cmp	sl, r1
 8000e70:	d946      	bls.n	8000f00 <__udivmoddi4+0x2a8>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4421      	add	r1, r4
 8000e78:	eba1 010a 	sub.w	r1, r1, sl
 8000e7c:	b2bf      	uxth	r7, r7
 8000e7e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e82:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e86:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e8a:	fb00 f808 	mul.w	r8, r0, r8
 8000e8e:	45b8      	cmp	r8, r7
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x24a>
 8000e92:	19e7      	adds	r7, r4, r7
 8000e94:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e98:	d22e      	bcs.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e9a:	45b8      	cmp	r8, r7
 8000e9c:	d92c      	bls.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4427      	add	r7, r4
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	eba7 0708 	sub.w	r7, r7, r8
 8000eaa:	fba0 8902 	umull	r8, r9, r0, r2
 8000eae:	454f      	cmp	r7, r9
 8000eb0:	46c6      	mov	lr, r8
 8000eb2:	4649      	mov	r1, r9
 8000eb4:	d31a      	bcc.n	8000eec <__udivmoddi4+0x294>
 8000eb6:	d017      	beq.n	8000ee8 <__udivmoddi4+0x290>
 8000eb8:	b15d      	cbz	r5, 8000ed2 <__udivmoddi4+0x27a>
 8000eba:	ebb3 020e 	subs.w	r2, r3, lr
 8000ebe:	eb67 0701 	sbc.w	r7, r7, r1
 8000ec2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ec6:	40f2      	lsrs	r2, r6
 8000ec8:	ea4c 0202 	orr.w	r2, ip, r2
 8000ecc:	40f7      	lsrs	r7, r6
 8000ece:	e9c5 2700 	strd	r2, r7, [r5]
 8000ed2:	2600      	movs	r6, #0
 8000ed4:	4631      	mov	r1, r6
 8000ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e70b      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6fd      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000ee8:	4543      	cmp	r3, r8
 8000eea:	d2e5      	bcs.n	8000eb8 <__udivmoddi4+0x260>
 8000eec:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ef0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7df      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e7d2      	b.n	8000ea2 <__udivmoddi4+0x24a>
 8000efc:	4660      	mov	r0, ip
 8000efe:	e78d      	b.n	8000e1c <__udivmoddi4+0x1c4>
 8000f00:	4681      	mov	r9, r0
 8000f02:	e7b9      	b.n	8000e78 <__udivmoddi4+0x220>
 8000f04:	4666      	mov	r6, ip
 8000f06:	e775      	b.n	8000df4 <__udivmoddi4+0x19c>
 8000f08:	4630      	mov	r0, r6
 8000f0a:	e74a      	b.n	8000da2 <__udivmoddi4+0x14a>
 8000f0c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f10:	4439      	add	r1, r7
 8000f12:	e713      	b.n	8000d3c <__udivmoddi4+0xe4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	443c      	add	r4, r7
 8000f18:	e724      	b.n	8000d64 <__udivmoddi4+0x10c>
 8000f1a:	bf00      	nop

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <MPU6050_init>:

#include "MPU6050_GY521.h"



MPU6050_STATUS MPU6050_init(I2C_HandleTypeDef* __hi2c, MPU6050_Data* Sensor_Data_pointer, MPU6050_ACCL_RES accl_resolution, MPU6050_GYRO_RES gyro_resolution, uint8_t samplerate){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af04      	add	r7, sp, #16
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	460b      	mov	r3, r1
 8000f30:	71fb      	strb	r3, [r7, #7]
 8000f32:	4613      	mov	r3, r2
 8000f34:	71bb      	strb	r3, [r7, #6]

	uint8_t Data=0x00;
 8000f36:	2300      	movs	r3, #0
 8000f38:	75fb      	strb	r3, [r7, #23]
	MPU6050_hi2c = __hi2c;
 8000f3a:	4aa3      	ldr	r2, [pc, #652]	; (80011c8 <MPU6050_init+0x2a8>)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6013      	str	r3, [r2, #0]
	Sensor_Data = Sensor_Data_pointer;
 8000f40:	4aa2      	ldr	r2, [pc, #648]	; (80011cc <MPU6050_init+0x2ac>)
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	6013      	str	r3, [r2, #0]
	printf("MPU6050 init begin\r\n");
 8000f46:	48a2      	ldr	r0, [pc, #648]	; (80011d0 <MPU6050_init+0x2b0>)
 8000f48:	f005 f98e 	bl	8006268 <puts>
	//Check if device is ready: Let LED blink 3 times if yes
	if((HAL_I2C_IsDeviceReady(MPU6050_hi2c, MPU6050_ADDR, 2, 20)) != HAL_OK){
 8000f4c:	4b9e      	ldr	r3, [pc, #632]	; (80011c8 <MPU6050_init+0x2a8>)
 8000f4e:	6818      	ldr	r0, [r3, #0]
 8000f50:	2314      	movs	r3, #20
 8000f52:	2202      	movs	r2, #2
 8000f54:	21d0      	movs	r1, #208	; 0xd0
 8000f56:	f003 f823 	bl	8003fa0 <HAL_I2C_IsDeviceReady>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d004      	beq.n	8000f6a <MPU6050_init+0x4a>
		printf("MPU 6050 No Connection\r\n");
 8000f60:	489c      	ldr	r0, [pc, #624]	; (80011d4 <MPU6050_init+0x2b4>)
 8000f62:	f005 f981 	bl	8006268 <puts>
		return MPU6050_Status_Notconnected;
 8000f66:	2304      	movs	r3, #4
 8000f68:	e12a      	b.n	80011c0 <MPU6050_init+0x2a0>
	}



	//check WHO_AM_I: If answer is I_AM toggle LED
	HAL_I2C_Mem_Read(MPU6050_hi2c, MPU6050_ADDR, MPU6050_WHO_AM_I_REG, 1, &Data, 1, 1000);
 8000f6a:	4b97      	ldr	r3, [pc, #604]	; (80011c8 <MPU6050_init+0x2a8>)
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	9302      	str	r3, [sp, #8]
 8000f74:	2301      	movs	r3, #1
 8000f76:	9301      	str	r3, [sp, #4]
 8000f78:	f107 0317 	add.w	r3, r7, #23
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	2275      	movs	r2, #117	; 0x75
 8000f82:	21d0      	movs	r1, #208	; 0xd0
 8000f84:	f002 fde6 	bl	8003b54 <HAL_I2C_Mem_Read>

	if ((Data =! MPU6050_I_AM)) // if-statement is 1 if MPU is present
 8000f88:	2300      	movs	r3, #0
 8000f8a:	75fb      	strb	r3, [r7, #23]
	}



	// wake sensor
	Data=0x00;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR, MPU6050_PWR_MGMT_1_REG, 1, &Data, 1, 1000)!=HAL_OK)
 8000f90:	4b8d      	ldr	r3, [pc, #564]	; (80011c8 <MPU6050_init+0x2a8>)
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	f107 0317 	add.w	r3, r7, #23
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	226b      	movs	r2, #107	; 0x6b
 8000fa8:	21d0      	movs	r1, #208	; 0xd0
 8000faa:	f002 fcd9 	bl	8003960 <HAL_I2C_Mem_Write>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MPU6050_init+0x98>
	{
		return MPU6050_Status_Invalid;
 8000fb4:	2305      	movs	r3, #5
 8000fb6:	e103      	b.n	80011c0 <MPU6050_init+0x2a0>
	}


	// Config range/resolution Gyroscope
	Data = 0xE0 | (gyro_resolution<<3);
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	f063 031f 	orn	r3, r3, #31
 8000fc2:	b25b      	sxtb	r3, r3
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR, MPU6050_GYRO_CONFIG_REG, 1, &Data, 1, 1000) != HAL_OK){
 8000fc8:	4b7f      	ldr	r3, [pc, #508]	; (80011c8 <MPU6050_init+0x2a8>)
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	f107 0317 	add.w	r3, r7, #23
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	221b      	movs	r2, #27
 8000fe0:	21d0      	movs	r1, #208	; 0xd0
 8000fe2:	f002 fcbd 	bl	8003960 <HAL_I2C_Mem_Write>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MPU6050_init+0xd0>
		return MPU6050_Status_Error;
 8000fec:	2302      	movs	r3, #2
 8000fee:	e0e7      	b.n	80011c0 <MPU6050_init+0x2a0>
	}
	//for normalization of Gyroscope range
	switch (gyro_resolution){
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d81e      	bhi.n	8001034 <MPU6050_init+0x114>
 8000ff6:	a201      	add	r2, pc, #4	; (adr r2, 8000ffc <MPU6050_init+0xdc>)
 8000ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffc:	0800100d 	.word	0x0800100d
 8001000:	08001017 	.word	0x08001017
 8001004:	08001021 	.word	0x08001021
 8001008:	0800102b 	.word	0x0800102b
	case MPU6050_GYRO_250deg:
		Sensor_Data->Gyro_mult = MPU6050_GYRO_SENS_250;
 800100c:	4b6f      	ldr	r3, [pc, #444]	; (80011cc <MPU6050_init+0x2ac>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a71      	ldr	r2, [pc, #452]	; (80011d8 <MPU6050_init+0x2b8>)
 8001012:	619a      	str	r2, [r3, #24]
		break;
 8001014:	e00e      	b.n	8001034 <MPU6050_init+0x114>
	case MPU6050_GYRO_500deg:
		Sensor_Data->Gyro_mult = MPU6050_GYRO_SENS_500;
 8001016:	4b6d      	ldr	r3, [pc, #436]	; (80011cc <MPU6050_init+0x2ac>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a70      	ldr	r2, [pc, #448]	; (80011dc <MPU6050_init+0x2bc>)
 800101c:	619a      	str	r2, [r3, #24]
		break;
 800101e:	e009      	b.n	8001034 <MPU6050_init+0x114>
	case MPU6050_GYRO_1000deg:
		Sensor_Data->Gyro_mult = MPU6050_GYRO_SENS_1000;
 8001020:	4b6a      	ldr	r3, [pc, #424]	; (80011cc <MPU6050_init+0x2ac>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a6e      	ldr	r2, [pc, #440]	; (80011e0 <MPU6050_init+0x2c0>)
 8001026:	619a      	str	r2, [r3, #24]
		break;
 8001028:	e004      	b.n	8001034 <MPU6050_init+0x114>
	case MPU6050_GYRO_2000deg:
		Sensor_Data->Gyro_mult = MPU6050_GYRO_SENS_2000;
 800102a:	4b68      	ldr	r3, [pc, #416]	; (80011cc <MPU6050_init+0x2ac>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a6d      	ldr	r2, [pc, #436]	; (80011e4 <MPU6050_init+0x2c4>)
 8001030:	619a      	str	r2, [r3, #24]
		break;
 8001032:	bf00      	nop
	}


	// Config range/resolution of Accelerometer
	Data = 0xE0 | (accl_resolution<<3);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	b25b      	sxtb	r3, r3
 800103a:	f063 031f 	orn	r3, r3, #31
 800103e:	b25b      	sxtb	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR, MPU6050_ACCL_CONFIG_REG, 1, &Data, 1, 1000) != HAL_OK){
 8001044:	4b60      	ldr	r3, [pc, #384]	; (80011c8 <MPU6050_init+0x2a8>)
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	2301      	movs	r3, #1
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	f107 0317 	add.w	r3, r7, #23
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	221c      	movs	r2, #28
 800105c:	21d0      	movs	r1, #208	; 0xd0
 800105e:	f002 fc7f 	bl	8003960 <HAL_I2C_Mem_Write>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MPU6050_init+0x14c>
		return MPU6050_Status_Error;
 8001068:	2302      	movs	r3, #2
 800106a:	e0a9      	b.n	80011c0 <MPU6050_init+0x2a0>
	}

	switch(accl_resolution){
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2b03      	cmp	r3, #3
 8001070:	d822      	bhi.n	80010b8 <MPU6050_init+0x198>
 8001072:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <MPU6050_init+0x158>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	08001089 	.word	0x08001089
 800107c:	08001095 	.word	0x08001095
 8001080:	080010a1 	.word	0x080010a1
 8001084:	080010ad 	.word	0x080010ad
	case MPU6050_ACCL_2G:
		Sensor_Data->Accl_mult = MPU6050_ACCL_SENS_2;
 8001088:	4b50      	ldr	r3, [pc, #320]	; (80011cc <MPU6050_init+0x2ac>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001090:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 8001092:	e011      	b.n	80010b8 <MPU6050_init+0x198>
	case MPU6050_ACCL_4G:
		Sensor_Data->Accl_mult = MPU6050_ACCL_SENS_4;
 8001094:	4b4d      	ldr	r3, [pc, #308]	; (80011cc <MPU6050_init+0x2ac>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800109c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800109e:	e00b      	b.n	80010b8 <MPU6050_init+0x198>
	case MPU6050_ACCL_8G:
		Sensor_Data->Accl_mult = MPU6050_ACCL_SENS_8;
 80010a0:	4b4a      	ldr	r3, [pc, #296]	; (80011cc <MPU6050_init+0x2ac>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80010a8:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80010aa:	e005      	b.n	80010b8 <MPU6050_init+0x198>
	case MPU6050_ACCL_16G:
		Sensor_Data->Accl_mult = MPU6050_ACCL_SENS_16;
 80010ac:	4b47      	ldr	r3, [pc, #284]	; (80011cc <MPU6050_init+0x2ac>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80010b4:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 80010b6:	bf00      	nop
	}


	// Config Sample Rate: Sample Rate=8/(1+Data)
	Data=samplerate;
 80010b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010bc:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR, MPU6050_SMPLRT_DIV_REG, 1, &Data, 1, 1000) != HAL_OK){
 80010be:	4b42      	ldr	r3, [pc, #264]	; (80011c8 <MPU6050_init+0x2a8>)
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c6:	9302      	str	r3, [sp, #8]
 80010c8:	2301      	movs	r3, #1
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	f107 0317 	add.w	r3, r7, #23
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	2219      	movs	r2, #25
 80010d6:	21d0      	movs	r1, #208	; 0xd0
 80010d8:	f002 fc42 	bl	8003960 <HAL_I2C_Mem_Write>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MPU6050_init+0x1c6>
		return MPU6050_Status_Error;
 80010e2:	2302      	movs	r3, #2
 80010e4:	e06c      	b.n	80011c0 <MPU6050_init+0x2a0>
	}

	//Set Gyroscope offset to zero
	Sensor_Data->Gx_offset = 0;
 80010e6:	4b39      	ldr	r3, [pc, #228]	; (80011cc <MPU6050_init+0x2ac>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2200      	movs	r2, #0
 80010ec:	80da      	strh	r2, [r3, #6]
	Sensor_Data->Gy_offset = 0;
 80010ee:	4b37      	ldr	r3, [pc, #220]	; (80011cc <MPU6050_init+0x2ac>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2200      	movs	r2, #0
 80010f4:	811a      	strh	r2, [r3, #8]
	Sensor_Data->Gz_offset = 0;
 80010f6:	4b35      	ldr	r3, [pc, #212]	; (80011cc <MPU6050_init+0x2ac>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2200      	movs	r2, #0
 80010fc:	815a      	strh	r2, [r3, #10]

	//Set Accelerometer offset to zero
	Sensor_Data->Ax_offset = 0;
 80010fe:	4b33      	ldr	r3, [pc, #204]	; (80011cc <MPU6050_init+0x2ac>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2200      	movs	r2, #0
 8001104:	869a      	strh	r2, [r3, #52]	; 0x34
	Sensor_Data->Ay_offset = 0;
 8001106:	4b31      	ldr	r3, [pc, #196]	; (80011cc <MPU6050_init+0x2ac>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2200      	movs	r2, #0
 800110c:	86da      	strh	r2, [r3, #54]	; 0x36
	Sensor_Data->Az_offset = 0;
 800110e:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <MPU6050_init+0x2ac>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2200      	movs	r2, #0
 8001114:	871a      	strh	r2, [r3, #56]	; 0x38

	//	//Set User Controll, Enable FIFO
	Data = MPU6050_USR_CRTL_FIFO_EN;
 8001116:	2340      	movs	r3, #64	; 0x40
 8001118:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR, MPU6050_USR_CRTL_REG, 1, &Data, 1, 1000) != HAL_OK){
 800111a:	4b2b      	ldr	r3, [pc, #172]	; (80011c8 <MPU6050_init+0x2a8>)
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	2301      	movs	r3, #1
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	f107 0317 	add.w	r3, r7, #23
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2301      	movs	r3, #1
 8001130:	226a      	movs	r2, #106	; 0x6a
 8001132:	21d0      	movs	r1, #208	; 0xd0
 8001134:	f002 fc14 	bl	8003960 <HAL_I2C_Mem_Write>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MPU6050_init+0x222>
		return MPU6050_Status_Error;
 800113e:	2302      	movs	r3, #2
 8001140:	e03e      	b.n	80011c0 <MPU6050_init+0x2a0>
	}
	HAL_I2C_Mem_Read(MPU6050_hi2c, MPU6050_ADDR, MPU6050_USR_CRTL_REG, 1, &Data, 1, 1000);
 8001142:	4b21      	ldr	r3, [pc, #132]	; (80011c8 <MPU6050_init+0x2a8>)
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	9302      	str	r3, [sp, #8]
 800114c:	2301      	movs	r3, #1
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	f107 0317 	add.w	r3, r7, #23
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2301      	movs	r3, #1
 8001158:	226a      	movs	r2, #106	; 0x6a
 800115a:	21d0      	movs	r1, #208	; 0xd0
 800115c:	f002 fcfa 	bl	8003b54 <HAL_I2C_Mem_Read>
	//	printf("MPU6050_USR_CRTL_REG: %i\r\n",Data);
	// Interruppt Enable
	Data = MPU6050_INT_EN_DATA_RDY;
 8001160:	2301      	movs	r3, #1
 8001162:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR,MPU6050_RA_INT_ENABLE, 1, &Data, 1, 1000) != HAL_OK){
 8001164:	4b18      	ldr	r3, [pc, #96]	; (80011c8 <MPU6050_init+0x2a8>)
 8001166:	6818      	ldr	r0, [r3, #0]
 8001168:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116c:	9302      	str	r3, [sp, #8]
 800116e:	2301      	movs	r3, #1
 8001170:	9301      	str	r3, [sp, #4]
 8001172:	f107 0317 	add.w	r3, r7, #23
 8001176:	9300      	str	r3, [sp, #0]
 8001178:	2301      	movs	r3, #1
 800117a:	2238      	movs	r2, #56	; 0x38
 800117c:	21d0      	movs	r1, #208	; 0xd0
 800117e:	f002 fbef 	bl	8003960 <HAL_I2C_Mem_Write>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MPU6050_init+0x26c>
		return MPU6050_Status_Error;
 8001188:	2302      	movs	r3, #2
 800118a:	e019      	b.n	80011c0 <MPU6050_init+0x2a0>
	}


	//determines which sensor measurements are loaded into the FIFO buffer
	//	Data = MPU6050_FIFO_EN_ACCEL | MPU6050_FIFO_EN_ZG | MPU6050_FIFO_EN_YG | MPU6050_FIFO_EN_XG;
	Data = 0x00;
 800118c:	2300      	movs	r3, #0
 800118e:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR, MPU6050_FIFO_DATA_REG, 1, &Data, 1, 1000) != HAL_OK){
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <MPU6050_init+0x2a8>)
 8001192:	6818      	ldr	r0, [r3, #0]
 8001194:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001198:	9302      	str	r3, [sp, #8]
 800119a:	2301      	movs	r3, #1
 800119c:	9301      	str	r3, [sp, #4]
 800119e:	f107 0317 	add.w	r3, r7, #23
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	2301      	movs	r3, #1
 80011a6:	2274      	movs	r2, #116	; 0x74
 80011a8:	21d0      	movs	r1, #208	; 0xd0
 80011aa:	f002 fbd9 	bl	8003960 <HAL_I2C_Mem_Write>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MPU6050_init+0x298>
		return MPU6050_Status_Error;
 80011b4:	2302      	movs	r3, #2
 80011b6:	e003      	b.n	80011c0 <MPU6050_init+0x2a0>
	}
	printf("MPU6050 init end\r\n");
 80011b8:	480b      	ldr	r0, [pc, #44]	; (80011e8 <MPU6050_init+0x2c8>)
 80011ba:	f005 f855 	bl	8006268 <puts>
	return MPU6050_Status_OK;
 80011be:	2300      	movs	r3, #0
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	3718      	adds	r7, #24
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	20000324 	.word	0x20000324
 80011cc:	2000031c 	.word	0x2000031c
 80011d0:	08007828 	.word	0x08007828
 80011d4:	0800783c 	.word	0x0800783c
 80011d8:	3bfa232d 	.word	0x3bfa232d
 80011dc:	3c7a232d 	.word	0x3c7a232d
 80011e0:	3cf9c190 	.word	0x3cf9c190
 80011e4:	3d79c190 	.word	0x3d79c190
 80011e8:	08007854 	.word	0x08007854

080011ec <MPU6050_Read_Accl>:




MPU6050_STATUS MPU6050_Read_Accl(){
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b086      	sub	sp, #24
 80011f0:	af04      	add	r7, sp, #16

	uint8_t Rec_Data[6];

	// Read 6Bytes (2byte per axis) starting from ACCL_XOUT_H register
	if(HAL_I2C_Mem_Read (MPU6050_hi2c, MPU6050_ADDR, MPU6050_ACCL_XOUT_H_REG, 1, Rec_Data, 6, 1000) != HAL_OK){
 80011f2:	4b28      	ldr	r3, [pc, #160]	; (8001294 <MPU6050_Read_Accl+0xa8>)
 80011f4:	6818      	ldr	r0, [r3, #0]
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	2306      	movs	r3, #6
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	463b      	mov	r3, r7
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2301      	movs	r3, #1
 8001206:	223b      	movs	r2, #59	; 0x3b
 8001208:	21d0      	movs	r1, #208	; 0xd0
 800120a:	f002 fca3 	bl	8003b54 <HAL_I2C_Mem_Read>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MPU6050_Read_Accl+0x2c>
		return MPU6050_Status_Error;
 8001214:	2302      	movs	r3, #2
 8001216:	e039      	b.n	800128c <MPU6050_Read_Accl+0xa0>
	}

	// Data for all axis comes as 6Byte array, in the following it is filled into one 16-bit array for each axis
	Sensor_Data->Accl_X = (int16_t)(Rec_Data[0]<<8 | Rec_Data[1]) - Sensor_Data->Ax_offset;
 8001218:	783b      	ldrb	r3, [r7, #0]
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	b21a      	sxth	r2, r3
 800121e:	787b      	ldrb	r3, [r7, #1]
 8001220:	b21b      	sxth	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b21b      	sxth	r3, r3
 8001226:	b29a      	uxth	r2, r3
 8001228:	4b1b      	ldr	r3, [pc, #108]	; (8001298 <MPU6050_Read_Accl+0xac>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001230:	b29b      	uxth	r3, r3
 8001232:	1ad3      	subs	r3, r2, r3
 8001234:	b29a      	uxth	r2, r3
 8001236:	4b18      	ldr	r3, [pc, #96]	; (8001298 <MPU6050_Read_Accl+0xac>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	b212      	sxth	r2, r2
 800123c:	851a      	strh	r2, [r3, #40]	; 0x28
	Sensor_Data->Accl_Y = (int16_t)(Rec_Data[2]<<8 | Rec_Data[3]) - Sensor_Data->Ay_offset;
 800123e:	78bb      	ldrb	r3, [r7, #2]
 8001240:	021b      	lsls	r3, r3, #8
 8001242:	b21a      	sxth	r2, r3
 8001244:	78fb      	ldrb	r3, [r7, #3]
 8001246:	b21b      	sxth	r3, r3
 8001248:	4313      	orrs	r3, r2
 800124a:	b21b      	sxth	r3, r3
 800124c:	b29a      	uxth	r2, r3
 800124e:	4b12      	ldr	r3, [pc, #72]	; (8001298 <MPU6050_Read_Accl+0xac>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8001256:	b29b      	uxth	r3, r3
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	b29a      	uxth	r2, r3
 800125c:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MPU6050_Read_Accl+0xac>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	b212      	sxth	r2, r2
 8001262:	855a      	strh	r2, [r3, #42]	; 0x2a
	Sensor_Data->Accl_Z = (int16_t)(Rec_Data[4]<<8 | Rec_Data[5]) - Sensor_Data->Az_offset;
 8001264:	793b      	ldrb	r3, [r7, #4]
 8001266:	021b      	lsls	r3, r3, #8
 8001268:	b21a      	sxth	r2, r3
 800126a:	797b      	ldrb	r3, [r7, #5]
 800126c:	b21b      	sxth	r3, r3
 800126e:	4313      	orrs	r3, r2
 8001270:	b21b      	sxth	r3, r3
 8001272:	b29a      	uxth	r2, r3
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MPU6050_Read_Accl+0xac>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800127c:	b29b      	uxth	r3, r3
 800127e:	1ad3      	subs	r3, r2, r3
 8001280:	b29a      	uxth	r2, r3
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <MPU6050_Read_Accl+0xac>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	b212      	sxth	r2, r2
 8001288:	859a      	strh	r2, [r3, #44]	; 0x2c

	return MPU6050_Read_OK;
 800128a:	2301      	movs	r3, #1
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000324 	.word	0x20000324
 8001298:	2000031c 	.word	0x2000031c

0800129c <MPU6050_Read_Sensor>:


	return MPU6050_Read_OK;
}

MPU6050_STATUS MPU6050_Read_Sensor(){
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af04      	add	r7, sp, #16

	uint8_t Rec_Data[14];

	// Read 6Bytes (2byte per axis) starting from ACCL_XOUT_H register
	if (HAL_I2C_Mem_Read (MPU6050_hi2c, MPU6050_ADDR, MPU6050_ACCL_XOUT_H_REG, 1, Rec_Data, 14, 1000) != HAL_OK ){
 80012a2:	4b49      	ldr	r3, [pc, #292]	; (80013c8 <MPU6050_Read_Sensor+0x12c>)
 80012a4:	6818      	ldr	r0, [r3, #0]
 80012a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012aa:	9302      	str	r3, [sp, #8]
 80012ac:	230e      	movs	r3, #14
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	463b      	mov	r3, r7
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2301      	movs	r3, #1
 80012b6:	223b      	movs	r2, #59	; 0x3b
 80012b8:	21d0      	movs	r1, #208	; 0xd0
 80012ba:	f002 fc4b 	bl	8003b54 <HAL_I2C_Mem_Read>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MPU6050_Read_Sensor+0x2c>
		return MPU6050_Status_Error;
 80012c4:	2302      	movs	r3, #2
 80012c6:	e07a      	b.n	80013be <MPU6050_Read_Sensor+0x122>
		printf("READ ERROR\r\n");
	}
	// Get time of new Measurement and safe time of last measurement
	Sensor_Data->Gyro_time	=	DWT->CYCCNT;
 80012c8:	4b40      	ldr	r3, [pc, #256]	; (80013cc <MPU6050_Read_Sensor+0x130>)
 80012ca:	685a      	ldr	r2, [r3, #4]
 80012cc:	4b40      	ldr	r3, [pc, #256]	; (80013d0 <MPU6050_Read_Sensor+0x134>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	615a      	str	r2, [r3, #20]
	DWT->CYCCNT				=	0;
 80012d2:	4b3e      	ldr	r3, [pc, #248]	; (80013cc <MPU6050_Read_Sensor+0x130>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
	// Data for all axis comes as 6Byte array, in the following it is filled into one 16-bit array for each axis
	Sensor_Data->Accl_X = (int16_t)(Rec_Data[0]<<8 | Rec_Data[1]) - Sensor_Data->Ax_offset;
 80012d8:	783b      	ldrb	r3, [r7, #0]
 80012da:	021b      	lsls	r3, r3, #8
 80012dc:	b21a      	sxth	r2, r3
 80012de:	787b      	ldrb	r3, [r7, #1]
 80012e0:	b21b      	sxth	r3, r3
 80012e2:	4313      	orrs	r3, r2
 80012e4:	b21b      	sxth	r3, r3
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	4b39      	ldr	r3, [pc, #228]	; (80013d0 <MPU6050_Read_Sensor+0x134>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <MPU6050_Read_Sensor+0x134>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	b212      	sxth	r2, r2
 80012fc:	851a      	strh	r2, [r3, #40]	; 0x28
	Sensor_Data->Accl_Y = (int16_t)(Rec_Data[2]<<8 | Rec_Data[3]) - Sensor_Data->Ay_offset;
 80012fe:	78bb      	ldrb	r3, [r7, #2]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	b21a      	sxth	r2, r3
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b21b      	sxth	r3, r3
 800130c:	b29a      	uxth	r2, r3
 800130e:	4b30      	ldr	r3, [pc, #192]	; (80013d0 <MPU6050_Read_Sensor+0x134>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8001316:	b29b      	uxth	r3, r3
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	b29a      	uxth	r2, r3
 800131c:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <MPU6050_Read_Sensor+0x134>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	b212      	sxth	r2, r2
 8001322:	855a      	strh	r2, [r3, #42]	; 0x2a
	Sensor_Data->Accl_Z = (int16_t)(Rec_Data[4]<<8 | Rec_Data[5]) - Sensor_Data->Az_offset;
 8001324:	793b      	ldrb	r3, [r7, #4]
 8001326:	021b      	lsls	r3, r3, #8
 8001328:	b21a      	sxth	r2, r3
 800132a:	797b      	ldrb	r3, [r7, #5]
 800132c:	b21b      	sxth	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b21b      	sxth	r3, r3
 8001332:	b29a      	uxth	r2, r3
 8001334:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <MPU6050_Read_Sensor+0x134>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800133c:	b29b      	uxth	r3, r3
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	b29a      	uxth	r2, r3
 8001342:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <MPU6050_Read_Sensor+0x134>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	b212      	sxth	r2, r2
 8001348:	859a      	strh	r2, [r3, #44]	; 0x2c
	// Data for all axis comes as 6Byte array, in the following it is filled into one 16-bit array for each axis
	Sensor_Data->Gyro_X = (int16_t)(Rec_Data[8]<<8 | Rec_Data[9]) - Sensor_Data->Gx_offset;
 800134a:	7a3b      	ldrb	r3, [r7, #8]
 800134c:	021b      	lsls	r3, r3, #8
 800134e:	b21a      	sxth	r2, r3
 8001350:	7a7b      	ldrb	r3, [r7, #9]
 8001352:	b21b      	sxth	r3, r3
 8001354:	4313      	orrs	r3, r2
 8001356:	b21b      	sxth	r3, r3
 8001358:	b29a      	uxth	r2, r3
 800135a:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MPU6050_Read_Sensor+0x134>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001362:	b29b      	uxth	r3, r3
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	b29a      	uxth	r2, r3
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <MPU6050_Read_Sensor+0x134>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	b212      	sxth	r2, r2
 800136e:	801a      	strh	r2, [r3, #0]
	Sensor_Data->Gyro_Y = (int16_t)(Rec_Data[10]<<8 | Rec_Data[11]) - Sensor_Data->Gy_offset;
 8001370:	7abb      	ldrb	r3, [r7, #10]
 8001372:	021b      	lsls	r3, r3, #8
 8001374:	b21a      	sxth	r2, r3
 8001376:	7afb      	ldrb	r3, [r7, #11]
 8001378:	b21b      	sxth	r3, r3
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	b29a      	uxth	r2, r3
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <MPU6050_Read_Sensor+0x134>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001388:	b29b      	uxth	r3, r3
 800138a:	1ad3      	subs	r3, r2, r3
 800138c:	b29a      	uxth	r2, r3
 800138e:	4b10      	ldr	r3, [pc, #64]	; (80013d0 <MPU6050_Read_Sensor+0x134>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	b212      	sxth	r2, r2
 8001394:	805a      	strh	r2, [r3, #2]
	Sensor_Data->Gyro_Z = (int16_t)(Rec_Data[12]<<8 | Rec_Data[13]) - Sensor_Data->Gz_offset;
 8001396:	7b3b      	ldrb	r3, [r7, #12]
 8001398:	021b      	lsls	r3, r3, #8
 800139a:	b21a      	sxth	r2, r3
 800139c:	7b7b      	ldrb	r3, [r7, #13]
 800139e:	b21b      	sxth	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	b29a      	uxth	r2, r3
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <MPU6050_Read_Sensor+0x134>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	b29a      	uxth	r2, r3
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MPU6050_Read_Sensor+0x134>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	b212      	sxth	r2, r2
 80013ba:	809a      	strh	r2, [r3, #4]

	return MPU6050_Read_OK;
 80013bc:	2301      	movs	r3, #1
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3710      	adds	r7, #16
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000324 	.word	0x20000324
 80013cc:	e0001000 	.word	0xe0001000
 80013d0:	2000031c 	.word	0x2000031c

080013d4 <MPU6050_Calculate_Mean>:


MPU6050_STATUS MPU6050_Calculate_Mean(){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b08c      	sub	sp, #48	; 0x30
 80013d8:	af00      	add	r7, sp, #0
	// Temp memory to sum up values for mean calculation
	// Gyroscope
	int32_t Gx_mean_tempbuffer	=	0;
 80013da:	2300      	movs	r3, #0
 80013dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t Gy_mean_tempbuffer	=	0;
 80013de:	2300      	movs	r3, #0
 80013e0:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t Gz_mean_tempbuffer	=	0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
	// Accelerometer
	int32_t Ax_mean_tempbuffer	=	0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
	int32_t Ay_mean_tempbuffer	=	0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
	int32_t Az_mean_tempbuffer	=	0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	61bb      	str	r3, [r7, #24]
	// First measurements have to be skipped
	int n_skipping		=	100;
 80013f2:	2364      	movs	r3, #100	; 0x64
 80013f4:	613b      	str	r3, [r7, #16]
	int n_measurements 	=	500;
 80013f6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80013fa:	60fb      	str	r3, [r7, #12]
	//	int n_skipping		=	10;
	//	int n_measurements 	=	100;
	for (int i=n_skipping; i < n_measurements + n_skipping; i++){
 80013fc:	693b      	ldr	r3, [r7, #16]
 80013fe:	617b      	str	r3, [r7, #20]
 8001400:	e04f      	b.n	80014a2 <MPU6050_Calculate_Mean+0xce>
		// Read Data

		// from Gyroscope
		if (MPU6050_Read_Sensor(Sensor_Data) != MPU6050_Read_OK){
 8001402:	4b45      	ldr	r3, [pc, #276]	; (8001518 <MPU6050_Calculate_Mean+0x144>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff ff48 	bl	800129c <MPU6050_Read_Sensor>
 800140c:	4603      	mov	r3, r0
 800140e:	2b01      	cmp	r3, #1
 8001410:	d001      	beq.n	8001416 <MPU6050_Calculate_Mean+0x42>
			return MPU6050_Status_Error;
 8001412:	2302      	movs	r3, #2
 8001414:	e07c      	b.n	8001510 <MPU6050_Calculate_Mean+0x13c>
		}
		int16_t Gx = Sensor_Data	->	Gyro_X;
 8001416:	4b40      	ldr	r3, [pc, #256]	; (8001518 <MPU6050_Calculate_Mean+0x144>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	817b      	strh	r3, [r7, #10]
		int16_t Gy = Sensor_Data	->	Gyro_Y;
 800141e:	4b3e      	ldr	r3, [pc, #248]	; (8001518 <MPU6050_Calculate_Mean+0x144>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	885b      	ldrh	r3, [r3, #2]
 8001424:	813b      	strh	r3, [r7, #8]
		int16_t Gz = Sensor_Data	->	Gyro_Z;
 8001426:	4b3c      	ldr	r3, [pc, #240]	; (8001518 <MPU6050_Calculate_Mean+0x144>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	889b      	ldrh	r3, [r3, #4]
 800142c:	80fb      	strh	r3, [r7, #6]
		// from Accelerometer
		if (MPU6050_Read_Accl(Sensor_Data) != MPU6050_Read_OK){
 800142e:	4b3a      	ldr	r3, [pc, #232]	; (8001518 <MPU6050_Calculate_Mean+0x144>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff feda 	bl	80011ec <MPU6050_Read_Accl>
 8001438:	4603      	mov	r3, r0
 800143a:	2b01      	cmp	r3, #1
 800143c:	d001      	beq.n	8001442 <MPU6050_Calculate_Mean+0x6e>
			return MPU6050_Status_Error;
 800143e:	2302      	movs	r3, #2
 8001440:	e066      	b.n	8001510 <MPU6050_Calculate_Mean+0x13c>
		}
		int16_t Ax = Sensor_Data	->	Accl_X;
 8001442:	4b35      	ldr	r3, [pc, #212]	; (8001518 <MPU6050_Calculate_Mean+0x144>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001448:	80bb      	strh	r3, [r7, #4]
		int16_t Ay = Sensor_Data	->	Accl_Y;
 800144a:	4b33      	ldr	r3, [pc, #204]	; (8001518 <MPU6050_Calculate_Mean+0x144>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001450:	807b      	strh	r3, [r7, #2]
		int16_t Az = Sensor_Data	->	Accl_Z;
 8001452:	4b31      	ldr	r3, [pc, #196]	; (8001518 <MPU6050_Calculate_Mean+0x144>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001458:	803b      	strh	r3, [r7, #0]
		// sum it up
		Gx_mean_tempbuffer	+=	Gx;
 800145a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800145e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001460:	4413      	add	r3, r2
 8001462:	62fb      	str	r3, [r7, #44]	; 0x2c
		Gy_mean_tempbuffer	+=	Gy;
 8001464:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001468:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800146a:	4413      	add	r3, r2
 800146c:	62bb      	str	r3, [r7, #40]	; 0x28
		Gz_mean_tempbuffer	+=	Gz;
 800146e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001472:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001474:	4413      	add	r3, r2
 8001476:	627b      	str	r3, [r7, #36]	; 0x24
		Ax_mean_tempbuffer	+=	Ax;
 8001478:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800147c:	6a3a      	ldr	r2, [r7, #32]
 800147e:	4413      	add	r3, r2
 8001480:	623b      	str	r3, [r7, #32]
		Ay_mean_tempbuffer	+=	Ay;
 8001482:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	4413      	add	r3, r2
 800148a:	61fb      	str	r3, [r7, #28]
		Az_mean_tempbuffer	+=	Az;
 800148c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4413      	add	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
		// Wait to prevent double measurements
		HAL_Delay(2);
 8001496:	2002      	movs	r0, #2
 8001498:	f001 faca 	bl	8002a30 <HAL_Delay>
	for (int i=n_skipping; i < n_measurements + n_skipping; i++){
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	3301      	adds	r3, #1
 80014a0:	617b      	str	r3, [r7, #20]
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	4413      	add	r3, r2
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	dba9      	blt.n	8001402 <MPU6050_Calculate_Mean+0x2e>
	}

	//Save offset to Sensor_Data
	//Gyroscope offset
	Sensor_Data->Gx_mean=Gx_mean_tempbuffer/n_measurements;
 80014ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	fb92 f2f3 	sdiv	r2, r2, r3
 80014b6:	4b18      	ldr	r3, [pc, #96]	; (8001518 <MPU6050_Calculate_Mean+0x144>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	b212      	sxth	r2, r2
 80014bc:	819a      	strh	r2, [r3, #12]
	Sensor_Data->Gy_mean=Gy_mean_tempbuffer/n_measurements;
 80014be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	fb92 f2f3 	sdiv	r2, r2, r3
 80014c6:	4b14      	ldr	r3, [pc, #80]	; (8001518 <MPU6050_Calculate_Mean+0x144>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	b212      	sxth	r2, r2
 80014cc:	81da      	strh	r2, [r3, #14]
	Sensor_Data->Gz_mean=Gz_mean_tempbuffer/n_measurements;
 80014ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	fb92 f2f3 	sdiv	r2, r2, r3
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <MPU6050_Calculate_Mean+0x144>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	b212      	sxth	r2, r2
 80014dc:	821a      	strh	r2, [r3, #16]
	//Accelerometer offset
	Sensor_Data->Ax_mean=Ax_mean_tempbuffer/n_measurements;
 80014de:	6a3a      	ldr	r2, [r7, #32]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	fb92 f2f3 	sdiv	r2, r2, r3
 80014e6:	4b0c      	ldr	r3, [pc, #48]	; (8001518 <MPU6050_Calculate_Mean+0x144>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	b212      	sxth	r2, r2
 80014ec:	875a      	strh	r2, [r3, #58]	; 0x3a
	Sensor_Data->Ay_mean=Ay_mean_tempbuffer/n_measurements;
 80014ee:	69fa      	ldr	r2, [r7, #28]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	fb92 f2f3 	sdiv	r2, r2, r3
 80014f6:	4b08      	ldr	r3, [pc, #32]	; (8001518 <MPU6050_Calculate_Mean+0x144>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	b212      	sxth	r2, r2
 80014fc:	879a      	strh	r2, [r3, #60]	; 0x3c
	Sensor_Data->Az_mean=Az_mean_tempbuffer/n_measurements;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	fb92 f2f3 	sdiv	r2, r2, r3
 8001506:	4b04      	ldr	r3, [pc, #16]	; (8001518 <MPU6050_Calculate_Mean+0x144>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b212      	sxth	r2, r2
 800150c:	87da      	strh	r2, [r3, #62]	; 0x3e

	return MPU6050_Read_OK;
 800150e:	2301      	movs	r3, #1
}
 8001510:	4618      	mov	r0, r3
 8001512:	3730      	adds	r7, #48	; 0x30
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	2000031c 	.word	0x2000031c

0800151c <MPU6050_Calibrate>:

MPU6050_STATUS MPU6050_Calibrate(){
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0

	// gravitational constant depending on accelerometer resolution
	int16_t gravitation	= (int16_t)((float)1 / Sensor_Data -> Accl_mult);
 8001522:	4b93      	ldr	r3, [pc, #588]	; (8001770 <MPU6050_Calibrate+0x254>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800152a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800152e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001532:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001536:	ee17 3a90 	vmov	r3, s15
 800153a:	807b      	strh	r3, [r7, #2]
	// allowed deviation from mean for raw data from sensors
	int8_t	gyro_tolerance  = 1;
 800153c:	2301      	movs	r3, #1
 800153e:	707b      	strb	r3, [r7, #1]
	int8_t	accl_tolerance  = 5;
 8001540:	2305      	movs	r3, #5
 8001542:	703b      	strb	r3, [r7, #0]

	// Set offset Initially (offset is subtracted from future measurements)
	Sensor_Data -> Gx_offset		=	Sensor_Data -> Gx_mean;
 8001544:	4b8a      	ldr	r3, [pc, #552]	; (8001770 <MPU6050_Calibrate+0x254>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b89      	ldr	r3, [pc, #548]	; (8001770 <MPU6050_Calibrate+0x254>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001550:	80da      	strh	r2, [r3, #6]
	Sensor_Data -> Gy_offset		=	Sensor_Data -> Gy_mean;
 8001552:	4b87      	ldr	r3, [pc, #540]	; (8001770 <MPU6050_Calibrate+0x254>)
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	4b86      	ldr	r3, [pc, #536]	; (8001770 <MPU6050_Calibrate+0x254>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800155e:	811a      	strh	r2, [r3, #8]
	Sensor_Data -> Gz_offset		=	Sensor_Data -> Gz_mean;
 8001560:	4b83      	ldr	r3, [pc, #524]	; (8001770 <MPU6050_Calibrate+0x254>)
 8001562:	681a      	ldr	r2, [r3, #0]
 8001564:	4b82      	ldr	r3, [pc, #520]	; (8001770 <MPU6050_Calibrate+0x254>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800156c:	815a      	strh	r2, [r3, #10]
	Sensor_Data -> Ax_offset		=	Sensor_Data -> Ax_mean;
 800156e:	4b80      	ldr	r3, [pc, #512]	; (8001770 <MPU6050_Calibrate+0x254>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	4b7f      	ldr	r3, [pc, #508]	; (8001770 <MPU6050_Calibrate+0x254>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	; 0x3a
 800157a:	869a      	strh	r2, [r3, #52]	; 0x34
	Sensor_Data -> Ay_offset		=	Sensor_Data -> Ay_mean;
 800157c:	4b7c      	ldr	r3, [pc, #496]	; (8001770 <MPU6050_Calibrate+0x254>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b7b      	ldr	r3, [pc, #492]	; (8001770 <MPU6050_Calibrate+0x254>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f9b2 203c 	ldrsh.w	r2, [r2, #60]	; 0x3c
 8001588:	86da      	strh	r2, [r3, #54]	; 0x36
	Sensor_Data -> Az_offset		=	(Sensor_Data -> Az_mean) + gravitation;
 800158a:	4b79      	ldr	r3, [pc, #484]	; (8001770 <MPU6050_Calibrate+0x254>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8001592:	b29a      	uxth	r2, r3
 8001594:	887b      	ldrh	r3, [r7, #2]
 8001596:	4413      	add	r3, r2
 8001598:	b29a      	uxth	r2, r3
 800159a:	4b75      	ldr	r3, [pc, #468]	; (8001770 <MPU6050_Calibrate+0x254>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	b212      	sxth	r2, r2
 80015a0:	871a      	strh	r2, [r3, #56]	; 0x38

	// Indicator for correct calibration of all axis
	int calibrated = 0;
 80015a2:	2300      	movs	r3, #0
 80015a4:	607b      	str	r3, [r7, #4]
	while(calibrated <= 6){
 80015a6:	e0d9      	b.n	800175c <MPU6050_Calibrate+0x240>
		printf("%i\n\r",calibrated );
 80015a8:	6879      	ldr	r1, [r7, #4]
 80015aa:	4872      	ldr	r0, [pc, #456]	; (8001774 <MPU6050_Calibrate+0x258>)
 80015ac:	f004 fdd6 	bl	800615c <iprintf>
		// Calculate means of sensors
		if (MPU6050_Calculate_Mean(Sensor_Data)!= MPU6050_Read_OK){
 80015b0:	4b6f      	ldr	r3, [pc, #444]	; (8001770 <MPU6050_Calibrate+0x254>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff0d 	bl	80013d4 <MPU6050_Calculate_Mean>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d001      	beq.n	80015c4 <MPU6050_Calibrate+0xa8>
			return MPU6050_Status_Error;
 80015c0:	2302      	movs	r3, #2
 80015c2:	e0d0      	b.n	8001766 <MPU6050_Calibrate+0x24a>
		}
		// Validate or Update Calibration
		// Gyroscope X Y Z
		if (abs(Sensor_Data -> Gx_mean)<gyro_tolerance) calibrated++;
 80015c4:	4b6a      	ldr	r3, [pc, #424]	; (8001770 <MPU6050_Calibrate+0x254>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	bfb8      	it	lt
 80015d0:	425b      	neglt	r3, r3
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	461a      	mov	r2, r3
 80015d6:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80015da:	429a      	cmp	r2, r3
 80015dc:	da03      	bge.n	80015e6 <MPU6050_Calibrate+0xca>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3301      	adds	r3, #1
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	e00f      	b.n	8001606 <MPU6050_Calibrate+0xea>
		else Sensor_Data -> Gx_offset		=	(Sensor_Data -> Gx_offset)	+	(Sensor_Data -> Gx_mean);
 80015e6:	4b62      	ldr	r3, [pc, #392]	; (8001770 <MPU6050_Calibrate+0x254>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	4b5f      	ldr	r3, [pc, #380]	; (8001770 <MPU6050_Calibrate+0x254>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80015f8:	b29b      	uxth	r3, r3
 80015fa:	4413      	add	r3, r2
 80015fc:	b29a      	uxth	r2, r3
 80015fe:	4b5c      	ldr	r3, [pc, #368]	; (8001770 <MPU6050_Calibrate+0x254>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	b212      	sxth	r2, r2
 8001604:	80da      	strh	r2, [r3, #6]

		if (abs(Sensor_Data -> Gy_mean)<gyro_tolerance) calibrated++;
 8001606:	4b5a      	ldr	r3, [pc, #360]	; (8001770 <MPU6050_Calibrate+0x254>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800160e:	2b00      	cmp	r3, #0
 8001610:	bfb8      	it	lt
 8001612:	425b      	neglt	r3, r3
 8001614:	b29b      	uxth	r3, r3
 8001616:	461a      	mov	r2, r3
 8001618:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800161c:	429a      	cmp	r2, r3
 800161e:	da03      	bge.n	8001628 <MPU6050_Calibrate+0x10c>
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3301      	adds	r3, #1
 8001624:	607b      	str	r3, [r7, #4]
 8001626:	e00f      	b.n	8001648 <MPU6050_Calibrate+0x12c>
		else Sensor_Data -> Gy_offset		=	(Sensor_Data -> Gy_offset)	+	(Sensor_Data -> Gy_mean);
 8001628:	4b51      	ldr	r3, [pc, #324]	; (8001770 <MPU6050_Calibrate+0x254>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001630:	b29a      	uxth	r2, r3
 8001632:	4b4f      	ldr	r3, [pc, #316]	; (8001770 <MPU6050_Calibrate+0x254>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800163a:	b29b      	uxth	r3, r3
 800163c:	4413      	add	r3, r2
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b4b      	ldr	r3, [pc, #300]	; (8001770 <MPU6050_Calibrate+0x254>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	b212      	sxth	r2, r2
 8001646:	811a      	strh	r2, [r3, #8]

		if (abs(Sensor_Data -> Gz_mean)<gyro_tolerance) calibrated++;
 8001648:	4b49      	ldr	r3, [pc, #292]	; (8001770 <MPU6050_Calibrate+0x254>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001650:	2b00      	cmp	r3, #0
 8001652:	bfb8      	it	lt
 8001654:	425b      	neglt	r3, r3
 8001656:	b29b      	uxth	r3, r3
 8001658:	461a      	mov	r2, r3
 800165a:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800165e:	429a      	cmp	r2, r3
 8001660:	da03      	bge.n	800166a <MPU6050_Calibrate+0x14e>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3301      	adds	r3, #1
 8001666:	607b      	str	r3, [r7, #4]
 8001668:	e00f      	b.n	800168a <MPU6050_Calibrate+0x16e>
		else Sensor_Data -> Gz_offset		=	(Sensor_Data -> Gz_offset)	+	(Sensor_Data -> Gz_mean);
 800166a:	4b41      	ldr	r3, [pc, #260]	; (8001770 <MPU6050_Calibrate+0x254>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001672:	b29a      	uxth	r2, r3
 8001674:	4b3e      	ldr	r3, [pc, #248]	; (8001770 <MPU6050_Calibrate+0x254>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800167c:	b29b      	uxth	r3, r3
 800167e:	4413      	add	r3, r2
 8001680:	b29a      	uxth	r2, r3
 8001682:	4b3b      	ldr	r3, [pc, #236]	; (8001770 <MPU6050_Calibrate+0x254>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	b212      	sxth	r2, r2
 8001688:	815a      	strh	r2, [r3, #10]
		// Accelerometer X Y Z
		if (abs(Sensor_Data -> Ax_mean)<accl_tolerance) calibrated++;
 800168a:	4b39      	ldr	r3, [pc, #228]	; (8001770 <MPU6050_Calibrate+0x254>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8001692:	2b00      	cmp	r3, #0
 8001694:	bfb8      	it	lt
 8001696:	425b      	neglt	r3, r3
 8001698:	b29b      	uxth	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	f997 3000 	ldrsb.w	r3, [r7]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	da03      	bge.n	80016ac <MPU6050_Calibrate+0x190>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3301      	adds	r3, #1
 80016a8:	607b      	str	r3, [r7, #4]
 80016aa:	e00f      	b.n	80016cc <MPU6050_Calibrate+0x1b0>
		else Sensor_Data -> Ax_offset		=	(Sensor_Data -> Ax_offset)	+	(Sensor_Data -> Ax_mean);
 80016ac:	4b30      	ldr	r3, [pc, #192]	; (8001770 <MPU6050_Calibrate+0x254>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <MPU6050_Calibrate+0x254>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80016be:	b29b      	uxth	r3, r3
 80016c0:	4413      	add	r3, r2
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <MPU6050_Calibrate+0x254>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b212      	sxth	r2, r2
 80016ca:	869a      	strh	r2, [r3, #52]	; 0x34

		if (abs(Sensor_Data -> Ay_mean)<accl_tolerance) calibrated++;
 80016cc:	4b28      	ldr	r3, [pc, #160]	; (8001770 <MPU6050_Calibrate+0x254>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	bfb8      	it	lt
 80016d8:	425b      	neglt	r3, r3
 80016da:	b29b      	uxth	r3, r3
 80016dc:	461a      	mov	r2, r3
 80016de:	f997 3000 	ldrsb.w	r3, [r7]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	da03      	bge.n	80016ee <MPU6050_Calibrate+0x1d2>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3301      	adds	r3, #1
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	e00f      	b.n	800170e <MPU6050_Calibrate+0x1f2>
		else Sensor_Data -> Ay_offset		=	(Sensor_Data -> Ay_offset)	+	(Sensor_Data -> Ay_mean);
 80016ee:	4b20      	ldr	r3, [pc, #128]	; (8001770 <MPU6050_Calibrate+0x254>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80016f6:	b29a      	uxth	r2, r3
 80016f8:	4b1d      	ldr	r3, [pc, #116]	; (8001770 <MPU6050_Calibrate+0x254>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8001700:	b29b      	uxth	r3, r3
 8001702:	4413      	add	r3, r2
 8001704:	b29a      	uxth	r2, r3
 8001706:	4b1a      	ldr	r3, [pc, #104]	; (8001770 <MPU6050_Calibrate+0x254>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	b212      	sxth	r2, r2
 800170c:	86da      	strh	r2, [r3, #54]	; 0x36

		if ((abs((Sensor_Data -> Az_mean) - gravitation)) <accl_tolerance) calibrated++;
 800170e:	4b18      	ldr	r3, [pc, #96]	; (8001770 <MPU6050_Calibrate+0x254>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8001716:	461a      	mov	r2, r3
 8001718:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001722:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001726:	f997 3000 	ldrsb.w	r3, [r7]
 800172a:	429a      	cmp	r2, r3
 800172c:	da03      	bge.n	8001736 <MPU6050_Calibrate+0x21a>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3301      	adds	r3, #1
 8001732:	607b      	str	r3, [r7, #4]
 8001734:	e012      	b.n	800175c <MPU6050_Calibrate+0x240>
		else Sensor_Data -> Az_offset		=	(Sensor_Data -> Az_offset)	+	((Sensor_Data -> Az_mean) - gravitation);
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MPU6050_Calibrate+0x254>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800173e:	b29a      	uxth	r2, r3
 8001740:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <MPU6050_Calibrate+0x254>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8001748:	b299      	uxth	r1, r3
 800174a:	887b      	ldrh	r3, [r7, #2]
 800174c:	1acb      	subs	r3, r1, r3
 800174e:	b29b      	uxth	r3, r3
 8001750:	4413      	add	r3, r2
 8001752:	b29a      	uxth	r2, r3
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MPU6050_Calibrate+0x254>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	b212      	sxth	r2, r2
 800175a:	871a      	strh	r2, [r3, #56]	; 0x38
	while(calibrated <= 6){
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2b06      	cmp	r3, #6
 8001760:	f77f af22 	ble.w	80015a8 <MPU6050_Calibrate+0x8c>

	}
	return MPU6050_Read_OK;
 8001764:	2301      	movs	r3, #1
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	2000031c 	.word	0x2000031c
 8001774:	08007868 	.word	0x08007868

08001778 <getGyroRoll>:

void getAcclFilt(){

}

void getGyroRoll(){
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0

	// time of measurement for integration
	float cycletime = 80000000;
 800177e:	4b78      	ldr	r3, [pc, #480]	; (8001960 <getGyroRoll+0x1e8>)
 8001780:	607b      	str	r3, [r7, #4]

	// Get Roll
	// RAW Gyrodata: Gyro_X; transformation to Deg/s: Gyro_mult; time since last measurement: Gyro_time; cycletime per second: cycletime
	Sensor_Data -> Gx_deg =  (float)( ((Sensor_Data -> Gyro_X) * Sensor_Data -> Gyro_mult ) * (Sensor_Data -> Gyro_time)) / cycletime;
 8001782:	4b78      	ldr	r3, [pc, #480]	; (8001964 <getGyroRoll+0x1ec>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178a:	ee07 3a90 	vmov	s15, r3
 800178e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001792:	4b74      	ldr	r3, [pc, #464]	; (8001964 <getGyroRoll+0x1ec>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	edd3 7a06 	vldr	s15, [r3, #24]
 800179a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800179e:	4b71      	ldr	r3, [pc, #452]	; (8001964 <getGyroRoll+0x1ec>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ac:	ee67 6a27 	vmul.f32	s13, s14, s15
 80017b0:	4b6c      	ldr	r3, [pc, #432]	; (8001964 <getGyroRoll+0x1ec>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	ed97 7a01 	vldr	s14, [r7, #4]
 80017b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017bc:	edc3 7a07 	vstr	s15, [r3, #28]
	Sensor_Data -> Gy_deg =  (float)( ((Sensor_Data -> Gyro_Y) * Sensor_Data -> Gyro_mult ) * (Sensor_Data -> Gyro_time)) / cycletime;
 80017c0:	4b68      	ldr	r3, [pc, #416]	; (8001964 <getGyroRoll+0x1ec>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017c8:	ee07 3a90 	vmov	s15, r3
 80017cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017d0:	4b64      	ldr	r3, [pc, #400]	; (8001964 <getGyroRoll+0x1ec>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80017d8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017dc:	4b61      	ldr	r3, [pc, #388]	; (8001964 <getGyroRoll+0x1ec>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	ee07 3a90 	vmov	s15, r3
 80017e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ea:	ee67 6a27 	vmul.f32	s13, s14, s15
 80017ee:	4b5d      	ldr	r3, [pc, #372]	; (8001964 <getGyroRoll+0x1ec>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80017f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017fa:	edc3 7a08 	vstr	s15, [r3, #32]
	Sensor_Data -> Gz_deg =  (float)( ((Sensor_Data -> Gyro_Z) * Sensor_Data -> Gyro_mult ) * (Sensor_Data -> Gyro_time)) / cycletime;
 80017fe:	4b59      	ldr	r3, [pc, #356]	; (8001964 <getGyroRoll+0x1ec>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001806:	ee07 3a90 	vmov	s15, r3
 800180a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800180e:	4b55      	ldr	r3, [pc, #340]	; (8001964 <getGyroRoll+0x1ec>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	edd3 7a06 	vldr	s15, [r3, #24]
 8001816:	ee27 7a27 	vmul.f32	s14, s14, s15
 800181a:	4b52      	ldr	r3, [pc, #328]	; (8001964 <getGyroRoll+0x1ec>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	695b      	ldr	r3, [r3, #20]
 8001820:	ee07 3a90 	vmov	s15, r3
 8001824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001828:	ee67 6a27 	vmul.f32	s13, s14, s15
 800182c:	4b4d      	ldr	r3, [pc, #308]	; (8001964 <getGyroRoll+0x1ec>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	ed97 7a01 	vldr	s14, [r7, #4]
 8001834:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001838:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Take into account that +-360 degrees is the same as 0 degrees
	if (Sensor_Data -> Gx_deg >=180) Sensor_Data -> Gx_deg = Sensor_Data -> Gx_deg - 360;
 800183c:	4b49      	ldr	r3, [pc, #292]	; (8001964 <getGyroRoll+0x1ec>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	edd3 7a07 	vldr	s15, [r3, #28]
 8001844:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001968 <getGyroRoll+0x1f0>
 8001848:	eef4 7ac7 	vcmpe.f32	s15, s14
 800184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001850:	db0b      	blt.n	800186a <getGyroRoll+0xf2>
 8001852:	4b44      	ldr	r3, [pc, #272]	; (8001964 <getGyroRoll+0x1ec>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	edd3 7a07 	vldr	s15, [r3, #28]
 800185a:	4b42      	ldr	r3, [pc, #264]	; (8001964 <getGyroRoll+0x1ec>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800196c <getGyroRoll+0x1f4>
 8001862:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001866:	edc3 7a07 	vstr	s15, [r3, #28]
	if (Sensor_Data -> Gx_deg <=-180) Sensor_Data -> Gx_deg = Sensor_Data -> Gx_deg + 360;
 800186a:	4b3e      	ldr	r3, [pc, #248]	; (8001964 <getGyroRoll+0x1ec>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001872:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001970 <getGyroRoll+0x1f8>
 8001876:	eef4 7ac7 	vcmpe.f32	s15, s14
 800187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187e:	d80b      	bhi.n	8001898 <getGyroRoll+0x120>
 8001880:	4b38      	ldr	r3, [pc, #224]	; (8001964 <getGyroRoll+0x1ec>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	edd3 7a07 	vldr	s15, [r3, #28]
 8001888:	4b36      	ldr	r3, [pc, #216]	; (8001964 <getGyroRoll+0x1ec>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800196c <getGyroRoll+0x1f4>
 8001890:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001894:	edc3 7a07 	vstr	s15, [r3, #28]

	if (Sensor_Data -> Gy_deg >=180) Sensor_Data -> Gy_deg = Sensor_Data -> Gy_deg - 360;
 8001898:	4b32      	ldr	r3, [pc, #200]	; (8001964 <getGyroRoll+0x1ec>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	edd3 7a08 	vldr	s15, [r3, #32]
 80018a0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001968 <getGyroRoll+0x1f0>
 80018a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ac:	db0b      	blt.n	80018c6 <getGyroRoll+0x14e>
 80018ae:	4b2d      	ldr	r3, [pc, #180]	; (8001964 <getGyroRoll+0x1ec>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	edd3 7a08 	vldr	s15, [r3, #32]
 80018b6:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <getGyroRoll+0x1ec>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800196c <getGyroRoll+0x1f4>
 80018be:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018c2:	edc3 7a08 	vstr	s15, [r3, #32]
	if (Sensor_Data -> Gy_deg <=-180) Sensor_Data -> Gy_deg = Sensor_Data -> Gy_deg + 360;
 80018c6:	4b27      	ldr	r3, [pc, #156]	; (8001964 <getGyroRoll+0x1ec>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	edd3 7a08 	vldr	s15, [r3, #32]
 80018ce:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001970 <getGyroRoll+0x1f8>
 80018d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018da:	d80b      	bhi.n	80018f4 <getGyroRoll+0x17c>
 80018dc:	4b21      	ldr	r3, [pc, #132]	; (8001964 <getGyroRoll+0x1ec>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	edd3 7a08 	vldr	s15, [r3, #32]
 80018e4:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <getGyroRoll+0x1ec>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800196c <getGyroRoll+0x1f4>
 80018ec:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018f0:	edc3 7a08 	vstr	s15, [r3, #32]

	if (Sensor_Data -> Gy_deg >=180) Sensor_Data -> Gz_deg = Sensor_Data -> Gz_deg - 360;
 80018f4:	4b1b      	ldr	r3, [pc, #108]	; (8001964 <getGyroRoll+0x1ec>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	edd3 7a08 	vldr	s15, [r3, #32]
 80018fc:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001968 <getGyroRoll+0x1f0>
 8001900:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001908:	db0b      	blt.n	8001922 <getGyroRoll+0x1aa>
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <getGyroRoll+0x1ec>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001912:	4b14      	ldr	r3, [pc, #80]	; (8001964 <getGyroRoll+0x1ec>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800196c <getGyroRoll+0x1f4>
 800191a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800191e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	if (Sensor_Data -> Gy_deg <=-180) Sensor_Data -> Gz_deg = Sensor_Data -> Gz_deg + 360;
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <getGyroRoll+0x1ec>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	edd3 7a08 	vldr	s15, [r3, #32]
 800192a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001970 <getGyroRoll+0x1f8>
 800192e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001936:	d900      	bls.n	800193a <getGyroRoll+0x1c2>
}
 8001938:	e00b      	b.n	8001952 <getGyroRoll+0x1da>
	if (Sensor_Data -> Gy_deg <=-180) Sensor_Data -> Gz_deg = Sensor_Data -> Gz_deg + 360;
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <getGyroRoll+0x1ec>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <getGyroRoll+0x1ec>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800196c <getGyroRoll+0x1f4>
 800194a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800194e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	4c989680 	.word	0x4c989680
 8001964:	2000031c 	.word	0x2000031c
 8001968:	43340000 	.word	0x43340000
 800196c:	43b40000 	.word	0x43b40000
 8001970:	c3340000 	.word	0xc3340000

08001974 <getAcclRoll>:


void getAcclRoll(){
 8001974:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001978:	b084      	sub	sp, #16
 800197a:	af00      	add	r7, sp, #0

	//Parameter for stability in Regions where X and Z or Y and Z are near zero
	int16_t mu = 0.01;
 800197c:	2300      	movs	r3, #0
 800197e:	81bb      	strh	r3, [r7, #12]


	int16_t X = Sensor_Data -> Accl_X;
 8001980:	4b55      	ldr	r3, [pc, #340]	; (8001ad8 <getAcclRoll+0x164>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001986:	817b      	strh	r3, [r7, #10]
	int16_t Y = Sensor_Data -> Accl_Y;
 8001988:	4b53      	ldr	r3, [pc, #332]	; (8001ad8 <getAcclRoll+0x164>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800198e:	813b      	strh	r3, [r7, #8]
	int16_t Z = Sensor_Data -> Accl_Z;
 8001990:	4b51      	ldr	r3, [pc, #324]	; (8001ad8 <getAcclRoll+0x164>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001996:	80fb      	strh	r3, [r7, #6]

	// parameter for correct orientation
	int16_t 	sign;
	if (Z>0)	sign = 1;
 8001998:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800199c:	2b00      	cmp	r3, #0
 800199e:	dd02      	ble.n	80019a6 <getAcclRoll+0x32>
 80019a0:	2301      	movs	r3, #1
 80019a2:	81fb      	strh	r3, [r7, #14]
 80019a4:	e002      	b.n	80019ac <getAcclRoll+0x38>
	else 		sign = -1;
 80019a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019aa:	81fb      	strh	r3, [r7, #14]

	//77transform radians to degree
	float RAD_TO_DEG = 180/M_PI;
 80019ac:	4b4b      	ldr	r3, [pc, #300]	; (8001adc <getAcclRoll+0x168>)
 80019ae:	603b      	str	r3, [r7, #0]

	// Get Roll
	// RAW Gyrodata: Gyro_X; transformation to Deg/s: Gyro_mult; time since last measurement: Gyro_time; cycletime per second: cycletime
	Sensor_Data -> Ax_deg = atan2( Y ,   sign * sqrt(Z*Z+ mu*X*X)) * RAD_TO_DEG;
 80019b0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7fe fdcd 	bl	8000554 <__aeabi_i2d>
 80019ba:	4680      	mov	r8, r0
 80019bc:	4689      	mov	r9, r1
 80019be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe fdc6 	bl	8000554 <__aeabi_i2d>
 80019c8:	4604      	mov	r4, r0
 80019ca:	460d      	mov	r5, r1
 80019cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019d0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019d4:	fb02 f203 	mul.w	r2, r2, r3
 80019d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019dc:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80019e0:	fb01 f303 	mul.w	r3, r1, r3
 80019e4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80019e8:	fb01 f303 	mul.w	r3, r1, r3
 80019ec:	4413      	add	r3, r2
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7fe fdb0 	bl	8000554 <__aeabi_i2d>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	ec43 2b10 	vmov	d0, r2, r3
 80019fc:	f005 fb7c 	bl	80070f8 <sqrt>
 8001a00:	ec53 2b10 	vmov	r2, r3, d0
 8001a04:	4620      	mov	r0, r4
 8001a06:	4629      	mov	r1, r5
 8001a08:	f7fe fe0e 	bl	8000628 <__aeabi_dmul>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	ec43 2b17 	vmov	d7, r2, r3
 8001a14:	eeb0 1a47 	vmov.f32	s2, s14
 8001a18:	eef0 1a67 	vmov.f32	s3, s15
 8001a1c:	ec49 8b10 	vmov	d0, r8, r9
 8001a20:	f005 fb68 	bl	80070f4 <atan2>
 8001a24:	ec55 4b10 	vmov	r4, r5, d0
 8001a28:	6838      	ldr	r0, [r7, #0]
 8001a2a:	f7fe fda5 	bl	8000578 <__aeabi_f2d>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4620      	mov	r0, r4
 8001a34:	4629      	mov	r1, r5
 8001a36:	f7fe fdf7 	bl	8000628 <__aeabi_dmul>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	4926      	ldr	r1, [pc, #152]	; (8001ad8 <getAcclRoll+0x164>)
 8001a40:	680c      	ldr	r4, [r1, #0]
 8001a42:	4610      	mov	r0, r2
 8001a44:	4619      	mov	r1, r3
 8001a46:	f7ff f89f 	bl	8000b88 <__aeabi_d2f>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	6463      	str	r3, [r4, #68]	; 0x44
	Sensor_Data -> Ay_deg = atan2(-X, sqrt(Y*Y + Z*Z)) * RAD_TO_DEG;
 8001a4e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a52:	425b      	negs	r3, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fd7d 	bl	8000554 <__aeabi_i2d>
 8001a5a:	4604      	mov	r4, r0
 8001a5c:	460d      	mov	r5, r1
 8001a5e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a62:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001a66:	fb02 f203 	mul.w	r2, r2, r3
 8001a6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a6e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001a72:	fb01 f303 	mul.w	r3, r1, r3
 8001a76:	4413      	add	r3, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7fe fd6b 	bl	8000554 <__aeabi_i2d>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	ec43 2b10 	vmov	d0, r2, r3
 8001a86:	f005 fb37 	bl	80070f8 <sqrt>
 8001a8a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a8e:	eef0 7a60 	vmov.f32	s15, s1
 8001a92:	eeb0 1a47 	vmov.f32	s2, s14
 8001a96:	eef0 1a67 	vmov.f32	s3, s15
 8001a9a:	ec45 4b10 	vmov	d0, r4, r5
 8001a9e:	f005 fb29 	bl	80070f4 <atan2>
 8001aa2:	ec55 4b10 	vmov	r4, r5, d0
 8001aa6:	6838      	ldr	r0, [r7, #0]
 8001aa8:	f7fe fd66 	bl	8000578 <__aeabi_f2d>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4620      	mov	r0, r4
 8001ab2:	4629      	mov	r1, r5
 8001ab4:	f7fe fdb8 	bl	8000628 <__aeabi_dmul>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4906      	ldr	r1, [pc, #24]	; (8001ad8 <getAcclRoll+0x164>)
 8001abe:	680c      	ldr	r4, [r1, #0]
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	f7ff f860 	bl	8000b88 <__aeabi_d2f>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	64a3      	str	r3, [r4, #72]	; 0x48

}
 8001acc:	bf00      	nop
 8001ace:	3710      	adds	r7, #16
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2000031c 	.word	0x2000031c
 8001adc:	42652ee1 	.word	0x42652ee1

08001ae0 <getAngleRoll>:


/* 3D-Rotation around x-,y- and z-Axis
 *
 */
void getAngleRoll(){
 8001ae0:	b5b0      	push	{r4, r5, r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0

//	MPU6050_Read_Sensor(Sensor_Data);
	getAcclRoll(Sensor_Data);
 8001ae6:	4b46      	ldr	r3, [pc, #280]	; (8001c00 <getAngleRoll+0x120>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4618      	mov	r0, r3
 8001aec:	f7ff ff42 	bl	8001974 <getAcclRoll>
	getGyroRoll(Sensor_Data);
 8001af0:	4b43      	ldr	r3, [pc, #268]	; (8001c00 <getAngleRoll+0x120>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fe3f 	bl	8001778 <getGyroRoll>

	float X = Sensor_Data -> X_deg;
 8001afa:	4b41      	ldr	r3, [pc, #260]	; (8001c00 <getAngleRoll+0x120>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b00:	607b      	str	r3, [r7, #4]
	float Y = Sensor_Data -> Y_deg;
 8001b02:	4b3f      	ldr	r3, [pc, #252]	; (8001c00 <getAngleRoll+0x120>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b08:	603b      	str	r3, [r7, #0]

	Sensor_Data -> X_deg =  0.98 * (X + Sensor_Data -> Gx_deg) + (0.02 * (Sensor_Data -> Ax_deg));
 8001b0a:	4b3d      	ldr	r3, [pc, #244]	; (8001c00 <getAngleRoll+0x120>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	ed93 7a07 	vldr	s14, [r3, #28]
 8001b12:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1a:	ee17 0a90 	vmov	r0, s15
 8001b1e:	f7fe fd2b 	bl	8000578 <__aeabi_f2d>
 8001b22:	a333      	add	r3, pc, #204	; (adr r3, 8001bf0 <getAngleRoll+0x110>)
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fd7e 	bl	8000628 <__aeabi_dmul>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4614      	mov	r4, r2
 8001b32:	461d      	mov	r5, r3
 8001b34:	4b32      	ldr	r3, [pc, #200]	; (8001c00 <getAngleRoll+0x120>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fd1c 	bl	8000578 <__aeabi_f2d>
 8001b40:	a32d      	add	r3, pc, #180	; (adr r3, 8001bf8 <getAngleRoll+0x118>)
 8001b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b46:	f7fe fd6f 	bl	8000628 <__aeabi_dmul>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4620      	mov	r0, r4
 8001b50:	4629      	mov	r1, r5
 8001b52:	f7fe fbb3 	bl	80002bc <__adddf3>
 8001b56:	4602      	mov	r2, r0
 8001b58:	460b      	mov	r3, r1
 8001b5a:	4929      	ldr	r1, [pc, #164]	; (8001c00 <getAngleRoll+0x120>)
 8001b5c:	680c      	ldr	r4, [r1, #0]
 8001b5e:	4610      	mov	r0, r2
 8001b60:	4619      	mov	r1, r3
 8001b62:	f7ff f811 	bl	8000b88 <__aeabi_d2f>
 8001b66:	4603      	mov	r3, r0
 8001b68:	64e3      	str	r3, [r4, #76]	; 0x4c
	Sensor_Data -> Y_deg =  0.98 * (Y + Sensor_Data -> Gy_deg) + (0.02 * (Sensor_Data -> Ay_deg));
 8001b6a:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <getAngleRoll+0x120>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b72:	edd7 7a00 	vldr	s15, [r7]
 8001b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7a:	ee17 0a90 	vmov	r0, s15
 8001b7e:	f7fe fcfb 	bl	8000578 <__aeabi_f2d>
 8001b82:	a31b      	add	r3, pc, #108	; (adr r3, 8001bf0 <getAngleRoll+0x110>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe fd4e 	bl	8000628 <__aeabi_dmul>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4614      	mov	r4, r2
 8001b92:	461d      	mov	r5, r3
 8001b94:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <getAngleRoll+0x120>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7fe fcec 	bl	8000578 <__aeabi_f2d>
 8001ba0:	a315      	add	r3, pc, #84	; (adr r3, 8001bf8 <getAngleRoll+0x118>)
 8001ba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba6:	f7fe fd3f 	bl	8000628 <__aeabi_dmul>
 8001baa:	4602      	mov	r2, r0
 8001bac:	460b      	mov	r3, r1
 8001bae:	4620      	mov	r0, r4
 8001bb0:	4629      	mov	r1, r5
 8001bb2:	f7fe fb83 	bl	80002bc <__adddf3>
 8001bb6:	4602      	mov	r2, r0
 8001bb8:	460b      	mov	r3, r1
 8001bba:	4911      	ldr	r1, [pc, #68]	; (8001c00 <getAngleRoll+0x120>)
 8001bbc:	680c      	ldr	r4, [r1, #0]
 8001bbe:	4610      	mov	r0, r2
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f7fe ffe1 	bl	8000b88 <__aeabi_d2f>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6523      	str	r3, [r4, #80]	; 0x50
	Sensor_Data -> Z_deg = Sensor_Data -> Z_deg + Sensor_Data -> Gz_deg;
 8001bca:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <getAngleRoll+0x120>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <getAngleRoll+0x120>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <getAngleRoll+0x120>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001be2:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
}
 8001be6:	bf00      	nop
 8001be8:	3708      	adds	r7, #8
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bdb0      	pop	{r4, r5, r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	f5c28f5c 	.word	0xf5c28f5c
 8001bf4:	3fef5c28 	.word	0x3fef5c28
 8001bf8:	47ae147b 	.word	0x47ae147b
 8001bfc:	3f947ae1 	.word	0x3f947ae1
 8001c00:	2000031c 	.word	0x2000031c

08001c04 <MPU6050_detectTilt>:
//		}
//
//	else return a;
//}

tilt_direction_t MPU6050_detectTilt(){
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
	//tilt Thresholds, right, left , front
	int16_t tilt_TH_X_r,tilt_TH_X_l,  tilt_TH_Y, tilt_TH_Y_f,tilt_TH_Y_b, tilt_TH_Z;
	int16_t tilt_TH_X_r_s, tilt_TH_X_l_s,  tilt_TH_Y_f_s, tilt_TH_Y_b_s;
	//slow tilt
	tilt_TH_X_r = -1500;
 8001c0a:	f64f 2324 	movw	r3, #64036	; 0xfa24
 8001c0e:	83fb      	strh	r3, [r7, #30]
	tilt_TH_X_l = 1500;
 8001c10:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001c14:	83bb      	strh	r3, [r7, #28]
	tilt_TH_Y   = 1500;
 8001c16:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001c1a:	837b      	strh	r3, [r7, #26]
	tilt_TH_Y_f = -1500;
 8001c1c:	f64f 2324 	movw	r3, #64036	; 0xfa24
 8001c20:	833b      	strh	r3, [r7, #24]
	tilt_TH_Y_b = 1500;
 8001c22:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001c26:	82fb      	strh	r3, [r7, #22]
	tilt_TH_Z   = 3800;
 8001c28:	f640 63d8 	movw	r3, #3800	; 0xed8
 8001c2c:	82bb      	strh	r3, [r7, #20]
	float angle_TH = 25.0;
 8001c2e:	4b58      	ldr	r3, [pc, #352]	; (8001d90 <MPU6050_detectTilt+0x18c>)
 8001c30:	613b      	str	r3, [r7, #16]
	//strong tilt
	tilt_TH_X_r_s = -2500;
 8001c32:	f24f 633c 	movw	r3, #63036	; 0xf63c
 8001c36:	81fb      	strh	r3, [r7, #14]
	tilt_TH_X_l_s = 2500;
 8001c38:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001c3c:	81bb      	strh	r3, [r7, #12]
	tilt_TH_Y_f_s = -3000;
 8001c3e:	f24f 4348 	movw	r3, #62536	; 0xf448
 8001c42:	817b      	strh	r3, [r7, #10]
	tilt_TH_Y_b_s = 3000;
 8001c44:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001c48:	813b      	strh	r3, [r7, #8]

	getAngleRoll(Sensor_Data);
 8001c4a:	4b52      	ldr	r3, [pc, #328]	; (8001d94 <MPU6050_detectTilt+0x190>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ff46 	bl	8001ae0 <getAngleRoll>
	float alpha = sqrtf(Sensor_Data->X_deg*Sensor_Data->X_deg + Sensor_Data->Y_deg* Sensor_Data->Y_deg);
 8001c54:	4b4f      	ldr	r3, [pc, #316]	; (8001d94 <MPU6050_detectTilt+0x190>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8001c5c:	4b4d      	ldr	r3, [pc, #308]	; (8001d94 <MPU6050_detectTilt+0x190>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c68:	4b4a      	ldr	r3, [pc, #296]	; (8001d94 <MPU6050_detectTilt+0x190>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8001c70:	4b48      	ldr	r3, [pc, #288]	; (8001d94 <MPU6050_detectTilt+0x190>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001c78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c80:	eeb0 0a67 	vmov.f32	s0, s15
 8001c84:	f005 fa6c 	bl	8007160 <sqrtf>
 8001c88:	ed87 0a01 	vstr	s0, [r7, #4]
	//detect tilt in any diretion
	if ((alpha > angle_TH) &&  (abs(Sensor_Data->Accl_Z) < tilt_TH_Z)){
 8001c8c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001c90:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9c:	dd73      	ble.n	8001d86 <MPU6050_detectTilt+0x182>
 8001c9e:	4b3d      	ldr	r3, [pc, #244]	; (8001d94 <MPU6050_detectTilt+0x190>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	bfb8      	it	lt
 8001caa:	425b      	neglt	r3, r3
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	da66      	bge.n	8001d86 <MPU6050_detectTilt+0x182>
		//speciify direction
		if (abs(Sensor_Data->Accl_Y) < tilt_TH_Y){
 8001cb8:	4b36      	ldr	r3, [pc, #216]	; (8001d94 <MPU6050_detectTilt+0x190>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	bfb8      	it	lt
 8001cc4:	425b      	neglt	r3, r3
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	da31      	bge.n	8001d36 <MPU6050_detectTilt+0x132>
			//tilt rigth when Accl_X is negative
			if (Sensor_Data->Accl_X < tilt_TH_X_r){
 8001cd2:	4b30      	ldr	r3, [pc, #192]	; (8001d94 <MPU6050_detectTilt+0x190>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001cda:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	dd0b      	ble.n	8001cfa <MPU6050_detectTilt+0xf6>
				//
				if (Sensor_Data->Accl_X < tilt_TH_X_r_s){
 8001ce2:	4b2c      	ldr	r3, [pc, #176]	; (8001d94 <MPU6050_detectTilt+0x190>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001cea:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	dd01      	ble.n	8001cf6 <MPU6050_detectTilt+0xf2>
					//printf("tilt strong right \r\n");
					return TILT_RIGHT_S;
 8001cf2:	2305      	movs	r3, #5
 8001cf4:	e048      	b.n	8001d88 <MPU6050_detectTilt+0x184>
				}
				else {
					//printf("tilt right \r\n");
					return TILT_RIGHT;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e046      	b.n	8001d88 <MPU6050_detectTilt+0x184>
				}

			}
			//tilt left when Accl_X is positiv
			else if ((Sensor_Data->Accl_X > tilt_TH_X_l) && abs(Sensor_Data->Accl_Y)){
 8001cfa:	4b26      	ldr	r3, [pc, #152]	; (8001d94 <MPU6050_detectTilt+0x190>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001d02:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	da3d      	bge.n	8001d86 <MPU6050_detectTilt+0x182>
 8001d0a:	4b22      	ldr	r3, [pc, #136]	; (8001d94 <MPU6050_detectTilt+0x190>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	bfb8      	it	lt
 8001d16:	425b      	neglt	r3, r3
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d033      	beq.n	8001d86 <MPU6050_detectTilt+0x182>

				if (Sensor_Data->Accl_X > tilt_TH_X_l_s){
 8001d1e:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <MPU6050_detectTilt+0x190>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001d26:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	da01      	bge.n	8001d32 <MPU6050_detectTilt+0x12e>
										//printf("tilt strong left\r\n");
					return TILT_LEFT_S;
 8001d2e:	2306      	movs	r3, #6
 8001d30:	e02a      	b.n	8001d88 <MPU6050_detectTilt+0x184>
				}
				else {
										//printf("tilt left\r\n");
					return TILT_LEFT;
 8001d32:	2302      	movs	r3, #2
 8001d34:	e028      	b.n	8001d88 <MPU6050_detectTilt+0x184>
				}
			}
		}
		else if (Sensor_Data->Accl_Y < tilt_TH_Y_f){
 8001d36:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <MPU6050_detectTilt+0x190>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001d3e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	dd0b      	ble.n	8001d5e <MPU6050_detectTilt+0x15a>
			if (Sensor_Data->Accl_Y < tilt_TH_Y_f_s){
 8001d46:	4b13      	ldr	r3, [pc, #76]	; (8001d94 <MPU6050_detectTilt+0x190>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001d4e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	dd01      	ble.n	8001d5a <MPU6050_detectTilt+0x156>
								//printf("tilt strong front\r\n");
				return TILT_FRONT_S;
 8001d56:	2307      	movs	r3, #7
 8001d58:	e016      	b.n	8001d88 <MPU6050_detectTilt+0x184>
			}
			else{
								//printf("tilt front\r\n");
				return TILT_FRONT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e014      	b.n	8001d88 <MPU6050_detectTilt+0x184>
			}

		}
		else if (Sensor_Data->Accl_Y > tilt_TH_Y_b){
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	; (8001d94 <MPU6050_detectTilt+0x190>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001d66:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	da0b      	bge.n	8001d86 <MPU6050_detectTilt+0x182>
			if (Sensor_Data->Accl_Y > tilt_TH_Y_b_s){
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <MPU6050_detectTilt+0x190>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001d76:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	da01      	bge.n	8001d82 <MPU6050_detectTilt+0x17e>
								//printf("tilt strong back\r\n");
				return TILT_BACK_S;
 8001d7e:	2308      	movs	r3, #8
 8001d80:	e002      	b.n	8001d88 <MPU6050_detectTilt+0x184>
			}
			else {
								//printf("tilt back\r\n");
				return TILT_BACK;
 8001d82:	2304      	movs	r3, #4
 8001d84:	e000      	b.n	8001d88 <MPU6050_detectTilt+0x184>
			}

		}
	}
	return TILT_NONE;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3720      	adds	r7, #32
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	41c80000 	.word	0x41c80000
 8001d94:	2000031c 	.word	0x2000031c

08001d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b09a      	sub	sp, #104	; 0x68
 8001d9c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d9e:	f000 fdd5 	bl	800294c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001da2:	f000 f975 	bl	8002090 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001da6:	f000 fa93 	bl	80022d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001daa:	f000 fa69 	bl	8002280 <MX_DMA_Init>
  MX_SPI1_Init();
 8001dae:	f000 fa0b 	bl	80021c8 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001db2:	f000 fa3b 	bl	800222c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001db6:	f000 f9d9 	bl	800216c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	printf("***Bodysythesizer Sensor Board***\r\n");
 8001dba:	48a7      	ldr	r0, [pc, #668]	; (8002058 <main+0x2c0>)
 8001dbc:	f004 fa54 	bl	8006268 <puts>
	uint8_t initError_counter = 0;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	bool led_off = true;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

	//Calibrated LED switc ON
	HAL_GPIO_WritePin(LED_CALIBRATED_GPIO_Port, LED_CALIBRATED_Pin,SET );
 8001dcc:	2201      	movs	r2, #1
 8001dce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001dd2:	48a2      	ldr	r0, [pc, #648]	; (800205c <main+0x2c4>)
 8001dd4:	f001 fc66 	bl	80036a4 <HAL_GPIO_WritePin>


	for (int i =0;i<BUFFERSIZE;i++){
 8001dd8:	2300      	movs	r3, #0
 8001dda:	65bb      	str	r3, [r7, #88]	; 0x58
 8001ddc:	e00c      	b.n	8001df8 <main+0x60>
		pTxData[i] = 0;
 8001dde:	4aa0      	ldr	r2, [pc, #640]	; (8002060 <main+0x2c8>)
 8001de0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001de2:	4413      	add	r3, r2
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]
		pRxData[i] = 0;
 8001de8:	4a9e      	ldr	r2, [pc, #632]	; (8002064 <main+0x2cc>)
 8001dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dec:	4413      	add	r3, r2
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
	for (int i =0;i<BUFFERSIZE;i++){
 8001df2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001df4:	3301      	adds	r3, #1
 8001df6:	65bb      	str	r3, [r7, #88]	; 0x58
 8001df8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001dfa:	2b07      	cmp	r3, #7
 8001dfc:	d9ef      	bls.n	8001dde <main+0x46>
	}
	//Power up Gyro
	HAL_GPIO_WritePin(MPU6050_Power_GPIO_Port, MPU6050_Power_Pin,SET );
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e04:	4898      	ldr	r0, [pc, #608]	; (8002068 <main+0x2d0>)
 8001e06:	f001 fc4d 	bl	80036a4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001e0a:	200a      	movs	r0, #10
 8001e0c:	f000 fe10 	bl	8002a30 <HAL_Delay>

	//Gyros Init
	MPU6050_Data gyro_data;
	//	 MPU6050_STATUS gyro_status;
	while((initError_counter < 5) && MPU6050_init(&hi2c1, &gyro_data, MPU6050_ACCL_8G, MPU6050_GYRO_2000deg, MPU6050_SampleRate_2KHz != MPU6050_Status_OK)){
 8001e10:	e020      	b.n	8001e54 <main+0xbc>
		initError_counter++;
 8001e12:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001e16:	3301      	adds	r3, #1
 8001e18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		printf("MPU6050 Init Error\r\n");
 8001e1c:	4893      	ldr	r0, [pc, #588]	; (800206c <main+0x2d4>)
 8001e1e:	f004 fa23 	bl	8006268 <puts>
		if (initError_counter == 3){
 8001e22:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001e26:	2b03      	cmp	r3, #3
 8001e28:	d114      	bne.n	8001e54 <main+0xbc>
			printf("restart MPU6050\r\n");
 8001e2a:	4891      	ldr	r0, [pc, #580]	; (8002070 <main+0x2d8>)
 8001e2c:	f004 fa1c 	bl	8006268 <puts>
			HAL_GPIO_WritePin(MPU6050_Power_GPIO_Port, MPU6050_Power_Pin,RESET );
 8001e30:	2200      	movs	r2, #0
 8001e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e36:	488c      	ldr	r0, [pc, #560]	; (8002068 <main+0x2d0>)
 8001e38:	f001 fc34 	bl	80036a4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001e3c:	200a      	movs	r0, #10
 8001e3e:	f000 fdf7 	bl	8002a30 <HAL_Delay>
			HAL_GPIO_WritePin(MPU6050_Power_GPIO_Port, MPU6050_Power_Pin,SET );
 8001e42:	2201      	movs	r2, #1
 8001e44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001e48:	4887      	ldr	r0, [pc, #540]	; (8002068 <main+0x2d0>)
 8001e4a:	f001 fc2b 	bl	80036a4 <HAL_GPIO_WritePin>
			HAL_Delay(10);
 8001e4e:	200a      	movs	r0, #10
 8001e50:	f000 fdee 	bl	8002a30 <HAL_Delay>
	while((initError_counter < 5) && MPU6050_init(&hi2c1, &gyro_data, MPU6050_ACCL_8G, MPU6050_GYRO_2000deg, MPU6050_SampleRate_2KHz != MPU6050_Status_OK)){
 8001e54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001e58:	2b04      	cmp	r3, #4
 8001e5a:	d80a      	bhi.n	8001e72 <main+0xda>
 8001e5c:	4639      	mov	r1, r7
 8001e5e:	2301      	movs	r3, #1
 8001e60:	9300      	str	r3, [sp, #0]
 8001e62:	2303      	movs	r3, #3
 8001e64:	2202      	movs	r2, #2
 8001e66:	4883      	ldr	r0, [pc, #524]	; (8002074 <main+0x2dc>)
 8001e68:	f7ff f85a 	bl	8000f20 <MPU6050_init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1cf      	bne.n	8001e12 <main+0x7a>
		}
	}
	if (initError_counter < 5){
 8001e72:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001e76:	2b04      	cmp	r3, #4
 8001e78:	d81d      	bhi.n	8001eb6 <main+0x11e>
		printf("MPU6050 Init complete\r\n");
 8001e7a:	487f      	ldr	r0, [pc, #508]	; (8002078 <main+0x2e0>)
 8001e7c:	f004 f9f4 	bl	8006268 <puts>
		if ( MPU6050_Calibrate(&gyro_data) == MPU6050_Read_OK){
 8001e80:	463b      	mov	r3, r7
 8001e82:	4618      	mov	r0, r3
 8001e84:	f7ff fb4a 	bl	800151c <MPU6050_Calibrate>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d10c      	bne.n	8001ea8 <main+0x110>
			printf("MPU6050 calibrated\r\n");
 8001e8e:	487b      	ldr	r0, [pc, #492]	; (800207c <main+0x2e4>)
 8001e90:	f004 f9ea 	bl	8006268 <puts>
			SyncBuffer.gyro_initilized =true;
 8001e94:	4b7a      	ldr	r3, [pc, #488]	; (8002080 <main+0x2e8>)
 8001e96:	2201      	movs	r2, #1
 8001e98:	70da      	strb	r2, [r3, #3]
			HAL_GPIO_WritePin(LED_CALIBRATED_GPIO_Port, LED_CALIBRATED_Pin,RESET );
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ea0:	486e      	ldr	r0, [pc, #440]	; (800205c <main+0x2c4>)
 8001ea2:	f001 fbff 	bl	80036a4 <HAL_GPIO_WritePin>
 8001ea6:	e009      	b.n	8001ebc <main+0x124>

		}
		else{
			printf("MPU6050 calibration failed\r\n");
 8001ea8:	4876      	ldr	r0, [pc, #472]	; (8002084 <main+0x2ec>)
 8001eaa:	f004 f9dd 	bl	8006268 <puts>
			SyncBuffer.gyro_initilized = false;
 8001eae:	4b74      	ldr	r3, [pc, #464]	; (8002080 <main+0x2e8>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	70da      	strb	r2, [r3, #3]
 8001eb4:	e002      	b.n	8001ebc <main+0x124>
		}
	}
	else {
		SyncBuffer.gyro_initilized = false;
 8001eb6:	4b72      	ldr	r3, [pc, #456]	; (8002080 <main+0x2e8>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	70da      	strb	r2, [r3, #3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	HAL_SPI_TransmitReceive_DMA(&hspi1, pTxData, pRxData, BUFFERSIZE);
 8001ebc:	2308      	movs	r3, #8
 8001ebe:	4a69      	ldr	r2, [pc, #420]	; (8002064 <main+0x2cc>)
 8001ec0:	4967      	ldr	r1, [pc, #412]	; (8002060 <main+0x2c8>)
 8001ec2:	4871      	ldr	r0, [pc, #452]	; (8002088 <main+0x2f0>)
 8001ec4:	f003 faea 	bl	800549c <HAL_SPI_TransmitReceive_DMA>
	while (1)
	{
		// Get Movement detection and write into Sync buffer
		if(SyncBuffer.gyro_initilized == true){
 8001ec8:	4b6d      	ldr	r3, [pc, #436]	; (8002080 <main+0x2e8>)
 8001eca:	78db      	ldrb	r3, [r3, #3]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d107      	bne.n	8001ee0 <main+0x148>
			//			MPU6050_Display_Data();
			MPU6050_Read_Sensor();
 8001ed0:	f7ff f9e4 	bl	800129c <MPU6050_Read_Sensor>
			SyncBuffer.tilt_detected  = MPU6050_detectTilt();
 8001ed4:	f7ff fe96 	bl	8001c04 <MPU6050_detectTilt>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	461a      	mov	r2, r3
 8001edc:	4b68      	ldr	r3, [pc, #416]	; (8002080 <main+0x2e8>)
 8001ede:	711a      	strb	r2, [r3, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee0:	b672      	cpsid	i
}
 8001ee2:	bf00      	nop

		}


		__disable_irq();
		memcpy((void*)pTxData,(void*)&SyncBuffer, BUFFERSIZE);
 8001ee4:	4b5e      	ldr	r3, [pc, #376]	; (8002060 <main+0x2c8>)
 8001ee6:	4a66      	ldr	r2, [pc, #408]	; (8002080 <main+0x2e8>)
 8001ee8:	6811      	ldr	r1, [r2, #0]
 8001eea:	6852      	ldr	r2, [r2, #4]
 8001eec:	6019      	str	r1, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ef0:	b662      	cpsie	i
}
 8001ef2:	bf00      	nop
		__enable_irq();
//		if (pTxData[5]!=0)
//			printf("MOVE\r\n");

		//switch LED
		switch (SyncBuffer.tilt_detected) {
 8001ef4:	4b62      	ldr	r3, [pc, #392]	; (8002080 <main+0x2e8>)
 8001ef6:	791b      	ldrb	r3, [r3, #4]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	2b07      	cmp	r3, #7
 8001efc:	d873      	bhi.n	8001fe6 <main+0x24e>
 8001efe:	a201      	add	r2, pc, #4	; (adr r2, 8001f04 <main+0x16c>)
 8001f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f04:	08001f25 	.word	0x08001f25
 8001f08:	08001f55 	.word	0x08001f55
 8001f0c:	08001f83 	.word	0x08001f83
 8001f10:	08001fb7 	.word	0x08001fb7
 8001f14:	08001f37 	.word	0x08001f37
 8001f18:	08001f67 	.word	0x08001f67
 8001f1c:	08001f97 	.word	0x08001f97
 8001f20:	08001fc9 	.word	0x08001fc9
		case TILT_RIGHT:
			HAL_GPIO_WritePin(LED_TILT_RIGHT_GPIO_Port, LED_TILT_RIGHT_Pin,SET );
 8001f24:	2201      	movs	r2, #1
 8001f26:	2110      	movs	r1, #16
 8001f28:	484f      	ldr	r0, [pc, #316]	; (8002068 <main+0x2d0>)
 8001f2a:	f001 fbbb 	bl	80036a4 <HAL_GPIO_WritePin>
			led_off = false;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			break;
 8001f34:	e08e      	b.n	8002054 <main+0x2bc>
		case TILT_RIGHT_S:
			HAL_GPIO_WritePin(LED_TILT_RIGHT_GPIO_Port, LED_TILT_RIGHT_Pin,SET );
 8001f36:	2201      	movs	r2, #1
 8001f38:	2110      	movs	r1, #16
 8001f3a:	484b      	ldr	r0, [pc, #300]	; (8002068 <main+0x2d0>)
 8001f3c:	f001 fbb2 	bl	80036a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_STRONG_TILT_RIGHT_GPIO_Port, LED_STRONG_TILT_RIGHT_Pin,SET );
 8001f40:	2201      	movs	r2, #1
 8001f42:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f46:	4845      	ldr	r0, [pc, #276]	; (800205c <main+0x2c4>)
 8001f48:	f001 fbac 	bl	80036a4 <HAL_GPIO_WritePin>
			led_off = false;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			break;
 8001f52:	e07f      	b.n	8002054 <main+0x2bc>
		case TILT_LEFT:
			HAL_GPIO_WritePin(LED_TILT_LEFT_GPIO_Port, LED_TILT_LEFT_Pin,SET );
 8001f54:	2201      	movs	r2, #1
 8001f56:	2120      	movs	r1, #32
 8001f58:	4840      	ldr	r0, [pc, #256]	; (800205c <main+0x2c4>)
 8001f5a:	f001 fba3 	bl	80036a4 <HAL_GPIO_WritePin>
			led_off = false;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			break;
 8001f64:	e076      	b.n	8002054 <main+0x2bc>
		case TILT_LEFT_S:
			HAL_GPIO_WritePin(LED_TILT_LEFT_GPIO_Port, LED_TILT_LEFT_Pin,SET );
 8001f66:	2201      	movs	r2, #1
 8001f68:	2120      	movs	r1, #32
 8001f6a:	483c      	ldr	r0, [pc, #240]	; (800205c <main+0x2c4>)
 8001f6c:	f001 fb9a 	bl	80036a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_STRONG_TILT_LEFT_GPIO_Port, LED_STRONG_TILT_LEFT_Pin,SET );
 8001f70:	2201      	movs	r2, #1
 8001f72:	2110      	movs	r1, #16
 8001f74:	4839      	ldr	r0, [pc, #228]	; (800205c <main+0x2c4>)
 8001f76:	f001 fb95 	bl	80036a4 <HAL_GPIO_WritePin>
			led_off = false;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			break;
 8001f80:	e068      	b.n	8002054 <main+0x2bc>
		case TILT_FRONT:
			HAL_GPIO_WritePin(LED_TILT_FRONT_GPIO_Port, LED_TILT_FRONT_Pin,SET );
 8001f82:	2201      	movs	r2, #1
 8001f84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f88:	4840      	ldr	r0, [pc, #256]	; (800208c <main+0x2f4>)
 8001f8a:	f001 fb8b 	bl	80036a4 <HAL_GPIO_WritePin>
			led_off = false;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			break;
 8001f94:	e05e      	b.n	8002054 <main+0x2bc>
		case TILT_FRONT_S:
			HAL_GPIO_WritePin(LED_TILT_FRONT_GPIO_Port, LED_TILT_FRONT_Pin,SET );
 8001f96:	2201      	movs	r2, #1
 8001f98:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f9c:	483b      	ldr	r0, [pc, #236]	; (800208c <main+0x2f4>)
 8001f9e:	f001 fb81 	bl	80036a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_STRONG_TILT_FRONT_GPIO_Port, LED_STRONG_TILT_FRONT_Pin,SET );
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fa8:	482c      	ldr	r0, [pc, #176]	; (800205c <main+0x2c4>)
 8001faa:	f001 fb7b 	bl	80036a4 <HAL_GPIO_WritePin>
			led_off = false;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			break;
 8001fb4:	e04e      	b.n	8002054 <main+0x2bc>
		case TILT_BACK:
			HAL_GPIO_WritePin(LED_TILT_BACK_GPIO_Port, LED_TILT_BACK_Pin,SET );
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	2108      	movs	r1, #8
 8001fba:	4828      	ldr	r0, [pc, #160]	; (800205c <main+0x2c4>)
 8001fbc:	f001 fb72 	bl	80036a4 <HAL_GPIO_WritePin>
			led_off = false;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			break;
 8001fc6:	e045      	b.n	8002054 <main+0x2bc>
		case TILT_BACK_S:
			HAL_GPIO_WritePin(LED_TILT_BACK_GPIO_Port, LED_TILT_BACK_Pin,SET );
 8001fc8:	2201      	movs	r2, #1
 8001fca:	2108      	movs	r1, #8
 8001fcc:	4823      	ldr	r0, [pc, #140]	; (800205c <main+0x2c4>)
 8001fce:	f001 fb69 	bl	80036a4 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_STRONG_TILT_BACK_GPIO_Port, LED_STRONG_TILT_BACK_Pin,SET );
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fd8:	482c      	ldr	r0, [pc, #176]	; (800208c <main+0x2f4>)
 8001fda:	f001 fb63 	bl	80036a4 <HAL_GPIO_WritePin>
			led_off = false;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			break;
 8001fe4:	e036      	b.n	8002054 <main+0x2bc>
		default:
			if (!led_off) {
 8001fe6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001fea:	f083 0301 	eor.w	r3, r3, #1
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d02e      	beq.n	8002052 <main+0x2ba>
				HAL_GPIO_WritePin(LED_TILT_LEFT_GPIO_Port, LED_TILT_LEFT_Pin,RESET );
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	2120      	movs	r1, #32
 8001ff8:	4818      	ldr	r0, [pc, #96]	; (800205c <main+0x2c4>)
 8001ffa:	f001 fb53 	bl	80036a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_STRONG_TILT_LEFT_GPIO_Port, LED_STRONG_TILT_LEFT_Pin,RESET );
 8001ffe:	2200      	movs	r2, #0
 8002000:	2110      	movs	r1, #16
 8002002:	4816      	ldr	r0, [pc, #88]	; (800205c <main+0x2c4>)
 8002004:	f001 fb4e 	bl	80036a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_TILT_FRONT_GPIO_Port, LED_TILT_FRONT_Pin,RESET );
 8002008:	2200      	movs	r2, #0
 800200a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800200e:	481f      	ldr	r0, [pc, #124]	; (800208c <main+0x2f4>)
 8002010:	f001 fb48 	bl	80036a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_STRONG_TILT_FRONT_GPIO_Port, LED_STRONG_TILT_FRONT_Pin,RESET );
 8002014:	2200      	movs	r2, #0
 8002016:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800201a:	4810      	ldr	r0, [pc, #64]	; (800205c <main+0x2c4>)
 800201c:	f001 fb42 	bl	80036a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_TILT_BACK_GPIO_Port, LED_TILT_BACK_Pin,RESET );
 8002020:	2200      	movs	r2, #0
 8002022:	2108      	movs	r1, #8
 8002024:	480d      	ldr	r0, [pc, #52]	; (800205c <main+0x2c4>)
 8002026:	f001 fb3d 	bl	80036a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_STRONG_TILT_BACK_GPIO_Port, LED_STRONG_TILT_BACK_Pin,RESET );
 800202a:	2200      	movs	r2, #0
 800202c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002030:	4816      	ldr	r0, [pc, #88]	; (800208c <main+0x2f4>)
 8002032:	f001 fb37 	bl	80036a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_TILT_RIGHT_GPIO_Port, LED_TILT_RIGHT_Pin,RESET );
 8002036:	2200      	movs	r2, #0
 8002038:	2110      	movs	r1, #16
 800203a:	480b      	ldr	r0, [pc, #44]	; (8002068 <main+0x2d0>)
 800203c:	f001 fb32 	bl	80036a4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_STRONG_TILT_RIGHT_GPIO_Port, LED_STRONG_TILT_RIGHT_Pin,RESET );
 8002040:	2200      	movs	r2, #0
 8002042:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002046:	4805      	ldr	r0, [pc, #20]	; (800205c <main+0x2c4>)
 8002048:	f001 fb2c 	bl	80036a4 <HAL_GPIO_WritePin>
				led_off = true;
 800204c:	2301      	movs	r3, #1
 800204e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			}

			break;
 8002052:	bf00      	nop
		if(SyncBuffer.gyro_initilized == true){
 8002054:	e738      	b.n	8001ec8 <main+0x130>
 8002056:	bf00      	nop
 8002058:	08007908 	.word	0x08007908
 800205c:	40020400 	.word	0x40020400
 8002060:	20000330 	.word	0x20000330
 8002064:	20000314 	.word	0x20000314
 8002068:	40020800 	.word	0x40020800
 800206c:	0800792c 	.word	0x0800792c
 8002070:	08007940 	.word	0x08007940
 8002074:	20000340 	.word	0x20000340
 8002078:	08007954 	.word	0x08007954
 800207c:	0800796c 	.word	0x0800796c
 8002080:	20000328 	.word	0x20000328
 8002084:	08007980 	.word	0x08007980
 8002088:	20000394 	.word	0x20000394
 800208c:	40020000 	.word	0x40020000

08002090 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b094      	sub	sp, #80	; 0x50
 8002094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002096:	f107 031c 	add.w	r3, r7, #28
 800209a:	2234      	movs	r2, #52	; 0x34
 800209c:	2100      	movs	r1, #0
 800209e:	4618      	mov	r0, r3
 80020a0:	f004 f854 	bl	800614c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020a4:	f107 0308 	add.w	r3, r7, #8
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80020b4:	2300      	movs	r3, #0
 80020b6:	607b      	str	r3, [r7, #4]
 80020b8:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <SystemClock_Config+0xd4>)
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	4a29      	ldr	r2, [pc, #164]	; (8002164 <SystemClock_Config+0xd4>)
 80020be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c2:	6413      	str	r3, [r2, #64]	; 0x40
 80020c4:	4b27      	ldr	r3, [pc, #156]	; (8002164 <SystemClock_Config+0xd4>)
 80020c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80020d0:	2300      	movs	r3, #0
 80020d2:	603b      	str	r3, [r7, #0]
 80020d4:	4b24      	ldr	r3, [pc, #144]	; (8002168 <SystemClock_Config+0xd8>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020dc:	4a22      	ldr	r2, [pc, #136]	; (8002168 <SystemClock_Config+0xd8>)
 80020de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	4b20      	ldr	r3, [pc, #128]	; (8002168 <SystemClock_Config+0xd8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020ec:	603b      	str	r3, [r7, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020f0:	2302      	movs	r3, #2
 80020f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020f4:	2301      	movs	r3, #1
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020f8:	2310      	movs	r3, #16
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80020fc:	2302      	movs	r3, #2
 80020fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002100:	2300      	movs	r3, #0
 8002102:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8002104:	2310      	movs	r3, #16
 8002106:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002108:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800210c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800210e:	2304      	movs	r3, #4
 8002110:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002112:	2302      	movs	r3, #2
 8002114:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002116:	2302      	movs	r3, #2
 8002118:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800211a:	f107 031c 	add.w	r3, r7, #28
 800211e:	4618      	mov	r0, r3
 8002120:	f002 fe94 	bl	8004e4c <HAL_RCC_OscConfig>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800212a:	f000 f9a1 	bl	8002470 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800212e:	230f      	movs	r3, #15
 8002130:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002132:	2302      	movs	r3, #2
 8002134:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800213a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800213e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002140:	2300      	movs	r3, #0
 8002142:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002144:	f107 0308 	add.w	r3, r7, #8
 8002148:	2102      	movs	r1, #2
 800214a:	4618      	mov	r0, r3
 800214c:	f002 fbb2 	bl	80048b4 <HAL_RCC_ClockConfig>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8002156:	f000 f98b 	bl	8002470 <Error_Handler>
  }
}
 800215a:	bf00      	nop
 800215c:	3750      	adds	r7, #80	; 0x50
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	40023800 	.word	0x40023800
 8002168:	40007000 	.word	0x40007000

0800216c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002170:	4b12      	ldr	r3, [pc, #72]	; (80021bc <MX_I2C1_Init+0x50>)
 8002172:	4a13      	ldr	r2, [pc, #76]	; (80021c0 <MX_I2C1_Init+0x54>)
 8002174:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002176:	4b11      	ldr	r3, [pc, #68]	; (80021bc <MX_I2C1_Init+0x50>)
 8002178:	4a12      	ldr	r2, [pc, #72]	; (80021c4 <MX_I2C1_Init+0x58>)
 800217a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800217c:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <MX_I2C1_Init+0x50>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002182:	4b0e      	ldr	r3, [pc, #56]	; (80021bc <MX_I2C1_Init+0x50>)
 8002184:	2200      	movs	r2, #0
 8002186:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002188:	4b0c      	ldr	r3, [pc, #48]	; (80021bc <MX_I2C1_Init+0x50>)
 800218a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800218e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002190:	4b0a      	ldr	r3, [pc, #40]	; (80021bc <MX_I2C1_Init+0x50>)
 8002192:	2200      	movs	r2, #0
 8002194:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002196:	4b09      	ldr	r3, [pc, #36]	; (80021bc <MX_I2C1_Init+0x50>)
 8002198:	2200      	movs	r2, #0
 800219a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800219c:	4b07      	ldr	r3, [pc, #28]	; (80021bc <MX_I2C1_Init+0x50>)
 800219e:	2200      	movs	r2, #0
 80021a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021a2:	4b06      	ldr	r3, [pc, #24]	; (80021bc <MX_I2C1_Init+0x50>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021a8:	4804      	ldr	r0, [pc, #16]	; (80021bc <MX_I2C1_Init+0x50>)
 80021aa:	f001 fa95 	bl	80036d8 <HAL_I2C_Init>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80021b4:	f000 f95c 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021b8:	bf00      	nop
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	20000340 	.word	0x20000340
 80021c0:	40005400 	.word	0x40005400
 80021c4:	00061a80 	.word	0x00061a80

080021c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80021cc:	4b15      	ldr	r3, [pc, #84]	; (8002224 <MX_SPI1_Init+0x5c>)
 80021ce:	4a16      	ldr	r2, [pc, #88]	; (8002228 <MX_SPI1_Init+0x60>)
 80021d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <MX_SPI1_Init+0x5c>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80021d8:	4b12      	ldr	r3, [pc, #72]	; (8002224 <MX_SPI1_Init+0x5c>)
 80021da:	2200      	movs	r2, #0
 80021dc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80021de:	4b11      	ldr	r3, [pc, #68]	; (8002224 <MX_SPI1_Init+0x5c>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80021e4:	4b0f      	ldr	r3, [pc, #60]	; (8002224 <MX_SPI1_Init+0x5c>)
 80021e6:	2202      	movs	r2, #2
 80021e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80021ea:	4b0e      	ldr	r3, [pc, #56]	; (8002224 <MX_SPI1_Init+0x5c>)
 80021ec:	2200      	movs	r2, #0
 80021ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80021f0:	4b0c      	ldr	r3, [pc, #48]	; (8002224 <MX_SPI1_Init+0x5c>)
 80021f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80021f6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80021f8:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <MX_SPI1_Init+0x5c>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <MX_SPI1_Init+0x5c>)
 8002200:	2200      	movs	r2, #0
 8002202:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002204:	4b07      	ldr	r3, [pc, #28]	; (8002224 <MX_SPI1_Init+0x5c>)
 8002206:	2200      	movs	r2, #0
 8002208:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800220a:	4b06      	ldr	r3, [pc, #24]	; (8002224 <MX_SPI1_Init+0x5c>)
 800220c:	220a      	movs	r2, #10
 800220e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002210:	4804      	ldr	r0, [pc, #16]	; (8002224 <MX_SPI1_Init+0x5c>)
 8002212:	f003 f8b9 	bl	8005388 <HAL_SPI_Init>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 800221c:	f000 f928 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002220:	bf00      	nop
 8002222:	bd80      	pop	{r7, pc}
 8002224:	20000394 	.word	0x20000394
 8002228:	40013000 	.word	0x40013000

0800222c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <MX_USART2_UART_Init+0x4c>)
 8002232:	4a12      	ldr	r2, [pc, #72]	; (800227c <MX_USART2_UART_Init+0x50>)
 8002234:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002236:	4b10      	ldr	r3, [pc, #64]	; (8002278 <MX_USART2_UART_Init+0x4c>)
 8002238:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800223c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800223e:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <MX_USART2_UART_Init+0x4c>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <MX_USART2_UART_Init+0x4c>)
 8002246:	2200      	movs	r2, #0
 8002248:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800224a:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <MX_USART2_UART_Init+0x4c>)
 800224c:	2200      	movs	r2, #0
 800224e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <MX_USART2_UART_Init+0x4c>)
 8002252:	220c      	movs	r2, #12
 8002254:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <MX_USART2_UART_Init+0x4c>)
 8002258:	2200      	movs	r2, #0
 800225a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <MX_USART2_UART_Init+0x4c>)
 800225e:	2200      	movs	r2, #0
 8002260:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002262:	4805      	ldr	r0, [pc, #20]	; (8002278 <MX_USART2_UART_Init+0x4c>)
 8002264:	f003 fc56 	bl	8005b14 <HAL_UART_Init>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800226e:	f000 f8ff 	bl	8002470 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002272:	bf00      	nop
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	200003ec 	.word	0x200003ec
 800227c:	40004400 	.word	0x40004400

08002280 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002286:	2300      	movs	r3, #0
 8002288:	607b      	str	r3, [r7, #4]
 800228a:	4b10      	ldr	r3, [pc, #64]	; (80022cc <MX_DMA_Init+0x4c>)
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	4a0f      	ldr	r2, [pc, #60]	; (80022cc <MX_DMA_Init+0x4c>)
 8002290:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002294:	6313      	str	r3, [r2, #48]	; 0x30
 8002296:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <MX_DMA_Init+0x4c>)
 8002298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800229a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800229e:	607b      	str	r3, [r7, #4]
 80022a0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80022a2:	2200      	movs	r2, #0
 80022a4:	2100      	movs	r1, #0
 80022a6:	2038      	movs	r0, #56	; 0x38
 80022a8:	f000 fcc1 	bl	8002c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80022ac:	2038      	movs	r0, #56	; 0x38
 80022ae:	f000 fcda 	bl	8002c66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	203b      	movs	r0, #59	; 0x3b
 80022b8:	f000 fcb9 	bl	8002c2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80022bc:	203b      	movs	r0, #59	; 0x3b
 80022be:	f000 fcd2 	bl	8002c66 <HAL_NVIC_EnableIRQ>

}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40023800 	.word	0x40023800

080022d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b08a      	sub	sp, #40	; 0x28
 80022d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	2200      	movs	r2, #0
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	605a      	str	r2, [r3, #4]
 80022e0:	609a      	str	r2, [r3, #8]
 80022e2:	60da      	str	r2, [r3, #12]
 80022e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	613b      	str	r3, [r7, #16]
 80022ea:	4b43      	ldr	r3, [pc, #268]	; (80023f8 <MX_GPIO_Init+0x128>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a42      	ldr	r2, [pc, #264]	; (80023f8 <MX_GPIO_Init+0x128>)
 80022f0:	f043 0304 	orr.w	r3, r3, #4
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b40      	ldr	r3, [pc, #256]	; (80023f8 <MX_GPIO_Init+0x128>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0304 	and.w	r3, r3, #4
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002302:	2300      	movs	r3, #0
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	4b3c      	ldr	r3, [pc, #240]	; (80023f8 <MX_GPIO_Init+0x128>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4a3b      	ldr	r2, [pc, #236]	; (80023f8 <MX_GPIO_Init+0x128>)
 800230c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4b39      	ldr	r3, [pc, #228]	; (80023f8 <MX_GPIO_Init+0x128>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800231a:	60fb      	str	r3, [r7, #12]
 800231c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800231e:	2300      	movs	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
 8002322:	4b35      	ldr	r3, [pc, #212]	; (80023f8 <MX_GPIO_Init+0x128>)
 8002324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002326:	4a34      	ldr	r2, [pc, #208]	; (80023f8 <MX_GPIO_Init+0x128>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6313      	str	r3, [r2, #48]	; 0x30
 800232e:	4b32      	ldr	r3, [pc, #200]	; (80023f8 <MX_GPIO_Init+0x128>)
 8002330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	60bb      	str	r3, [r7, #8]
 8002338:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	4b2e      	ldr	r3, [pc, #184]	; (80023f8 <MX_GPIO_Init+0x128>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a2d      	ldr	r2, [pc, #180]	; (80023f8 <MX_GPIO_Init+0x128>)
 8002344:	f043 0302 	orr.w	r3, r3, #2
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b2b      	ldr	r3, [pc, #172]	; (80023f8 <MX_GPIO_Init+0x128>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0302 	and.w	r3, r3, #2
 8002352:	607b      	str	r3, [r7, #4]
 8002354:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_TILT_RIGHT_Pin|MPU6050_Power_Pin, GPIO_PIN_RESET);
 8002356:	2200      	movs	r2, #0
 8002358:	f44f 7104 	mov.w	r1, #528	; 0x210
 800235c:	4827      	ldr	r0, [pc, #156]	; (80023fc <MX_GPIO_Init+0x12c>)
 800235e:	f001 f9a1 	bl	80036a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_STRONG_TILT_FRONT_Pin|LED_STRONG_TILT_RIGHT_Pin|LED_CALIBRATED_Pin|LED_TILT_BACK_Pin
 8002362:	2200      	movs	r2, #0
 8002364:	f246 4138 	movw	r1, #25656	; 0x6438
 8002368:	4825      	ldr	r0, [pc, #148]	; (8002400 <MX_GPIO_Init+0x130>)
 800236a:	f001 f99b 	bl	80036a4 <HAL_GPIO_WritePin>
                          |LED_STRONG_TILT_LEFT_Pin|LED_TILT_LEFT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_TILT_FRONT_Pin|LED_STRONG_TILT_BACK_Pin, GPIO_PIN_RESET);
 800236e:	2200      	movs	r2, #0
 8002370:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8002374:	4823      	ldr	r0, [pc, #140]	; (8002404 <MX_GPIO_Init+0x134>)
 8002376:	f001 f995 	bl	80036a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800237a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800237e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002380:	4b21      	ldr	r3, [pc, #132]	; (8002408 <MX_GPIO_Init+0x138>)
 8002382:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002384:	2300      	movs	r3, #0
 8002386:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002388:	f107 0314 	add.w	r3, r7, #20
 800238c:	4619      	mov	r1, r3
 800238e:	481b      	ldr	r0, [pc, #108]	; (80023fc <MX_GPIO_Init+0x12c>)
 8002390:	f000 fff4 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_TILT_RIGHT_Pin MPU6050_Power_Pin */
  GPIO_InitStruct.Pin = LED_TILT_RIGHT_Pin|MPU6050_Power_Pin;
 8002394:	f44f 7304 	mov.w	r3, #528	; 0x210
 8002398:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800239a:	2301      	movs	r3, #1
 800239c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023a2:	2300      	movs	r3, #0
 80023a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	4813      	ldr	r0, [pc, #76]	; (80023fc <MX_GPIO_Init+0x12c>)
 80023ae:	f000 ffe5 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_STRONG_TILT_FRONT_Pin LED_STRONG_TILT_RIGHT_Pin LED_CALIBRATED_Pin LED_TILT_BACK_Pin
                           LED_STRONG_TILT_LEFT_Pin LED_TILT_LEFT_Pin */
  GPIO_InitStruct.Pin = LED_STRONG_TILT_FRONT_Pin|LED_STRONG_TILT_RIGHT_Pin|LED_CALIBRATED_Pin|LED_TILT_BACK_Pin
 80023b2:	f246 4338 	movw	r3, #25656	; 0x6438
 80023b6:	617b      	str	r3, [r7, #20]
                          |LED_STRONG_TILT_LEFT_Pin|LED_TILT_LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023b8:	2301      	movs	r3, #1
 80023ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2300      	movs	r3, #0
 80023c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c4:	f107 0314 	add.w	r3, r7, #20
 80023c8:	4619      	mov	r1, r3
 80023ca:	480d      	ldr	r0, [pc, #52]	; (8002400 <MX_GPIO_Init+0x130>)
 80023cc:	f000 ffd6 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_TILT_FRONT_Pin LED_STRONG_TILT_BACK_Pin */
  GPIO_InitStruct.Pin = LED_TILT_FRONT_Pin|LED_STRONG_TILT_BACK_Pin;
 80023d0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80023d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d6:	2301      	movs	r3, #1
 80023d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023de:	2300      	movs	r3, #0
 80023e0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e2:	f107 0314 	add.w	r3, r7, #20
 80023e6:	4619      	mov	r1, r3
 80023e8:	4806      	ldr	r0, [pc, #24]	; (8002404 <MX_GPIO_Init+0x134>)
 80023ea:	f000 ffc7 	bl	800337c <HAL_GPIO_Init>

}
 80023ee:	bf00      	nop
 80023f0:	3728      	adds	r7, #40	; 0x28
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	40023800 	.word	0x40023800
 80023fc:	40020800 	.word	0x40020800
 8002400:	40020400 	.word	0x40020400
 8002404:	40020000 	.word	0x40020000
 8002408:	10210000 	.word	0x10210000

0800240c <__io_putchar>:

/* USER CODE BEGIN 4 */
//printf()
int __io_putchar(int ch)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	b2db      	uxtb	r3, r3
 8002418:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 800241a:	f107 010c 	add.w	r1, r7, #12
 800241e:	230a      	movs	r3, #10
 8002420:	2201      	movs	r2, #1
 8002422:	4804      	ldr	r0, [pc, #16]	; (8002434 <__io_putchar+0x28>)
 8002424:	f003 fbc3 	bl	8005bae <HAL_UART_Transmit>
	return ch;
 8002428:	687b      	ldr	r3, [r7, #4]
}
 800242a:	4618      	mov	r0, r3
 800242c:	3710      	adds	r7, #16
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	200003ec 	.word	0x200003ec

08002438 <_write>:

int _write(int file,char *ptr, int len)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	60f8      	str	r0, [r7, #12]
 8002440:	60b9      	str	r1, [r7, #8]
 8002442:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx= 0; DataIdx< len; DataIdx++)
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
 8002448:	e009      	b.n	800245e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	1c5a      	adds	r2, r3, #1
 800244e:	60ba      	str	r2, [r7, #8]
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7ff ffda 	bl	800240c <__io_putchar>
	for(DataIdx= 0; DataIdx< len; DataIdx++)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	3301      	adds	r3, #1
 800245c:	617b      	str	r3, [r7, #20]
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	429a      	cmp	r2, r3
 8002464:	dbf1      	blt.n	800244a <_write+0x12>
	}
	return len;
 8002466:	687b      	ldr	r3, [r7, #4]
}
 8002468:	4618      	mov	r0, r3
 800246a:	3718      	adds	r7, #24
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002474:	b672      	cpsid	i
}
 8002476:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002478:	e7fe      	b.n	8002478 <Error_Handler+0x8>
	...

0800247c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	607b      	str	r3, [r7, #4]
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <HAL_MspInit+0x4c>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	4a0f      	ldr	r2, [pc, #60]	; (80024c8 <HAL_MspInit+0x4c>)
 800248c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002490:	6453      	str	r3, [r2, #68]	; 0x44
 8002492:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <HAL_MspInit+0x4c>)
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249a:	607b      	str	r3, [r7, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	603b      	str	r3, [r7, #0]
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_MspInit+0x4c>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	4a08      	ldr	r2, [pc, #32]	; (80024c8 <HAL_MspInit+0x4c>)
 80024a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ac:	6413      	str	r3, [r2, #64]	; 0x40
 80024ae:	4b06      	ldr	r3, [pc, #24]	; (80024c8 <HAL_MspInit+0x4c>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b6:	603b      	str	r3, [r7, #0]
 80024b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80024ba:	2007      	movs	r0, #7
 80024bc:	f000 fbac 	bl	8002c18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40023800 	.word	0x40023800

080024cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	; 0x28
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	609a      	str	r2, [r3, #8]
 80024e0:	60da      	str	r2, [r3, #12]
 80024e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a19      	ldr	r2, [pc, #100]	; (8002550 <HAL_I2C_MspInit+0x84>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d12c      	bne.n	8002548 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	613b      	str	r3, [r7, #16]
 80024f2:	4b18      	ldr	r3, [pc, #96]	; (8002554 <HAL_I2C_MspInit+0x88>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a17      	ldr	r2, [pc, #92]	; (8002554 <HAL_I2C_MspInit+0x88>)
 80024f8:	f043 0302 	orr.w	r3, r3, #2
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <HAL_I2C_MspInit+0x88>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	613b      	str	r3, [r7, #16]
 8002508:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800250a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800250e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002510:	2312      	movs	r3, #18
 8002512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002514:	2301      	movs	r3, #1
 8002516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002518:	2303      	movs	r3, #3
 800251a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800251c:	2304      	movs	r3, #4
 800251e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	4619      	mov	r1, r3
 8002526:	480c      	ldr	r0, [pc, #48]	; (8002558 <HAL_I2C_MspInit+0x8c>)
 8002528:	f000 ff28 	bl	800337c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800252c:	2300      	movs	r3, #0
 800252e:	60fb      	str	r3, [r7, #12]
 8002530:	4b08      	ldr	r3, [pc, #32]	; (8002554 <HAL_I2C_MspInit+0x88>)
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	4a07      	ldr	r2, [pc, #28]	; (8002554 <HAL_I2C_MspInit+0x88>)
 8002536:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800253a:	6413      	str	r3, [r2, #64]	; 0x40
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <HAL_I2C_MspInit+0x88>)
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002544:	60fb      	str	r3, [r7, #12]
 8002546:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002548:	bf00      	nop
 800254a:	3728      	adds	r7, #40	; 0x28
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}
 8002550:	40005400 	.word	0x40005400
 8002554:	40023800 	.word	0x40023800
 8002558:	40020400 	.word	0x40020400

0800255c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a48      	ldr	r2, [pc, #288]	; (800269c <HAL_SPI_MspInit+0x140>)
 800257a:	4293      	cmp	r3, r2
 800257c:	f040 808a 	bne.w	8002694 <HAL_SPI_MspInit+0x138>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002580:	2300      	movs	r3, #0
 8002582:	613b      	str	r3, [r7, #16]
 8002584:	4b46      	ldr	r3, [pc, #280]	; (80026a0 <HAL_SPI_MspInit+0x144>)
 8002586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002588:	4a45      	ldr	r2, [pc, #276]	; (80026a0 <HAL_SPI_MspInit+0x144>)
 800258a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800258e:	6453      	str	r3, [r2, #68]	; 0x44
 8002590:	4b43      	ldr	r3, [pc, #268]	; (80026a0 <HAL_SPI_MspInit+0x144>)
 8002592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002598:	613b      	str	r3, [r7, #16]
 800259a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259c:	2300      	movs	r3, #0
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	4b3f      	ldr	r3, [pc, #252]	; (80026a0 <HAL_SPI_MspInit+0x144>)
 80025a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a4:	4a3e      	ldr	r2, [pc, #248]	; (80026a0 <HAL_SPI_MspInit+0x144>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6313      	str	r3, [r2, #48]	; 0x30
 80025ac:	4b3c      	ldr	r3, [pc, #240]	; (80026a0 <HAL_SPI_MspInit+0x144>)
 80025ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b0:	f003 0301 	and.w	r3, r3, #1
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80025b8:	23e0      	movs	r3, #224	; 0xe0
 80025ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025bc:	2302      	movs	r3, #2
 80025be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c0:	2300      	movs	r3, #0
 80025c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c4:	2303      	movs	r3, #3
 80025c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80025c8:	2305      	movs	r3, #5
 80025ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025cc:	f107 0314 	add.w	r3, r7, #20
 80025d0:	4619      	mov	r1, r3
 80025d2:	4834      	ldr	r0, [pc, #208]	; (80026a4 <HAL_SPI_MspInit+0x148>)
 80025d4:	f000 fed2 	bl	800337c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80025d8:	4b33      	ldr	r3, [pc, #204]	; (80026a8 <HAL_SPI_MspInit+0x14c>)
 80025da:	4a34      	ldr	r2, [pc, #208]	; (80026ac <HAL_SPI_MspInit+0x150>)
 80025dc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80025de:	4b32      	ldr	r3, [pc, #200]	; (80026a8 <HAL_SPI_MspInit+0x14c>)
 80025e0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80025e4:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025e6:	4b30      	ldr	r3, [pc, #192]	; (80026a8 <HAL_SPI_MspInit+0x14c>)
 80025e8:	2200      	movs	r2, #0
 80025ea:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025ec:	4b2e      	ldr	r3, [pc, #184]	; (80026a8 <HAL_SPI_MspInit+0x14c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025f2:	4b2d      	ldr	r3, [pc, #180]	; (80026a8 <HAL_SPI_MspInit+0x14c>)
 80025f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f8:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025fa:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <HAL_SPI_MspInit+0x14c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002600:	4b29      	ldr	r3, [pc, #164]	; (80026a8 <HAL_SPI_MspInit+0x14c>)
 8002602:	2200      	movs	r2, #0
 8002604:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8002606:	4b28      	ldr	r3, [pc, #160]	; (80026a8 <HAL_SPI_MspInit+0x14c>)
 8002608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800260c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800260e:	4b26      	ldr	r3, [pc, #152]	; (80026a8 <HAL_SPI_MspInit+0x14c>)
 8002610:	2200      	movs	r2, #0
 8002612:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002614:	4b24      	ldr	r3, [pc, #144]	; (80026a8 <HAL_SPI_MspInit+0x14c>)
 8002616:	2200      	movs	r2, #0
 8002618:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800261a:	4823      	ldr	r0, [pc, #140]	; (80026a8 <HAL_SPI_MspInit+0x14c>)
 800261c:	f000 fb3e 	bl	8002c9c <HAL_DMA_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8002626:	f7ff ff23 	bl	8002470 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a1e      	ldr	r2, [pc, #120]	; (80026a8 <HAL_SPI_MspInit+0x14c>)
 800262e:	64da      	str	r2, [r3, #76]	; 0x4c
 8002630:	4a1d      	ldr	r2, [pc, #116]	; (80026a8 <HAL_SPI_MspInit+0x14c>)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8002636:	4b1e      	ldr	r3, [pc, #120]	; (80026b0 <HAL_SPI_MspInit+0x154>)
 8002638:	4a1e      	ldr	r2, [pc, #120]	; (80026b4 <HAL_SPI_MspInit+0x158>)
 800263a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800263c:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <HAL_SPI_MspInit+0x154>)
 800263e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8002642:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002644:	4b1a      	ldr	r3, [pc, #104]	; (80026b0 <HAL_SPI_MspInit+0x154>)
 8002646:	2240      	movs	r2, #64	; 0x40
 8002648:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800264a:	4b19      	ldr	r3, [pc, #100]	; (80026b0 <HAL_SPI_MspInit+0x154>)
 800264c:	2200      	movs	r2, #0
 800264e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002650:	4b17      	ldr	r3, [pc, #92]	; (80026b0 <HAL_SPI_MspInit+0x154>)
 8002652:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002656:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002658:	4b15      	ldr	r3, [pc, #84]	; (80026b0 <HAL_SPI_MspInit+0x154>)
 800265a:	2200      	movs	r2, #0
 800265c:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800265e:	4b14      	ldr	r3, [pc, #80]	; (80026b0 <HAL_SPI_MspInit+0x154>)
 8002660:	2200      	movs	r2, #0
 8002662:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8002664:	4b12      	ldr	r3, [pc, #72]	; (80026b0 <HAL_SPI_MspInit+0x154>)
 8002666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800266a:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800266c:	4b10      	ldr	r3, [pc, #64]	; (80026b0 <HAL_SPI_MspInit+0x154>)
 800266e:	2200      	movs	r2, #0
 8002670:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002672:	4b0f      	ldr	r3, [pc, #60]	; (80026b0 <HAL_SPI_MspInit+0x154>)
 8002674:	2200      	movs	r2, #0
 8002676:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002678:	480d      	ldr	r0, [pc, #52]	; (80026b0 <HAL_SPI_MspInit+0x154>)
 800267a:	f000 fb0f 	bl	8002c9c <HAL_DMA_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8002684:	f7ff fef4 	bl	8002470 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a09      	ldr	r2, [pc, #36]	; (80026b0 <HAL_SPI_MspInit+0x154>)
 800268c:	649a      	str	r2, [r3, #72]	; 0x48
 800268e:	4a08      	ldr	r2, [pc, #32]	; (80026b0 <HAL_SPI_MspInit+0x154>)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002694:	bf00      	nop
 8002696:	3728      	adds	r7, #40	; 0x28
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	40013000 	.word	0x40013000
 80026a0:	40023800 	.word	0x40023800
 80026a4:	40020000 	.word	0x40020000
 80026a8:	20000430 	.word	0x20000430
 80026ac:	40026410 	.word	0x40026410
 80026b0:	20000490 	.word	0x20000490
 80026b4:	40026458 	.word	0x40026458

080026b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08a      	sub	sp, #40	; 0x28
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c0:	f107 0314 	add.w	r3, r7, #20
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	60da      	str	r2, [r3, #12]
 80026ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a19      	ldr	r2, [pc, #100]	; (800273c <HAL_UART_MspInit+0x84>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d12b      	bne.n	8002732 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	4b18      	ldr	r3, [pc, #96]	; (8002740 <HAL_UART_MspInit+0x88>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	4a17      	ldr	r2, [pc, #92]	; (8002740 <HAL_UART_MspInit+0x88>)
 80026e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026e8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ea:	4b15      	ldr	r3, [pc, #84]	; (8002740 <HAL_UART_MspInit+0x88>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	4b11      	ldr	r3, [pc, #68]	; (8002740 <HAL_UART_MspInit+0x88>)
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	4a10      	ldr	r2, [pc, #64]	; (8002740 <HAL_UART_MspInit+0x88>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6313      	str	r3, [r2, #48]	; 0x30
 8002706:	4b0e      	ldr	r3, [pc, #56]	; (8002740 <HAL_UART_MspInit+0x88>)
 8002708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270a:	f003 0301 	and.w	r3, r3, #1
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002712:	230c      	movs	r3, #12
 8002714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002716:	2302      	movs	r3, #2
 8002718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800271e:	2303      	movs	r3, #3
 8002720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002722:	2307      	movs	r3, #7
 8002724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002726:	f107 0314 	add.w	r3, r7, #20
 800272a:	4619      	mov	r1, r3
 800272c:	4805      	ldr	r0, [pc, #20]	; (8002744 <HAL_UART_MspInit+0x8c>)
 800272e:	f000 fe25 	bl	800337c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002732:	bf00      	nop
 8002734:	3728      	adds	r7, #40	; 0x28
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40004400 	.word	0x40004400
 8002740:	40023800 	.word	0x40023800
 8002744:	40020000 	.word	0x40020000

08002748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002748:	b480      	push	{r7}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800274c:	e7fe      	b.n	800274c <NMI_Handler+0x4>

0800274e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002752:	e7fe      	b.n	8002752 <HardFault_Handler+0x4>

08002754 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002758:	e7fe      	b.n	8002758 <MemManage_Handler+0x4>

0800275a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800275a:	b480      	push	{r7}
 800275c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275e:	e7fe      	b.n	800275e <BusFault_Handler+0x4>

08002760 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002764:	e7fe      	b.n	8002764 <UsageFault_Handler+0x4>

08002766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002794:	f000 f92c 	bl	80029f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}

0800279c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80027a0:	4802      	ldr	r0, [pc, #8]	; (80027ac <DMA2_Stream0_IRQHandler+0x10>)
 80027a2:	f000 fb81 	bl	8002ea8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000430 	.word	0x20000430

080027b0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80027b4:	4802      	ldr	r0, [pc, #8]	; (80027c0 <DMA2_Stream3_IRQHandler+0x10>)
 80027b6:	f000 fb77 	bl	8002ea8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */
//  printf("SPI Transmit\r\n");
  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000490 	.word	0x20000490

080027c4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027d0:	2300      	movs	r3, #0
 80027d2:	617b      	str	r3, [r7, #20]
 80027d4:	e00a      	b.n	80027ec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80027d6:	f3af 8000 	nop.w
 80027da:	4601      	mov	r1, r0
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	1c5a      	adds	r2, r3, #1
 80027e0:	60ba      	str	r2, [r7, #8]
 80027e2:	b2ca      	uxtb	r2, r1
 80027e4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	3301      	adds	r3, #1
 80027ea:	617b      	str	r3, [r7, #20]
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	429a      	cmp	r2, r3
 80027f2:	dbf0      	blt.n	80027d6 <_read+0x12>
	}

return len;
 80027f4:	687b      	ldr	r3, [r7, #4]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3718      	adds	r7, #24
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <_close>:
	}
	return len;
}

int _close(int file)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
	return -1;
 8002806:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002826:	605a      	str	r2, [r3, #4]
	return 0;
 8002828:	2300      	movs	r3, #0
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr

08002836 <_isatty>:

int _isatty(int file)
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
	return 1;
 800283e:	2301      	movs	r3, #1
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	607a      	str	r2, [r7, #4]
	return 0;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3714      	adds	r7, #20
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr
	...

08002868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002870:	4a14      	ldr	r2, [pc, #80]	; (80028c4 <_sbrk+0x5c>)
 8002872:	4b15      	ldr	r3, [pc, #84]	; (80028c8 <_sbrk+0x60>)
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800287c:	4b13      	ldr	r3, [pc, #76]	; (80028cc <_sbrk+0x64>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d102      	bne.n	800288a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <_sbrk+0x64>)
 8002886:	4a12      	ldr	r2, [pc, #72]	; (80028d0 <_sbrk+0x68>)
 8002888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <_sbrk+0x64>)
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	4413      	add	r3, r2
 8002892:	693a      	ldr	r2, [r7, #16]
 8002894:	429a      	cmp	r2, r3
 8002896:	d207      	bcs.n	80028a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002898:	f003 fc2e 	bl	80060f8 <__errno>
 800289c:	4603      	mov	r3, r0
 800289e:	220c      	movs	r2, #12
 80028a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028a6:	e009      	b.n	80028bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028a8:	4b08      	ldr	r3, [pc, #32]	; (80028cc <_sbrk+0x64>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028ae:	4b07      	ldr	r3, [pc, #28]	; (80028cc <_sbrk+0x64>)
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4413      	add	r3, r2
 80028b6:	4a05      	ldr	r2, [pc, #20]	; (80028cc <_sbrk+0x64>)
 80028b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ba:	68fb      	ldr	r3, [r7, #12]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	20020000 	.word	0x20020000
 80028c8:	00000400 	.word	0x00000400
 80028cc:	20000090 	.word	0x20000090
 80028d0:	20000508 	.word	0x20000508

080028d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028d8:	4b06      	ldr	r3, [pc, #24]	; (80028f4 <SystemInit+0x20>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028de:	4a05      	ldr	r2, [pc, #20]	; (80028f4 <SystemInit+0x20>)
 80028e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028e8:	bf00      	nop
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000ed00 	.word	0xe000ed00

080028f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80028f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002930 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028fc:	480d      	ldr	r0, [pc, #52]	; (8002934 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80028fe:	490e      	ldr	r1, [pc, #56]	; (8002938 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002900:	4a0e      	ldr	r2, [pc, #56]	; (800293c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002904:	e002      	b.n	800290c <LoopCopyDataInit>

08002906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800290a:	3304      	adds	r3, #4

0800290c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800290c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800290e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002910:	d3f9      	bcc.n	8002906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002912:	4a0b      	ldr	r2, [pc, #44]	; (8002940 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002914:	4c0b      	ldr	r4, [pc, #44]	; (8002944 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002918:	e001      	b.n	800291e <LoopFillZerobss>

0800291a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800291a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800291c:	3204      	adds	r2, #4

0800291e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800291e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002920:	d3fb      	bcc.n	800291a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002922:	f7ff ffd7 	bl	80028d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002926:	f003 fbed 	bl	8006104 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800292a:	f7ff fa35 	bl	8001d98 <main>
  bx  lr    
 800292e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002930:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002938:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800293c:	08007ad8 	.word	0x08007ad8
  ldr r2, =_sbss
 8002940:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002944:	20000504 	.word	0x20000504

08002948 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002948:	e7fe      	b.n	8002948 <ADC_IRQHandler>
	...

0800294c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002950:	4b0e      	ldr	r3, [pc, #56]	; (800298c <HAL_Init+0x40>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0d      	ldr	r2, [pc, #52]	; (800298c <HAL_Init+0x40>)
 8002956:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800295a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800295c:	4b0b      	ldr	r3, [pc, #44]	; (800298c <HAL_Init+0x40>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a0a      	ldr	r2, [pc, #40]	; (800298c <HAL_Init+0x40>)
 8002962:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002966:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <HAL_Init+0x40>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a07      	ldr	r2, [pc, #28]	; (800298c <HAL_Init+0x40>)
 800296e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002972:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002974:	2003      	movs	r0, #3
 8002976:	f000 f94f 	bl	8002c18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800297a:	2000      	movs	r0, #0
 800297c:	f000 f808 	bl	8002990 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002980:	f7ff fd7c 	bl	800247c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002984:	2300      	movs	r3, #0
}
 8002986:	4618      	mov	r0, r3
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023c00 	.word	0x40023c00

08002990 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <HAL_InitTick+0x54>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b12      	ldr	r3, [pc, #72]	; (80029e8 <HAL_InitTick+0x58>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80029aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 f967 	bl	8002c82 <HAL_SYSTICK_Config>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e00e      	b.n	80029dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b0f      	cmp	r3, #15
 80029c2:	d80a      	bhi.n	80029da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c4:	2200      	movs	r2, #0
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029cc:	f000 f92f 	bl	8002c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d0:	4a06      	ldr	r2, [pc, #24]	; (80029ec <HAL_InitTick+0x5c>)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	e000      	b.n	80029dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3708      	adds	r7, #8
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	20000000 	.word	0x20000000
 80029e8:	20000008 	.word	0x20000008
 80029ec:	20000004 	.word	0x20000004

080029f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f4:	4b06      	ldr	r3, [pc, #24]	; (8002a10 <HAL_IncTick+0x20>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	461a      	mov	r2, r3
 80029fa:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HAL_IncTick+0x24>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4413      	add	r3, r2
 8002a00:	4a04      	ldr	r2, [pc, #16]	; (8002a14 <HAL_IncTick+0x24>)
 8002a02:	6013      	str	r3, [r2, #0]
}
 8002a04:	bf00      	nop
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	20000008 	.word	0x20000008
 8002a14:	200004f0 	.word	0x200004f0

08002a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <HAL_GetTick+0x14>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	200004f0 	.word	0x200004f0

08002a30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a38:	f7ff ffee 	bl	8002a18 <HAL_GetTick>
 8002a3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a48:	d005      	beq.n	8002a56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a4a:	4b0a      	ldr	r3, [pc, #40]	; (8002a74 <HAL_Delay+0x44>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4413      	add	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a56:	bf00      	nop
 8002a58:	f7ff ffde 	bl	8002a18 <HAL_GetTick>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	1ad3      	subs	r3, r2, r3
 8002a62:	68fa      	ldr	r2, [r7, #12]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d8f7      	bhi.n	8002a58 <HAL_Delay+0x28>
  {
  }
}
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	3710      	adds	r7, #16
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	20000008 	.word	0x20000008

08002a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a88:	4b0c      	ldr	r3, [pc, #48]	; (8002abc <__NVIC_SetPriorityGrouping+0x44>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a94:	4013      	ands	r3, r2
 8002a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aaa:	4a04      	ldr	r2, [pc, #16]	; (8002abc <__NVIC_SetPriorityGrouping+0x44>)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	60d3      	str	r3, [r2, #12]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac4:	4b04      	ldr	r3, [pc, #16]	; (8002ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	0a1b      	lsrs	r3, r3, #8
 8002aca:	f003 0307 	and.w	r3, r3, #7
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	db0b      	blt.n	8002b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	f003 021f 	and.w	r2, r3, #31
 8002af4:	4907      	ldr	r1, [pc, #28]	; (8002b14 <__NVIC_EnableIRQ+0x38>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	2001      	movs	r0, #1
 8002afe:	fa00 f202 	lsl.w	r2, r0, r2
 8002b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	e000e100 	.word	0xe000e100

08002b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	6039      	str	r1, [r7, #0]
 8002b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	db0a      	blt.n	8002b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	490c      	ldr	r1, [pc, #48]	; (8002b64 <__NVIC_SetPriority+0x4c>)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	0112      	lsls	r2, r2, #4
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b40:	e00a      	b.n	8002b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	4908      	ldr	r1, [pc, #32]	; (8002b68 <__NVIC_SetPriority+0x50>)
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	3b04      	subs	r3, #4
 8002b50:	0112      	lsls	r2, r2, #4
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	440b      	add	r3, r1
 8002b56:	761a      	strb	r2, [r3, #24]
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000e100 	.word	0xe000e100
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b089      	sub	sp, #36	; 0x24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f1c3 0307 	rsb	r3, r3, #7
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	bf28      	it	cs
 8002b8a:	2304      	movcs	r3, #4
 8002b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3304      	adds	r3, #4
 8002b92:	2b06      	cmp	r3, #6
 8002b94:	d902      	bls.n	8002b9c <NVIC_EncodePriority+0x30>
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3b03      	subs	r3, #3
 8002b9a:	e000      	b.n	8002b9e <NVIC_EncodePriority+0x32>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43da      	mvns	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	401a      	ands	r2, r3
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	43d9      	mvns	r1, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc4:	4313      	orrs	r3, r2
         );
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3724      	adds	r7, #36	; 0x24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002be4:	d301      	bcc.n	8002bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002be6:	2301      	movs	r3, #1
 8002be8:	e00f      	b.n	8002c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bea:	4a0a      	ldr	r2, [pc, #40]	; (8002c14 <SysTick_Config+0x40>)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf2:	210f      	movs	r1, #15
 8002bf4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002bf8:	f7ff ff8e 	bl	8002b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bfc:	4b05      	ldr	r3, [pc, #20]	; (8002c14 <SysTick_Config+0x40>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c02:	4b04      	ldr	r3, [pc, #16]	; (8002c14 <SysTick_Config+0x40>)
 8002c04:	2207      	movs	r2, #7
 8002c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	e000e010 	.word	0xe000e010

08002c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ff29 	bl	8002a78 <__NVIC_SetPriorityGrouping>
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b086      	sub	sp, #24
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4603      	mov	r3, r0
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c40:	f7ff ff3e 	bl	8002ac0 <__NVIC_GetPriorityGrouping>
 8002c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	6978      	ldr	r0, [r7, #20]
 8002c4c:	f7ff ff8e 	bl	8002b6c <NVIC_EncodePriority>
 8002c50:	4602      	mov	r2, r0
 8002c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c56:	4611      	mov	r1, r2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff5d 	bl	8002b18 <__NVIC_SetPriority>
}
 8002c5e:	bf00      	nop
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff ff31 	bl	8002adc <__NVIC_EnableIRQ>
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff ffa2 	bl	8002bd4 <SysTick_Config>
 8002c90:	4603      	mov	r3, r0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b086      	sub	sp, #24
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ca8:	f7ff feb6 	bl	8002a18 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d101      	bne.n	8002cb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e099      	b.n	8002dec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2202      	movs	r2, #2
 8002cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0201 	bic.w	r2, r2, #1
 8002cd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd8:	e00f      	b.n	8002cfa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cda:	f7ff fe9d 	bl	8002a18 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b05      	cmp	r3, #5
 8002ce6:	d908      	bls.n	8002cfa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2220      	movs	r2, #32
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e078      	b.n	8002dec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e8      	bne.n	8002cda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	4b38      	ldr	r3, [pc, #224]	; (8002df4 <HAL_DMA_Init+0x158>)
 8002d14:	4013      	ands	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685a      	ldr	r2, [r3, #4]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	691b      	ldr	r3, [r3, #16]
 8002d2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a1b      	ldr	r3, [r3, #32]
 8002d44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	2b04      	cmp	r3, #4
 8002d52:	d107      	bne.n	8002d64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	697a      	ldr	r2, [r7, #20]
 8002d6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f023 0307 	bic.w	r3, r3, #7
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8a:	2b04      	cmp	r3, #4
 8002d8c:	d117      	bne.n	8002dbe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d92:	697a      	ldr	r2, [r7, #20]
 8002d94:	4313      	orrs	r3, r2
 8002d96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00e      	beq.n	8002dbe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	f000 fa6f 	bl	8003284 <DMA_CheckFifoParam>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d008      	beq.n	8002dbe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2240      	movs	r2, #64	; 0x40
 8002db0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2201      	movs	r2, #1
 8002db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e016      	b.n	8002dec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 fa26 	bl	8003218 <DMA_CalcBaseAndBitshift>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd4:	223f      	movs	r2, #63	; 0x3f
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2201      	movs	r2, #1
 8002de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	f010803f 	.word	0xf010803f

08002df8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
 8002e04:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e06:	2300      	movs	r3, #0
 8002e08:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d101      	bne.n	8002e1e <HAL_DMA_Start_IT+0x26>
 8002e1a:	2302      	movs	r3, #2
 8002e1c:	e040      	b.n	8002ea0 <HAL_DMA_Start_IT+0xa8>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d12f      	bne.n	8002e92 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	2202      	movs	r2, #2
 8002e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f9b8 	bl	80031bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e50:	223f      	movs	r2, #63	; 0x3f
 8002e52:	409a      	lsls	r2, r3
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0216 	orr.w	r2, r2, #22
 8002e66:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d007      	beq.n	8002e80 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f042 0208 	orr.w	r2, r2, #8
 8002e7e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681a      	ldr	r2, [r3, #0]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f042 0201 	orr.w	r2, r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
 8002e90:	e005      	b.n	8002e9e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3718      	adds	r7, #24
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b086      	sub	sp, #24
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002eb4:	4b92      	ldr	r3, [pc, #584]	; (8003100 <HAL_DMA_IRQHandler+0x258>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a92      	ldr	r2, [pc, #584]	; (8003104 <HAL_DMA_IRQHandler+0x25c>)
 8002eba:	fba2 2303 	umull	r2, r3, r2, r3
 8002ebe:	0a9b      	lsrs	r3, r3, #10
 8002ec0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ec6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed2:	2208      	movs	r2, #8
 8002ed4:	409a      	lsls	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d01a      	beq.n	8002f14 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d013      	beq.n	8002f14 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f022 0204 	bic.w	r2, r2, #4
 8002efa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f00:	2208      	movs	r2, #8
 8002f02:	409a      	lsls	r2, r3
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0c:	f043 0201 	orr.w	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f18:	2201      	movs	r2, #1
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d012      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00b      	beq.n	8002f4a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	2201      	movs	r2, #1
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f42:	f043 0202 	orr.w	r2, r3, #2
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4e:	2204      	movs	r2, #4
 8002f50:	409a      	lsls	r2, r3
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d012      	beq.n	8002f80 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0302 	and.w	r3, r3, #2
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00b      	beq.n	8002f80 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f78:	f043 0204 	orr.w	r2, r3, #4
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f84:	2210      	movs	r2, #16
 8002f86:	409a      	lsls	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d043      	beq.n	8003018 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d03c      	beq.n	8003018 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa2:	2210      	movs	r2, #16
 8002fa4:	409a      	lsls	r2, r3
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d018      	beq.n	8002fea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d108      	bne.n	8002fd8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d024      	beq.n	8003018 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	4798      	blx	r3
 8002fd6:	e01f      	b.n	8003018 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d01b      	beq.n	8003018 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	4798      	blx	r3
 8002fe8:	e016      	b.n	8003018 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d107      	bne.n	8003008 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0208 	bic.w	r2, r2, #8
 8003006:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300c:	2b00      	cmp	r3, #0
 800300e:	d003      	beq.n	8003018 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800301c:	2220      	movs	r2, #32
 800301e:	409a      	lsls	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4013      	ands	r3, r2
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 808e 	beq.w	8003146 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b00      	cmp	r3, #0
 8003036:	f000 8086 	beq.w	8003146 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303e:	2220      	movs	r2, #32
 8003040:	409a      	lsls	r2, r3
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b05      	cmp	r3, #5
 8003050:	d136      	bne.n	80030c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 0216 	bic.w	r2, r2, #22
 8003060:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	695a      	ldr	r2, [r3, #20]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003070:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	2b00      	cmp	r3, #0
 8003078:	d103      	bne.n	8003082 <HAL_DMA_IRQHandler+0x1da>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0208 	bic.w	r2, r2, #8
 8003090:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003096:	223f      	movs	r2, #63	; 0x3f
 8003098:	409a      	lsls	r2, r3
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d07d      	beq.n	80031b2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	4798      	blx	r3
        }
        return;
 80030be:	e078      	b.n	80031b2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d01c      	beq.n	8003108 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d108      	bne.n	80030ee <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d030      	beq.n	8003146 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	4798      	blx	r3
 80030ec:	e02b      	b.n	8003146 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d027      	beq.n	8003146 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	4798      	blx	r3
 80030fe:	e022      	b.n	8003146 <HAL_DMA_IRQHandler+0x29e>
 8003100:	20000000 	.word	0x20000000
 8003104:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10f      	bne.n	8003136 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f022 0210 	bic.w	r2, r2, #16
 8003124:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2201      	movs	r2, #1
 8003132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314a:	2b00      	cmp	r3, #0
 800314c:	d032      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	f003 0301 	and.w	r3, r3, #1
 8003156:	2b00      	cmp	r3, #0
 8003158:	d022      	beq.n	80031a0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2205      	movs	r2, #5
 800315e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 0201 	bic.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	3301      	adds	r3, #1
 8003176:	60bb      	str	r3, [r7, #8]
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	429a      	cmp	r2, r3
 800317c:	d307      	bcc.n	800318e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f2      	bne.n	8003172 <HAL_DMA_IRQHandler+0x2ca>
 800318c:	e000      	b.n	8003190 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800318e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d005      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	4798      	blx	r3
 80031b0:	e000      	b.n	80031b4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80031b2:	bf00      	nop
    }
  }
}
 80031b4:	3718      	adds	r7, #24
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop

080031bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80031bc:	b480      	push	{r7}
 80031be:	b085      	sub	sp, #20
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	683a      	ldr	r2, [r7, #0]
 80031e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	2b40      	cmp	r3, #64	; 0x40
 80031e8:	d108      	bne.n	80031fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80031fa:	e007      	b.n	800320c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	687a      	ldr	r2, [r7, #4]
 800320a:	60da      	str	r2, [r3, #12]
}
 800320c:	bf00      	nop
 800320e:	3714      	adds	r7, #20
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	3b10      	subs	r3, #16
 8003228:	4a14      	ldr	r2, [pc, #80]	; (800327c <DMA_CalcBaseAndBitshift+0x64>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	091b      	lsrs	r3, r3, #4
 8003230:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003232:	4a13      	ldr	r2, [pc, #76]	; (8003280 <DMA_CalcBaseAndBitshift+0x68>)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4413      	add	r3, r2
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	461a      	mov	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b03      	cmp	r3, #3
 8003244:	d909      	bls.n	800325a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800324e:	f023 0303 	bic.w	r3, r3, #3
 8003252:	1d1a      	adds	r2, r3, #4
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	659a      	str	r2, [r3, #88]	; 0x58
 8003258:	e007      	b.n	800326a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003262:	f023 0303 	bic.w	r3, r3, #3
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800326e:	4618      	mov	r0, r3
 8003270:	3714      	adds	r7, #20
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	aaaaaaab 	.word	0xaaaaaaab
 8003280:	080079b4 	.word	0x080079b4

08003284 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800328c:	2300      	movs	r3, #0
 800328e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003294:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d11f      	bne.n	80032de <DMA_CheckFifoParam+0x5a>
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	2b03      	cmp	r3, #3
 80032a2:	d856      	bhi.n	8003352 <DMA_CheckFifoParam+0xce>
 80032a4:	a201      	add	r2, pc, #4	; (adr r2, 80032ac <DMA_CheckFifoParam+0x28>)
 80032a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032aa:	bf00      	nop
 80032ac:	080032bd 	.word	0x080032bd
 80032b0:	080032cf 	.word	0x080032cf
 80032b4:	080032bd 	.word	0x080032bd
 80032b8:	08003353 	.word	0x08003353
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d046      	beq.n	8003356 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032cc:	e043      	b.n	8003356 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032d6:	d140      	bne.n	800335a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032dc:	e03d      	b.n	800335a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032e6:	d121      	bne.n	800332c <DMA_CheckFifoParam+0xa8>
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	2b03      	cmp	r3, #3
 80032ec:	d837      	bhi.n	800335e <DMA_CheckFifoParam+0xda>
 80032ee:	a201      	add	r2, pc, #4	; (adr r2, 80032f4 <DMA_CheckFifoParam+0x70>)
 80032f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f4:	08003305 	.word	0x08003305
 80032f8:	0800330b 	.word	0x0800330b
 80032fc:	08003305 	.word	0x08003305
 8003300:	0800331d 	.word	0x0800331d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	73fb      	strb	r3, [r7, #15]
      break;
 8003308:	e030      	b.n	800336c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800330e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d025      	beq.n	8003362 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800331a:	e022      	b.n	8003362 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003320:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003324:	d11f      	bne.n	8003366 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800332a:	e01c      	b.n	8003366 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	2b02      	cmp	r3, #2
 8003330:	d903      	bls.n	800333a <DMA_CheckFifoParam+0xb6>
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	2b03      	cmp	r3, #3
 8003336:	d003      	beq.n	8003340 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003338:	e018      	b.n	800336c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	73fb      	strb	r3, [r7, #15]
      break;
 800333e:	e015      	b.n	800336c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003344:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d00e      	beq.n	800336a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	73fb      	strb	r3, [r7, #15]
      break;
 8003350:	e00b      	b.n	800336a <DMA_CheckFifoParam+0xe6>
      break;
 8003352:	bf00      	nop
 8003354:	e00a      	b.n	800336c <DMA_CheckFifoParam+0xe8>
      break;
 8003356:	bf00      	nop
 8003358:	e008      	b.n	800336c <DMA_CheckFifoParam+0xe8>
      break;
 800335a:	bf00      	nop
 800335c:	e006      	b.n	800336c <DMA_CheckFifoParam+0xe8>
      break;
 800335e:	bf00      	nop
 8003360:	e004      	b.n	800336c <DMA_CheckFifoParam+0xe8>
      break;
 8003362:	bf00      	nop
 8003364:	e002      	b.n	800336c <DMA_CheckFifoParam+0xe8>
      break;   
 8003366:	bf00      	nop
 8003368:	e000      	b.n	800336c <DMA_CheckFifoParam+0xe8>
      break;
 800336a:	bf00      	nop
    }
  } 
  
  return status; 
 800336c:	7bfb      	ldrb	r3, [r7, #15]
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop

0800337c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800337c:	b480      	push	{r7}
 800337e:	b089      	sub	sp, #36	; 0x24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800338e:	2300      	movs	r3, #0
 8003390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
 8003396:	e165      	b.n	8003664 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003398:	2201      	movs	r2, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	f040 8154 	bne.w	800365e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d005      	beq.n	80033ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d130      	bne.n	8003430 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	2203      	movs	r2, #3
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003404:	2201      	movs	r2, #1
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 0201 	and.w	r2, r3, #1
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	2b03      	cmp	r3, #3
 800343a:	d017      	beq.n	800346c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2203      	movs	r2, #3
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d123      	bne.n	80034c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	08da      	lsrs	r2, r3, #3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3208      	adds	r2, #8
 8003480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003484:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	220f      	movs	r2, #15
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	08da      	lsrs	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3208      	adds	r2, #8
 80034ba:	69b9      	ldr	r1, [r7, #24]
 80034bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2203      	movs	r2, #3
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0203 	and.w	r2, r3, #3
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80ae 	beq.w	800365e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	4b5d      	ldr	r3, [pc, #372]	; (800367c <HAL_GPIO_Init+0x300>)
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	4a5c      	ldr	r2, [pc, #368]	; (800367c <HAL_GPIO_Init+0x300>)
 800350c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003510:	6453      	str	r3, [r2, #68]	; 0x44
 8003512:	4b5a      	ldr	r3, [pc, #360]	; (800367c <HAL_GPIO_Init+0x300>)
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800351e:	4a58      	ldr	r2, [pc, #352]	; (8003680 <HAL_GPIO_Init+0x304>)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	3302      	adds	r3, #2
 8003526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	220f      	movs	r2, #15
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a4f      	ldr	r2, [pc, #316]	; (8003684 <HAL_GPIO_Init+0x308>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d025      	beq.n	8003596 <HAL_GPIO_Init+0x21a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a4e      	ldr	r2, [pc, #312]	; (8003688 <HAL_GPIO_Init+0x30c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d01f      	beq.n	8003592 <HAL_GPIO_Init+0x216>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a4d      	ldr	r2, [pc, #308]	; (800368c <HAL_GPIO_Init+0x310>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d019      	beq.n	800358e <HAL_GPIO_Init+0x212>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a4c      	ldr	r2, [pc, #304]	; (8003690 <HAL_GPIO_Init+0x314>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d013      	beq.n	800358a <HAL_GPIO_Init+0x20e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a4b      	ldr	r2, [pc, #300]	; (8003694 <HAL_GPIO_Init+0x318>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00d      	beq.n	8003586 <HAL_GPIO_Init+0x20a>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a4a      	ldr	r2, [pc, #296]	; (8003698 <HAL_GPIO_Init+0x31c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d007      	beq.n	8003582 <HAL_GPIO_Init+0x206>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a49      	ldr	r2, [pc, #292]	; (800369c <HAL_GPIO_Init+0x320>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d101      	bne.n	800357e <HAL_GPIO_Init+0x202>
 800357a:	2306      	movs	r3, #6
 800357c:	e00c      	b.n	8003598 <HAL_GPIO_Init+0x21c>
 800357e:	2307      	movs	r3, #7
 8003580:	e00a      	b.n	8003598 <HAL_GPIO_Init+0x21c>
 8003582:	2305      	movs	r3, #5
 8003584:	e008      	b.n	8003598 <HAL_GPIO_Init+0x21c>
 8003586:	2304      	movs	r3, #4
 8003588:	e006      	b.n	8003598 <HAL_GPIO_Init+0x21c>
 800358a:	2303      	movs	r3, #3
 800358c:	e004      	b.n	8003598 <HAL_GPIO_Init+0x21c>
 800358e:	2302      	movs	r3, #2
 8003590:	e002      	b.n	8003598 <HAL_GPIO_Init+0x21c>
 8003592:	2301      	movs	r3, #1
 8003594:	e000      	b.n	8003598 <HAL_GPIO_Init+0x21c>
 8003596:	2300      	movs	r3, #0
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	f002 0203 	and.w	r2, r2, #3
 800359e:	0092      	lsls	r2, r2, #2
 80035a0:	4093      	lsls	r3, r2
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035a8:	4935      	ldr	r1, [pc, #212]	; (8003680 <HAL_GPIO_Init+0x304>)
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	089b      	lsrs	r3, r3, #2
 80035ae:	3302      	adds	r3, #2
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035b6:	4b3a      	ldr	r3, [pc, #232]	; (80036a0 <HAL_GPIO_Init+0x324>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	43db      	mvns	r3, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4013      	ands	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d003      	beq.n	80035da <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035da:	4a31      	ldr	r2, [pc, #196]	; (80036a0 <HAL_GPIO_Init+0x324>)
 80035dc:	69bb      	ldr	r3, [r7, #24]
 80035de:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80035e0:	4b2f      	ldr	r3, [pc, #188]	; (80036a0 <HAL_GPIO_Init+0x324>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d003      	beq.n	8003604 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003604:	4a26      	ldr	r2, [pc, #152]	; (80036a0 <HAL_GPIO_Init+0x324>)
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800360a:	4b25      	ldr	r3, [pc, #148]	; (80036a0 <HAL_GPIO_Init+0x324>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	43db      	mvns	r3, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4013      	ands	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800362e:	4a1c      	ldr	r2, [pc, #112]	; (80036a0 <HAL_GPIO_Init+0x324>)
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003634:	4b1a      	ldr	r3, [pc, #104]	; (80036a0 <HAL_GPIO_Init+0x324>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003658:	4a11      	ldr	r2, [pc, #68]	; (80036a0 <HAL_GPIO_Init+0x324>)
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3301      	adds	r3, #1
 8003662:	61fb      	str	r3, [r7, #28]
 8003664:	69fb      	ldr	r3, [r7, #28]
 8003666:	2b0f      	cmp	r3, #15
 8003668:	f67f ae96 	bls.w	8003398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800366c:	bf00      	nop
 800366e:	bf00      	nop
 8003670:	3724      	adds	r7, #36	; 0x24
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40023800 	.word	0x40023800
 8003680:	40013800 	.word	0x40013800
 8003684:	40020000 	.word	0x40020000
 8003688:	40020400 	.word	0x40020400
 800368c:	40020800 	.word	0x40020800
 8003690:	40020c00 	.word	0x40020c00
 8003694:	40021000 	.word	0x40021000
 8003698:	40021400 	.word	0x40021400
 800369c:	40021800 	.word	0x40021800
 80036a0:	40013c00 	.word	0x40013c00

080036a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	807b      	strh	r3, [r7, #2]
 80036b0:	4613      	mov	r3, r2
 80036b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036b4:	787b      	ldrb	r3, [r7, #1]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ba:	887a      	ldrh	r2, [r7, #2]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036c0:	e003      	b.n	80036ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036c2:	887b      	ldrh	r3, [r7, #2]
 80036c4:	041a      	lsls	r2, r3, #16
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	619a      	str	r2, [r3, #24]
}
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
	...

080036d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e12b      	b.n	8003942 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d106      	bne.n	8003704 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f7fe fee4 	bl	80024cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2224      	movs	r2, #36	; 0x24
 8003708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0201 	bic.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800372a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800373a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800373c:	f001 f9ac 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 8003740:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	4a81      	ldr	r2, [pc, #516]	; (800394c <HAL_I2C_Init+0x274>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d807      	bhi.n	800375c <HAL_I2C_Init+0x84>
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	4a80      	ldr	r2, [pc, #512]	; (8003950 <HAL_I2C_Init+0x278>)
 8003750:	4293      	cmp	r3, r2
 8003752:	bf94      	ite	ls
 8003754:	2301      	movls	r3, #1
 8003756:	2300      	movhi	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	e006      	b.n	800376a <HAL_I2C_Init+0x92>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a7d      	ldr	r2, [pc, #500]	; (8003954 <HAL_I2C_Init+0x27c>)
 8003760:	4293      	cmp	r3, r2
 8003762:	bf94      	ite	ls
 8003764:	2301      	movls	r3, #1
 8003766:	2300      	movhi	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	2b00      	cmp	r3, #0
 800376c:	d001      	beq.n	8003772 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e0e7      	b.n	8003942 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	4a78      	ldr	r2, [pc, #480]	; (8003958 <HAL_I2C_Init+0x280>)
 8003776:	fba2 2303 	umull	r2, r3, r2, r3
 800377a:	0c9b      	lsrs	r3, r3, #18
 800377c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68ba      	ldr	r2, [r7, #8]
 800378e:	430a      	orrs	r2, r1
 8003790:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	4a6a      	ldr	r2, [pc, #424]	; (800394c <HAL_I2C_Init+0x274>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d802      	bhi.n	80037ac <HAL_I2C_Init+0xd4>
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	3301      	adds	r3, #1
 80037aa:	e009      	b.n	80037c0 <HAL_I2C_Init+0xe8>
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037b2:	fb02 f303 	mul.w	r3, r2, r3
 80037b6:	4a69      	ldr	r2, [pc, #420]	; (800395c <HAL_I2C_Init+0x284>)
 80037b8:	fba2 2303 	umull	r2, r3, r2, r3
 80037bc:	099b      	lsrs	r3, r3, #6
 80037be:	3301      	adds	r3, #1
 80037c0:	687a      	ldr	r2, [r7, #4]
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	430b      	orrs	r3, r1
 80037c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	69db      	ldr	r3, [r3, #28]
 80037ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	495c      	ldr	r1, [pc, #368]	; (800394c <HAL_I2C_Init+0x274>)
 80037dc:	428b      	cmp	r3, r1
 80037de:	d819      	bhi.n	8003814 <HAL_I2C_Init+0x13c>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	1e59      	subs	r1, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80037ee:	1c59      	adds	r1, r3, #1
 80037f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80037f4:	400b      	ands	r3, r1
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HAL_I2C_Init+0x138>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1e59      	subs	r1, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	fbb1 f3f3 	udiv	r3, r1, r3
 8003808:	3301      	adds	r3, #1
 800380a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800380e:	e051      	b.n	80038b4 <HAL_I2C_Init+0x1dc>
 8003810:	2304      	movs	r3, #4
 8003812:	e04f      	b.n	80038b4 <HAL_I2C_Init+0x1dc>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d111      	bne.n	8003840 <HAL_I2C_Init+0x168>
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	1e58      	subs	r0, r3, #1
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6859      	ldr	r1, [r3, #4]
 8003824:	460b      	mov	r3, r1
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	440b      	add	r3, r1
 800382a:	fbb0 f3f3 	udiv	r3, r0, r3
 800382e:	3301      	adds	r3, #1
 8003830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003834:	2b00      	cmp	r3, #0
 8003836:	bf0c      	ite	eq
 8003838:	2301      	moveq	r3, #1
 800383a:	2300      	movne	r3, #0
 800383c:	b2db      	uxtb	r3, r3
 800383e:	e012      	b.n	8003866 <HAL_I2C_Init+0x18e>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1e58      	subs	r0, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6859      	ldr	r1, [r3, #4]
 8003848:	460b      	mov	r3, r1
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	0099      	lsls	r1, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	fbb0 f3f3 	udiv	r3, r0, r3
 8003856:	3301      	adds	r3, #1
 8003858:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800385c:	2b00      	cmp	r3, #0
 800385e:	bf0c      	ite	eq
 8003860:	2301      	moveq	r3, #1
 8003862:	2300      	movne	r3, #0
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d001      	beq.n	800386e <HAL_I2C_Init+0x196>
 800386a:	2301      	movs	r3, #1
 800386c:	e022      	b.n	80038b4 <HAL_I2C_Init+0x1dc>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10e      	bne.n	8003894 <HAL_I2C_Init+0x1bc>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1e58      	subs	r0, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6859      	ldr	r1, [r3, #4]
 800387e:	460b      	mov	r3, r1
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	440b      	add	r3, r1
 8003884:	fbb0 f3f3 	udiv	r3, r0, r3
 8003888:	3301      	adds	r3, #1
 800388a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003892:	e00f      	b.n	80038b4 <HAL_I2C_Init+0x1dc>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1e58      	subs	r0, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6859      	ldr	r1, [r3, #4]
 800389c:	460b      	mov	r3, r1
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	0099      	lsls	r1, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038aa:	3301      	adds	r3, #1
 80038ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	6809      	ldr	r1, [r1, #0]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69da      	ldr	r2, [r3, #28]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6a1b      	ldr	r3, [r3, #32]
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	430a      	orrs	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038e2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038e6:	687a      	ldr	r2, [r7, #4]
 80038e8:	6911      	ldr	r1, [r2, #16]
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	68d2      	ldr	r2, [r2, #12]
 80038ee:	4311      	orrs	r1, r2
 80038f0:	687a      	ldr	r2, [r7, #4]
 80038f2:	6812      	ldr	r2, [r2, #0]
 80038f4:	430b      	orrs	r3, r1
 80038f6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695a      	ldr	r2, [r3, #20]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681a      	ldr	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f042 0201 	orr.w	r2, r2, #1
 8003922:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	000186a0 	.word	0x000186a0
 8003950:	001e847f 	.word	0x001e847f
 8003954:	003d08ff 	.word	0x003d08ff
 8003958:	431bde83 	.word	0x431bde83
 800395c:	10624dd3 	.word	0x10624dd3

08003960 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b088      	sub	sp, #32
 8003964:	af02      	add	r7, sp, #8
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	4608      	mov	r0, r1
 800396a:	4611      	mov	r1, r2
 800396c:	461a      	mov	r2, r3
 800396e:	4603      	mov	r3, r0
 8003970:	817b      	strh	r3, [r7, #10]
 8003972:	460b      	mov	r3, r1
 8003974:	813b      	strh	r3, [r7, #8]
 8003976:	4613      	mov	r3, r2
 8003978:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800397a:	f7ff f84d 	bl	8002a18 <HAL_GetTick>
 800397e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b20      	cmp	r3, #32
 800398a:	f040 80d9 	bne.w	8003b40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	9300      	str	r3, [sp, #0]
 8003992:	2319      	movs	r3, #25
 8003994:	2201      	movs	r2, #1
 8003996:	496d      	ldr	r1, [pc, #436]	; (8003b4c <HAL_I2C_Mem_Write+0x1ec>)
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 fdad 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80039a4:	2302      	movs	r3, #2
 80039a6:	e0cc      	b.n	8003b42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d101      	bne.n	80039b6 <HAL_I2C_Mem_Write+0x56>
 80039b2:	2302      	movs	r3, #2
 80039b4:	e0c5      	b.n	8003b42 <HAL_I2C_Mem_Write+0x1e2>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d007      	beq.n	80039dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0201 	orr.w	r2, r2, #1
 80039da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2221      	movs	r2, #33	; 0x21
 80039f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2240      	movs	r2, #64	; 0x40
 80039f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2200      	movs	r2, #0
 8003a00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6a3a      	ldr	r2, [r7, #32]
 8003a06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	4a4d      	ldr	r2, [pc, #308]	; (8003b50 <HAL_I2C_Mem_Write+0x1f0>)
 8003a1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a1e:	88f8      	ldrh	r0, [r7, #6]
 8003a20:	893a      	ldrh	r2, [r7, #8]
 8003a22:	8979      	ldrh	r1, [r7, #10]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	9301      	str	r3, [sp, #4]
 8003a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 fbe4 	bl	80041fc <I2C_RequestMemoryWrite>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d052      	beq.n	8003ae0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e081      	b.n	8003b42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a3e:	697a      	ldr	r2, [r7, #20]
 8003a40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 fe2e 	bl	80046a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00d      	beq.n	8003a6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	2b04      	cmp	r3, #4
 8003a54:	d107      	bne.n	8003a66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e06b      	b.n	8003b42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	781a      	ldrb	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a84:	3b01      	subs	r3, #1
 8003a86:	b29a      	uxth	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	f003 0304 	and.w	r3, r3, #4
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d11b      	bne.n	8003ae0 <HAL_I2C_Mem_Write+0x180>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d017      	beq.n	8003ae0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	781a      	ldrb	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	1c5a      	adds	r2, r3, #1
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aca:	3b01      	subs	r3, #1
 8003acc:	b29a      	uxth	r2, r3
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d1aa      	bne.n	8003a3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ae8:	697a      	ldr	r2, [r7, #20]
 8003aea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003aec:	68f8      	ldr	r0, [r7, #12]
 8003aee:	f000 fe1a 	bl	8004726 <I2C_WaitOnBTFFlagUntilTimeout>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00d      	beq.n	8003b14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d107      	bne.n	8003b10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	e016      	b.n	8003b42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2220      	movs	r2, #32
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	e000      	b.n	8003b42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b40:	2302      	movs	r3, #2
  }
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	00100002 	.word	0x00100002
 8003b50:	ffff0000 	.word	0xffff0000

08003b54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b08c      	sub	sp, #48	; 0x30
 8003b58:	af02      	add	r7, sp, #8
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	4608      	mov	r0, r1
 8003b5e:	4611      	mov	r1, r2
 8003b60:	461a      	mov	r2, r3
 8003b62:	4603      	mov	r3, r0
 8003b64:	817b      	strh	r3, [r7, #10]
 8003b66:	460b      	mov	r3, r1
 8003b68:	813b      	strh	r3, [r7, #8]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b6e:	f7fe ff53 	bl	8002a18 <HAL_GetTick>
 8003b72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b7a:	b2db      	uxtb	r3, r3
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	f040 8208 	bne.w	8003f92 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	9300      	str	r3, [sp, #0]
 8003b86:	2319      	movs	r3, #25
 8003b88:	2201      	movs	r2, #1
 8003b8a:	497b      	ldr	r1, [pc, #492]	; (8003d78 <HAL_I2C_Mem_Read+0x224>)
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 fcb3 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e1fb      	b.n	8003f94 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_I2C_Mem_Read+0x56>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e1f4      	b.n	8003f94 <HAL_I2C_Mem_Read+0x440>
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b01      	cmp	r3, #1
 8003bbe:	d007      	beq.n	8003bd0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0201 	orr.w	r2, r2, #1
 8003bce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003bde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2222      	movs	r2, #34	; 0x22
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2240      	movs	r2, #64	; 0x40
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003bfa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003c00:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a5b      	ldr	r2, [pc, #364]	; (8003d7c <HAL_I2C_Mem_Read+0x228>)
 8003c10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003c12:	88f8      	ldrh	r0, [r7, #6]
 8003c14:	893a      	ldrh	r2, [r7, #8]
 8003c16:	8979      	ldrh	r1, [r7, #10]
 8003c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1a:	9301      	str	r3, [sp, #4]
 8003c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	4603      	mov	r3, r0
 8003c22:	68f8      	ldr	r0, [r7, #12]
 8003c24:	f000 fb80 	bl	8004328 <I2C_RequestMemoryRead>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d001      	beq.n	8003c32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	e1b0      	b.n	8003f94 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d113      	bne.n	8003c62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	623b      	str	r3, [r7, #32]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	623b      	str	r3, [r7, #32]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	623b      	str	r3, [r7, #32]
 8003c4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	e184      	b.n	8003f6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d11b      	bne.n	8003ca2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	61fb      	str	r3, [r7, #28]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695b      	ldr	r3, [r3, #20]
 8003c84:	61fb      	str	r3, [r7, #28]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	e164      	b.n	8003f6c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d11b      	bne.n	8003ce2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61bb      	str	r3, [r7, #24]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	61bb      	str	r3, [r7, #24]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	61bb      	str	r3, [r7, #24]
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	e144      	b.n	8003f6c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	617b      	str	r3, [r7, #20]
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	695b      	ldr	r3, [r3, #20]
 8003cec:	617b      	str	r3, [r7, #20]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	699b      	ldr	r3, [r3, #24]
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003cf8:	e138      	b.n	8003f6c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cfe:	2b03      	cmp	r3, #3
 8003d00:	f200 80f1 	bhi.w	8003ee6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d123      	bne.n	8003d54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d0e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f000 fd49 	bl	80047a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e139      	b.n	8003f94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691a      	ldr	r2, [r3, #16]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2a:	b2d2      	uxtb	r2, r2
 8003d2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	1c5a      	adds	r2, r3, #1
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d52:	e10b      	b.n	8003f6c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d14e      	bne.n	8003dfa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d5e:	9300      	str	r3, [sp, #0]
 8003d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d62:	2200      	movs	r2, #0
 8003d64:	4906      	ldr	r1, [pc, #24]	; (8003d80 <HAL_I2C_Mem_Read+0x22c>)
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 fbc6 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d008      	beq.n	8003d84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e10e      	b.n	8003f94 <HAL_I2C_Mem_Read+0x440>
 8003d76:	bf00      	nop
 8003d78:	00100002 	.word	0x00100002
 8003d7c:	ffff0000 	.word	0xffff0000
 8003d80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691a      	ldr	r2, [r3, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db0:	3b01      	subs	r3, #1
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbc:	b29b      	uxth	r3, r3
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	691a      	ldr	r2, [r3, #16]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	3b01      	subs	r3, #1
 8003df2:	b29a      	uxth	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003df8:	e0b8      	b.n	8003f6c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e00:	2200      	movs	r2, #0
 8003e02:	4966      	ldr	r1, [pc, #408]	; (8003f9c <HAL_I2C_Mem_Read+0x448>)
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 fb77 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e0bf      	b.n	8003f94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	691a      	ldr	r2, [r3, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	b2d2      	uxtb	r2, r2
 8003e30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	1c5a      	adds	r2, r3, #1
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e40:	3b01      	subs	r3, #1
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	b29a      	uxth	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	9300      	str	r3, [sp, #0]
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	494f      	ldr	r1, [pc, #316]	; (8003f9c <HAL_I2C_Mem_Read+0x448>)
 8003e60:	68f8      	ldr	r0, [r7, #12]
 8003e62:	f000 fb49 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d001      	beq.n	8003e70 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e091      	b.n	8003f94 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	691a      	ldr	r2, [r3, #16]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	b2d2      	uxtb	r2, r2
 8003e8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	1c5a      	adds	r2, r3, #1
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea8:	b29b      	uxth	r3, r3
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	b29a      	uxth	r2, r3
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691a      	ldr	r2, [r3, #16]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebc:	b2d2      	uxtb	r2, r2
 8003ebe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	1c5a      	adds	r2, r3, #1
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	b29a      	uxth	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	3b01      	subs	r3, #1
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ee4:	e042      	b.n	8003f6c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ee6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003eea:	68f8      	ldr	r0, [r7, #12]
 8003eec:	f000 fc5c 	bl	80047a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e04c      	b.n	8003f94 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	691a      	ldr	r2, [r3, #16]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	b2d2      	uxtb	r2, r2
 8003f06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b29a      	uxth	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	f003 0304 	and.w	r3, r3, #4
 8003f36:	2b04      	cmp	r3, #4
 8003f38:	d118      	bne.n	8003f6c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f47f aec2 	bne.w	8003cfa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	e000      	b.n	8003f94 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003f92:	2302      	movs	r3, #2
  }
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3728      	adds	r7, #40	; 0x28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	00010004 	.word	0x00010004

08003fa0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08a      	sub	sp, #40	; 0x28
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	607a      	str	r2, [r7, #4]
 8003faa:	603b      	str	r3, [r7, #0]
 8003fac:	460b      	mov	r3, r1
 8003fae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003fb0:	f7fe fd32 	bl	8002a18 <HAL_GetTick>
 8003fb4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b20      	cmp	r3, #32
 8003fc4:	f040 8111 	bne.w	80041ea <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	9300      	str	r3, [sp, #0]
 8003fcc:	2319      	movs	r3, #25
 8003fce:	2201      	movs	r2, #1
 8003fd0:	4988      	ldr	r1, [pc, #544]	; (80041f4 <HAL_I2C_IsDeviceReady+0x254>)
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 fa90 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	e104      	b.n	80041ec <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d101      	bne.n	8003ff0 <HAL_I2C_IsDeviceReady+0x50>
 8003fec:	2302      	movs	r3, #2
 8003fee:	e0fd      	b.n	80041ec <HAL_I2C_IsDeviceReady+0x24c>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b01      	cmp	r3, #1
 8004004:	d007      	beq.n	8004016 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f042 0201 	orr.w	r2, r2, #1
 8004014:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004024:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2224      	movs	r2, #36	; 0x24
 800402a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4a70      	ldr	r2, [pc, #448]	; (80041f8 <HAL_I2C_IsDeviceReady+0x258>)
 8004038:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004048:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	9300      	str	r3, [sp, #0]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	2200      	movs	r2, #0
 8004052:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004056:	68f8      	ldr	r0, [r7, #12]
 8004058:	f000 fa4e 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d00d      	beq.n	800407e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800406c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004070:	d103      	bne.n	800407a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004078:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e0b6      	b.n	80041ec <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800407e:	897b      	ldrh	r3, [r7, #10]
 8004080:	b2db      	uxtb	r3, r3
 8004082:	461a      	mov	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800408c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800408e:	f7fe fcc3 	bl	8002a18 <HAL_GetTick>
 8004092:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	f003 0302 	and.w	r3, r3, #2
 800409e:	2b02      	cmp	r3, #2
 80040a0:	bf0c      	ite	eq
 80040a2:	2301      	moveq	r3, #1
 80040a4:	2300      	movne	r3, #0
 80040a6:	b2db      	uxtb	r3, r3
 80040a8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040b8:	bf0c      	ite	eq
 80040ba:	2301      	moveq	r3, #1
 80040bc:	2300      	movne	r3, #0
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80040c2:	e025      	b.n	8004110 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80040c4:	f7fe fca8 	bl	8002a18 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d302      	bcc.n	80040da <HAL_I2C_IsDeviceReady+0x13a>
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d103      	bne.n	80040e2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	22a0      	movs	r2, #160	; 0xa0
 80040de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695b      	ldr	r3, [r3, #20]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b02      	cmp	r3, #2
 80040ee:	bf0c      	ite	eq
 80040f0:	2301      	moveq	r3, #1
 80040f2:	2300      	movne	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004102:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004106:	bf0c      	ite	eq
 8004108:	2301      	moveq	r3, #1
 800410a:	2300      	movne	r3, #0
 800410c:	b2db      	uxtb	r3, r3
 800410e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004116:	b2db      	uxtb	r3, r3
 8004118:	2ba0      	cmp	r3, #160	; 0xa0
 800411a:	d005      	beq.n	8004128 <HAL_I2C_IsDeviceReady+0x188>
 800411c:	7dfb      	ldrb	r3, [r7, #23]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d102      	bne.n	8004128 <HAL_I2C_IsDeviceReady+0x188>
 8004122:	7dbb      	ldrb	r3, [r7, #22]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0cd      	beq.n	80040c4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2220      	movs	r2, #32
 800412c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b02      	cmp	r3, #2
 800413c:	d129      	bne.n	8004192 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800414c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800414e:	2300      	movs	r3, #0
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	613b      	str	r3, [r7, #16]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	2319      	movs	r3, #25
 800416a:	2201      	movs	r2, #1
 800416c:	4921      	ldr	r1, [pc, #132]	; (80041f4 <HAL_I2C_IsDeviceReady+0x254>)
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f000 f9c2 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e036      	b.n	80041ec <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2200      	movs	r2, #0
 800418a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	e02c      	b.n	80041ec <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80041aa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	2319      	movs	r3, #25
 80041b2:	2201      	movs	r2, #1
 80041b4:	490f      	ldr	r1, [pc, #60]	; (80041f4 <HAL_I2C_IsDeviceReady+0x254>)
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f99e 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e012      	b.n	80041ec <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	3301      	adds	r3, #1
 80041ca:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	429a      	cmp	r2, r3
 80041d2:	f4ff af32 	bcc.w	800403a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	2220      	movs	r2, #32
 80041da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e000      	b.n	80041ec <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80041ea:	2302      	movs	r3, #2
  }
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3720      	adds	r7, #32
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	00100002 	.word	0x00100002
 80041f8:	ffff0000 	.word	0xffff0000

080041fc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b088      	sub	sp, #32
 8004200:	af02      	add	r7, sp, #8
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	4608      	mov	r0, r1
 8004206:	4611      	mov	r1, r2
 8004208:	461a      	mov	r2, r3
 800420a:	4603      	mov	r3, r0
 800420c:	817b      	strh	r3, [r7, #10]
 800420e:	460b      	mov	r3, r1
 8004210:	813b      	strh	r3, [r7, #8]
 8004212:	4613      	mov	r3, r2
 8004214:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004224:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	2200      	movs	r2, #0
 800422e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004232:	68f8      	ldr	r0, [r7, #12]
 8004234:	f000 f960 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 8004238:	4603      	mov	r3, r0
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00d      	beq.n	800425a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800424c:	d103      	bne.n	8004256 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004254:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e05f      	b.n	800431a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800425a:	897b      	ldrh	r3, [r7, #10]
 800425c:	b2db      	uxtb	r3, r3
 800425e:	461a      	mov	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004268:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800426a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426c:	6a3a      	ldr	r2, [r7, #32]
 800426e:	492d      	ldr	r1, [pc, #180]	; (8004324 <I2C_RequestMemoryWrite+0x128>)
 8004270:	68f8      	ldr	r0, [r7, #12]
 8004272:	f000 f998 	bl	80045a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d001      	beq.n	8004280 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e04c      	b.n	800431a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004280:	2300      	movs	r3, #0
 8004282:	617b      	str	r3, [r7, #20]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	617b      	str	r3, [r7, #20]
 8004294:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004298:	6a39      	ldr	r1, [r7, #32]
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f000 fa02 	bl	80046a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00d      	beq.n	80042c2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	d107      	bne.n	80042be <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042bc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e02b      	b.n	800431a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80042c2:	88fb      	ldrh	r3, [r7, #6]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d105      	bne.n	80042d4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80042c8:	893b      	ldrh	r3, [r7, #8]
 80042ca:	b2da      	uxtb	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	611a      	str	r2, [r3, #16]
 80042d2:	e021      	b.n	8004318 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80042d4:	893b      	ldrh	r3, [r7, #8]
 80042d6:	0a1b      	lsrs	r3, r3, #8
 80042d8:	b29b      	uxth	r3, r3
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042e4:	6a39      	ldr	r1, [r7, #32]
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 f9dc 	bl	80046a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00d      	beq.n	800430e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	2b04      	cmp	r3, #4
 80042f8:	d107      	bne.n	800430a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004308:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e005      	b.n	800431a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800430e:	893b      	ldrh	r3, [r7, #8]
 8004310:	b2da      	uxtb	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3718      	adds	r7, #24
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	00010002 	.word	0x00010002

08004328 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b088      	sub	sp, #32
 800432c:	af02      	add	r7, sp, #8
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	4608      	mov	r0, r1
 8004332:	4611      	mov	r1, r2
 8004334:	461a      	mov	r2, r3
 8004336:	4603      	mov	r3, r0
 8004338:	817b      	strh	r3, [r7, #10]
 800433a:	460b      	mov	r3, r1
 800433c:	813b      	strh	r3, [r7, #8]
 800433e:	4613      	mov	r3, r2
 8004340:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004350:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004360:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	6a3b      	ldr	r3, [r7, #32]
 8004368:	2200      	movs	r2, #0
 800436a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 f8c2 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00d      	beq.n	8004396 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004388:	d103      	bne.n	8004392 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004390:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e0aa      	b.n	80044ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004396:	897b      	ldrh	r3, [r7, #10]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	461a      	mov	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80043a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	6a3a      	ldr	r2, [r7, #32]
 80043aa:	4952      	ldr	r1, [pc, #328]	; (80044f4 <I2C_RequestMemoryRead+0x1cc>)
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 f8fa 	bl	80045a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043b2:	4603      	mov	r3, r0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e097      	b.n	80044ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	695b      	ldr	r3, [r3, #20]
 80043c6:	617b      	str	r3, [r7, #20]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d4:	6a39      	ldr	r1, [r7, #32]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 f964 	bl	80046a4 <I2C_WaitOnTXEFlagUntilTimeout>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d00d      	beq.n	80043fe <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	2b04      	cmp	r3, #4
 80043e8:	d107      	bne.n	80043fa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e076      	b.n	80044ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043fe:	88fb      	ldrh	r3, [r7, #6]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d105      	bne.n	8004410 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004404:	893b      	ldrh	r3, [r7, #8]
 8004406:	b2da      	uxtb	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	611a      	str	r2, [r3, #16]
 800440e:	e021      	b.n	8004454 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004410:	893b      	ldrh	r3, [r7, #8]
 8004412:	0a1b      	lsrs	r3, r3, #8
 8004414:	b29b      	uxth	r3, r3
 8004416:	b2da      	uxtb	r2, r3
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800441e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004420:	6a39      	ldr	r1, [r7, #32]
 8004422:	68f8      	ldr	r0, [r7, #12]
 8004424:	f000 f93e 	bl	80046a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00d      	beq.n	800444a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	2b04      	cmp	r3, #4
 8004434:	d107      	bne.n	8004446 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004444:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e050      	b.n	80044ec <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800444a:	893b      	ldrh	r3, [r7, #8]
 800444c:	b2da      	uxtb	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004454:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004456:	6a39      	ldr	r1, [r7, #32]
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f923 	bl	80046a4 <I2C_WaitOnTXEFlagUntilTimeout>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00d      	beq.n	8004480 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	2b04      	cmp	r3, #4
 800446a:	d107      	bne.n	800447c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800447a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e035      	b.n	80044ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800448e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	9300      	str	r3, [sp, #0]
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	2200      	movs	r2, #0
 8004498:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 f82b 	bl	80044f8 <I2C_WaitOnFlagUntilTimeout>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00d      	beq.n	80044c4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044b6:	d103      	bne.n	80044c0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e013      	b.n	80044ec <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80044c4:	897b      	ldrh	r3, [r7, #10]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	6a3a      	ldr	r2, [r7, #32]
 80044d8:	4906      	ldr	r1, [pc, #24]	; (80044f4 <I2C_RequestMemoryRead+0x1cc>)
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 f863 	bl	80045a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e000      	b.n	80044ec <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3718      	adds	r7, #24
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	00010002 	.word	0x00010002

080044f8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b084      	sub	sp, #16
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	4613      	mov	r3, r2
 8004506:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004508:	e025      	b.n	8004556 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004510:	d021      	beq.n	8004556 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004512:	f7fe fa81 	bl	8002a18 <HAL_GetTick>
 8004516:	4602      	mov	r2, r0
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	1ad3      	subs	r3, r2, r3
 800451c:	683a      	ldr	r2, [r7, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d302      	bcc.n	8004528 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d116      	bne.n	8004556 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2220      	movs	r2, #32
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2200      	movs	r2, #0
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	f043 0220 	orr.w	r2, r3, #32
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e023      	b.n	800459e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	0c1b      	lsrs	r3, r3, #16
 800455a:	b2db      	uxtb	r3, r3
 800455c:	2b01      	cmp	r3, #1
 800455e:	d10d      	bne.n	800457c <I2C_WaitOnFlagUntilTimeout+0x84>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	43da      	mvns	r2, r3
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	4013      	ands	r3, r2
 800456c:	b29b      	uxth	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	bf0c      	ite	eq
 8004572:	2301      	moveq	r3, #1
 8004574:	2300      	movne	r3, #0
 8004576:	b2db      	uxtb	r3, r3
 8004578:	461a      	mov	r2, r3
 800457a:	e00c      	b.n	8004596 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	43da      	mvns	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	4013      	ands	r3, r2
 8004588:	b29b      	uxth	r3, r3
 800458a:	2b00      	cmp	r3, #0
 800458c:	bf0c      	ite	eq
 800458e:	2301      	moveq	r3, #1
 8004590:	2300      	movne	r3, #0
 8004592:	b2db      	uxtb	r3, r3
 8004594:	461a      	mov	r2, r3
 8004596:	79fb      	ldrb	r3, [r7, #7]
 8004598:	429a      	cmp	r2, r3
 800459a:	d0b6      	beq.n	800450a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800459c:	2300      	movs	r3, #0
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3710      	adds	r7, #16
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}

080045a6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80045a6:	b580      	push	{r7, lr}
 80045a8:	b084      	sub	sp, #16
 80045aa:	af00      	add	r7, sp, #0
 80045ac:	60f8      	str	r0, [r7, #12]
 80045ae:	60b9      	str	r1, [r7, #8]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80045b4:	e051      	b.n	800465a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	695b      	ldr	r3, [r3, #20]
 80045bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045c4:	d123      	bne.n	800460e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045d4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80045de:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2220      	movs	r2, #32
 80045ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	f043 0204 	orr.w	r2, r3, #4
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e046      	b.n	800469c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004614:	d021      	beq.n	800465a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004616:	f7fe f9ff 	bl	8002a18 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	429a      	cmp	r2, r3
 8004624:	d302      	bcc.n	800462c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d116      	bne.n	800465a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2200      	movs	r2, #0
 8004630:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2220      	movs	r2, #32
 8004636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004646:	f043 0220 	orr.w	r2, r3, #32
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e020      	b.n	800469c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	0c1b      	lsrs	r3, r3, #16
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b01      	cmp	r3, #1
 8004662:	d10c      	bne.n	800467e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695b      	ldr	r3, [r3, #20]
 800466a:	43da      	mvns	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4013      	ands	r3, r2
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	bf14      	ite	ne
 8004676:	2301      	movne	r3, #1
 8004678:	2300      	moveq	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	e00b      	b.n	8004696 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	699b      	ldr	r3, [r3, #24]
 8004684:	43da      	mvns	r2, r3
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	4013      	ands	r3, r2
 800468a:	b29b      	uxth	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	bf14      	ite	ne
 8004690:	2301      	movne	r3, #1
 8004692:	2300      	moveq	r3, #0
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d18d      	bne.n	80045b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80046b0:	e02d      	b.n	800470e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80046b2:	68f8      	ldr	r0, [r7, #12]
 80046b4:	f000 f8ce 	bl	8004854 <I2C_IsAcknowledgeFailed>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d001      	beq.n	80046c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e02d      	b.n	800471e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046c8:	d021      	beq.n	800470e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ca:	f7fe f9a5 	bl	8002a18 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d302      	bcc.n	80046e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d116      	bne.n	800470e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2220      	movs	r2, #32
 80046ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fa:	f043 0220 	orr.w	r2, r3, #32
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e007      	b.n	800471e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004718:	2b80      	cmp	r3, #128	; 0x80
 800471a:	d1ca      	bne.n	80046b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b084      	sub	sp, #16
 800472a:	af00      	add	r7, sp, #0
 800472c:	60f8      	str	r0, [r7, #12]
 800472e:	60b9      	str	r1, [r7, #8]
 8004730:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004732:	e02d      	b.n	8004790 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 f88d 	bl	8004854 <I2C_IsAcknowledgeFailed>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e02d      	b.n	80047a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800474a:	d021      	beq.n	8004790 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474c:	f7fe f964 	bl	8002a18 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	429a      	cmp	r2, r3
 800475a:	d302      	bcc.n	8004762 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d116      	bne.n	8004790 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e007      	b.n	80047a0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b04      	cmp	r3, #4
 800479c:	d1ca      	bne.n	8004734 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047b4:	e042      	b.n	800483c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d119      	bne.n	80047f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0210 	mvn.w	r2, #16
 80047cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e029      	b.n	800484c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f8:	f7fe f90e 	bl	8002a18 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	429a      	cmp	r2, r3
 8004806:	d302      	bcc.n	800480e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d116      	bne.n	800483c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004828:	f043 0220 	orr.w	r2, r3, #32
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e007      	b.n	800484c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004846:	2b40      	cmp	r3, #64	; 0x40
 8004848:	d1b5      	bne.n	80047b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800486a:	d11b      	bne.n	80048a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004874:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2220      	movs	r2, #32
 8004880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004890:	f043 0204 	orr.w	r2, r3, #4
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048a4:	2300      	movs	r3, #0
}
 80048a6:	4618      	mov	r0, r3
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
	...

080048b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b084      	sub	sp, #16
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e0cc      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048c8:	4b68      	ldr	r3, [pc, #416]	; (8004a6c <HAL_RCC_ClockConfig+0x1b8>)
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d90c      	bls.n	80048f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048d6:	4b65      	ldr	r3, [pc, #404]	; (8004a6c <HAL_RCC_ClockConfig+0x1b8>)
 80048d8:	683a      	ldr	r2, [r7, #0]
 80048da:	b2d2      	uxtb	r2, r2
 80048dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80048de:	4b63      	ldr	r3, [pc, #396]	; (8004a6c <HAL_RCC_ClockConfig+0x1b8>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	683a      	ldr	r2, [r7, #0]
 80048e8:	429a      	cmp	r2, r3
 80048ea:	d001      	beq.n	80048f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80048ec:	2301      	movs	r3, #1
 80048ee:	e0b8      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d020      	beq.n	800493e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	d005      	beq.n	8004914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004908:	4b59      	ldr	r3, [pc, #356]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	4a58      	ldr	r2, [pc, #352]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 800490e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004912:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b00      	cmp	r3, #0
 800491e:	d005      	beq.n	800492c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004920:	4b53      	ldr	r3, [pc, #332]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	4a52      	ldr	r2, [pc, #328]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004926:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800492a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800492c:	4b50      	ldr	r3, [pc, #320]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	494d      	ldr	r1, [pc, #308]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 800493a:	4313      	orrs	r3, r2
 800493c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d044      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d107      	bne.n	8004962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004952:	4b47      	ldr	r3, [pc, #284]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d119      	bne.n	8004992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e07f      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b02      	cmp	r3, #2
 8004968:	d003      	beq.n	8004972 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800496e:	2b03      	cmp	r3, #3
 8004970:	d107      	bne.n	8004982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004972:	4b3f      	ldr	r3, [pc, #252]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d109      	bne.n	8004992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e06f      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004982:	4b3b      	ldr	r3, [pc, #236]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f003 0302 	and.w	r3, r3, #2
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800498e:	2301      	movs	r3, #1
 8004990:	e067      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004992:	4b37      	ldr	r3, [pc, #220]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f023 0203 	bic.w	r2, r3, #3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	4934      	ldr	r1, [pc, #208]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80049a4:	f7fe f838 	bl	8002a18 <HAL_GetTick>
 80049a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049aa:	e00a      	b.n	80049c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ac:	f7fe f834 	bl	8002a18 <HAL_GetTick>
 80049b0:	4602      	mov	r2, r0
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e04f      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049c2:	4b2b      	ldr	r3, [pc, #172]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	f003 020c 	and.w	r2, r3, #12
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d1eb      	bne.n	80049ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80049d4:	4b25      	ldr	r3, [pc, #148]	; (8004a6c <HAL_RCC_ClockConfig+0x1b8>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	429a      	cmp	r2, r3
 80049e0:	d20c      	bcs.n	80049fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049e2:	4b22      	ldr	r3, [pc, #136]	; (8004a6c <HAL_RCC_ClockConfig+0x1b8>)
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ea:	4b20      	ldr	r3, [pc, #128]	; (8004a6c <HAL_RCC_ClockConfig+0x1b8>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 030f 	and.w	r3, r3, #15
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d001      	beq.n	80049fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e032      	b.n	8004a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f003 0304 	and.w	r3, r3, #4
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d008      	beq.n	8004a1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a08:	4b19      	ldr	r3, [pc, #100]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4916      	ldr	r1, [pc, #88]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d009      	beq.n	8004a3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a26:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	490e      	ldr	r1, [pc, #56]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004a3a:	f000 f855 	bl	8004ae8 <HAL_RCC_GetSysClockFreq>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <HAL_RCC_ClockConfig+0x1bc>)
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	091b      	lsrs	r3, r3, #4
 8004a46:	f003 030f 	and.w	r3, r3, #15
 8004a4a:	490a      	ldr	r1, [pc, #40]	; (8004a74 <HAL_RCC_ClockConfig+0x1c0>)
 8004a4c:	5ccb      	ldrb	r3, [r1, r3]
 8004a4e:	fa22 f303 	lsr.w	r3, r2, r3
 8004a52:	4a09      	ldr	r2, [pc, #36]	; (8004a78 <HAL_RCC_ClockConfig+0x1c4>)
 8004a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004a56:	4b09      	ldr	r3, [pc, #36]	; (8004a7c <HAL_RCC_ClockConfig+0x1c8>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f7fd ff98 	bl	8002990 <HAL_InitTick>

  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	40023c00 	.word	0x40023c00
 8004a70:	40023800 	.word	0x40023800
 8004a74:	0800799c 	.word	0x0800799c
 8004a78:	20000000 	.word	0x20000000
 8004a7c:	20000004 	.word	0x20000004

08004a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a84:	4b03      	ldr	r3, [pc, #12]	; (8004a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a86:	681b      	ldr	r3, [r3, #0]
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	20000000 	.word	0x20000000

08004a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004a9c:	f7ff fff0 	bl	8004a80 <HAL_RCC_GetHCLKFreq>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	4b05      	ldr	r3, [pc, #20]	; (8004ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	0a9b      	lsrs	r3, r3, #10
 8004aa8:	f003 0307 	and.w	r3, r3, #7
 8004aac:	4903      	ldr	r1, [pc, #12]	; (8004abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aae:	5ccb      	ldrb	r3, [r1, r3]
 8004ab0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	40023800 	.word	0x40023800
 8004abc:	080079ac 	.word	0x080079ac

08004ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004ac4:	f7ff ffdc 	bl	8004a80 <HAL_RCC_GetHCLKFreq>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	0b5b      	lsrs	r3, r3, #13
 8004ad0:	f003 0307 	and.w	r3, r3, #7
 8004ad4:	4903      	ldr	r1, [pc, #12]	; (8004ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ad6:	5ccb      	ldrb	r3, [r1, r3]
 8004ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40023800 	.word	0x40023800
 8004ae4:	080079ac 	.word	0x080079ac

08004ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ae8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004aec:	b088      	sub	sp, #32
 8004aee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b04:	4bce      	ldr	r3, [pc, #824]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b06:	689b      	ldr	r3, [r3, #8]
 8004b08:	f003 030c 	and.w	r3, r3, #12
 8004b0c:	2b0c      	cmp	r3, #12
 8004b0e:	f200 818d 	bhi.w	8004e2c <HAL_RCC_GetSysClockFreq+0x344>
 8004b12:	a201      	add	r2, pc, #4	; (adr r2, 8004b18 <HAL_RCC_GetSysClockFreq+0x30>)
 8004b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b18:	08004b4d 	.word	0x08004b4d
 8004b1c:	08004e2d 	.word	0x08004e2d
 8004b20:	08004e2d 	.word	0x08004e2d
 8004b24:	08004e2d 	.word	0x08004e2d
 8004b28:	08004b53 	.word	0x08004b53
 8004b2c:	08004e2d 	.word	0x08004e2d
 8004b30:	08004e2d 	.word	0x08004e2d
 8004b34:	08004e2d 	.word	0x08004e2d
 8004b38:	08004b59 	.word	0x08004b59
 8004b3c:	08004e2d 	.word	0x08004e2d
 8004b40:	08004e2d 	.word	0x08004e2d
 8004b44:	08004e2d 	.word	0x08004e2d
 8004b48:	08004ccd 	.word	0x08004ccd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b4c:	4bbd      	ldr	r3, [pc, #756]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004b4e:	61bb      	str	r3, [r7, #24]
       break;
 8004b50:	e16f      	b.n	8004e32 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b52:	4bbd      	ldr	r3, [pc, #756]	; (8004e48 <HAL_RCC_GetSysClockFreq+0x360>)
 8004b54:	61bb      	str	r3, [r7, #24]
      break;
 8004b56:	e16c      	b.n	8004e32 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b58:	4bb9      	ldr	r3, [pc, #740]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b60:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b62:	4bb7      	ldr	r3, [pc, #732]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d053      	beq.n	8004c16 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b6e:	4bb4      	ldr	r3, [pc, #720]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x358>)
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	099b      	lsrs	r3, r3, #6
 8004b74:	461a      	mov	r2, r3
 8004b76:	f04f 0300 	mov.w	r3, #0
 8004b7a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b7e:	f04f 0100 	mov.w	r1, #0
 8004b82:	ea02 0400 	and.w	r4, r2, r0
 8004b86:	603c      	str	r4, [r7, #0]
 8004b88:	400b      	ands	r3, r1
 8004b8a:	607b      	str	r3, [r7, #4]
 8004b8c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b90:	4620      	mov	r0, r4
 8004b92:	4629      	mov	r1, r5
 8004b94:	f04f 0200 	mov.w	r2, #0
 8004b98:	f04f 0300 	mov.w	r3, #0
 8004b9c:	014b      	lsls	r3, r1, #5
 8004b9e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ba2:	0142      	lsls	r2, r0, #5
 8004ba4:	4610      	mov	r0, r2
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4623      	mov	r3, r4
 8004baa:	1ac0      	subs	r0, r0, r3
 8004bac:	462b      	mov	r3, r5
 8004bae:	eb61 0103 	sbc.w	r1, r1, r3
 8004bb2:	f04f 0200 	mov.w	r2, #0
 8004bb6:	f04f 0300 	mov.w	r3, #0
 8004bba:	018b      	lsls	r3, r1, #6
 8004bbc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004bc0:	0182      	lsls	r2, r0, #6
 8004bc2:	1a12      	subs	r2, r2, r0
 8004bc4:	eb63 0301 	sbc.w	r3, r3, r1
 8004bc8:	f04f 0000 	mov.w	r0, #0
 8004bcc:	f04f 0100 	mov.w	r1, #0
 8004bd0:	00d9      	lsls	r1, r3, #3
 8004bd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004bd6:	00d0      	lsls	r0, r2, #3
 8004bd8:	4602      	mov	r2, r0
 8004bda:	460b      	mov	r3, r1
 8004bdc:	4621      	mov	r1, r4
 8004bde:	1852      	adds	r2, r2, r1
 8004be0:	4629      	mov	r1, r5
 8004be2:	eb43 0101 	adc.w	r1, r3, r1
 8004be6:	460b      	mov	r3, r1
 8004be8:	f04f 0000 	mov.w	r0, #0
 8004bec:	f04f 0100 	mov.w	r1, #0
 8004bf0:	0259      	lsls	r1, r3, #9
 8004bf2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004bf6:	0250      	lsls	r0, r2, #9
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	460b      	mov	r3, r1
 8004bfc:	4610      	mov	r0, r2
 8004bfe:	4619      	mov	r1, r3
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	461a      	mov	r2, r3
 8004c04:	f04f 0300 	mov.w	r3, #0
 8004c08:	f7fc f80e 	bl	8000c28 <__aeabi_uldivmod>
 8004c0c:	4602      	mov	r2, r0
 8004c0e:	460b      	mov	r3, r1
 8004c10:	4613      	mov	r3, r2
 8004c12:	61fb      	str	r3, [r7, #28]
 8004c14:	e04c      	b.n	8004cb0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c16:	4b8a      	ldr	r3, [pc, #552]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x358>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	099b      	lsrs	r3, r3, #6
 8004c1c:	461a      	mov	r2, r3
 8004c1e:	f04f 0300 	mov.w	r3, #0
 8004c22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004c26:	f04f 0100 	mov.w	r1, #0
 8004c2a:	ea02 0a00 	and.w	sl, r2, r0
 8004c2e:	ea03 0b01 	and.w	fp, r3, r1
 8004c32:	4650      	mov	r0, sl
 8004c34:	4659      	mov	r1, fp
 8004c36:	f04f 0200 	mov.w	r2, #0
 8004c3a:	f04f 0300 	mov.w	r3, #0
 8004c3e:	014b      	lsls	r3, r1, #5
 8004c40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004c44:	0142      	lsls	r2, r0, #5
 8004c46:	4610      	mov	r0, r2
 8004c48:	4619      	mov	r1, r3
 8004c4a:	ebb0 000a 	subs.w	r0, r0, sl
 8004c4e:	eb61 010b 	sbc.w	r1, r1, fp
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	018b      	lsls	r3, r1, #6
 8004c5c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004c60:	0182      	lsls	r2, r0, #6
 8004c62:	1a12      	subs	r2, r2, r0
 8004c64:	eb63 0301 	sbc.w	r3, r3, r1
 8004c68:	f04f 0000 	mov.w	r0, #0
 8004c6c:	f04f 0100 	mov.w	r1, #0
 8004c70:	00d9      	lsls	r1, r3, #3
 8004c72:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c76:	00d0      	lsls	r0, r2, #3
 8004c78:	4602      	mov	r2, r0
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	eb12 020a 	adds.w	r2, r2, sl
 8004c80:	eb43 030b 	adc.w	r3, r3, fp
 8004c84:	f04f 0000 	mov.w	r0, #0
 8004c88:	f04f 0100 	mov.w	r1, #0
 8004c8c:	0299      	lsls	r1, r3, #10
 8004c8e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004c92:	0290      	lsls	r0, r2, #10
 8004c94:	4602      	mov	r2, r0
 8004c96:	460b      	mov	r3, r1
 8004c98:	4610      	mov	r0, r2
 8004c9a:	4619      	mov	r1, r3
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	f04f 0300 	mov.w	r3, #0
 8004ca4:	f7fb ffc0 	bl	8000c28 <__aeabi_uldivmod>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	460b      	mov	r3, r1
 8004cac:	4613      	mov	r3, r2
 8004cae:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cb0:	4b63      	ldr	r3, [pc, #396]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x358>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	0c1b      	lsrs	r3, r3, #16
 8004cb6:	f003 0303 	and.w	r3, r3, #3
 8004cba:	3301      	adds	r3, #1
 8004cbc:	005b      	lsls	r3, r3, #1
 8004cbe:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004cc0:	69fa      	ldr	r2, [r7, #28]
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cc8:	61bb      	str	r3, [r7, #24]
      break;
 8004cca:	e0b2      	b.n	8004e32 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ccc:	4b5c      	ldr	r3, [pc, #368]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x358>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cd4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004cd6:	4b5a      	ldr	r3, [pc, #360]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x358>)
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d04d      	beq.n	8004d7e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ce2:	4b57      	ldr	r3, [pc, #348]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x358>)
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	099b      	lsrs	r3, r3, #6
 8004ce8:	461a      	mov	r2, r3
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004cf2:	f04f 0100 	mov.w	r1, #0
 8004cf6:	ea02 0800 	and.w	r8, r2, r0
 8004cfa:	ea03 0901 	and.w	r9, r3, r1
 8004cfe:	4640      	mov	r0, r8
 8004d00:	4649      	mov	r1, r9
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	014b      	lsls	r3, r1, #5
 8004d0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004d10:	0142      	lsls	r2, r0, #5
 8004d12:	4610      	mov	r0, r2
 8004d14:	4619      	mov	r1, r3
 8004d16:	ebb0 0008 	subs.w	r0, r0, r8
 8004d1a:	eb61 0109 	sbc.w	r1, r1, r9
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	018b      	lsls	r3, r1, #6
 8004d28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004d2c:	0182      	lsls	r2, r0, #6
 8004d2e:	1a12      	subs	r2, r2, r0
 8004d30:	eb63 0301 	sbc.w	r3, r3, r1
 8004d34:	f04f 0000 	mov.w	r0, #0
 8004d38:	f04f 0100 	mov.w	r1, #0
 8004d3c:	00d9      	lsls	r1, r3, #3
 8004d3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d42:	00d0      	lsls	r0, r2, #3
 8004d44:	4602      	mov	r2, r0
 8004d46:	460b      	mov	r3, r1
 8004d48:	eb12 0208 	adds.w	r2, r2, r8
 8004d4c:	eb43 0309 	adc.w	r3, r3, r9
 8004d50:	f04f 0000 	mov.w	r0, #0
 8004d54:	f04f 0100 	mov.w	r1, #0
 8004d58:	0259      	lsls	r1, r3, #9
 8004d5a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004d5e:	0250      	lsls	r0, r2, #9
 8004d60:	4602      	mov	r2, r0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4610      	mov	r0, r2
 8004d66:	4619      	mov	r1, r3
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f04f 0300 	mov.w	r3, #0
 8004d70:	f7fb ff5a 	bl	8000c28 <__aeabi_uldivmod>
 8004d74:	4602      	mov	r2, r0
 8004d76:	460b      	mov	r3, r1
 8004d78:	4613      	mov	r3, r2
 8004d7a:	61fb      	str	r3, [r7, #28]
 8004d7c:	e04a      	b.n	8004e14 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d7e:	4b30      	ldr	r3, [pc, #192]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x358>)
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	099b      	lsrs	r3, r3, #6
 8004d84:	461a      	mov	r2, r3
 8004d86:	f04f 0300 	mov.w	r3, #0
 8004d8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004d8e:	f04f 0100 	mov.w	r1, #0
 8004d92:	ea02 0400 	and.w	r4, r2, r0
 8004d96:	ea03 0501 	and.w	r5, r3, r1
 8004d9a:	4620      	mov	r0, r4
 8004d9c:	4629      	mov	r1, r5
 8004d9e:	f04f 0200 	mov.w	r2, #0
 8004da2:	f04f 0300 	mov.w	r3, #0
 8004da6:	014b      	lsls	r3, r1, #5
 8004da8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004dac:	0142      	lsls	r2, r0, #5
 8004dae:	4610      	mov	r0, r2
 8004db0:	4619      	mov	r1, r3
 8004db2:	1b00      	subs	r0, r0, r4
 8004db4:	eb61 0105 	sbc.w	r1, r1, r5
 8004db8:	f04f 0200 	mov.w	r2, #0
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	018b      	lsls	r3, r1, #6
 8004dc2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004dc6:	0182      	lsls	r2, r0, #6
 8004dc8:	1a12      	subs	r2, r2, r0
 8004dca:	eb63 0301 	sbc.w	r3, r3, r1
 8004dce:	f04f 0000 	mov.w	r0, #0
 8004dd2:	f04f 0100 	mov.w	r1, #0
 8004dd6:	00d9      	lsls	r1, r3, #3
 8004dd8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ddc:	00d0      	lsls	r0, r2, #3
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	1912      	adds	r2, r2, r4
 8004de4:	eb45 0303 	adc.w	r3, r5, r3
 8004de8:	f04f 0000 	mov.w	r0, #0
 8004dec:	f04f 0100 	mov.w	r1, #0
 8004df0:	0299      	lsls	r1, r3, #10
 8004df2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004df6:	0290      	lsls	r0, r2, #10
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4610      	mov	r0, r2
 8004dfe:	4619      	mov	r1, r3
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	461a      	mov	r2, r3
 8004e04:	f04f 0300 	mov.w	r3, #0
 8004e08:	f7fb ff0e 	bl	8000c28 <__aeabi_uldivmod>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4613      	mov	r3, r2
 8004e12:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004e14:	4b0a      	ldr	r3, [pc, #40]	; (8004e40 <HAL_RCC_GetSysClockFreq+0x358>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	0f1b      	lsrs	r3, r3, #28
 8004e1a:	f003 0307 	and.w	r3, r3, #7
 8004e1e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004e20:	69fa      	ldr	r2, [r7, #28]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e28:	61bb      	str	r3, [r7, #24]
      break;
 8004e2a:	e002      	b.n	8004e32 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004e2e:	61bb      	str	r3, [r7, #24]
      break;
 8004e30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e32:	69bb      	ldr	r3, [r7, #24]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3720      	adds	r7, #32
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004e3e:	bf00      	nop
 8004e40:	40023800 	.word	0x40023800
 8004e44:	00f42400 	.word	0x00f42400
 8004e48:	007a1200 	.word	0x007a1200

08004e4c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d101      	bne.n	8004e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e28d      	b.n	800537a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0301 	and.w	r3, r3, #1
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	f000 8083 	beq.w	8004f72 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e6c:	4b94      	ldr	r3, [pc, #592]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	f003 030c 	and.w	r3, r3, #12
 8004e74:	2b04      	cmp	r3, #4
 8004e76:	d019      	beq.n	8004eac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e78:	4b91      	ldr	r3, [pc, #580]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004e7a:	689b      	ldr	r3, [r3, #8]
 8004e7c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d106      	bne.n	8004e92 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e84:	4b8e      	ldr	r3, [pc, #568]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e8c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e90:	d00c      	beq.n	8004eac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e92:	4b8b      	ldr	r3, [pc, #556]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004e9a:	2b0c      	cmp	r3, #12
 8004e9c:	d112      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e9e:	4b88      	ldr	r3, [pc, #544]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ea6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eaa:	d10b      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eac:	4b84      	ldr	r3, [pc, #528]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d05b      	beq.n	8004f70 <HAL_RCC_OscConfig+0x124>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d157      	bne.n	8004f70 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e25a      	b.n	800537a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ecc:	d106      	bne.n	8004edc <HAL_RCC_OscConfig+0x90>
 8004ece:	4b7c      	ldr	r3, [pc, #496]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a7b      	ldr	r2, [pc, #492]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed8:	6013      	str	r3, [r2, #0]
 8004eda:	e01d      	b.n	8004f18 <HAL_RCC_OscConfig+0xcc>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ee4:	d10c      	bne.n	8004f00 <HAL_RCC_OscConfig+0xb4>
 8004ee6:	4b76      	ldr	r3, [pc, #472]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a75      	ldr	r2, [pc, #468]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	4b73      	ldr	r3, [pc, #460]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a72      	ldr	r2, [pc, #456]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004ef8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004efc:	6013      	str	r3, [r2, #0]
 8004efe:	e00b      	b.n	8004f18 <HAL_RCC_OscConfig+0xcc>
 8004f00:	4b6f      	ldr	r3, [pc, #444]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4a6e      	ldr	r2, [pc, #440]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f0a:	6013      	str	r3, [r2, #0]
 8004f0c:	4b6c      	ldr	r3, [pc, #432]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a6b      	ldr	r2, [pc, #428]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d013      	beq.n	8004f48 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f20:	f7fd fd7a 	bl	8002a18 <HAL_GetTick>
 8004f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f26:	e008      	b.n	8004f3a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f28:	f7fd fd76 	bl	8002a18 <HAL_GetTick>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	1ad3      	subs	r3, r2, r3
 8004f32:	2b64      	cmp	r3, #100	; 0x64
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e21f      	b.n	800537a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3a:	4b61      	ldr	r3, [pc, #388]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d0f0      	beq.n	8004f28 <HAL_RCC_OscConfig+0xdc>
 8004f46:	e014      	b.n	8004f72 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f48:	f7fd fd66 	bl	8002a18 <HAL_GetTick>
 8004f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f4e:	e008      	b.n	8004f62 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f50:	f7fd fd62 	bl	8002a18 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	693b      	ldr	r3, [r7, #16]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	2b64      	cmp	r3, #100	; 0x64
 8004f5c:	d901      	bls.n	8004f62 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004f5e:	2303      	movs	r3, #3
 8004f60:	e20b      	b.n	800537a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f62:	4b57      	ldr	r3, [pc, #348]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1f0      	bne.n	8004f50 <HAL_RCC_OscConfig+0x104>
 8004f6e:	e000      	b.n	8004f72 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d06f      	beq.n	800505e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f7e:	4b50      	ldr	r3, [pc, #320]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004f80:	689b      	ldr	r3, [r3, #8]
 8004f82:	f003 030c 	and.w	r3, r3, #12
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d017      	beq.n	8004fba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f8a:	4b4d      	ldr	r3, [pc, #308]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004f92:	2b08      	cmp	r3, #8
 8004f94:	d105      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004f96:	4b4a      	ldr	r3, [pc, #296]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d00b      	beq.n	8004fba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fa2:	4b47      	ldr	r3, [pc, #284]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004faa:	2b0c      	cmp	r3, #12
 8004fac:	d11c      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fae:	4b44      	ldr	r3, [pc, #272]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d116      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fba:	4b41      	ldr	r3, [pc, #260]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f003 0302 	and.w	r3, r3, #2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x186>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d001      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e1d3      	b.n	800537a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fd2:	4b3b      	ldr	r3, [pc, #236]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	00db      	lsls	r3, r3, #3
 8004fe0:	4937      	ldr	r1, [pc, #220]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe6:	e03a      	b.n	800505e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d020      	beq.n	8005032 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004ff0:	4b34      	ldr	r3, [pc, #208]	; (80050c4 <HAL_RCC_OscConfig+0x278>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff6:	f7fd fd0f 	bl	8002a18 <HAL_GetTick>
 8004ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ffc:	e008      	b.n	8005010 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ffe:	f7fd fd0b 	bl	8002a18 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	2b02      	cmp	r3, #2
 800500a:	d901      	bls.n	8005010 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800500c:	2303      	movs	r3, #3
 800500e:	e1b4      	b.n	800537a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005010:	4b2b      	ldr	r3, [pc, #172]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0302 	and.w	r3, r3, #2
 8005018:	2b00      	cmp	r3, #0
 800501a:	d0f0      	beq.n	8004ffe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800501c:	4b28      	ldr	r3, [pc, #160]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	4925      	ldr	r1, [pc, #148]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 800502c:	4313      	orrs	r3, r2
 800502e:	600b      	str	r3, [r1, #0]
 8005030:	e015      	b.n	800505e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005032:	4b24      	ldr	r3, [pc, #144]	; (80050c4 <HAL_RCC_OscConfig+0x278>)
 8005034:	2200      	movs	r2, #0
 8005036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005038:	f7fd fcee 	bl	8002a18 <HAL_GetTick>
 800503c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800503e:	e008      	b.n	8005052 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005040:	f7fd fcea 	bl	8002a18 <HAL_GetTick>
 8005044:	4602      	mov	r2, r0
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	2b02      	cmp	r3, #2
 800504c:	d901      	bls.n	8005052 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800504e:	2303      	movs	r3, #3
 8005050:	e193      	b.n	800537a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005052:	4b1b      	ldr	r3, [pc, #108]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1f0      	bne.n	8005040 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 0308 	and.w	r3, r3, #8
 8005066:	2b00      	cmp	r3, #0
 8005068:	d036      	beq.n	80050d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d016      	beq.n	80050a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005072:	4b15      	ldr	r3, [pc, #84]	; (80050c8 <HAL_RCC_OscConfig+0x27c>)
 8005074:	2201      	movs	r2, #1
 8005076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005078:	f7fd fcce 	bl	8002a18 <HAL_GetTick>
 800507c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800507e:	e008      	b.n	8005092 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005080:	f7fd fcca 	bl	8002a18 <HAL_GetTick>
 8005084:	4602      	mov	r2, r0
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	1ad3      	subs	r3, r2, r3
 800508a:	2b02      	cmp	r3, #2
 800508c:	d901      	bls.n	8005092 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	e173      	b.n	800537a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005092:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <HAL_RCC_OscConfig+0x274>)
 8005094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0f0      	beq.n	8005080 <HAL_RCC_OscConfig+0x234>
 800509e:	e01b      	b.n	80050d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050a0:	4b09      	ldr	r3, [pc, #36]	; (80050c8 <HAL_RCC_OscConfig+0x27c>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a6:	f7fd fcb7 	bl	8002a18 <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050ac:	e00e      	b.n	80050cc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050ae:	f7fd fcb3 	bl	8002a18 <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d907      	bls.n	80050cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e15c      	b.n	800537a <HAL_RCC_OscConfig+0x52e>
 80050c0:	40023800 	.word	0x40023800
 80050c4:	42470000 	.word	0x42470000
 80050c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050cc:	4b8a      	ldr	r3, [pc, #552]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 80050ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050d0:	f003 0302 	and.w	r3, r3, #2
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1ea      	bne.n	80050ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0304 	and.w	r3, r3, #4
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	f000 8097 	beq.w	8005214 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050e6:	2300      	movs	r3, #0
 80050e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050ea:	4b83      	ldr	r3, [pc, #524]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10f      	bne.n	8005116 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050f6:	2300      	movs	r3, #0
 80050f8:	60bb      	str	r3, [r7, #8]
 80050fa:	4b7f      	ldr	r3, [pc, #508]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 80050fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fe:	4a7e      	ldr	r2, [pc, #504]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 8005100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005104:	6413      	str	r3, [r2, #64]	; 0x40
 8005106:	4b7c      	ldr	r3, [pc, #496]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510e:	60bb      	str	r3, [r7, #8]
 8005110:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005112:	2301      	movs	r3, #1
 8005114:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005116:	4b79      	ldr	r3, [pc, #484]	; (80052fc <HAL_RCC_OscConfig+0x4b0>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800511e:	2b00      	cmp	r3, #0
 8005120:	d118      	bne.n	8005154 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005122:	4b76      	ldr	r3, [pc, #472]	; (80052fc <HAL_RCC_OscConfig+0x4b0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a75      	ldr	r2, [pc, #468]	; (80052fc <HAL_RCC_OscConfig+0x4b0>)
 8005128:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800512c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800512e:	f7fd fc73 	bl	8002a18 <HAL_GetTick>
 8005132:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005134:	e008      	b.n	8005148 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005136:	f7fd fc6f 	bl	8002a18 <HAL_GetTick>
 800513a:	4602      	mov	r2, r0
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	1ad3      	subs	r3, r2, r3
 8005140:	2b02      	cmp	r3, #2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e118      	b.n	800537a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005148:	4b6c      	ldr	r3, [pc, #432]	; (80052fc <HAL_RCC_OscConfig+0x4b0>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0f0      	beq.n	8005136 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	2b01      	cmp	r3, #1
 800515a:	d106      	bne.n	800516a <HAL_RCC_OscConfig+0x31e>
 800515c:	4b66      	ldr	r3, [pc, #408]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 800515e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005160:	4a65      	ldr	r2, [pc, #404]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 8005162:	f043 0301 	orr.w	r3, r3, #1
 8005166:	6713      	str	r3, [r2, #112]	; 0x70
 8005168:	e01c      	b.n	80051a4 <HAL_RCC_OscConfig+0x358>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	2b05      	cmp	r3, #5
 8005170:	d10c      	bne.n	800518c <HAL_RCC_OscConfig+0x340>
 8005172:	4b61      	ldr	r3, [pc, #388]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 8005174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005176:	4a60      	ldr	r2, [pc, #384]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 8005178:	f043 0304 	orr.w	r3, r3, #4
 800517c:	6713      	str	r3, [r2, #112]	; 0x70
 800517e:	4b5e      	ldr	r3, [pc, #376]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 8005180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005182:	4a5d      	ldr	r2, [pc, #372]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 8005184:	f043 0301 	orr.w	r3, r3, #1
 8005188:	6713      	str	r3, [r2, #112]	; 0x70
 800518a:	e00b      	b.n	80051a4 <HAL_RCC_OscConfig+0x358>
 800518c:	4b5a      	ldr	r3, [pc, #360]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 800518e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005190:	4a59      	ldr	r2, [pc, #356]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 8005192:	f023 0301 	bic.w	r3, r3, #1
 8005196:	6713      	str	r3, [r2, #112]	; 0x70
 8005198:	4b57      	ldr	r3, [pc, #348]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 800519a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519c:	4a56      	ldr	r2, [pc, #344]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 800519e:	f023 0304 	bic.w	r3, r3, #4
 80051a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d015      	beq.n	80051d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ac:	f7fd fc34 	bl	8002a18 <HAL_GetTick>
 80051b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051b2:	e00a      	b.n	80051ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051b4:	f7fd fc30 	bl	8002a18 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	f241 3288 	movw	r2, #5000	; 0x1388
 80051c2:	4293      	cmp	r3, r2
 80051c4:	d901      	bls.n	80051ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80051c6:	2303      	movs	r3, #3
 80051c8:	e0d7      	b.n	800537a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ca:	4b4b      	ldr	r3, [pc, #300]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 80051cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0ee      	beq.n	80051b4 <HAL_RCC_OscConfig+0x368>
 80051d6:	e014      	b.n	8005202 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d8:	f7fd fc1e 	bl	8002a18 <HAL_GetTick>
 80051dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051de:	e00a      	b.n	80051f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051e0:	f7fd fc1a 	bl	8002a18 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e0c1      	b.n	800537a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051f6:	4b40      	ldr	r3, [pc, #256]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 80051f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1ee      	bne.n	80051e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005202:	7dfb      	ldrb	r3, [r7, #23]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d105      	bne.n	8005214 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005208:	4b3b      	ldr	r3, [pc, #236]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 800520a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800520c:	4a3a      	ldr	r2, [pc, #232]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 800520e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005212:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	2b00      	cmp	r3, #0
 800521a:	f000 80ad 	beq.w	8005378 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800521e:	4b36      	ldr	r3, [pc, #216]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 030c 	and.w	r3, r3, #12
 8005226:	2b08      	cmp	r3, #8
 8005228:	d060      	beq.n	80052ec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d145      	bne.n	80052be <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005232:	4b33      	ldr	r3, [pc, #204]	; (8005300 <HAL_RCC_OscConfig+0x4b4>)
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005238:	f7fd fbee 	bl	8002a18 <HAL_GetTick>
 800523c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800523e:	e008      	b.n	8005252 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005240:	f7fd fbea 	bl	8002a18 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	2b02      	cmp	r3, #2
 800524c:	d901      	bls.n	8005252 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800524e:	2303      	movs	r3, #3
 8005250:	e093      	b.n	800537a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005252:	4b29      	ldr	r3, [pc, #164]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1f0      	bne.n	8005240 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69da      	ldr	r2, [r3, #28]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	431a      	orrs	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526c:	019b      	lsls	r3, r3, #6
 800526e:	431a      	orrs	r2, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005274:	085b      	lsrs	r3, r3, #1
 8005276:	3b01      	subs	r3, #1
 8005278:	041b      	lsls	r3, r3, #16
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005280:	061b      	lsls	r3, r3, #24
 8005282:	431a      	orrs	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005288:	071b      	lsls	r3, r3, #28
 800528a:	491b      	ldr	r1, [pc, #108]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 800528c:	4313      	orrs	r3, r2
 800528e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005290:	4b1b      	ldr	r3, [pc, #108]	; (8005300 <HAL_RCC_OscConfig+0x4b4>)
 8005292:	2201      	movs	r2, #1
 8005294:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005296:	f7fd fbbf 	bl	8002a18 <HAL_GetTick>
 800529a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800529c:	e008      	b.n	80052b0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800529e:	f7fd fbbb 	bl	8002a18 <HAL_GetTick>
 80052a2:	4602      	mov	r2, r0
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	2b02      	cmp	r3, #2
 80052aa:	d901      	bls.n	80052b0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e064      	b.n	800537a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b0:	4b11      	ldr	r3, [pc, #68]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d0f0      	beq.n	800529e <HAL_RCC_OscConfig+0x452>
 80052bc:	e05c      	b.n	8005378 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052be:	4b10      	ldr	r3, [pc, #64]	; (8005300 <HAL_RCC_OscConfig+0x4b4>)
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052c4:	f7fd fba8 	bl	8002a18 <HAL_GetTick>
 80052c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ca:	e008      	b.n	80052de <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052cc:	f7fd fba4 	bl	8002a18 <HAL_GetTick>
 80052d0:	4602      	mov	r2, r0
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	2b02      	cmp	r3, #2
 80052d8:	d901      	bls.n	80052de <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80052da:	2303      	movs	r3, #3
 80052dc:	e04d      	b.n	800537a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052de:	4b06      	ldr	r3, [pc, #24]	; (80052f8 <HAL_RCC_OscConfig+0x4ac>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1f0      	bne.n	80052cc <HAL_RCC_OscConfig+0x480>
 80052ea:	e045      	b.n	8005378 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	699b      	ldr	r3, [r3, #24]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d107      	bne.n	8005304 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e040      	b.n	800537a <HAL_RCC_OscConfig+0x52e>
 80052f8:	40023800 	.word	0x40023800
 80052fc:	40007000 	.word	0x40007000
 8005300:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005304:	4b1f      	ldr	r3, [pc, #124]	; (8005384 <HAL_RCC_OscConfig+0x538>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d030      	beq.n	8005374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800531c:	429a      	cmp	r2, r3
 800531e:	d129      	bne.n	8005374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532a:	429a      	cmp	r2, r3
 800532c:	d122      	bne.n	8005374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800532e:	68fa      	ldr	r2, [r7, #12]
 8005330:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005334:	4013      	ands	r3, r2
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800533a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800533c:	4293      	cmp	r3, r2
 800533e:	d119      	bne.n	8005374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800534a:	085b      	lsrs	r3, r3, #1
 800534c:	3b01      	subs	r3, #1
 800534e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005350:	429a      	cmp	r2, r3
 8005352:	d10f      	bne.n	8005374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800535e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005360:	429a      	cmp	r2, r3
 8005362:	d107      	bne.n	8005374 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005370:	429a      	cmp	r2, r3
 8005372:	d001      	beq.n	8005378 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	e000      	b.n	800537a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3718      	adds	r7, #24
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	40023800 	.word	0x40023800

08005388 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d101      	bne.n	800539a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e07b      	b.n	8005492 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d108      	bne.n	80053b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80053aa:	d009      	beq.n	80053c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	61da      	str	r2, [r3, #28]
 80053b2:	e005      	b.n	80053c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fd f8be 	bl	800255c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681a      	ldr	r2, [r3, #0]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80053f6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005412:	431a      	orrs	r2, r3
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	431a      	orrs	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	431a      	orrs	r2, r3
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69db      	ldr	r3, [r3, #28]
 8005436:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800543a:	431a      	orrs	r2, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005444:	ea42 0103 	orr.w	r1, r2, r3
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	699b      	ldr	r3, [r3, #24]
 800545c:	0c1b      	lsrs	r3, r3, #16
 800545e:	f003 0104 	and.w	r1, r3, #4
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	f003 0210 	and.w	r2, r3, #16
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	430a      	orrs	r2, r1
 8005470:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	69da      	ldr	r2, [r3, #28]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005480:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2201      	movs	r2, #1
 800548c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3708      	adds	r7, #8
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
	...

0800549c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	60f8      	str	r0, [r7, #12]
 80054a4:	60b9      	str	r1, [r7, #8]
 80054a6:	607a      	str	r2, [r7, #4]
 80054a8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d101      	bne.n	80054bc <HAL_SPI_TransmitReceive_DMA+0x20>
 80054b8:	2302      	movs	r3, #2
 80054ba:	e0e3      	b.n	8005684 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2201      	movs	r2, #1
 80054c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054ca:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 80054d2:	7dbb      	ldrb	r3, [r7, #22]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d00d      	beq.n	80054f4 <HAL_SPI_TransmitReceive_DMA+0x58>
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054de:	d106      	bne.n	80054ee <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <HAL_SPI_TransmitReceive_DMA+0x52>
 80054e8:	7dbb      	ldrb	r3, [r7, #22]
 80054ea:	2b04      	cmp	r3, #4
 80054ec:	d002      	beq.n	80054f4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 80054ee:	2302      	movs	r3, #2
 80054f0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80054f2:	e0c2      	b.n	800567a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d005      	beq.n	8005506 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d002      	beq.n	8005506 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8005500:	887b      	ldrh	r3, [r7, #2]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d102      	bne.n	800550c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	75fb      	strb	r3, [r7, #23]
    goto error;
 800550a:	e0b6      	b.n	800567a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005512:	b2db      	uxtb	r3, r3
 8005514:	2b04      	cmp	r3, #4
 8005516:	d003      	beq.n	8005520 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2205      	movs	r2, #5
 800551c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	887a      	ldrh	r2, [r7, #2]
 8005530:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	887a      	ldrh	r2, [r7, #2]
 8005536:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	887a      	ldrh	r2, [r7, #2]
 8005542:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	887a      	ldrh	r2, [r7, #2]
 8005548:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2200      	movs	r2, #0
 800554e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2200      	movs	r2, #0
 8005554:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b04      	cmp	r3, #4
 8005560:	d108      	bne.n	8005574 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005566:	4a49      	ldr	r2, [pc, #292]	; (800568c <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005568:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800556e:	4a48      	ldr	r2, [pc, #288]	; (8005690 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8005570:	63da      	str	r2, [r3, #60]	; 0x3c
 8005572:	e007      	b.n	8005584 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005578:	4a46      	ldr	r2, [pc, #280]	; (8005694 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800557a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005580:	4a45      	ldr	r2, [pc, #276]	; (8005698 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 8005582:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005588:	4a44      	ldr	r2, [pc, #272]	; (800569c <HAL_SPI_TransmitReceive_DMA+0x200>)
 800558a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005590:	2200      	movs	r2, #0
 8005592:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	330c      	adds	r3, #12
 800559e:	4619      	mov	r1, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055a4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80055aa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80055ac:	f7fd fc24 	bl	8002df8 <HAL_DMA_Start_IT>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00c      	beq.n	80055d0 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ba:	f043 0210 	orr.w	r2, r3, #16
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80055ce:	e054      	b.n	800567a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f042 0201 	orr.w	r2, r2, #1
 80055de:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055e4:	2200      	movs	r2, #0
 80055e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055ec:	2200      	movs	r2, #0
 80055ee:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055f4:	2200      	movs	r2, #0
 80055f6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80055fc:	2200      	movs	r2, #0
 80055fe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005608:	4619      	mov	r1, r3
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	330c      	adds	r3, #12
 8005610:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005616:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005618:	f7fd fbee 	bl	8002df8 <HAL_DMA_Start_IT>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d00c      	beq.n	800563c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005626:	f043 0210 	orr.w	r2, r3, #16
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800563a:	e01e      	b.n	800567a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005646:	2b40      	cmp	r3, #64	; 0x40
 8005648:	d007      	beq.n	800565a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005658:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0220 	orr.w	r2, r2, #32
 8005668:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	685a      	ldr	r2, [r3, #4]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f042 0202 	orr.w	r2, r2, #2
 8005678:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005682:	7dfb      	ldrb	r3, [r7, #23]
}
 8005684:	4618      	mov	r0, r3
 8005686:	3718      	adds	r7, #24
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	0800583d 	.word	0x0800583d
 8005690:	08005705 	.word	0x08005705
 8005694:	08005859 	.word	0x08005859
 8005698:	080057ad 	.word	0x080057ad
 800569c:	08005875 	.word	0x08005875

080056a0 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 80056a8:	bf00      	nop
 80056aa:	370c      	adds	r7, #12
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80056f8:	bf00      	nop
 80056fa:	370c      	adds	r7, #12
 80056fc:	46bd      	mov	sp, r7
 80056fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005702:	4770      	bx	lr

08005704 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b084      	sub	sp, #16
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005712:	f7fd f981 	bl	8002a18 <HAL_GetTick>
 8005716:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005726:	d03b      	beq.n	80057a0 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	685a      	ldr	r2, [r3, #4]
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f022 0220 	bic.w	r2, r2, #32
 8005736:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d10d      	bne.n	800575c <SPI_DMAReceiveCplt+0x58>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005748:	d108      	bne.n	800575c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f022 0203 	bic.w	r2, r2, #3
 8005758:	605a      	str	r2, [r3, #4]
 800575a:	e007      	b.n	800576c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f022 0201 	bic.w	r2, r2, #1
 800576a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800576c:	68ba      	ldr	r2, [r7, #8]
 800576e:	2164      	movs	r1, #100	; 0x64
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 f927 	bl	80059c4 <SPI_EndRxTransaction>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d002      	beq.n	8005782 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2220      	movs	r2, #32
 8005780:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005794:	2b00      	cmp	r3, #0
 8005796:	d003      	beq.n	80057a0 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f7ff ffa9 	bl	80056f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800579e:	e002      	b.n	80057a6 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f7ff ff7d 	bl	80056a0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80057a6:	3710      	adds	r7, #16
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80057ba:	f7fd f92d 	bl	8002a18 <HAL_GetTick>
 80057be:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80057ce:	d02f      	beq.n	8005830 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0220 	bic.w	r2, r2, #32
 80057de:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80057e0:	68ba      	ldr	r2, [r7, #8]
 80057e2:	2164      	movs	r1, #100	; 0x64
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f953 	bl	8005a90 <SPI_EndRxTxTransaction>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d005      	beq.n	80057fc <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f4:	f043 0220 	orr.w	r2, r3, #32
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f022 0203 	bic.w	r2, r2, #3
 800580a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2200      	movs	r2, #0
 8005810:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	2200      	movs	r2, #0
 8005816:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005824:	2b00      	cmp	r3, #0
 8005826:	d003      	beq.n	8005830 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005828:	68f8      	ldr	r0, [r7, #12]
 800582a:	f7ff ff61 	bl	80056f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800582e:	e002      	b.n	8005836 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8005830:	68f8      	ldr	r0, [r7, #12]
 8005832:	f7ff ff3f 	bl	80056b4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005836:	3710      	adds	r7, #16
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b084      	sub	sp, #16
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f7ff ff3c 	bl	80056c8 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005850:	bf00      	nop
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005864:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005866:	68f8      	ldr	r0, [r7, #12]
 8005868:	f7ff ff38 	bl	80056dc <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800586c:	bf00      	nop
 800586e:	3710      	adds	r7, #16
 8005870:	46bd      	mov	sp, r7
 8005872:	bd80      	pop	{r7, pc}

08005874 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b084      	sub	sp, #16
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f022 0203 	bic.w	r2, r2, #3
 8005890:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005896:	f043 0210 	orr.w	r2, r3, #16
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f7ff ff22 	bl	80056f0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80058ac:	bf00      	nop
 80058ae:	3710      	adds	r7, #16
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}

080058b4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	603b      	str	r3, [r7, #0]
 80058c0:	4613      	mov	r3, r2
 80058c2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80058c4:	f7fd f8a8 	bl	8002a18 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058cc:	1a9b      	subs	r3, r3, r2
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	4413      	add	r3, r2
 80058d2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058d4:	f7fd f8a0 	bl	8002a18 <HAL_GetTick>
 80058d8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058da:	4b39      	ldr	r3, [pc, #228]	; (80059c0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	015b      	lsls	r3, r3, #5
 80058e0:	0d1b      	lsrs	r3, r3, #20
 80058e2:	69fa      	ldr	r2, [r7, #28]
 80058e4:	fb02 f303 	mul.w	r3, r2, r3
 80058e8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058ea:	e054      	b.n	8005996 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058f2:	d050      	beq.n	8005996 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058f4:	f7fd f890 	bl	8002a18 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	69fa      	ldr	r2, [r7, #28]
 8005900:	429a      	cmp	r2, r3
 8005902:	d902      	bls.n	800590a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d13d      	bne.n	8005986 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685a      	ldr	r2, [r3, #4]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005918:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005922:	d111      	bne.n	8005948 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800592c:	d004      	beq.n	8005938 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	689b      	ldr	r3, [r3, #8]
 8005932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005936:	d107      	bne.n	8005948 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681a      	ldr	r2, [r3, #0]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005946:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800594c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005950:	d10f      	bne.n	8005972 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681a      	ldr	r2, [r3, #0]
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	681a      	ldr	r2, [r3, #0]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005970:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005982:	2303      	movs	r3, #3
 8005984:	e017      	b.n	80059b6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d101      	bne.n	8005990 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800598c:	2300      	movs	r3, #0
 800598e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	3b01      	subs	r3, #1
 8005994:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	689a      	ldr	r2, [r3, #8]
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	4013      	ands	r3, r2
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	bf0c      	ite	eq
 80059a6:	2301      	moveq	r3, #1
 80059a8:	2300      	movne	r3, #0
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	461a      	mov	r2, r3
 80059ae:	79fb      	ldrb	r3, [r7, #7]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d19b      	bne.n	80058ec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3720      	adds	r7, #32
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20000000 	.word	0x20000000

080059c4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b086      	sub	sp, #24
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059d8:	d111      	bne.n	80059fe <SPI_EndRxTransaction+0x3a>
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059e2:	d004      	beq.n	80059ee <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ec:	d107      	bne.n	80059fe <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681a      	ldr	r2, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059fc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a06:	d12a      	bne.n	8005a5e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a10:	d012      	beq.n	8005a38 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	9300      	str	r3, [sp, #0]
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2180      	movs	r1, #128	; 0x80
 8005a1c:	68f8      	ldr	r0, [r7, #12]
 8005a1e:	f7ff ff49 	bl	80058b4 <SPI_WaitFlagStateUntilTimeout>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d02d      	beq.n	8005a84 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a2c:	f043 0220 	orr.w	r2, r3, #32
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e026      	b.n	8005a86 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	68bb      	ldr	r3, [r7, #8]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	2101      	movs	r1, #1
 8005a42:	68f8      	ldr	r0, [r7, #12]
 8005a44:	f7ff ff36 	bl	80058b4 <SPI_WaitFlagStateUntilTimeout>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d01a      	beq.n	8005a84 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a52:	f043 0220 	orr.w	r2, r3, #32
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a5a:	2303      	movs	r3, #3
 8005a5c:	e013      	b.n	8005a86 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	2200      	movs	r2, #0
 8005a66:	2101      	movs	r1, #1
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f7ff ff23 	bl	80058b4 <SPI_WaitFlagStateUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d007      	beq.n	8005a84 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a78:	f043 0220 	orr.w	r2, r3, #32
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e000      	b.n	8005a86 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005a84:	2300      	movs	r3, #0
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3710      	adds	r7, #16
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bd80      	pop	{r7, pc}
	...

08005a90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a9c:	4b1b      	ldr	r3, [pc, #108]	; (8005b0c <SPI_EndRxTxTransaction+0x7c>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a1b      	ldr	r2, [pc, #108]	; (8005b10 <SPI_EndRxTxTransaction+0x80>)
 8005aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005aa6:	0d5b      	lsrs	r3, r3, #21
 8005aa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005aac:	fb02 f303 	mul.w	r3, r2, r3
 8005ab0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aba:	d112      	bne.n	8005ae2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2180      	movs	r1, #128	; 0x80
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f7ff fef4 	bl	80058b4 <SPI_WaitFlagStateUntilTimeout>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d016      	beq.n	8005b00 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ad6:	f043 0220 	orr.w	r2, r3, #32
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e00f      	b.n	8005b02 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d00a      	beq.n	8005afe <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ae8:	697b      	ldr	r3, [r7, #20]
 8005aea:	3b01      	subs	r3, #1
 8005aec:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af8:	2b80      	cmp	r3, #128	; 0x80
 8005afa:	d0f2      	beq.n	8005ae2 <SPI_EndRxTxTransaction+0x52>
 8005afc:	e000      	b.n	8005b00 <SPI_EndRxTxTransaction+0x70>
        break;
 8005afe:	bf00      	nop
  }

  return HAL_OK;
 8005b00:	2300      	movs	r3, #0
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3718      	adds	r7, #24
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20000000 	.word	0x20000000
 8005b10:	165e9f81 	.word	0x165e9f81

08005b14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b22:	2301      	movs	r3, #1
 8005b24:	e03f      	b.n	8005ba6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d106      	bne.n	8005b40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f7fc fdbc 	bl	80026b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2224      	movs	r2, #36	; 0x24
 8005b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68da      	ldr	r2, [r3, #12]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f905 	bl	8005d68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	691a      	ldr	r2, [r3, #16]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005b6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	695a      	ldr	r2, [r3, #20]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005b7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	68da      	ldr	r2, [r3, #12]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005ba4:	2300      	movs	r3, #0
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3708      	adds	r7, #8
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b08a      	sub	sp, #40	; 0x28
 8005bb2:	af02      	add	r7, sp, #8
 8005bb4:	60f8      	str	r0, [r7, #12]
 8005bb6:	60b9      	str	r1, [r7, #8]
 8005bb8:	603b      	str	r3, [r7, #0]
 8005bba:	4613      	mov	r3, r2
 8005bbc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	2b20      	cmp	r3, #32
 8005bcc:	d17c      	bne.n	8005cc8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d002      	beq.n	8005bda <HAL_UART_Transmit+0x2c>
 8005bd4:	88fb      	ldrh	r3, [r7, #6]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d101      	bne.n	8005bde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e075      	b.n	8005cca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d101      	bne.n	8005bec <HAL_UART_Transmit+0x3e>
 8005be8:	2302      	movs	r3, #2
 8005bea:	e06e      	b.n	8005cca <HAL_UART_Transmit+0x11c>
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2221      	movs	r2, #33	; 0x21
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c02:	f7fc ff09 	bl	8002a18 <HAL_GetTick>
 8005c06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	88fa      	ldrh	r2, [r7, #6]
 8005c0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	88fa      	ldrh	r2, [r7, #6]
 8005c12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c1c:	d108      	bne.n	8005c30 <HAL_UART_Transmit+0x82>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	691b      	ldr	r3, [r3, #16]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d104      	bne.n	8005c30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005c26:	2300      	movs	r3, #0
 8005c28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	61bb      	str	r3, [r7, #24]
 8005c2e:	e003      	b.n	8005c38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c34:	2300      	movs	r3, #0
 8005c36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005c40:	e02a      	b.n	8005c98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	9300      	str	r3, [sp, #0]
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	2180      	movs	r1, #128	; 0x80
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f840 	bl	8005cd2 <UART_WaitOnFlagUntilTimeout>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e036      	b.n	8005cca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10b      	bne.n	8005c7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	461a      	mov	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	3302      	adds	r3, #2
 8005c76:	61bb      	str	r3, [r7, #24]
 8005c78:	e007      	b.n	8005c8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	781a      	ldrb	r2, [r3, #0]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005c84:	69fb      	ldr	r3, [r7, #28]
 8005c86:	3301      	adds	r3, #1
 8005c88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c8e:	b29b      	uxth	r3, r3
 8005c90:	3b01      	subs	r3, #1
 8005c92:	b29a      	uxth	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1cf      	bne.n	8005c42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	2140      	movs	r1, #64	; 0x40
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 f810 	bl	8005cd2 <UART_WaitOnFlagUntilTimeout>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d001      	beq.n	8005cbc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e006      	b.n	8005cca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	e000      	b.n	8005cca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005cc8:	2302      	movs	r3, #2
  }
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	3720      	adds	r7, #32
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	60f8      	str	r0, [r7, #12]
 8005cda:	60b9      	str	r1, [r7, #8]
 8005cdc:	603b      	str	r3, [r7, #0]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ce2:	e02c      	b.n	8005d3e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cea:	d028      	beq.n	8005d3e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005cec:	69bb      	ldr	r3, [r7, #24]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d007      	beq.n	8005d02 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cf2:	f7fc fe91 	bl	8002a18 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d21d      	bcs.n	8005d3e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	68da      	ldr	r2, [r3, #12]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005d10:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	695a      	ldr	r2, [r3, #20]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 0201 	bic.w	r2, r2, #1
 8005d20:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2220      	movs	r2, #32
 8005d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	e00f      	b.n	8005d5e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	4013      	ands	r3, r2
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	bf0c      	ite	eq
 8005d4e:	2301      	moveq	r3, #1
 8005d50:	2300      	movne	r3, #0
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	461a      	mov	r2, r3
 8005d56:	79fb      	ldrb	r3, [r7, #7]
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d0c3      	beq.n	8005ce4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
	...

08005d68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d6c:	b09f      	sub	sp, #124	; 0x7c
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	691b      	ldr	r3, [r3, #16]
 8005d78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7e:	68d9      	ldr	r1, [r3, #12]
 8005d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d82:	681a      	ldr	r2, [r3, #0]
 8005d84:	ea40 0301 	orr.w	r3, r0, r1
 8005d88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005d8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d8c:	689a      	ldr	r2, [r3, #8]
 8005d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	431a      	orrs	r2, r3
 8005d94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d96:	695b      	ldr	r3, [r3, #20]
 8005d98:	431a      	orrs	r2, r3
 8005d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	4313      	orrs	r3, r2
 8005da0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005dac:	f021 010c 	bic.w	r1, r1, #12
 8005db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005db6:	430b      	orrs	r3, r1
 8005db8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	695b      	ldr	r3, [r3, #20]
 8005dc0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005dc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc6:	6999      	ldr	r1, [r3, #24]
 8005dc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	ea40 0301 	orr.w	r3, r0, r1
 8005dd0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005dd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	4bc5      	ldr	r3, [pc, #788]	; (80060ec <UART_SetConfig+0x384>)
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d004      	beq.n	8005de6 <UART_SetConfig+0x7e>
 8005ddc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	4bc3      	ldr	r3, [pc, #780]	; (80060f0 <UART_SetConfig+0x388>)
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d103      	bne.n	8005dee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005de6:	f7fe fe6b 	bl	8004ac0 <HAL_RCC_GetPCLK2Freq>
 8005dea:	6778      	str	r0, [r7, #116]	; 0x74
 8005dec:	e002      	b.n	8005df4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005dee:	f7fe fe53 	bl	8004a98 <HAL_RCC_GetPCLK1Freq>
 8005df2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df6:	69db      	ldr	r3, [r3, #28]
 8005df8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dfc:	f040 80b6 	bne.w	8005f6c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e02:	461c      	mov	r4, r3
 8005e04:	f04f 0500 	mov.w	r5, #0
 8005e08:	4622      	mov	r2, r4
 8005e0a:	462b      	mov	r3, r5
 8005e0c:	1891      	adds	r1, r2, r2
 8005e0e:	6439      	str	r1, [r7, #64]	; 0x40
 8005e10:	415b      	adcs	r3, r3
 8005e12:	647b      	str	r3, [r7, #68]	; 0x44
 8005e14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e18:	1912      	adds	r2, r2, r4
 8005e1a:	eb45 0303 	adc.w	r3, r5, r3
 8005e1e:	f04f 0000 	mov.w	r0, #0
 8005e22:	f04f 0100 	mov.w	r1, #0
 8005e26:	00d9      	lsls	r1, r3, #3
 8005e28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e2c:	00d0      	lsls	r0, r2, #3
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	1911      	adds	r1, r2, r4
 8005e34:	6639      	str	r1, [r7, #96]	; 0x60
 8005e36:	416b      	adcs	r3, r5
 8005e38:	667b      	str	r3, [r7, #100]	; 0x64
 8005e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	461a      	mov	r2, r3
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	1891      	adds	r1, r2, r2
 8005e46:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e48:	415b      	adcs	r3, r3
 8005e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e50:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e54:	f7fa fee8 	bl	8000c28 <__aeabi_uldivmod>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	4ba5      	ldr	r3, [pc, #660]	; (80060f4 <UART_SetConfig+0x38c>)
 8005e5e:	fba3 2302 	umull	r2, r3, r3, r2
 8005e62:	095b      	lsrs	r3, r3, #5
 8005e64:	011e      	lsls	r6, r3, #4
 8005e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e68:	461c      	mov	r4, r3
 8005e6a:	f04f 0500 	mov.w	r5, #0
 8005e6e:	4622      	mov	r2, r4
 8005e70:	462b      	mov	r3, r5
 8005e72:	1891      	adds	r1, r2, r2
 8005e74:	6339      	str	r1, [r7, #48]	; 0x30
 8005e76:	415b      	adcs	r3, r3
 8005e78:	637b      	str	r3, [r7, #52]	; 0x34
 8005e7a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005e7e:	1912      	adds	r2, r2, r4
 8005e80:	eb45 0303 	adc.w	r3, r5, r3
 8005e84:	f04f 0000 	mov.w	r0, #0
 8005e88:	f04f 0100 	mov.w	r1, #0
 8005e8c:	00d9      	lsls	r1, r3, #3
 8005e8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e92:	00d0      	lsls	r0, r2, #3
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	1911      	adds	r1, r2, r4
 8005e9a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e9c:	416b      	adcs	r3, r5
 8005e9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ea0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	461a      	mov	r2, r3
 8005ea6:	f04f 0300 	mov.w	r3, #0
 8005eaa:	1891      	adds	r1, r2, r2
 8005eac:	62b9      	str	r1, [r7, #40]	; 0x28
 8005eae:	415b      	adcs	r3, r3
 8005eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005eb6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005eba:	f7fa feb5 	bl	8000c28 <__aeabi_uldivmod>
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	460b      	mov	r3, r1
 8005ec2:	4b8c      	ldr	r3, [pc, #560]	; (80060f4 <UART_SetConfig+0x38c>)
 8005ec4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ec8:	095b      	lsrs	r3, r3, #5
 8005eca:	2164      	movs	r1, #100	; 0x64
 8005ecc:	fb01 f303 	mul.w	r3, r1, r3
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	00db      	lsls	r3, r3, #3
 8005ed4:	3332      	adds	r3, #50	; 0x32
 8005ed6:	4a87      	ldr	r2, [pc, #540]	; (80060f4 <UART_SetConfig+0x38c>)
 8005ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8005edc:	095b      	lsrs	r3, r3, #5
 8005ede:	005b      	lsls	r3, r3, #1
 8005ee0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ee4:	441e      	add	r6, r3
 8005ee6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f04f 0100 	mov.w	r1, #0
 8005eee:	4602      	mov	r2, r0
 8005ef0:	460b      	mov	r3, r1
 8005ef2:	1894      	adds	r4, r2, r2
 8005ef4:	623c      	str	r4, [r7, #32]
 8005ef6:	415b      	adcs	r3, r3
 8005ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8005efa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005efe:	1812      	adds	r2, r2, r0
 8005f00:	eb41 0303 	adc.w	r3, r1, r3
 8005f04:	f04f 0400 	mov.w	r4, #0
 8005f08:	f04f 0500 	mov.w	r5, #0
 8005f0c:	00dd      	lsls	r5, r3, #3
 8005f0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f12:	00d4      	lsls	r4, r2, #3
 8005f14:	4622      	mov	r2, r4
 8005f16:	462b      	mov	r3, r5
 8005f18:	1814      	adds	r4, r2, r0
 8005f1a:	653c      	str	r4, [r7, #80]	; 0x50
 8005f1c:	414b      	adcs	r3, r1
 8005f1e:	657b      	str	r3, [r7, #84]	; 0x54
 8005f20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	461a      	mov	r2, r3
 8005f26:	f04f 0300 	mov.w	r3, #0
 8005f2a:	1891      	adds	r1, r2, r2
 8005f2c:	61b9      	str	r1, [r7, #24]
 8005f2e:	415b      	adcs	r3, r3
 8005f30:	61fb      	str	r3, [r7, #28]
 8005f32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f36:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f3a:	f7fa fe75 	bl	8000c28 <__aeabi_uldivmod>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	4b6c      	ldr	r3, [pc, #432]	; (80060f4 <UART_SetConfig+0x38c>)
 8005f44:	fba3 1302 	umull	r1, r3, r3, r2
 8005f48:	095b      	lsrs	r3, r3, #5
 8005f4a:	2164      	movs	r1, #100	; 0x64
 8005f4c:	fb01 f303 	mul.w	r3, r1, r3
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	3332      	adds	r3, #50	; 0x32
 8005f56:	4a67      	ldr	r2, [pc, #412]	; (80060f4 <UART_SetConfig+0x38c>)
 8005f58:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5c:	095b      	lsrs	r3, r3, #5
 8005f5e:	f003 0207 	and.w	r2, r3, #7
 8005f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4432      	add	r2, r6
 8005f68:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f6a:	e0b9      	b.n	80060e0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f6e:	461c      	mov	r4, r3
 8005f70:	f04f 0500 	mov.w	r5, #0
 8005f74:	4622      	mov	r2, r4
 8005f76:	462b      	mov	r3, r5
 8005f78:	1891      	adds	r1, r2, r2
 8005f7a:	6139      	str	r1, [r7, #16]
 8005f7c:	415b      	adcs	r3, r3
 8005f7e:	617b      	str	r3, [r7, #20]
 8005f80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005f84:	1912      	adds	r2, r2, r4
 8005f86:	eb45 0303 	adc.w	r3, r5, r3
 8005f8a:	f04f 0000 	mov.w	r0, #0
 8005f8e:	f04f 0100 	mov.w	r1, #0
 8005f92:	00d9      	lsls	r1, r3, #3
 8005f94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005f98:	00d0      	lsls	r0, r2, #3
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	eb12 0804 	adds.w	r8, r2, r4
 8005fa2:	eb43 0905 	adc.w	r9, r3, r5
 8005fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa8:	685b      	ldr	r3, [r3, #4]
 8005faa:	4618      	mov	r0, r3
 8005fac:	f04f 0100 	mov.w	r1, #0
 8005fb0:	f04f 0200 	mov.w	r2, #0
 8005fb4:	f04f 0300 	mov.w	r3, #0
 8005fb8:	008b      	lsls	r3, r1, #2
 8005fba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fbe:	0082      	lsls	r2, r0, #2
 8005fc0:	4640      	mov	r0, r8
 8005fc2:	4649      	mov	r1, r9
 8005fc4:	f7fa fe30 	bl	8000c28 <__aeabi_uldivmod>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	460b      	mov	r3, r1
 8005fcc:	4b49      	ldr	r3, [pc, #292]	; (80060f4 <UART_SetConfig+0x38c>)
 8005fce:	fba3 2302 	umull	r2, r3, r3, r2
 8005fd2:	095b      	lsrs	r3, r3, #5
 8005fd4:	011e      	lsls	r6, r3, #4
 8005fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f04f 0100 	mov.w	r1, #0
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	1894      	adds	r4, r2, r2
 8005fe4:	60bc      	str	r4, [r7, #8]
 8005fe6:	415b      	adcs	r3, r3
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fee:	1812      	adds	r2, r2, r0
 8005ff0:	eb41 0303 	adc.w	r3, r1, r3
 8005ff4:	f04f 0400 	mov.w	r4, #0
 8005ff8:	f04f 0500 	mov.w	r5, #0
 8005ffc:	00dd      	lsls	r5, r3, #3
 8005ffe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006002:	00d4      	lsls	r4, r2, #3
 8006004:	4622      	mov	r2, r4
 8006006:	462b      	mov	r3, r5
 8006008:	1814      	adds	r4, r2, r0
 800600a:	64bc      	str	r4, [r7, #72]	; 0x48
 800600c:	414b      	adcs	r3, r1
 800600e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006010:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	4618      	mov	r0, r3
 8006016:	f04f 0100 	mov.w	r1, #0
 800601a:	f04f 0200 	mov.w	r2, #0
 800601e:	f04f 0300 	mov.w	r3, #0
 8006022:	008b      	lsls	r3, r1, #2
 8006024:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006028:	0082      	lsls	r2, r0, #2
 800602a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800602e:	f7fa fdfb 	bl	8000c28 <__aeabi_uldivmod>
 8006032:	4602      	mov	r2, r0
 8006034:	460b      	mov	r3, r1
 8006036:	4b2f      	ldr	r3, [pc, #188]	; (80060f4 <UART_SetConfig+0x38c>)
 8006038:	fba3 1302 	umull	r1, r3, r3, r2
 800603c:	095b      	lsrs	r3, r3, #5
 800603e:	2164      	movs	r1, #100	; 0x64
 8006040:	fb01 f303 	mul.w	r3, r1, r3
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	3332      	adds	r3, #50	; 0x32
 800604a:	4a2a      	ldr	r2, [pc, #168]	; (80060f4 <UART_SetConfig+0x38c>)
 800604c:	fba2 2303 	umull	r2, r3, r2, r3
 8006050:	095b      	lsrs	r3, r3, #5
 8006052:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006056:	441e      	add	r6, r3
 8006058:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800605a:	4618      	mov	r0, r3
 800605c:	f04f 0100 	mov.w	r1, #0
 8006060:	4602      	mov	r2, r0
 8006062:	460b      	mov	r3, r1
 8006064:	1894      	adds	r4, r2, r2
 8006066:	603c      	str	r4, [r7, #0]
 8006068:	415b      	adcs	r3, r3
 800606a:	607b      	str	r3, [r7, #4]
 800606c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006070:	1812      	adds	r2, r2, r0
 8006072:	eb41 0303 	adc.w	r3, r1, r3
 8006076:	f04f 0400 	mov.w	r4, #0
 800607a:	f04f 0500 	mov.w	r5, #0
 800607e:	00dd      	lsls	r5, r3, #3
 8006080:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006084:	00d4      	lsls	r4, r2, #3
 8006086:	4622      	mov	r2, r4
 8006088:	462b      	mov	r3, r5
 800608a:	eb12 0a00 	adds.w	sl, r2, r0
 800608e:	eb43 0b01 	adc.w	fp, r3, r1
 8006092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	4618      	mov	r0, r3
 8006098:	f04f 0100 	mov.w	r1, #0
 800609c:	f04f 0200 	mov.w	r2, #0
 80060a0:	f04f 0300 	mov.w	r3, #0
 80060a4:	008b      	lsls	r3, r1, #2
 80060a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060aa:	0082      	lsls	r2, r0, #2
 80060ac:	4650      	mov	r0, sl
 80060ae:	4659      	mov	r1, fp
 80060b0:	f7fa fdba 	bl	8000c28 <__aeabi_uldivmod>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4b0e      	ldr	r3, [pc, #56]	; (80060f4 <UART_SetConfig+0x38c>)
 80060ba:	fba3 1302 	umull	r1, r3, r3, r2
 80060be:	095b      	lsrs	r3, r3, #5
 80060c0:	2164      	movs	r1, #100	; 0x64
 80060c2:	fb01 f303 	mul.w	r3, r1, r3
 80060c6:	1ad3      	subs	r3, r2, r3
 80060c8:	011b      	lsls	r3, r3, #4
 80060ca:	3332      	adds	r3, #50	; 0x32
 80060cc:	4a09      	ldr	r2, [pc, #36]	; (80060f4 <UART_SetConfig+0x38c>)
 80060ce:	fba2 2303 	umull	r2, r3, r2, r3
 80060d2:	095b      	lsrs	r3, r3, #5
 80060d4:	f003 020f 	and.w	r2, r3, #15
 80060d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	4432      	add	r2, r6
 80060de:	609a      	str	r2, [r3, #8]
}
 80060e0:	bf00      	nop
 80060e2:	377c      	adds	r7, #124	; 0x7c
 80060e4:	46bd      	mov	sp, r7
 80060e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ea:	bf00      	nop
 80060ec:	40011000 	.word	0x40011000
 80060f0:	40011400 	.word	0x40011400
 80060f4:	51eb851f 	.word	0x51eb851f

080060f8 <__errno>:
 80060f8:	4b01      	ldr	r3, [pc, #4]	; (8006100 <__errno+0x8>)
 80060fa:	6818      	ldr	r0, [r3, #0]
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	2000000c 	.word	0x2000000c

08006104 <__libc_init_array>:
 8006104:	b570      	push	{r4, r5, r6, lr}
 8006106:	4d0d      	ldr	r5, [pc, #52]	; (800613c <__libc_init_array+0x38>)
 8006108:	4c0d      	ldr	r4, [pc, #52]	; (8006140 <__libc_init_array+0x3c>)
 800610a:	1b64      	subs	r4, r4, r5
 800610c:	10a4      	asrs	r4, r4, #2
 800610e:	2600      	movs	r6, #0
 8006110:	42a6      	cmp	r6, r4
 8006112:	d109      	bne.n	8006128 <__libc_init_array+0x24>
 8006114:	4d0b      	ldr	r5, [pc, #44]	; (8006144 <__libc_init_array+0x40>)
 8006116:	4c0c      	ldr	r4, [pc, #48]	; (8006148 <__libc_init_array+0x44>)
 8006118:	f001 fb78 	bl	800780c <_init>
 800611c:	1b64      	subs	r4, r4, r5
 800611e:	10a4      	asrs	r4, r4, #2
 8006120:	2600      	movs	r6, #0
 8006122:	42a6      	cmp	r6, r4
 8006124:	d105      	bne.n	8006132 <__libc_init_array+0x2e>
 8006126:	bd70      	pop	{r4, r5, r6, pc}
 8006128:	f855 3b04 	ldr.w	r3, [r5], #4
 800612c:	4798      	blx	r3
 800612e:	3601      	adds	r6, #1
 8006130:	e7ee      	b.n	8006110 <__libc_init_array+0xc>
 8006132:	f855 3b04 	ldr.w	r3, [r5], #4
 8006136:	4798      	blx	r3
 8006138:	3601      	adds	r6, #1
 800613a:	e7f2      	b.n	8006122 <__libc_init_array+0x1e>
 800613c:	08007ad0 	.word	0x08007ad0
 8006140:	08007ad0 	.word	0x08007ad0
 8006144:	08007ad0 	.word	0x08007ad0
 8006148:	08007ad4 	.word	0x08007ad4

0800614c <memset>:
 800614c:	4402      	add	r2, r0
 800614e:	4603      	mov	r3, r0
 8006150:	4293      	cmp	r3, r2
 8006152:	d100      	bne.n	8006156 <memset+0xa>
 8006154:	4770      	bx	lr
 8006156:	f803 1b01 	strb.w	r1, [r3], #1
 800615a:	e7f9      	b.n	8006150 <memset+0x4>

0800615c <iprintf>:
 800615c:	b40f      	push	{r0, r1, r2, r3}
 800615e:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <iprintf+0x2c>)
 8006160:	b513      	push	{r0, r1, r4, lr}
 8006162:	681c      	ldr	r4, [r3, #0]
 8006164:	b124      	cbz	r4, 8006170 <iprintf+0x14>
 8006166:	69a3      	ldr	r3, [r4, #24]
 8006168:	b913      	cbnz	r3, 8006170 <iprintf+0x14>
 800616a:	4620      	mov	r0, r4
 800616c:	f000 fa5e 	bl	800662c <__sinit>
 8006170:	ab05      	add	r3, sp, #20
 8006172:	9a04      	ldr	r2, [sp, #16]
 8006174:	68a1      	ldr	r1, [r4, #8]
 8006176:	9301      	str	r3, [sp, #4]
 8006178:	4620      	mov	r0, r4
 800617a:	f000 fc2f 	bl	80069dc <_vfiprintf_r>
 800617e:	b002      	add	sp, #8
 8006180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006184:	b004      	add	sp, #16
 8006186:	4770      	bx	lr
 8006188:	2000000c 	.word	0x2000000c

0800618c <_puts_r>:
 800618c:	b570      	push	{r4, r5, r6, lr}
 800618e:	460e      	mov	r6, r1
 8006190:	4605      	mov	r5, r0
 8006192:	b118      	cbz	r0, 800619c <_puts_r+0x10>
 8006194:	6983      	ldr	r3, [r0, #24]
 8006196:	b90b      	cbnz	r3, 800619c <_puts_r+0x10>
 8006198:	f000 fa48 	bl	800662c <__sinit>
 800619c:	69ab      	ldr	r3, [r5, #24]
 800619e:	68ac      	ldr	r4, [r5, #8]
 80061a0:	b913      	cbnz	r3, 80061a8 <_puts_r+0x1c>
 80061a2:	4628      	mov	r0, r5
 80061a4:	f000 fa42 	bl	800662c <__sinit>
 80061a8:	4b2c      	ldr	r3, [pc, #176]	; (800625c <_puts_r+0xd0>)
 80061aa:	429c      	cmp	r4, r3
 80061ac:	d120      	bne.n	80061f0 <_puts_r+0x64>
 80061ae:	686c      	ldr	r4, [r5, #4]
 80061b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061b2:	07db      	lsls	r3, r3, #31
 80061b4:	d405      	bmi.n	80061c2 <_puts_r+0x36>
 80061b6:	89a3      	ldrh	r3, [r4, #12]
 80061b8:	0598      	lsls	r0, r3, #22
 80061ba:	d402      	bmi.n	80061c2 <_puts_r+0x36>
 80061bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061be:	f000 fad3 	bl	8006768 <__retarget_lock_acquire_recursive>
 80061c2:	89a3      	ldrh	r3, [r4, #12]
 80061c4:	0719      	lsls	r1, r3, #28
 80061c6:	d51d      	bpl.n	8006204 <_puts_r+0x78>
 80061c8:	6923      	ldr	r3, [r4, #16]
 80061ca:	b1db      	cbz	r3, 8006204 <_puts_r+0x78>
 80061cc:	3e01      	subs	r6, #1
 80061ce:	68a3      	ldr	r3, [r4, #8]
 80061d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80061d4:	3b01      	subs	r3, #1
 80061d6:	60a3      	str	r3, [r4, #8]
 80061d8:	bb39      	cbnz	r1, 800622a <_puts_r+0x9e>
 80061da:	2b00      	cmp	r3, #0
 80061dc:	da38      	bge.n	8006250 <_puts_r+0xc4>
 80061de:	4622      	mov	r2, r4
 80061e0:	210a      	movs	r1, #10
 80061e2:	4628      	mov	r0, r5
 80061e4:	f000 f848 	bl	8006278 <__swbuf_r>
 80061e8:	3001      	adds	r0, #1
 80061ea:	d011      	beq.n	8006210 <_puts_r+0x84>
 80061ec:	250a      	movs	r5, #10
 80061ee:	e011      	b.n	8006214 <_puts_r+0x88>
 80061f0:	4b1b      	ldr	r3, [pc, #108]	; (8006260 <_puts_r+0xd4>)
 80061f2:	429c      	cmp	r4, r3
 80061f4:	d101      	bne.n	80061fa <_puts_r+0x6e>
 80061f6:	68ac      	ldr	r4, [r5, #8]
 80061f8:	e7da      	b.n	80061b0 <_puts_r+0x24>
 80061fa:	4b1a      	ldr	r3, [pc, #104]	; (8006264 <_puts_r+0xd8>)
 80061fc:	429c      	cmp	r4, r3
 80061fe:	bf08      	it	eq
 8006200:	68ec      	ldreq	r4, [r5, #12]
 8006202:	e7d5      	b.n	80061b0 <_puts_r+0x24>
 8006204:	4621      	mov	r1, r4
 8006206:	4628      	mov	r0, r5
 8006208:	f000 f888 	bl	800631c <__swsetup_r>
 800620c:	2800      	cmp	r0, #0
 800620e:	d0dd      	beq.n	80061cc <_puts_r+0x40>
 8006210:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006214:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006216:	07da      	lsls	r2, r3, #31
 8006218:	d405      	bmi.n	8006226 <_puts_r+0x9a>
 800621a:	89a3      	ldrh	r3, [r4, #12]
 800621c:	059b      	lsls	r3, r3, #22
 800621e:	d402      	bmi.n	8006226 <_puts_r+0x9a>
 8006220:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006222:	f000 faa2 	bl	800676a <__retarget_lock_release_recursive>
 8006226:	4628      	mov	r0, r5
 8006228:	bd70      	pop	{r4, r5, r6, pc}
 800622a:	2b00      	cmp	r3, #0
 800622c:	da04      	bge.n	8006238 <_puts_r+0xac>
 800622e:	69a2      	ldr	r2, [r4, #24]
 8006230:	429a      	cmp	r2, r3
 8006232:	dc06      	bgt.n	8006242 <_puts_r+0xb6>
 8006234:	290a      	cmp	r1, #10
 8006236:	d004      	beq.n	8006242 <_puts_r+0xb6>
 8006238:	6823      	ldr	r3, [r4, #0]
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	6022      	str	r2, [r4, #0]
 800623e:	7019      	strb	r1, [r3, #0]
 8006240:	e7c5      	b.n	80061ce <_puts_r+0x42>
 8006242:	4622      	mov	r2, r4
 8006244:	4628      	mov	r0, r5
 8006246:	f000 f817 	bl	8006278 <__swbuf_r>
 800624a:	3001      	adds	r0, #1
 800624c:	d1bf      	bne.n	80061ce <_puts_r+0x42>
 800624e:	e7df      	b.n	8006210 <_puts_r+0x84>
 8006250:	6823      	ldr	r3, [r4, #0]
 8006252:	250a      	movs	r5, #10
 8006254:	1c5a      	adds	r2, r3, #1
 8006256:	6022      	str	r2, [r4, #0]
 8006258:	701d      	strb	r5, [r3, #0]
 800625a:	e7db      	b.n	8006214 <_puts_r+0x88>
 800625c:	080079e0 	.word	0x080079e0
 8006260:	08007a00 	.word	0x08007a00
 8006264:	080079c0 	.word	0x080079c0

08006268 <puts>:
 8006268:	4b02      	ldr	r3, [pc, #8]	; (8006274 <puts+0xc>)
 800626a:	4601      	mov	r1, r0
 800626c:	6818      	ldr	r0, [r3, #0]
 800626e:	f7ff bf8d 	b.w	800618c <_puts_r>
 8006272:	bf00      	nop
 8006274:	2000000c 	.word	0x2000000c

08006278 <__swbuf_r>:
 8006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627a:	460e      	mov	r6, r1
 800627c:	4614      	mov	r4, r2
 800627e:	4605      	mov	r5, r0
 8006280:	b118      	cbz	r0, 800628a <__swbuf_r+0x12>
 8006282:	6983      	ldr	r3, [r0, #24]
 8006284:	b90b      	cbnz	r3, 800628a <__swbuf_r+0x12>
 8006286:	f000 f9d1 	bl	800662c <__sinit>
 800628a:	4b21      	ldr	r3, [pc, #132]	; (8006310 <__swbuf_r+0x98>)
 800628c:	429c      	cmp	r4, r3
 800628e:	d12b      	bne.n	80062e8 <__swbuf_r+0x70>
 8006290:	686c      	ldr	r4, [r5, #4]
 8006292:	69a3      	ldr	r3, [r4, #24]
 8006294:	60a3      	str	r3, [r4, #8]
 8006296:	89a3      	ldrh	r3, [r4, #12]
 8006298:	071a      	lsls	r2, r3, #28
 800629a:	d52f      	bpl.n	80062fc <__swbuf_r+0x84>
 800629c:	6923      	ldr	r3, [r4, #16]
 800629e:	b36b      	cbz	r3, 80062fc <__swbuf_r+0x84>
 80062a0:	6923      	ldr	r3, [r4, #16]
 80062a2:	6820      	ldr	r0, [r4, #0]
 80062a4:	1ac0      	subs	r0, r0, r3
 80062a6:	6963      	ldr	r3, [r4, #20]
 80062a8:	b2f6      	uxtb	r6, r6
 80062aa:	4283      	cmp	r3, r0
 80062ac:	4637      	mov	r7, r6
 80062ae:	dc04      	bgt.n	80062ba <__swbuf_r+0x42>
 80062b0:	4621      	mov	r1, r4
 80062b2:	4628      	mov	r0, r5
 80062b4:	f000 f926 	bl	8006504 <_fflush_r>
 80062b8:	bb30      	cbnz	r0, 8006308 <__swbuf_r+0x90>
 80062ba:	68a3      	ldr	r3, [r4, #8]
 80062bc:	3b01      	subs	r3, #1
 80062be:	60a3      	str	r3, [r4, #8]
 80062c0:	6823      	ldr	r3, [r4, #0]
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	6022      	str	r2, [r4, #0]
 80062c6:	701e      	strb	r6, [r3, #0]
 80062c8:	6963      	ldr	r3, [r4, #20]
 80062ca:	3001      	adds	r0, #1
 80062cc:	4283      	cmp	r3, r0
 80062ce:	d004      	beq.n	80062da <__swbuf_r+0x62>
 80062d0:	89a3      	ldrh	r3, [r4, #12]
 80062d2:	07db      	lsls	r3, r3, #31
 80062d4:	d506      	bpl.n	80062e4 <__swbuf_r+0x6c>
 80062d6:	2e0a      	cmp	r6, #10
 80062d8:	d104      	bne.n	80062e4 <__swbuf_r+0x6c>
 80062da:	4621      	mov	r1, r4
 80062dc:	4628      	mov	r0, r5
 80062de:	f000 f911 	bl	8006504 <_fflush_r>
 80062e2:	b988      	cbnz	r0, 8006308 <__swbuf_r+0x90>
 80062e4:	4638      	mov	r0, r7
 80062e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062e8:	4b0a      	ldr	r3, [pc, #40]	; (8006314 <__swbuf_r+0x9c>)
 80062ea:	429c      	cmp	r4, r3
 80062ec:	d101      	bne.n	80062f2 <__swbuf_r+0x7a>
 80062ee:	68ac      	ldr	r4, [r5, #8]
 80062f0:	e7cf      	b.n	8006292 <__swbuf_r+0x1a>
 80062f2:	4b09      	ldr	r3, [pc, #36]	; (8006318 <__swbuf_r+0xa0>)
 80062f4:	429c      	cmp	r4, r3
 80062f6:	bf08      	it	eq
 80062f8:	68ec      	ldreq	r4, [r5, #12]
 80062fa:	e7ca      	b.n	8006292 <__swbuf_r+0x1a>
 80062fc:	4621      	mov	r1, r4
 80062fe:	4628      	mov	r0, r5
 8006300:	f000 f80c 	bl	800631c <__swsetup_r>
 8006304:	2800      	cmp	r0, #0
 8006306:	d0cb      	beq.n	80062a0 <__swbuf_r+0x28>
 8006308:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800630c:	e7ea      	b.n	80062e4 <__swbuf_r+0x6c>
 800630e:	bf00      	nop
 8006310:	080079e0 	.word	0x080079e0
 8006314:	08007a00 	.word	0x08007a00
 8006318:	080079c0 	.word	0x080079c0

0800631c <__swsetup_r>:
 800631c:	4b32      	ldr	r3, [pc, #200]	; (80063e8 <__swsetup_r+0xcc>)
 800631e:	b570      	push	{r4, r5, r6, lr}
 8006320:	681d      	ldr	r5, [r3, #0]
 8006322:	4606      	mov	r6, r0
 8006324:	460c      	mov	r4, r1
 8006326:	b125      	cbz	r5, 8006332 <__swsetup_r+0x16>
 8006328:	69ab      	ldr	r3, [r5, #24]
 800632a:	b913      	cbnz	r3, 8006332 <__swsetup_r+0x16>
 800632c:	4628      	mov	r0, r5
 800632e:	f000 f97d 	bl	800662c <__sinit>
 8006332:	4b2e      	ldr	r3, [pc, #184]	; (80063ec <__swsetup_r+0xd0>)
 8006334:	429c      	cmp	r4, r3
 8006336:	d10f      	bne.n	8006358 <__swsetup_r+0x3c>
 8006338:	686c      	ldr	r4, [r5, #4]
 800633a:	89a3      	ldrh	r3, [r4, #12]
 800633c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006340:	0719      	lsls	r1, r3, #28
 8006342:	d42c      	bmi.n	800639e <__swsetup_r+0x82>
 8006344:	06dd      	lsls	r5, r3, #27
 8006346:	d411      	bmi.n	800636c <__swsetup_r+0x50>
 8006348:	2309      	movs	r3, #9
 800634a:	6033      	str	r3, [r6, #0]
 800634c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006350:	81a3      	strh	r3, [r4, #12]
 8006352:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006356:	e03e      	b.n	80063d6 <__swsetup_r+0xba>
 8006358:	4b25      	ldr	r3, [pc, #148]	; (80063f0 <__swsetup_r+0xd4>)
 800635a:	429c      	cmp	r4, r3
 800635c:	d101      	bne.n	8006362 <__swsetup_r+0x46>
 800635e:	68ac      	ldr	r4, [r5, #8]
 8006360:	e7eb      	b.n	800633a <__swsetup_r+0x1e>
 8006362:	4b24      	ldr	r3, [pc, #144]	; (80063f4 <__swsetup_r+0xd8>)
 8006364:	429c      	cmp	r4, r3
 8006366:	bf08      	it	eq
 8006368:	68ec      	ldreq	r4, [r5, #12]
 800636a:	e7e6      	b.n	800633a <__swsetup_r+0x1e>
 800636c:	0758      	lsls	r0, r3, #29
 800636e:	d512      	bpl.n	8006396 <__swsetup_r+0x7a>
 8006370:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006372:	b141      	cbz	r1, 8006386 <__swsetup_r+0x6a>
 8006374:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006378:	4299      	cmp	r1, r3
 800637a:	d002      	beq.n	8006382 <__swsetup_r+0x66>
 800637c:	4630      	mov	r0, r6
 800637e:	f000 fa59 	bl	8006834 <_free_r>
 8006382:	2300      	movs	r3, #0
 8006384:	6363      	str	r3, [r4, #52]	; 0x34
 8006386:	89a3      	ldrh	r3, [r4, #12]
 8006388:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800638c:	81a3      	strh	r3, [r4, #12]
 800638e:	2300      	movs	r3, #0
 8006390:	6063      	str	r3, [r4, #4]
 8006392:	6923      	ldr	r3, [r4, #16]
 8006394:	6023      	str	r3, [r4, #0]
 8006396:	89a3      	ldrh	r3, [r4, #12]
 8006398:	f043 0308 	orr.w	r3, r3, #8
 800639c:	81a3      	strh	r3, [r4, #12]
 800639e:	6923      	ldr	r3, [r4, #16]
 80063a0:	b94b      	cbnz	r3, 80063b6 <__swsetup_r+0x9a>
 80063a2:	89a3      	ldrh	r3, [r4, #12]
 80063a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063ac:	d003      	beq.n	80063b6 <__swsetup_r+0x9a>
 80063ae:	4621      	mov	r1, r4
 80063b0:	4630      	mov	r0, r6
 80063b2:	f000 f9ff 	bl	80067b4 <__smakebuf_r>
 80063b6:	89a0      	ldrh	r0, [r4, #12]
 80063b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063bc:	f010 0301 	ands.w	r3, r0, #1
 80063c0:	d00a      	beq.n	80063d8 <__swsetup_r+0xbc>
 80063c2:	2300      	movs	r3, #0
 80063c4:	60a3      	str	r3, [r4, #8]
 80063c6:	6963      	ldr	r3, [r4, #20]
 80063c8:	425b      	negs	r3, r3
 80063ca:	61a3      	str	r3, [r4, #24]
 80063cc:	6923      	ldr	r3, [r4, #16]
 80063ce:	b943      	cbnz	r3, 80063e2 <__swsetup_r+0xc6>
 80063d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80063d4:	d1ba      	bne.n	800634c <__swsetup_r+0x30>
 80063d6:	bd70      	pop	{r4, r5, r6, pc}
 80063d8:	0781      	lsls	r1, r0, #30
 80063da:	bf58      	it	pl
 80063dc:	6963      	ldrpl	r3, [r4, #20]
 80063de:	60a3      	str	r3, [r4, #8]
 80063e0:	e7f4      	b.n	80063cc <__swsetup_r+0xb0>
 80063e2:	2000      	movs	r0, #0
 80063e4:	e7f7      	b.n	80063d6 <__swsetup_r+0xba>
 80063e6:	bf00      	nop
 80063e8:	2000000c 	.word	0x2000000c
 80063ec:	080079e0 	.word	0x080079e0
 80063f0:	08007a00 	.word	0x08007a00
 80063f4:	080079c0 	.word	0x080079c0

080063f8 <__sflush_r>:
 80063f8:	898a      	ldrh	r2, [r1, #12]
 80063fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063fe:	4605      	mov	r5, r0
 8006400:	0710      	lsls	r0, r2, #28
 8006402:	460c      	mov	r4, r1
 8006404:	d458      	bmi.n	80064b8 <__sflush_r+0xc0>
 8006406:	684b      	ldr	r3, [r1, #4]
 8006408:	2b00      	cmp	r3, #0
 800640a:	dc05      	bgt.n	8006418 <__sflush_r+0x20>
 800640c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800640e:	2b00      	cmp	r3, #0
 8006410:	dc02      	bgt.n	8006418 <__sflush_r+0x20>
 8006412:	2000      	movs	r0, #0
 8006414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006418:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800641a:	2e00      	cmp	r6, #0
 800641c:	d0f9      	beq.n	8006412 <__sflush_r+0x1a>
 800641e:	2300      	movs	r3, #0
 8006420:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006424:	682f      	ldr	r7, [r5, #0]
 8006426:	602b      	str	r3, [r5, #0]
 8006428:	d032      	beq.n	8006490 <__sflush_r+0x98>
 800642a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800642c:	89a3      	ldrh	r3, [r4, #12]
 800642e:	075a      	lsls	r2, r3, #29
 8006430:	d505      	bpl.n	800643e <__sflush_r+0x46>
 8006432:	6863      	ldr	r3, [r4, #4]
 8006434:	1ac0      	subs	r0, r0, r3
 8006436:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006438:	b10b      	cbz	r3, 800643e <__sflush_r+0x46>
 800643a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800643c:	1ac0      	subs	r0, r0, r3
 800643e:	2300      	movs	r3, #0
 8006440:	4602      	mov	r2, r0
 8006442:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006444:	6a21      	ldr	r1, [r4, #32]
 8006446:	4628      	mov	r0, r5
 8006448:	47b0      	blx	r6
 800644a:	1c43      	adds	r3, r0, #1
 800644c:	89a3      	ldrh	r3, [r4, #12]
 800644e:	d106      	bne.n	800645e <__sflush_r+0x66>
 8006450:	6829      	ldr	r1, [r5, #0]
 8006452:	291d      	cmp	r1, #29
 8006454:	d82c      	bhi.n	80064b0 <__sflush_r+0xb8>
 8006456:	4a2a      	ldr	r2, [pc, #168]	; (8006500 <__sflush_r+0x108>)
 8006458:	40ca      	lsrs	r2, r1
 800645a:	07d6      	lsls	r6, r2, #31
 800645c:	d528      	bpl.n	80064b0 <__sflush_r+0xb8>
 800645e:	2200      	movs	r2, #0
 8006460:	6062      	str	r2, [r4, #4]
 8006462:	04d9      	lsls	r1, r3, #19
 8006464:	6922      	ldr	r2, [r4, #16]
 8006466:	6022      	str	r2, [r4, #0]
 8006468:	d504      	bpl.n	8006474 <__sflush_r+0x7c>
 800646a:	1c42      	adds	r2, r0, #1
 800646c:	d101      	bne.n	8006472 <__sflush_r+0x7a>
 800646e:	682b      	ldr	r3, [r5, #0]
 8006470:	b903      	cbnz	r3, 8006474 <__sflush_r+0x7c>
 8006472:	6560      	str	r0, [r4, #84]	; 0x54
 8006474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006476:	602f      	str	r7, [r5, #0]
 8006478:	2900      	cmp	r1, #0
 800647a:	d0ca      	beq.n	8006412 <__sflush_r+0x1a>
 800647c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006480:	4299      	cmp	r1, r3
 8006482:	d002      	beq.n	800648a <__sflush_r+0x92>
 8006484:	4628      	mov	r0, r5
 8006486:	f000 f9d5 	bl	8006834 <_free_r>
 800648a:	2000      	movs	r0, #0
 800648c:	6360      	str	r0, [r4, #52]	; 0x34
 800648e:	e7c1      	b.n	8006414 <__sflush_r+0x1c>
 8006490:	6a21      	ldr	r1, [r4, #32]
 8006492:	2301      	movs	r3, #1
 8006494:	4628      	mov	r0, r5
 8006496:	47b0      	blx	r6
 8006498:	1c41      	adds	r1, r0, #1
 800649a:	d1c7      	bne.n	800642c <__sflush_r+0x34>
 800649c:	682b      	ldr	r3, [r5, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d0c4      	beq.n	800642c <__sflush_r+0x34>
 80064a2:	2b1d      	cmp	r3, #29
 80064a4:	d001      	beq.n	80064aa <__sflush_r+0xb2>
 80064a6:	2b16      	cmp	r3, #22
 80064a8:	d101      	bne.n	80064ae <__sflush_r+0xb6>
 80064aa:	602f      	str	r7, [r5, #0]
 80064ac:	e7b1      	b.n	8006412 <__sflush_r+0x1a>
 80064ae:	89a3      	ldrh	r3, [r4, #12]
 80064b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064b4:	81a3      	strh	r3, [r4, #12]
 80064b6:	e7ad      	b.n	8006414 <__sflush_r+0x1c>
 80064b8:	690f      	ldr	r7, [r1, #16]
 80064ba:	2f00      	cmp	r7, #0
 80064bc:	d0a9      	beq.n	8006412 <__sflush_r+0x1a>
 80064be:	0793      	lsls	r3, r2, #30
 80064c0:	680e      	ldr	r6, [r1, #0]
 80064c2:	bf08      	it	eq
 80064c4:	694b      	ldreq	r3, [r1, #20]
 80064c6:	600f      	str	r7, [r1, #0]
 80064c8:	bf18      	it	ne
 80064ca:	2300      	movne	r3, #0
 80064cc:	eba6 0807 	sub.w	r8, r6, r7
 80064d0:	608b      	str	r3, [r1, #8]
 80064d2:	f1b8 0f00 	cmp.w	r8, #0
 80064d6:	dd9c      	ble.n	8006412 <__sflush_r+0x1a>
 80064d8:	6a21      	ldr	r1, [r4, #32]
 80064da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064dc:	4643      	mov	r3, r8
 80064de:	463a      	mov	r2, r7
 80064e0:	4628      	mov	r0, r5
 80064e2:	47b0      	blx	r6
 80064e4:	2800      	cmp	r0, #0
 80064e6:	dc06      	bgt.n	80064f6 <__sflush_r+0xfe>
 80064e8:	89a3      	ldrh	r3, [r4, #12]
 80064ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064ee:	81a3      	strh	r3, [r4, #12]
 80064f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80064f4:	e78e      	b.n	8006414 <__sflush_r+0x1c>
 80064f6:	4407      	add	r7, r0
 80064f8:	eba8 0800 	sub.w	r8, r8, r0
 80064fc:	e7e9      	b.n	80064d2 <__sflush_r+0xda>
 80064fe:	bf00      	nop
 8006500:	20400001 	.word	0x20400001

08006504 <_fflush_r>:
 8006504:	b538      	push	{r3, r4, r5, lr}
 8006506:	690b      	ldr	r3, [r1, #16]
 8006508:	4605      	mov	r5, r0
 800650a:	460c      	mov	r4, r1
 800650c:	b913      	cbnz	r3, 8006514 <_fflush_r+0x10>
 800650e:	2500      	movs	r5, #0
 8006510:	4628      	mov	r0, r5
 8006512:	bd38      	pop	{r3, r4, r5, pc}
 8006514:	b118      	cbz	r0, 800651e <_fflush_r+0x1a>
 8006516:	6983      	ldr	r3, [r0, #24]
 8006518:	b90b      	cbnz	r3, 800651e <_fflush_r+0x1a>
 800651a:	f000 f887 	bl	800662c <__sinit>
 800651e:	4b14      	ldr	r3, [pc, #80]	; (8006570 <_fflush_r+0x6c>)
 8006520:	429c      	cmp	r4, r3
 8006522:	d11b      	bne.n	800655c <_fflush_r+0x58>
 8006524:	686c      	ldr	r4, [r5, #4]
 8006526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d0ef      	beq.n	800650e <_fflush_r+0xa>
 800652e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006530:	07d0      	lsls	r0, r2, #31
 8006532:	d404      	bmi.n	800653e <_fflush_r+0x3a>
 8006534:	0599      	lsls	r1, r3, #22
 8006536:	d402      	bmi.n	800653e <_fflush_r+0x3a>
 8006538:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800653a:	f000 f915 	bl	8006768 <__retarget_lock_acquire_recursive>
 800653e:	4628      	mov	r0, r5
 8006540:	4621      	mov	r1, r4
 8006542:	f7ff ff59 	bl	80063f8 <__sflush_r>
 8006546:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006548:	07da      	lsls	r2, r3, #31
 800654a:	4605      	mov	r5, r0
 800654c:	d4e0      	bmi.n	8006510 <_fflush_r+0xc>
 800654e:	89a3      	ldrh	r3, [r4, #12]
 8006550:	059b      	lsls	r3, r3, #22
 8006552:	d4dd      	bmi.n	8006510 <_fflush_r+0xc>
 8006554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006556:	f000 f908 	bl	800676a <__retarget_lock_release_recursive>
 800655a:	e7d9      	b.n	8006510 <_fflush_r+0xc>
 800655c:	4b05      	ldr	r3, [pc, #20]	; (8006574 <_fflush_r+0x70>)
 800655e:	429c      	cmp	r4, r3
 8006560:	d101      	bne.n	8006566 <_fflush_r+0x62>
 8006562:	68ac      	ldr	r4, [r5, #8]
 8006564:	e7df      	b.n	8006526 <_fflush_r+0x22>
 8006566:	4b04      	ldr	r3, [pc, #16]	; (8006578 <_fflush_r+0x74>)
 8006568:	429c      	cmp	r4, r3
 800656a:	bf08      	it	eq
 800656c:	68ec      	ldreq	r4, [r5, #12]
 800656e:	e7da      	b.n	8006526 <_fflush_r+0x22>
 8006570:	080079e0 	.word	0x080079e0
 8006574:	08007a00 	.word	0x08007a00
 8006578:	080079c0 	.word	0x080079c0

0800657c <std>:
 800657c:	2300      	movs	r3, #0
 800657e:	b510      	push	{r4, lr}
 8006580:	4604      	mov	r4, r0
 8006582:	e9c0 3300 	strd	r3, r3, [r0]
 8006586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800658a:	6083      	str	r3, [r0, #8]
 800658c:	8181      	strh	r1, [r0, #12]
 800658e:	6643      	str	r3, [r0, #100]	; 0x64
 8006590:	81c2      	strh	r2, [r0, #14]
 8006592:	6183      	str	r3, [r0, #24]
 8006594:	4619      	mov	r1, r3
 8006596:	2208      	movs	r2, #8
 8006598:	305c      	adds	r0, #92	; 0x5c
 800659a:	f7ff fdd7 	bl	800614c <memset>
 800659e:	4b05      	ldr	r3, [pc, #20]	; (80065b4 <std+0x38>)
 80065a0:	6263      	str	r3, [r4, #36]	; 0x24
 80065a2:	4b05      	ldr	r3, [pc, #20]	; (80065b8 <std+0x3c>)
 80065a4:	62a3      	str	r3, [r4, #40]	; 0x28
 80065a6:	4b05      	ldr	r3, [pc, #20]	; (80065bc <std+0x40>)
 80065a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065aa:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <std+0x44>)
 80065ac:	6224      	str	r4, [r4, #32]
 80065ae:	6323      	str	r3, [r4, #48]	; 0x30
 80065b0:	bd10      	pop	{r4, pc}
 80065b2:	bf00      	nop
 80065b4:	08006f85 	.word	0x08006f85
 80065b8:	08006fa7 	.word	0x08006fa7
 80065bc:	08006fdf 	.word	0x08006fdf
 80065c0:	08007003 	.word	0x08007003

080065c4 <_cleanup_r>:
 80065c4:	4901      	ldr	r1, [pc, #4]	; (80065cc <_cleanup_r+0x8>)
 80065c6:	f000 b8af 	b.w	8006728 <_fwalk_reent>
 80065ca:	bf00      	nop
 80065cc:	08006505 	.word	0x08006505

080065d0 <__sfmoreglue>:
 80065d0:	b570      	push	{r4, r5, r6, lr}
 80065d2:	1e4a      	subs	r2, r1, #1
 80065d4:	2568      	movs	r5, #104	; 0x68
 80065d6:	4355      	muls	r5, r2
 80065d8:	460e      	mov	r6, r1
 80065da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80065de:	f000 f979 	bl	80068d4 <_malloc_r>
 80065e2:	4604      	mov	r4, r0
 80065e4:	b140      	cbz	r0, 80065f8 <__sfmoreglue+0x28>
 80065e6:	2100      	movs	r1, #0
 80065e8:	e9c0 1600 	strd	r1, r6, [r0]
 80065ec:	300c      	adds	r0, #12
 80065ee:	60a0      	str	r0, [r4, #8]
 80065f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80065f4:	f7ff fdaa 	bl	800614c <memset>
 80065f8:	4620      	mov	r0, r4
 80065fa:	bd70      	pop	{r4, r5, r6, pc}

080065fc <__sfp_lock_acquire>:
 80065fc:	4801      	ldr	r0, [pc, #4]	; (8006604 <__sfp_lock_acquire+0x8>)
 80065fe:	f000 b8b3 	b.w	8006768 <__retarget_lock_acquire_recursive>
 8006602:	bf00      	nop
 8006604:	200004fc 	.word	0x200004fc

08006608 <__sfp_lock_release>:
 8006608:	4801      	ldr	r0, [pc, #4]	; (8006610 <__sfp_lock_release+0x8>)
 800660a:	f000 b8ae 	b.w	800676a <__retarget_lock_release_recursive>
 800660e:	bf00      	nop
 8006610:	200004fc 	.word	0x200004fc

08006614 <__sinit_lock_acquire>:
 8006614:	4801      	ldr	r0, [pc, #4]	; (800661c <__sinit_lock_acquire+0x8>)
 8006616:	f000 b8a7 	b.w	8006768 <__retarget_lock_acquire_recursive>
 800661a:	bf00      	nop
 800661c:	200004f7 	.word	0x200004f7

08006620 <__sinit_lock_release>:
 8006620:	4801      	ldr	r0, [pc, #4]	; (8006628 <__sinit_lock_release+0x8>)
 8006622:	f000 b8a2 	b.w	800676a <__retarget_lock_release_recursive>
 8006626:	bf00      	nop
 8006628:	200004f7 	.word	0x200004f7

0800662c <__sinit>:
 800662c:	b510      	push	{r4, lr}
 800662e:	4604      	mov	r4, r0
 8006630:	f7ff fff0 	bl	8006614 <__sinit_lock_acquire>
 8006634:	69a3      	ldr	r3, [r4, #24]
 8006636:	b11b      	cbz	r3, 8006640 <__sinit+0x14>
 8006638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800663c:	f7ff bff0 	b.w	8006620 <__sinit_lock_release>
 8006640:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006644:	6523      	str	r3, [r4, #80]	; 0x50
 8006646:	4b13      	ldr	r3, [pc, #76]	; (8006694 <__sinit+0x68>)
 8006648:	4a13      	ldr	r2, [pc, #76]	; (8006698 <__sinit+0x6c>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	62a2      	str	r2, [r4, #40]	; 0x28
 800664e:	42a3      	cmp	r3, r4
 8006650:	bf04      	itt	eq
 8006652:	2301      	moveq	r3, #1
 8006654:	61a3      	streq	r3, [r4, #24]
 8006656:	4620      	mov	r0, r4
 8006658:	f000 f820 	bl	800669c <__sfp>
 800665c:	6060      	str	r0, [r4, #4]
 800665e:	4620      	mov	r0, r4
 8006660:	f000 f81c 	bl	800669c <__sfp>
 8006664:	60a0      	str	r0, [r4, #8]
 8006666:	4620      	mov	r0, r4
 8006668:	f000 f818 	bl	800669c <__sfp>
 800666c:	2200      	movs	r2, #0
 800666e:	60e0      	str	r0, [r4, #12]
 8006670:	2104      	movs	r1, #4
 8006672:	6860      	ldr	r0, [r4, #4]
 8006674:	f7ff ff82 	bl	800657c <std>
 8006678:	68a0      	ldr	r0, [r4, #8]
 800667a:	2201      	movs	r2, #1
 800667c:	2109      	movs	r1, #9
 800667e:	f7ff ff7d 	bl	800657c <std>
 8006682:	68e0      	ldr	r0, [r4, #12]
 8006684:	2202      	movs	r2, #2
 8006686:	2112      	movs	r1, #18
 8006688:	f7ff ff78 	bl	800657c <std>
 800668c:	2301      	movs	r3, #1
 800668e:	61a3      	str	r3, [r4, #24]
 8006690:	e7d2      	b.n	8006638 <__sinit+0xc>
 8006692:	bf00      	nop
 8006694:	080079bc 	.word	0x080079bc
 8006698:	080065c5 	.word	0x080065c5

0800669c <__sfp>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	4607      	mov	r7, r0
 80066a0:	f7ff ffac 	bl	80065fc <__sfp_lock_acquire>
 80066a4:	4b1e      	ldr	r3, [pc, #120]	; (8006720 <__sfp+0x84>)
 80066a6:	681e      	ldr	r6, [r3, #0]
 80066a8:	69b3      	ldr	r3, [r6, #24]
 80066aa:	b913      	cbnz	r3, 80066b2 <__sfp+0x16>
 80066ac:	4630      	mov	r0, r6
 80066ae:	f7ff ffbd 	bl	800662c <__sinit>
 80066b2:	3648      	adds	r6, #72	; 0x48
 80066b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	d503      	bpl.n	80066c4 <__sfp+0x28>
 80066bc:	6833      	ldr	r3, [r6, #0]
 80066be:	b30b      	cbz	r3, 8006704 <__sfp+0x68>
 80066c0:	6836      	ldr	r6, [r6, #0]
 80066c2:	e7f7      	b.n	80066b4 <__sfp+0x18>
 80066c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80066c8:	b9d5      	cbnz	r5, 8006700 <__sfp+0x64>
 80066ca:	4b16      	ldr	r3, [pc, #88]	; (8006724 <__sfp+0x88>)
 80066cc:	60e3      	str	r3, [r4, #12]
 80066ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80066d2:	6665      	str	r5, [r4, #100]	; 0x64
 80066d4:	f000 f847 	bl	8006766 <__retarget_lock_init_recursive>
 80066d8:	f7ff ff96 	bl	8006608 <__sfp_lock_release>
 80066dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80066e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80066e4:	6025      	str	r5, [r4, #0]
 80066e6:	61a5      	str	r5, [r4, #24]
 80066e8:	2208      	movs	r2, #8
 80066ea:	4629      	mov	r1, r5
 80066ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80066f0:	f7ff fd2c 	bl	800614c <memset>
 80066f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80066f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80066fc:	4620      	mov	r0, r4
 80066fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006700:	3468      	adds	r4, #104	; 0x68
 8006702:	e7d9      	b.n	80066b8 <__sfp+0x1c>
 8006704:	2104      	movs	r1, #4
 8006706:	4638      	mov	r0, r7
 8006708:	f7ff ff62 	bl	80065d0 <__sfmoreglue>
 800670c:	4604      	mov	r4, r0
 800670e:	6030      	str	r0, [r6, #0]
 8006710:	2800      	cmp	r0, #0
 8006712:	d1d5      	bne.n	80066c0 <__sfp+0x24>
 8006714:	f7ff ff78 	bl	8006608 <__sfp_lock_release>
 8006718:	230c      	movs	r3, #12
 800671a:	603b      	str	r3, [r7, #0]
 800671c:	e7ee      	b.n	80066fc <__sfp+0x60>
 800671e:	bf00      	nop
 8006720:	080079bc 	.word	0x080079bc
 8006724:	ffff0001 	.word	0xffff0001

08006728 <_fwalk_reent>:
 8006728:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800672c:	4606      	mov	r6, r0
 800672e:	4688      	mov	r8, r1
 8006730:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006734:	2700      	movs	r7, #0
 8006736:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800673a:	f1b9 0901 	subs.w	r9, r9, #1
 800673e:	d505      	bpl.n	800674c <_fwalk_reent+0x24>
 8006740:	6824      	ldr	r4, [r4, #0]
 8006742:	2c00      	cmp	r4, #0
 8006744:	d1f7      	bne.n	8006736 <_fwalk_reent+0xe>
 8006746:	4638      	mov	r0, r7
 8006748:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800674c:	89ab      	ldrh	r3, [r5, #12]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d907      	bls.n	8006762 <_fwalk_reent+0x3a>
 8006752:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006756:	3301      	adds	r3, #1
 8006758:	d003      	beq.n	8006762 <_fwalk_reent+0x3a>
 800675a:	4629      	mov	r1, r5
 800675c:	4630      	mov	r0, r6
 800675e:	47c0      	blx	r8
 8006760:	4307      	orrs	r7, r0
 8006762:	3568      	adds	r5, #104	; 0x68
 8006764:	e7e9      	b.n	800673a <_fwalk_reent+0x12>

08006766 <__retarget_lock_init_recursive>:
 8006766:	4770      	bx	lr

08006768 <__retarget_lock_acquire_recursive>:
 8006768:	4770      	bx	lr

0800676a <__retarget_lock_release_recursive>:
 800676a:	4770      	bx	lr

0800676c <__swhatbuf_r>:
 800676c:	b570      	push	{r4, r5, r6, lr}
 800676e:	460e      	mov	r6, r1
 8006770:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006774:	2900      	cmp	r1, #0
 8006776:	b096      	sub	sp, #88	; 0x58
 8006778:	4614      	mov	r4, r2
 800677a:	461d      	mov	r5, r3
 800677c:	da07      	bge.n	800678e <__swhatbuf_r+0x22>
 800677e:	2300      	movs	r3, #0
 8006780:	602b      	str	r3, [r5, #0]
 8006782:	89b3      	ldrh	r3, [r6, #12]
 8006784:	061a      	lsls	r2, r3, #24
 8006786:	d410      	bmi.n	80067aa <__swhatbuf_r+0x3e>
 8006788:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800678c:	e00e      	b.n	80067ac <__swhatbuf_r+0x40>
 800678e:	466a      	mov	r2, sp
 8006790:	f000 fc5e 	bl	8007050 <_fstat_r>
 8006794:	2800      	cmp	r0, #0
 8006796:	dbf2      	blt.n	800677e <__swhatbuf_r+0x12>
 8006798:	9a01      	ldr	r2, [sp, #4]
 800679a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800679e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067a2:	425a      	negs	r2, r3
 80067a4:	415a      	adcs	r2, r3
 80067a6:	602a      	str	r2, [r5, #0]
 80067a8:	e7ee      	b.n	8006788 <__swhatbuf_r+0x1c>
 80067aa:	2340      	movs	r3, #64	; 0x40
 80067ac:	2000      	movs	r0, #0
 80067ae:	6023      	str	r3, [r4, #0]
 80067b0:	b016      	add	sp, #88	; 0x58
 80067b2:	bd70      	pop	{r4, r5, r6, pc}

080067b4 <__smakebuf_r>:
 80067b4:	898b      	ldrh	r3, [r1, #12]
 80067b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067b8:	079d      	lsls	r5, r3, #30
 80067ba:	4606      	mov	r6, r0
 80067bc:	460c      	mov	r4, r1
 80067be:	d507      	bpl.n	80067d0 <__smakebuf_r+0x1c>
 80067c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80067c4:	6023      	str	r3, [r4, #0]
 80067c6:	6123      	str	r3, [r4, #16]
 80067c8:	2301      	movs	r3, #1
 80067ca:	6163      	str	r3, [r4, #20]
 80067cc:	b002      	add	sp, #8
 80067ce:	bd70      	pop	{r4, r5, r6, pc}
 80067d0:	ab01      	add	r3, sp, #4
 80067d2:	466a      	mov	r2, sp
 80067d4:	f7ff ffca 	bl	800676c <__swhatbuf_r>
 80067d8:	9900      	ldr	r1, [sp, #0]
 80067da:	4605      	mov	r5, r0
 80067dc:	4630      	mov	r0, r6
 80067de:	f000 f879 	bl	80068d4 <_malloc_r>
 80067e2:	b948      	cbnz	r0, 80067f8 <__smakebuf_r+0x44>
 80067e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067e8:	059a      	lsls	r2, r3, #22
 80067ea:	d4ef      	bmi.n	80067cc <__smakebuf_r+0x18>
 80067ec:	f023 0303 	bic.w	r3, r3, #3
 80067f0:	f043 0302 	orr.w	r3, r3, #2
 80067f4:	81a3      	strh	r3, [r4, #12]
 80067f6:	e7e3      	b.n	80067c0 <__smakebuf_r+0xc>
 80067f8:	4b0d      	ldr	r3, [pc, #52]	; (8006830 <__smakebuf_r+0x7c>)
 80067fa:	62b3      	str	r3, [r6, #40]	; 0x28
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	6020      	str	r0, [r4, #0]
 8006800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006804:	81a3      	strh	r3, [r4, #12]
 8006806:	9b00      	ldr	r3, [sp, #0]
 8006808:	6163      	str	r3, [r4, #20]
 800680a:	9b01      	ldr	r3, [sp, #4]
 800680c:	6120      	str	r0, [r4, #16]
 800680e:	b15b      	cbz	r3, 8006828 <__smakebuf_r+0x74>
 8006810:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006814:	4630      	mov	r0, r6
 8006816:	f000 fc2d 	bl	8007074 <_isatty_r>
 800681a:	b128      	cbz	r0, 8006828 <__smakebuf_r+0x74>
 800681c:	89a3      	ldrh	r3, [r4, #12]
 800681e:	f023 0303 	bic.w	r3, r3, #3
 8006822:	f043 0301 	orr.w	r3, r3, #1
 8006826:	81a3      	strh	r3, [r4, #12]
 8006828:	89a0      	ldrh	r0, [r4, #12]
 800682a:	4305      	orrs	r5, r0
 800682c:	81a5      	strh	r5, [r4, #12]
 800682e:	e7cd      	b.n	80067cc <__smakebuf_r+0x18>
 8006830:	080065c5 	.word	0x080065c5

08006834 <_free_r>:
 8006834:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006836:	2900      	cmp	r1, #0
 8006838:	d048      	beq.n	80068cc <_free_r+0x98>
 800683a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800683e:	9001      	str	r0, [sp, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	f1a1 0404 	sub.w	r4, r1, #4
 8006846:	bfb8      	it	lt
 8006848:	18e4      	addlt	r4, r4, r3
 800684a:	f000 fc35 	bl	80070b8 <__malloc_lock>
 800684e:	4a20      	ldr	r2, [pc, #128]	; (80068d0 <_free_r+0x9c>)
 8006850:	9801      	ldr	r0, [sp, #4]
 8006852:	6813      	ldr	r3, [r2, #0]
 8006854:	4615      	mov	r5, r2
 8006856:	b933      	cbnz	r3, 8006866 <_free_r+0x32>
 8006858:	6063      	str	r3, [r4, #4]
 800685a:	6014      	str	r4, [r2, #0]
 800685c:	b003      	add	sp, #12
 800685e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006862:	f000 bc2f 	b.w	80070c4 <__malloc_unlock>
 8006866:	42a3      	cmp	r3, r4
 8006868:	d90b      	bls.n	8006882 <_free_r+0x4e>
 800686a:	6821      	ldr	r1, [r4, #0]
 800686c:	1862      	adds	r2, r4, r1
 800686e:	4293      	cmp	r3, r2
 8006870:	bf04      	itt	eq
 8006872:	681a      	ldreq	r2, [r3, #0]
 8006874:	685b      	ldreq	r3, [r3, #4]
 8006876:	6063      	str	r3, [r4, #4]
 8006878:	bf04      	itt	eq
 800687a:	1852      	addeq	r2, r2, r1
 800687c:	6022      	streq	r2, [r4, #0]
 800687e:	602c      	str	r4, [r5, #0]
 8006880:	e7ec      	b.n	800685c <_free_r+0x28>
 8006882:	461a      	mov	r2, r3
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	b10b      	cbz	r3, 800688c <_free_r+0x58>
 8006888:	42a3      	cmp	r3, r4
 800688a:	d9fa      	bls.n	8006882 <_free_r+0x4e>
 800688c:	6811      	ldr	r1, [r2, #0]
 800688e:	1855      	adds	r5, r2, r1
 8006890:	42a5      	cmp	r5, r4
 8006892:	d10b      	bne.n	80068ac <_free_r+0x78>
 8006894:	6824      	ldr	r4, [r4, #0]
 8006896:	4421      	add	r1, r4
 8006898:	1854      	adds	r4, r2, r1
 800689a:	42a3      	cmp	r3, r4
 800689c:	6011      	str	r1, [r2, #0]
 800689e:	d1dd      	bne.n	800685c <_free_r+0x28>
 80068a0:	681c      	ldr	r4, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	6053      	str	r3, [r2, #4]
 80068a6:	4421      	add	r1, r4
 80068a8:	6011      	str	r1, [r2, #0]
 80068aa:	e7d7      	b.n	800685c <_free_r+0x28>
 80068ac:	d902      	bls.n	80068b4 <_free_r+0x80>
 80068ae:	230c      	movs	r3, #12
 80068b0:	6003      	str	r3, [r0, #0]
 80068b2:	e7d3      	b.n	800685c <_free_r+0x28>
 80068b4:	6825      	ldr	r5, [r4, #0]
 80068b6:	1961      	adds	r1, r4, r5
 80068b8:	428b      	cmp	r3, r1
 80068ba:	bf04      	itt	eq
 80068bc:	6819      	ldreq	r1, [r3, #0]
 80068be:	685b      	ldreq	r3, [r3, #4]
 80068c0:	6063      	str	r3, [r4, #4]
 80068c2:	bf04      	itt	eq
 80068c4:	1949      	addeq	r1, r1, r5
 80068c6:	6021      	streq	r1, [r4, #0]
 80068c8:	6054      	str	r4, [r2, #4]
 80068ca:	e7c7      	b.n	800685c <_free_r+0x28>
 80068cc:	b003      	add	sp, #12
 80068ce:	bd30      	pop	{r4, r5, pc}
 80068d0:	20000094 	.word	0x20000094

080068d4 <_malloc_r>:
 80068d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d6:	1ccd      	adds	r5, r1, #3
 80068d8:	f025 0503 	bic.w	r5, r5, #3
 80068dc:	3508      	adds	r5, #8
 80068de:	2d0c      	cmp	r5, #12
 80068e0:	bf38      	it	cc
 80068e2:	250c      	movcc	r5, #12
 80068e4:	2d00      	cmp	r5, #0
 80068e6:	4606      	mov	r6, r0
 80068e8:	db01      	blt.n	80068ee <_malloc_r+0x1a>
 80068ea:	42a9      	cmp	r1, r5
 80068ec:	d903      	bls.n	80068f6 <_malloc_r+0x22>
 80068ee:	230c      	movs	r3, #12
 80068f0:	6033      	str	r3, [r6, #0]
 80068f2:	2000      	movs	r0, #0
 80068f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068f6:	f000 fbdf 	bl	80070b8 <__malloc_lock>
 80068fa:	4921      	ldr	r1, [pc, #132]	; (8006980 <_malloc_r+0xac>)
 80068fc:	680a      	ldr	r2, [r1, #0]
 80068fe:	4614      	mov	r4, r2
 8006900:	b99c      	cbnz	r4, 800692a <_malloc_r+0x56>
 8006902:	4f20      	ldr	r7, [pc, #128]	; (8006984 <_malloc_r+0xb0>)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	b923      	cbnz	r3, 8006912 <_malloc_r+0x3e>
 8006908:	4621      	mov	r1, r4
 800690a:	4630      	mov	r0, r6
 800690c:	f000 fb2a 	bl	8006f64 <_sbrk_r>
 8006910:	6038      	str	r0, [r7, #0]
 8006912:	4629      	mov	r1, r5
 8006914:	4630      	mov	r0, r6
 8006916:	f000 fb25 	bl	8006f64 <_sbrk_r>
 800691a:	1c43      	adds	r3, r0, #1
 800691c:	d123      	bne.n	8006966 <_malloc_r+0x92>
 800691e:	230c      	movs	r3, #12
 8006920:	6033      	str	r3, [r6, #0]
 8006922:	4630      	mov	r0, r6
 8006924:	f000 fbce 	bl	80070c4 <__malloc_unlock>
 8006928:	e7e3      	b.n	80068f2 <_malloc_r+0x1e>
 800692a:	6823      	ldr	r3, [r4, #0]
 800692c:	1b5b      	subs	r3, r3, r5
 800692e:	d417      	bmi.n	8006960 <_malloc_r+0x8c>
 8006930:	2b0b      	cmp	r3, #11
 8006932:	d903      	bls.n	800693c <_malloc_r+0x68>
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	441c      	add	r4, r3
 8006938:	6025      	str	r5, [r4, #0]
 800693a:	e004      	b.n	8006946 <_malloc_r+0x72>
 800693c:	6863      	ldr	r3, [r4, #4]
 800693e:	42a2      	cmp	r2, r4
 8006940:	bf0c      	ite	eq
 8006942:	600b      	streq	r3, [r1, #0]
 8006944:	6053      	strne	r3, [r2, #4]
 8006946:	4630      	mov	r0, r6
 8006948:	f000 fbbc 	bl	80070c4 <__malloc_unlock>
 800694c:	f104 000b 	add.w	r0, r4, #11
 8006950:	1d23      	adds	r3, r4, #4
 8006952:	f020 0007 	bic.w	r0, r0, #7
 8006956:	1ac2      	subs	r2, r0, r3
 8006958:	d0cc      	beq.n	80068f4 <_malloc_r+0x20>
 800695a:	1a1b      	subs	r3, r3, r0
 800695c:	50a3      	str	r3, [r4, r2]
 800695e:	e7c9      	b.n	80068f4 <_malloc_r+0x20>
 8006960:	4622      	mov	r2, r4
 8006962:	6864      	ldr	r4, [r4, #4]
 8006964:	e7cc      	b.n	8006900 <_malloc_r+0x2c>
 8006966:	1cc4      	adds	r4, r0, #3
 8006968:	f024 0403 	bic.w	r4, r4, #3
 800696c:	42a0      	cmp	r0, r4
 800696e:	d0e3      	beq.n	8006938 <_malloc_r+0x64>
 8006970:	1a21      	subs	r1, r4, r0
 8006972:	4630      	mov	r0, r6
 8006974:	f000 faf6 	bl	8006f64 <_sbrk_r>
 8006978:	3001      	adds	r0, #1
 800697a:	d1dd      	bne.n	8006938 <_malloc_r+0x64>
 800697c:	e7cf      	b.n	800691e <_malloc_r+0x4a>
 800697e:	bf00      	nop
 8006980:	20000094 	.word	0x20000094
 8006984:	20000098 	.word	0x20000098

08006988 <__sfputc_r>:
 8006988:	6893      	ldr	r3, [r2, #8]
 800698a:	3b01      	subs	r3, #1
 800698c:	2b00      	cmp	r3, #0
 800698e:	b410      	push	{r4}
 8006990:	6093      	str	r3, [r2, #8]
 8006992:	da08      	bge.n	80069a6 <__sfputc_r+0x1e>
 8006994:	6994      	ldr	r4, [r2, #24]
 8006996:	42a3      	cmp	r3, r4
 8006998:	db01      	blt.n	800699e <__sfputc_r+0x16>
 800699a:	290a      	cmp	r1, #10
 800699c:	d103      	bne.n	80069a6 <__sfputc_r+0x1e>
 800699e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069a2:	f7ff bc69 	b.w	8006278 <__swbuf_r>
 80069a6:	6813      	ldr	r3, [r2, #0]
 80069a8:	1c58      	adds	r0, r3, #1
 80069aa:	6010      	str	r0, [r2, #0]
 80069ac:	7019      	strb	r1, [r3, #0]
 80069ae:	4608      	mov	r0, r1
 80069b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80069b4:	4770      	bx	lr

080069b6 <__sfputs_r>:
 80069b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069b8:	4606      	mov	r6, r0
 80069ba:	460f      	mov	r7, r1
 80069bc:	4614      	mov	r4, r2
 80069be:	18d5      	adds	r5, r2, r3
 80069c0:	42ac      	cmp	r4, r5
 80069c2:	d101      	bne.n	80069c8 <__sfputs_r+0x12>
 80069c4:	2000      	movs	r0, #0
 80069c6:	e007      	b.n	80069d8 <__sfputs_r+0x22>
 80069c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069cc:	463a      	mov	r2, r7
 80069ce:	4630      	mov	r0, r6
 80069d0:	f7ff ffda 	bl	8006988 <__sfputc_r>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	d1f3      	bne.n	80069c0 <__sfputs_r+0xa>
 80069d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080069dc <_vfiprintf_r>:
 80069dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069e0:	460d      	mov	r5, r1
 80069e2:	b09d      	sub	sp, #116	; 0x74
 80069e4:	4614      	mov	r4, r2
 80069e6:	4698      	mov	r8, r3
 80069e8:	4606      	mov	r6, r0
 80069ea:	b118      	cbz	r0, 80069f4 <_vfiprintf_r+0x18>
 80069ec:	6983      	ldr	r3, [r0, #24]
 80069ee:	b90b      	cbnz	r3, 80069f4 <_vfiprintf_r+0x18>
 80069f0:	f7ff fe1c 	bl	800662c <__sinit>
 80069f4:	4b89      	ldr	r3, [pc, #548]	; (8006c1c <_vfiprintf_r+0x240>)
 80069f6:	429d      	cmp	r5, r3
 80069f8:	d11b      	bne.n	8006a32 <_vfiprintf_r+0x56>
 80069fa:	6875      	ldr	r5, [r6, #4]
 80069fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80069fe:	07d9      	lsls	r1, r3, #31
 8006a00:	d405      	bmi.n	8006a0e <_vfiprintf_r+0x32>
 8006a02:	89ab      	ldrh	r3, [r5, #12]
 8006a04:	059a      	lsls	r2, r3, #22
 8006a06:	d402      	bmi.n	8006a0e <_vfiprintf_r+0x32>
 8006a08:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a0a:	f7ff fead 	bl	8006768 <__retarget_lock_acquire_recursive>
 8006a0e:	89ab      	ldrh	r3, [r5, #12]
 8006a10:	071b      	lsls	r3, r3, #28
 8006a12:	d501      	bpl.n	8006a18 <_vfiprintf_r+0x3c>
 8006a14:	692b      	ldr	r3, [r5, #16]
 8006a16:	b9eb      	cbnz	r3, 8006a54 <_vfiprintf_r+0x78>
 8006a18:	4629      	mov	r1, r5
 8006a1a:	4630      	mov	r0, r6
 8006a1c:	f7ff fc7e 	bl	800631c <__swsetup_r>
 8006a20:	b1c0      	cbz	r0, 8006a54 <_vfiprintf_r+0x78>
 8006a22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a24:	07dc      	lsls	r4, r3, #31
 8006a26:	d50e      	bpl.n	8006a46 <_vfiprintf_r+0x6a>
 8006a28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a2c:	b01d      	add	sp, #116	; 0x74
 8006a2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a32:	4b7b      	ldr	r3, [pc, #492]	; (8006c20 <_vfiprintf_r+0x244>)
 8006a34:	429d      	cmp	r5, r3
 8006a36:	d101      	bne.n	8006a3c <_vfiprintf_r+0x60>
 8006a38:	68b5      	ldr	r5, [r6, #8]
 8006a3a:	e7df      	b.n	80069fc <_vfiprintf_r+0x20>
 8006a3c:	4b79      	ldr	r3, [pc, #484]	; (8006c24 <_vfiprintf_r+0x248>)
 8006a3e:	429d      	cmp	r5, r3
 8006a40:	bf08      	it	eq
 8006a42:	68f5      	ldreq	r5, [r6, #12]
 8006a44:	e7da      	b.n	80069fc <_vfiprintf_r+0x20>
 8006a46:	89ab      	ldrh	r3, [r5, #12]
 8006a48:	0598      	lsls	r0, r3, #22
 8006a4a:	d4ed      	bmi.n	8006a28 <_vfiprintf_r+0x4c>
 8006a4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a4e:	f7ff fe8c 	bl	800676a <__retarget_lock_release_recursive>
 8006a52:	e7e9      	b.n	8006a28 <_vfiprintf_r+0x4c>
 8006a54:	2300      	movs	r3, #0
 8006a56:	9309      	str	r3, [sp, #36]	; 0x24
 8006a58:	2320      	movs	r3, #32
 8006a5a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a62:	2330      	movs	r3, #48	; 0x30
 8006a64:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006c28 <_vfiprintf_r+0x24c>
 8006a68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a6c:	f04f 0901 	mov.w	r9, #1
 8006a70:	4623      	mov	r3, r4
 8006a72:	469a      	mov	sl, r3
 8006a74:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a78:	b10a      	cbz	r2, 8006a7e <_vfiprintf_r+0xa2>
 8006a7a:	2a25      	cmp	r2, #37	; 0x25
 8006a7c:	d1f9      	bne.n	8006a72 <_vfiprintf_r+0x96>
 8006a7e:	ebba 0b04 	subs.w	fp, sl, r4
 8006a82:	d00b      	beq.n	8006a9c <_vfiprintf_r+0xc0>
 8006a84:	465b      	mov	r3, fp
 8006a86:	4622      	mov	r2, r4
 8006a88:	4629      	mov	r1, r5
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	f7ff ff93 	bl	80069b6 <__sfputs_r>
 8006a90:	3001      	adds	r0, #1
 8006a92:	f000 80aa 	beq.w	8006bea <_vfiprintf_r+0x20e>
 8006a96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a98:	445a      	add	r2, fp
 8006a9a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a9c:	f89a 3000 	ldrb.w	r3, [sl]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 80a2 	beq.w	8006bea <_vfiprintf_r+0x20e>
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006aac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ab0:	f10a 0a01 	add.w	sl, sl, #1
 8006ab4:	9304      	str	r3, [sp, #16]
 8006ab6:	9307      	str	r3, [sp, #28]
 8006ab8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006abc:	931a      	str	r3, [sp, #104]	; 0x68
 8006abe:	4654      	mov	r4, sl
 8006ac0:	2205      	movs	r2, #5
 8006ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ac6:	4858      	ldr	r0, [pc, #352]	; (8006c28 <_vfiprintf_r+0x24c>)
 8006ac8:	f7f9 fba2 	bl	8000210 <memchr>
 8006acc:	9a04      	ldr	r2, [sp, #16]
 8006ace:	b9d8      	cbnz	r0, 8006b08 <_vfiprintf_r+0x12c>
 8006ad0:	06d1      	lsls	r1, r2, #27
 8006ad2:	bf44      	itt	mi
 8006ad4:	2320      	movmi	r3, #32
 8006ad6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ada:	0713      	lsls	r3, r2, #28
 8006adc:	bf44      	itt	mi
 8006ade:	232b      	movmi	r3, #43	; 0x2b
 8006ae0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ae4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ae8:	2b2a      	cmp	r3, #42	; 0x2a
 8006aea:	d015      	beq.n	8006b18 <_vfiprintf_r+0x13c>
 8006aec:	9a07      	ldr	r2, [sp, #28]
 8006aee:	4654      	mov	r4, sl
 8006af0:	2000      	movs	r0, #0
 8006af2:	f04f 0c0a 	mov.w	ip, #10
 8006af6:	4621      	mov	r1, r4
 8006af8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006afc:	3b30      	subs	r3, #48	; 0x30
 8006afe:	2b09      	cmp	r3, #9
 8006b00:	d94e      	bls.n	8006ba0 <_vfiprintf_r+0x1c4>
 8006b02:	b1b0      	cbz	r0, 8006b32 <_vfiprintf_r+0x156>
 8006b04:	9207      	str	r2, [sp, #28]
 8006b06:	e014      	b.n	8006b32 <_vfiprintf_r+0x156>
 8006b08:	eba0 0308 	sub.w	r3, r0, r8
 8006b0c:	fa09 f303 	lsl.w	r3, r9, r3
 8006b10:	4313      	orrs	r3, r2
 8006b12:	9304      	str	r3, [sp, #16]
 8006b14:	46a2      	mov	sl, r4
 8006b16:	e7d2      	b.n	8006abe <_vfiprintf_r+0xe2>
 8006b18:	9b03      	ldr	r3, [sp, #12]
 8006b1a:	1d19      	adds	r1, r3, #4
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	9103      	str	r1, [sp, #12]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	bfbb      	ittet	lt
 8006b24:	425b      	neglt	r3, r3
 8006b26:	f042 0202 	orrlt.w	r2, r2, #2
 8006b2a:	9307      	strge	r3, [sp, #28]
 8006b2c:	9307      	strlt	r3, [sp, #28]
 8006b2e:	bfb8      	it	lt
 8006b30:	9204      	strlt	r2, [sp, #16]
 8006b32:	7823      	ldrb	r3, [r4, #0]
 8006b34:	2b2e      	cmp	r3, #46	; 0x2e
 8006b36:	d10c      	bne.n	8006b52 <_vfiprintf_r+0x176>
 8006b38:	7863      	ldrb	r3, [r4, #1]
 8006b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b3c:	d135      	bne.n	8006baa <_vfiprintf_r+0x1ce>
 8006b3e:	9b03      	ldr	r3, [sp, #12]
 8006b40:	1d1a      	adds	r2, r3, #4
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	9203      	str	r2, [sp, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	bfb8      	it	lt
 8006b4a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006b4e:	3402      	adds	r4, #2
 8006b50:	9305      	str	r3, [sp, #20]
 8006b52:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006c38 <_vfiprintf_r+0x25c>
 8006b56:	7821      	ldrb	r1, [r4, #0]
 8006b58:	2203      	movs	r2, #3
 8006b5a:	4650      	mov	r0, sl
 8006b5c:	f7f9 fb58 	bl	8000210 <memchr>
 8006b60:	b140      	cbz	r0, 8006b74 <_vfiprintf_r+0x198>
 8006b62:	2340      	movs	r3, #64	; 0x40
 8006b64:	eba0 000a 	sub.w	r0, r0, sl
 8006b68:	fa03 f000 	lsl.w	r0, r3, r0
 8006b6c:	9b04      	ldr	r3, [sp, #16]
 8006b6e:	4303      	orrs	r3, r0
 8006b70:	3401      	adds	r4, #1
 8006b72:	9304      	str	r3, [sp, #16]
 8006b74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b78:	482c      	ldr	r0, [pc, #176]	; (8006c2c <_vfiprintf_r+0x250>)
 8006b7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b7e:	2206      	movs	r2, #6
 8006b80:	f7f9 fb46 	bl	8000210 <memchr>
 8006b84:	2800      	cmp	r0, #0
 8006b86:	d03f      	beq.n	8006c08 <_vfiprintf_r+0x22c>
 8006b88:	4b29      	ldr	r3, [pc, #164]	; (8006c30 <_vfiprintf_r+0x254>)
 8006b8a:	bb1b      	cbnz	r3, 8006bd4 <_vfiprintf_r+0x1f8>
 8006b8c:	9b03      	ldr	r3, [sp, #12]
 8006b8e:	3307      	adds	r3, #7
 8006b90:	f023 0307 	bic.w	r3, r3, #7
 8006b94:	3308      	adds	r3, #8
 8006b96:	9303      	str	r3, [sp, #12]
 8006b98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b9a:	443b      	add	r3, r7
 8006b9c:	9309      	str	r3, [sp, #36]	; 0x24
 8006b9e:	e767      	b.n	8006a70 <_vfiprintf_r+0x94>
 8006ba0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ba4:	460c      	mov	r4, r1
 8006ba6:	2001      	movs	r0, #1
 8006ba8:	e7a5      	b.n	8006af6 <_vfiprintf_r+0x11a>
 8006baa:	2300      	movs	r3, #0
 8006bac:	3401      	adds	r4, #1
 8006bae:	9305      	str	r3, [sp, #20]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	f04f 0c0a 	mov.w	ip, #10
 8006bb6:	4620      	mov	r0, r4
 8006bb8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bbc:	3a30      	subs	r2, #48	; 0x30
 8006bbe:	2a09      	cmp	r2, #9
 8006bc0:	d903      	bls.n	8006bca <_vfiprintf_r+0x1ee>
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d0c5      	beq.n	8006b52 <_vfiprintf_r+0x176>
 8006bc6:	9105      	str	r1, [sp, #20]
 8006bc8:	e7c3      	b.n	8006b52 <_vfiprintf_r+0x176>
 8006bca:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bce:	4604      	mov	r4, r0
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e7f0      	b.n	8006bb6 <_vfiprintf_r+0x1da>
 8006bd4:	ab03      	add	r3, sp, #12
 8006bd6:	9300      	str	r3, [sp, #0]
 8006bd8:	462a      	mov	r2, r5
 8006bda:	4b16      	ldr	r3, [pc, #88]	; (8006c34 <_vfiprintf_r+0x258>)
 8006bdc:	a904      	add	r1, sp, #16
 8006bde:	4630      	mov	r0, r6
 8006be0:	f3af 8000 	nop.w
 8006be4:	4607      	mov	r7, r0
 8006be6:	1c78      	adds	r0, r7, #1
 8006be8:	d1d6      	bne.n	8006b98 <_vfiprintf_r+0x1bc>
 8006bea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006bec:	07d9      	lsls	r1, r3, #31
 8006bee:	d405      	bmi.n	8006bfc <_vfiprintf_r+0x220>
 8006bf0:	89ab      	ldrh	r3, [r5, #12]
 8006bf2:	059a      	lsls	r2, r3, #22
 8006bf4:	d402      	bmi.n	8006bfc <_vfiprintf_r+0x220>
 8006bf6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006bf8:	f7ff fdb7 	bl	800676a <__retarget_lock_release_recursive>
 8006bfc:	89ab      	ldrh	r3, [r5, #12]
 8006bfe:	065b      	lsls	r3, r3, #25
 8006c00:	f53f af12 	bmi.w	8006a28 <_vfiprintf_r+0x4c>
 8006c04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006c06:	e711      	b.n	8006a2c <_vfiprintf_r+0x50>
 8006c08:	ab03      	add	r3, sp, #12
 8006c0a:	9300      	str	r3, [sp, #0]
 8006c0c:	462a      	mov	r2, r5
 8006c0e:	4b09      	ldr	r3, [pc, #36]	; (8006c34 <_vfiprintf_r+0x258>)
 8006c10:	a904      	add	r1, sp, #16
 8006c12:	4630      	mov	r0, r6
 8006c14:	f000 f880 	bl	8006d18 <_printf_i>
 8006c18:	e7e4      	b.n	8006be4 <_vfiprintf_r+0x208>
 8006c1a:	bf00      	nop
 8006c1c:	080079e0 	.word	0x080079e0
 8006c20:	08007a00 	.word	0x08007a00
 8006c24:	080079c0 	.word	0x080079c0
 8006c28:	08007a20 	.word	0x08007a20
 8006c2c:	08007a2a 	.word	0x08007a2a
 8006c30:	00000000 	.word	0x00000000
 8006c34:	080069b7 	.word	0x080069b7
 8006c38:	08007a26 	.word	0x08007a26

08006c3c <_printf_common>:
 8006c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c40:	4616      	mov	r6, r2
 8006c42:	4699      	mov	r9, r3
 8006c44:	688a      	ldr	r2, [r1, #8]
 8006c46:	690b      	ldr	r3, [r1, #16]
 8006c48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	bfb8      	it	lt
 8006c50:	4613      	movlt	r3, r2
 8006c52:	6033      	str	r3, [r6, #0]
 8006c54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c58:	4607      	mov	r7, r0
 8006c5a:	460c      	mov	r4, r1
 8006c5c:	b10a      	cbz	r2, 8006c62 <_printf_common+0x26>
 8006c5e:	3301      	adds	r3, #1
 8006c60:	6033      	str	r3, [r6, #0]
 8006c62:	6823      	ldr	r3, [r4, #0]
 8006c64:	0699      	lsls	r1, r3, #26
 8006c66:	bf42      	ittt	mi
 8006c68:	6833      	ldrmi	r3, [r6, #0]
 8006c6a:	3302      	addmi	r3, #2
 8006c6c:	6033      	strmi	r3, [r6, #0]
 8006c6e:	6825      	ldr	r5, [r4, #0]
 8006c70:	f015 0506 	ands.w	r5, r5, #6
 8006c74:	d106      	bne.n	8006c84 <_printf_common+0x48>
 8006c76:	f104 0a19 	add.w	sl, r4, #25
 8006c7a:	68e3      	ldr	r3, [r4, #12]
 8006c7c:	6832      	ldr	r2, [r6, #0]
 8006c7e:	1a9b      	subs	r3, r3, r2
 8006c80:	42ab      	cmp	r3, r5
 8006c82:	dc26      	bgt.n	8006cd2 <_printf_common+0x96>
 8006c84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006c88:	1e13      	subs	r3, r2, #0
 8006c8a:	6822      	ldr	r2, [r4, #0]
 8006c8c:	bf18      	it	ne
 8006c8e:	2301      	movne	r3, #1
 8006c90:	0692      	lsls	r2, r2, #26
 8006c92:	d42b      	bmi.n	8006cec <_printf_common+0xb0>
 8006c94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c98:	4649      	mov	r1, r9
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	47c0      	blx	r8
 8006c9e:	3001      	adds	r0, #1
 8006ca0:	d01e      	beq.n	8006ce0 <_printf_common+0xa4>
 8006ca2:	6823      	ldr	r3, [r4, #0]
 8006ca4:	68e5      	ldr	r5, [r4, #12]
 8006ca6:	6832      	ldr	r2, [r6, #0]
 8006ca8:	f003 0306 	and.w	r3, r3, #6
 8006cac:	2b04      	cmp	r3, #4
 8006cae:	bf08      	it	eq
 8006cb0:	1aad      	subeq	r5, r5, r2
 8006cb2:	68a3      	ldr	r3, [r4, #8]
 8006cb4:	6922      	ldr	r2, [r4, #16]
 8006cb6:	bf0c      	ite	eq
 8006cb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cbc:	2500      	movne	r5, #0
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	bfc4      	itt	gt
 8006cc2:	1a9b      	subgt	r3, r3, r2
 8006cc4:	18ed      	addgt	r5, r5, r3
 8006cc6:	2600      	movs	r6, #0
 8006cc8:	341a      	adds	r4, #26
 8006cca:	42b5      	cmp	r5, r6
 8006ccc:	d11a      	bne.n	8006d04 <_printf_common+0xc8>
 8006cce:	2000      	movs	r0, #0
 8006cd0:	e008      	b.n	8006ce4 <_printf_common+0xa8>
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	4652      	mov	r2, sl
 8006cd6:	4649      	mov	r1, r9
 8006cd8:	4638      	mov	r0, r7
 8006cda:	47c0      	blx	r8
 8006cdc:	3001      	adds	r0, #1
 8006cde:	d103      	bne.n	8006ce8 <_printf_common+0xac>
 8006ce0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ce4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce8:	3501      	adds	r5, #1
 8006cea:	e7c6      	b.n	8006c7a <_printf_common+0x3e>
 8006cec:	18e1      	adds	r1, r4, r3
 8006cee:	1c5a      	adds	r2, r3, #1
 8006cf0:	2030      	movs	r0, #48	; 0x30
 8006cf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006cf6:	4422      	add	r2, r4
 8006cf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006cfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d00:	3302      	adds	r3, #2
 8006d02:	e7c7      	b.n	8006c94 <_printf_common+0x58>
 8006d04:	2301      	movs	r3, #1
 8006d06:	4622      	mov	r2, r4
 8006d08:	4649      	mov	r1, r9
 8006d0a:	4638      	mov	r0, r7
 8006d0c:	47c0      	blx	r8
 8006d0e:	3001      	adds	r0, #1
 8006d10:	d0e6      	beq.n	8006ce0 <_printf_common+0xa4>
 8006d12:	3601      	adds	r6, #1
 8006d14:	e7d9      	b.n	8006cca <_printf_common+0x8e>
	...

08006d18 <_printf_i>:
 8006d18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	4691      	mov	r9, r2
 8006d20:	7e27      	ldrb	r7, [r4, #24]
 8006d22:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006d24:	2f78      	cmp	r7, #120	; 0x78
 8006d26:	4680      	mov	r8, r0
 8006d28:	469a      	mov	sl, r3
 8006d2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d2e:	d807      	bhi.n	8006d40 <_printf_i+0x28>
 8006d30:	2f62      	cmp	r7, #98	; 0x62
 8006d32:	d80a      	bhi.n	8006d4a <_printf_i+0x32>
 8006d34:	2f00      	cmp	r7, #0
 8006d36:	f000 80d8 	beq.w	8006eea <_printf_i+0x1d2>
 8006d3a:	2f58      	cmp	r7, #88	; 0x58
 8006d3c:	f000 80a3 	beq.w	8006e86 <_printf_i+0x16e>
 8006d40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006d44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d48:	e03a      	b.n	8006dc0 <_printf_i+0xa8>
 8006d4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d4e:	2b15      	cmp	r3, #21
 8006d50:	d8f6      	bhi.n	8006d40 <_printf_i+0x28>
 8006d52:	a001      	add	r0, pc, #4	; (adr r0, 8006d58 <_printf_i+0x40>)
 8006d54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006d58:	08006db1 	.word	0x08006db1
 8006d5c:	08006dc5 	.word	0x08006dc5
 8006d60:	08006d41 	.word	0x08006d41
 8006d64:	08006d41 	.word	0x08006d41
 8006d68:	08006d41 	.word	0x08006d41
 8006d6c:	08006d41 	.word	0x08006d41
 8006d70:	08006dc5 	.word	0x08006dc5
 8006d74:	08006d41 	.word	0x08006d41
 8006d78:	08006d41 	.word	0x08006d41
 8006d7c:	08006d41 	.word	0x08006d41
 8006d80:	08006d41 	.word	0x08006d41
 8006d84:	08006ed1 	.word	0x08006ed1
 8006d88:	08006df5 	.word	0x08006df5
 8006d8c:	08006eb3 	.word	0x08006eb3
 8006d90:	08006d41 	.word	0x08006d41
 8006d94:	08006d41 	.word	0x08006d41
 8006d98:	08006ef3 	.word	0x08006ef3
 8006d9c:	08006d41 	.word	0x08006d41
 8006da0:	08006df5 	.word	0x08006df5
 8006da4:	08006d41 	.word	0x08006d41
 8006da8:	08006d41 	.word	0x08006d41
 8006dac:	08006ebb 	.word	0x08006ebb
 8006db0:	680b      	ldr	r3, [r1, #0]
 8006db2:	1d1a      	adds	r2, r3, #4
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	600a      	str	r2, [r1, #0]
 8006db8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006dbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e0a3      	b.n	8006f0c <_printf_i+0x1f4>
 8006dc4:	6825      	ldr	r5, [r4, #0]
 8006dc6:	6808      	ldr	r0, [r1, #0]
 8006dc8:	062e      	lsls	r6, r5, #24
 8006dca:	f100 0304 	add.w	r3, r0, #4
 8006dce:	d50a      	bpl.n	8006de6 <_printf_i+0xce>
 8006dd0:	6805      	ldr	r5, [r0, #0]
 8006dd2:	600b      	str	r3, [r1, #0]
 8006dd4:	2d00      	cmp	r5, #0
 8006dd6:	da03      	bge.n	8006de0 <_printf_i+0xc8>
 8006dd8:	232d      	movs	r3, #45	; 0x2d
 8006dda:	426d      	negs	r5, r5
 8006ddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006de0:	485e      	ldr	r0, [pc, #376]	; (8006f5c <_printf_i+0x244>)
 8006de2:	230a      	movs	r3, #10
 8006de4:	e019      	b.n	8006e1a <_printf_i+0x102>
 8006de6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006dea:	6805      	ldr	r5, [r0, #0]
 8006dec:	600b      	str	r3, [r1, #0]
 8006dee:	bf18      	it	ne
 8006df0:	b22d      	sxthne	r5, r5
 8006df2:	e7ef      	b.n	8006dd4 <_printf_i+0xbc>
 8006df4:	680b      	ldr	r3, [r1, #0]
 8006df6:	6825      	ldr	r5, [r4, #0]
 8006df8:	1d18      	adds	r0, r3, #4
 8006dfa:	6008      	str	r0, [r1, #0]
 8006dfc:	0628      	lsls	r0, r5, #24
 8006dfe:	d501      	bpl.n	8006e04 <_printf_i+0xec>
 8006e00:	681d      	ldr	r5, [r3, #0]
 8006e02:	e002      	b.n	8006e0a <_printf_i+0xf2>
 8006e04:	0669      	lsls	r1, r5, #25
 8006e06:	d5fb      	bpl.n	8006e00 <_printf_i+0xe8>
 8006e08:	881d      	ldrh	r5, [r3, #0]
 8006e0a:	4854      	ldr	r0, [pc, #336]	; (8006f5c <_printf_i+0x244>)
 8006e0c:	2f6f      	cmp	r7, #111	; 0x6f
 8006e0e:	bf0c      	ite	eq
 8006e10:	2308      	moveq	r3, #8
 8006e12:	230a      	movne	r3, #10
 8006e14:	2100      	movs	r1, #0
 8006e16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e1a:	6866      	ldr	r6, [r4, #4]
 8006e1c:	60a6      	str	r6, [r4, #8]
 8006e1e:	2e00      	cmp	r6, #0
 8006e20:	bfa2      	ittt	ge
 8006e22:	6821      	ldrge	r1, [r4, #0]
 8006e24:	f021 0104 	bicge.w	r1, r1, #4
 8006e28:	6021      	strge	r1, [r4, #0]
 8006e2a:	b90d      	cbnz	r5, 8006e30 <_printf_i+0x118>
 8006e2c:	2e00      	cmp	r6, #0
 8006e2e:	d04d      	beq.n	8006ecc <_printf_i+0x1b4>
 8006e30:	4616      	mov	r6, r2
 8006e32:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e36:	fb03 5711 	mls	r7, r3, r1, r5
 8006e3a:	5dc7      	ldrb	r7, [r0, r7]
 8006e3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e40:	462f      	mov	r7, r5
 8006e42:	42bb      	cmp	r3, r7
 8006e44:	460d      	mov	r5, r1
 8006e46:	d9f4      	bls.n	8006e32 <_printf_i+0x11a>
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d10b      	bne.n	8006e64 <_printf_i+0x14c>
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	07df      	lsls	r7, r3, #31
 8006e50:	d508      	bpl.n	8006e64 <_printf_i+0x14c>
 8006e52:	6923      	ldr	r3, [r4, #16]
 8006e54:	6861      	ldr	r1, [r4, #4]
 8006e56:	4299      	cmp	r1, r3
 8006e58:	bfde      	ittt	le
 8006e5a:	2330      	movle	r3, #48	; 0x30
 8006e5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006e60:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006e64:	1b92      	subs	r2, r2, r6
 8006e66:	6122      	str	r2, [r4, #16]
 8006e68:	f8cd a000 	str.w	sl, [sp]
 8006e6c:	464b      	mov	r3, r9
 8006e6e:	aa03      	add	r2, sp, #12
 8006e70:	4621      	mov	r1, r4
 8006e72:	4640      	mov	r0, r8
 8006e74:	f7ff fee2 	bl	8006c3c <_printf_common>
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d14c      	bne.n	8006f16 <_printf_i+0x1fe>
 8006e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e80:	b004      	add	sp, #16
 8006e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e86:	4835      	ldr	r0, [pc, #212]	; (8006f5c <_printf_i+0x244>)
 8006e88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	680e      	ldr	r6, [r1, #0]
 8006e90:	061f      	lsls	r7, r3, #24
 8006e92:	f856 5b04 	ldr.w	r5, [r6], #4
 8006e96:	600e      	str	r6, [r1, #0]
 8006e98:	d514      	bpl.n	8006ec4 <_printf_i+0x1ac>
 8006e9a:	07d9      	lsls	r1, r3, #31
 8006e9c:	bf44      	itt	mi
 8006e9e:	f043 0320 	orrmi.w	r3, r3, #32
 8006ea2:	6023      	strmi	r3, [r4, #0]
 8006ea4:	b91d      	cbnz	r5, 8006eae <_printf_i+0x196>
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	f023 0320 	bic.w	r3, r3, #32
 8006eac:	6023      	str	r3, [r4, #0]
 8006eae:	2310      	movs	r3, #16
 8006eb0:	e7b0      	b.n	8006e14 <_printf_i+0xfc>
 8006eb2:	6823      	ldr	r3, [r4, #0]
 8006eb4:	f043 0320 	orr.w	r3, r3, #32
 8006eb8:	6023      	str	r3, [r4, #0]
 8006eba:	2378      	movs	r3, #120	; 0x78
 8006ebc:	4828      	ldr	r0, [pc, #160]	; (8006f60 <_printf_i+0x248>)
 8006ebe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ec2:	e7e3      	b.n	8006e8c <_printf_i+0x174>
 8006ec4:	065e      	lsls	r6, r3, #25
 8006ec6:	bf48      	it	mi
 8006ec8:	b2ad      	uxthmi	r5, r5
 8006eca:	e7e6      	b.n	8006e9a <_printf_i+0x182>
 8006ecc:	4616      	mov	r6, r2
 8006ece:	e7bb      	b.n	8006e48 <_printf_i+0x130>
 8006ed0:	680b      	ldr	r3, [r1, #0]
 8006ed2:	6826      	ldr	r6, [r4, #0]
 8006ed4:	6960      	ldr	r0, [r4, #20]
 8006ed6:	1d1d      	adds	r5, r3, #4
 8006ed8:	600d      	str	r5, [r1, #0]
 8006eda:	0635      	lsls	r5, r6, #24
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	d501      	bpl.n	8006ee4 <_printf_i+0x1cc>
 8006ee0:	6018      	str	r0, [r3, #0]
 8006ee2:	e002      	b.n	8006eea <_printf_i+0x1d2>
 8006ee4:	0671      	lsls	r1, r6, #25
 8006ee6:	d5fb      	bpl.n	8006ee0 <_printf_i+0x1c8>
 8006ee8:	8018      	strh	r0, [r3, #0]
 8006eea:	2300      	movs	r3, #0
 8006eec:	6123      	str	r3, [r4, #16]
 8006eee:	4616      	mov	r6, r2
 8006ef0:	e7ba      	b.n	8006e68 <_printf_i+0x150>
 8006ef2:	680b      	ldr	r3, [r1, #0]
 8006ef4:	1d1a      	adds	r2, r3, #4
 8006ef6:	600a      	str	r2, [r1, #0]
 8006ef8:	681e      	ldr	r6, [r3, #0]
 8006efa:	6862      	ldr	r2, [r4, #4]
 8006efc:	2100      	movs	r1, #0
 8006efe:	4630      	mov	r0, r6
 8006f00:	f7f9 f986 	bl	8000210 <memchr>
 8006f04:	b108      	cbz	r0, 8006f0a <_printf_i+0x1f2>
 8006f06:	1b80      	subs	r0, r0, r6
 8006f08:	6060      	str	r0, [r4, #4]
 8006f0a:	6863      	ldr	r3, [r4, #4]
 8006f0c:	6123      	str	r3, [r4, #16]
 8006f0e:	2300      	movs	r3, #0
 8006f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f14:	e7a8      	b.n	8006e68 <_printf_i+0x150>
 8006f16:	6923      	ldr	r3, [r4, #16]
 8006f18:	4632      	mov	r2, r6
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	4640      	mov	r0, r8
 8006f1e:	47d0      	blx	sl
 8006f20:	3001      	adds	r0, #1
 8006f22:	d0ab      	beq.n	8006e7c <_printf_i+0x164>
 8006f24:	6823      	ldr	r3, [r4, #0]
 8006f26:	079b      	lsls	r3, r3, #30
 8006f28:	d413      	bmi.n	8006f52 <_printf_i+0x23a>
 8006f2a:	68e0      	ldr	r0, [r4, #12]
 8006f2c:	9b03      	ldr	r3, [sp, #12]
 8006f2e:	4298      	cmp	r0, r3
 8006f30:	bfb8      	it	lt
 8006f32:	4618      	movlt	r0, r3
 8006f34:	e7a4      	b.n	8006e80 <_printf_i+0x168>
 8006f36:	2301      	movs	r3, #1
 8006f38:	4632      	mov	r2, r6
 8006f3a:	4649      	mov	r1, r9
 8006f3c:	4640      	mov	r0, r8
 8006f3e:	47d0      	blx	sl
 8006f40:	3001      	adds	r0, #1
 8006f42:	d09b      	beq.n	8006e7c <_printf_i+0x164>
 8006f44:	3501      	adds	r5, #1
 8006f46:	68e3      	ldr	r3, [r4, #12]
 8006f48:	9903      	ldr	r1, [sp, #12]
 8006f4a:	1a5b      	subs	r3, r3, r1
 8006f4c:	42ab      	cmp	r3, r5
 8006f4e:	dcf2      	bgt.n	8006f36 <_printf_i+0x21e>
 8006f50:	e7eb      	b.n	8006f2a <_printf_i+0x212>
 8006f52:	2500      	movs	r5, #0
 8006f54:	f104 0619 	add.w	r6, r4, #25
 8006f58:	e7f5      	b.n	8006f46 <_printf_i+0x22e>
 8006f5a:	bf00      	nop
 8006f5c:	08007a31 	.word	0x08007a31
 8006f60:	08007a42 	.word	0x08007a42

08006f64 <_sbrk_r>:
 8006f64:	b538      	push	{r3, r4, r5, lr}
 8006f66:	4d06      	ldr	r5, [pc, #24]	; (8006f80 <_sbrk_r+0x1c>)
 8006f68:	2300      	movs	r3, #0
 8006f6a:	4604      	mov	r4, r0
 8006f6c:	4608      	mov	r0, r1
 8006f6e:	602b      	str	r3, [r5, #0]
 8006f70:	f7fb fc7a 	bl	8002868 <_sbrk>
 8006f74:	1c43      	adds	r3, r0, #1
 8006f76:	d102      	bne.n	8006f7e <_sbrk_r+0x1a>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	b103      	cbz	r3, 8006f7e <_sbrk_r+0x1a>
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
 8006f80:	20000500 	.word	0x20000500

08006f84 <__sread>:
 8006f84:	b510      	push	{r4, lr}
 8006f86:	460c      	mov	r4, r1
 8006f88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f8c:	f000 f8a0 	bl	80070d0 <_read_r>
 8006f90:	2800      	cmp	r0, #0
 8006f92:	bfab      	itete	ge
 8006f94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f96:	89a3      	ldrhlt	r3, [r4, #12]
 8006f98:	181b      	addge	r3, r3, r0
 8006f9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f9e:	bfac      	ite	ge
 8006fa0:	6563      	strge	r3, [r4, #84]	; 0x54
 8006fa2:	81a3      	strhlt	r3, [r4, #12]
 8006fa4:	bd10      	pop	{r4, pc}

08006fa6 <__swrite>:
 8006fa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006faa:	461f      	mov	r7, r3
 8006fac:	898b      	ldrh	r3, [r1, #12]
 8006fae:	05db      	lsls	r3, r3, #23
 8006fb0:	4605      	mov	r5, r0
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	4616      	mov	r6, r2
 8006fb6:	d505      	bpl.n	8006fc4 <__swrite+0x1e>
 8006fb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fbc:	2302      	movs	r3, #2
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	f000 f868 	bl	8007094 <_lseek_r>
 8006fc4:	89a3      	ldrh	r3, [r4, #12]
 8006fc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006fca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006fce:	81a3      	strh	r3, [r4, #12]
 8006fd0:	4632      	mov	r2, r6
 8006fd2:	463b      	mov	r3, r7
 8006fd4:	4628      	mov	r0, r5
 8006fd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006fda:	f000 b817 	b.w	800700c <_write_r>

08006fde <__sseek>:
 8006fde:	b510      	push	{r4, lr}
 8006fe0:	460c      	mov	r4, r1
 8006fe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe6:	f000 f855 	bl	8007094 <_lseek_r>
 8006fea:	1c43      	adds	r3, r0, #1
 8006fec:	89a3      	ldrh	r3, [r4, #12]
 8006fee:	bf15      	itete	ne
 8006ff0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ff2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ff6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006ffa:	81a3      	strheq	r3, [r4, #12]
 8006ffc:	bf18      	it	ne
 8006ffe:	81a3      	strhne	r3, [r4, #12]
 8007000:	bd10      	pop	{r4, pc}

08007002 <__sclose>:
 8007002:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007006:	f000 b813 	b.w	8007030 <_close_r>
	...

0800700c <_write_r>:
 800700c:	b538      	push	{r3, r4, r5, lr}
 800700e:	4d07      	ldr	r5, [pc, #28]	; (800702c <_write_r+0x20>)
 8007010:	4604      	mov	r4, r0
 8007012:	4608      	mov	r0, r1
 8007014:	4611      	mov	r1, r2
 8007016:	2200      	movs	r2, #0
 8007018:	602a      	str	r2, [r5, #0]
 800701a:	461a      	mov	r2, r3
 800701c:	f7fb fa0c 	bl	8002438 <_write>
 8007020:	1c43      	adds	r3, r0, #1
 8007022:	d102      	bne.n	800702a <_write_r+0x1e>
 8007024:	682b      	ldr	r3, [r5, #0]
 8007026:	b103      	cbz	r3, 800702a <_write_r+0x1e>
 8007028:	6023      	str	r3, [r4, #0]
 800702a:	bd38      	pop	{r3, r4, r5, pc}
 800702c:	20000500 	.word	0x20000500

08007030 <_close_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4d06      	ldr	r5, [pc, #24]	; (800704c <_close_r+0x1c>)
 8007034:	2300      	movs	r3, #0
 8007036:	4604      	mov	r4, r0
 8007038:	4608      	mov	r0, r1
 800703a:	602b      	str	r3, [r5, #0]
 800703c:	f7fb fbdf 	bl	80027fe <_close>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_close_r+0x1a>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	b103      	cbz	r3, 800704a <_close_r+0x1a>
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	20000500 	.word	0x20000500

08007050 <_fstat_r>:
 8007050:	b538      	push	{r3, r4, r5, lr}
 8007052:	4d07      	ldr	r5, [pc, #28]	; (8007070 <_fstat_r+0x20>)
 8007054:	2300      	movs	r3, #0
 8007056:	4604      	mov	r4, r0
 8007058:	4608      	mov	r0, r1
 800705a:	4611      	mov	r1, r2
 800705c:	602b      	str	r3, [r5, #0]
 800705e:	f7fb fbda 	bl	8002816 <_fstat>
 8007062:	1c43      	adds	r3, r0, #1
 8007064:	d102      	bne.n	800706c <_fstat_r+0x1c>
 8007066:	682b      	ldr	r3, [r5, #0]
 8007068:	b103      	cbz	r3, 800706c <_fstat_r+0x1c>
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	bd38      	pop	{r3, r4, r5, pc}
 800706e:	bf00      	nop
 8007070:	20000500 	.word	0x20000500

08007074 <_isatty_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	4d06      	ldr	r5, [pc, #24]	; (8007090 <_isatty_r+0x1c>)
 8007078:	2300      	movs	r3, #0
 800707a:	4604      	mov	r4, r0
 800707c:	4608      	mov	r0, r1
 800707e:	602b      	str	r3, [r5, #0]
 8007080:	f7fb fbd9 	bl	8002836 <_isatty>
 8007084:	1c43      	adds	r3, r0, #1
 8007086:	d102      	bne.n	800708e <_isatty_r+0x1a>
 8007088:	682b      	ldr	r3, [r5, #0]
 800708a:	b103      	cbz	r3, 800708e <_isatty_r+0x1a>
 800708c:	6023      	str	r3, [r4, #0]
 800708e:	bd38      	pop	{r3, r4, r5, pc}
 8007090:	20000500 	.word	0x20000500

08007094 <_lseek_r>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4d07      	ldr	r5, [pc, #28]	; (80070b4 <_lseek_r+0x20>)
 8007098:	4604      	mov	r4, r0
 800709a:	4608      	mov	r0, r1
 800709c:	4611      	mov	r1, r2
 800709e:	2200      	movs	r2, #0
 80070a0:	602a      	str	r2, [r5, #0]
 80070a2:	461a      	mov	r2, r3
 80070a4:	f7fb fbd2 	bl	800284c <_lseek>
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	d102      	bne.n	80070b2 <_lseek_r+0x1e>
 80070ac:	682b      	ldr	r3, [r5, #0]
 80070ae:	b103      	cbz	r3, 80070b2 <_lseek_r+0x1e>
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	bd38      	pop	{r3, r4, r5, pc}
 80070b4:	20000500 	.word	0x20000500

080070b8 <__malloc_lock>:
 80070b8:	4801      	ldr	r0, [pc, #4]	; (80070c0 <__malloc_lock+0x8>)
 80070ba:	f7ff bb55 	b.w	8006768 <__retarget_lock_acquire_recursive>
 80070be:	bf00      	nop
 80070c0:	200004f8 	.word	0x200004f8

080070c4 <__malloc_unlock>:
 80070c4:	4801      	ldr	r0, [pc, #4]	; (80070cc <__malloc_unlock+0x8>)
 80070c6:	f7ff bb50 	b.w	800676a <__retarget_lock_release_recursive>
 80070ca:	bf00      	nop
 80070cc:	200004f8 	.word	0x200004f8

080070d0 <_read_r>:
 80070d0:	b538      	push	{r3, r4, r5, lr}
 80070d2:	4d07      	ldr	r5, [pc, #28]	; (80070f0 <_read_r+0x20>)
 80070d4:	4604      	mov	r4, r0
 80070d6:	4608      	mov	r0, r1
 80070d8:	4611      	mov	r1, r2
 80070da:	2200      	movs	r2, #0
 80070dc:	602a      	str	r2, [r5, #0]
 80070de:	461a      	mov	r2, r3
 80070e0:	f7fb fb70 	bl	80027c4 <_read>
 80070e4:	1c43      	adds	r3, r0, #1
 80070e6:	d102      	bne.n	80070ee <_read_r+0x1e>
 80070e8:	682b      	ldr	r3, [r5, #0]
 80070ea:	b103      	cbz	r3, 80070ee <_read_r+0x1e>
 80070ec:	6023      	str	r3, [r4, #0]
 80070ee:	bd38      	pop	{r3, r4, r5, pc}
 80070f0:	20000500 	.word	0x20000500

080070f4 <atan2>:
 80070f4:	f000 b85c 	b.w	80071b0 <__ieee754_atan2>

080070f8 <sqrt>:
 80070f8:	b538      	push	{r3, r4, r5, lr}
 80070fa:	ed2d 8b02 	vpush	{d8}
 80070fe:	ec55 4b10 	vmov	r4, r5, d0
 8007102:	f000 f91f 	bl	8007344 <__ieee754_sqrt>
 8007106:	4b15      	ldr	r3, [pc, #84]	; (800715c <sqrt+0x64>)
 8007108:	eeb0 8a40 	vmov.f32	s16, s0
 800710c:	eef0 8a60 	vmov.f32	s17, s1
 8007110:	f993 3000 	ldrsb.w	r3, [r3]
 8007114:	3301      	adds	r3, #1
 8007116:	d019      	beq.n	800714c <sqrt+0x54>
 8007118:	4622      	mov	r2, r4
 800711a:	462b      	mov	r3, r5
 800711c:	4620      	mov	r0, r4
 800711e:	4629      	mov	r1, r5
 8007120:	f7f9 fd1c 	bl	8000b5c <__aeabi_dcmpun>
 8007124:	b990      	cbnz	r0, 800714c <sqrt+0x54>
 8007126:	2200      	movs	r2, #0
 8007128:	2300      	movs	r3, #0
 800712a:	4620      	mov	r0, r4
 800712c:	4629      	mov	r1, r5
 800712e:	f7f9 fced 	bl	8000b0c <__aeabi_dcmplt>
 8007132:	b158      	cbz	r0, 800714c <sqrt+0x54>
 8007134:	f7fe ffe0 	bl	80060f8 <__errno>
 8007138:	2321      	movs	r3, #33	; 0x21
 800713a:	6003      	str	r3, [r0, #0]
 800713c:	2200      	movs	r2, #0
 800713e:	2300      	movs	r3, #0
 8007140:	4610      	mov	r0, r2
 8007142:	4619      	mov	r1, r3
 8007144:	f7f9 fb9a 	bl	800087c <__aeabi_ddiv>
 8007148:	ec41 0b18 	vmov	d8, r0, r1
 800714c:	eeb0 0a48 	vmov.f32	s0, s16
 8007150:	eef0 0a68 	vmov.f32	s1, s17
 8007154:	ecbd 8b02 	vpop	{d8}
 8007158:	bd38      	pop	{r3, r4, r5, pc}
 800715a:	bf00      	nop
 800715c:	20000070 	.word	0x20000070

08007160 <sqrtf>:
 8007160:	b508      	push	{r3, lr}
 8007162:	ed2d 8b02 	vpush	{d8}
 8007166:	eeb0 8a40 	vmov.f32	s16, s0
 800716a:	f000 f99f 	bl	80074ac <__ieee754_sqrtf>
 800716e:	4b0d      	ldr	r3, [pc, #52]	; (80071a4 <sqrtf+0x44>)
 8007170:	f993 3000 	ldrsb.w	r3, [r3]
 8007174:	3301      	adds	r3, #1
 8007176:	d011      	beq.n	800719c <sqrtf+0x3c>
 8007178:	eeb4 8a48 	vcmp.f32	s16, s16
 800717c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007180:	d60c      	bvs.n	800719c <sqrtf+0x3c>
 8007182:	eddf 8a09 	vldr	s17, [pc, #36]	; 80071a8 <sqrtf+0x48>
 8007186:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800718a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800718e:	d505      	bpl.n	800719c <sqrtf+0x3c>
 8007190:	f7fe ffb2 	bl	80060f8 <__errno>
 8007194:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007198:	2321      	movs	r3, #33	; 0x21
 800719a:	6003      	str	r3, [r0, #0]
 800719c:	ecbd 8b02 	vpop	{d8}
 80071a0:	bd08      	pop	{r3, pc}
 80071a2:	bf00      	nop
 80071a4:	20000070 	.word	0x20000070
	...

080071b0 <__ieee754_atan2>:
 80071b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071b4:	ec57 6b11 	vmov	r6, r7, d1
 80071b8:	4273      	negs	r3, r6
 80071ba:	f8df e184 	ldr.w	lr, [pc, #388]	; 8007340 <__ieee754_atan2+0x190>
 80071be:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80071c2:	4333      	orrs	r3, r6
 80071c4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80071c8:	4573      	cmp	r3, lr
 80071ca:	ec51 0b10 	vmov	r0, r1, d0
 80071ce:	ee11 8a10 	vmov	r8, s2
 80071d2:	d80a      	bhi.n	80071ea <__ieee754_atan2+0x3a>
 80071d4:	4244      	negs	r4, r0
 80071d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80071da:	4304      	orrs	r4, r0
 80071dc:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80071e0:	4574      	cmp	r4, lr
 80071e2:	ee10 9a10 	vmov	r9, s0
 80071e6:	468c      	mov	ip, r1
 80071e8:	d907      	bls.n	80071fa <__ieee754_atan2+0x4a>
 80071ea:	4632      	mov	r2, r6
 80071ec:	463b      	mov	r3, r7
 80071ee:	f7f9 f865 	bl	80002bc <__adddf3>
 80071f2:	ec41 0b10 	vmov	d0, r0, r1
 80071f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071fa:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80071fe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007202:	4334      	orrs	r4, r6
 8007204:	d103      	bne.n	800720e <__ieee754_atan2+0x5e>
 8007206:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800720a:	f000 b955 	b.w	80074b8 <atan>
 800720e:	17bc      	asrs	r4, r7, #30
 8007210:	f004 0402 	and.w	r4, r4, #2
 8007214:	ea53 0909 	orrs.w	r9, r3, r9
 8007218:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800721c:	d107      	bne.n	800722e <__ieee754_atan2+0x7e>
 800721e:	2c02      	cmp	r4, #2
 8007220:	d060      	beq.n	80072e4 <__ieee754_atan2+0x134>
 8007222:	2c03      	cmp	r4, #3
 8007224:	d1e5      	bne.n	80071f2 <__ieee754_atan2+0x42>
 8007226:	a142      	add	r1, pc, #264	; (adr r1, 8007330 <__ieee754_atan2+0x180>)
 8007228:	e9d1 0100 	ldrd	r0, r1, [r1]
 800722c:	e7e1      	b.n	80071f2 <__ieee754_atan2+0x42>
 800722e:	ea52 0808 	orrs.w	r8, r2, r8
 8007232:	d106      	bne.n	8007242 <__ieee754_atan2+0x92>
 8007234:	f1bc 0f00 	cmp.w	ip, #0
 8007238:	da5f      	bge.n	80072fa <__ieee754_atan2+0x14a>
 800723a:	a13f      	add	r1, pc, #252	; (adr r1, 8007338 <__ieee754_atan2+0x188>)
 800723c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007240:	e7d7      	b.n	80071f2 <__ieee754_atan2+0x42>
 8007242:	4572      	cmp	r2, lr
 8007244:	d10f      	bne.n	8007266 <__ieee754_atan2+0xb6>
 8007246:	4293      	cmp	r3, r2
 8007248:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800724c:	d107      	bne.n	800725e <__ieee754_atan2+0xae>
 800724e:	2c02      	cmp	r4, #2
 8007250:	d84c      	bhi.n	80072ec <__ieee754_atan2+0x13c>
 8007252:	4b35      	ldr	r3, [pc, #212]	; (8007328 <__ieee754_atan2+0x178>)
 8007254:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007258:	e9d4 0100 	ldrd	r0, r1, [r4]
 800725c:	e7c9      	b.n	80071f2 <__ieee754_atan2+0x42>
 800725e:	2c02      	cmp	r4, #2
 8007260:	d848      	bhi.n	80072f4 <__ieee754_atan2+0x144>
 8007262:	4b32      	ldr	r3, [pc, #200]	; (800732c <__ieee754_atan2+0x17c>)
 8007264:	e7f6      	b.n	8007254 <__ieee754_atan2+0xa4>
 8007266:	4573      	cmp	r3, lr
 8007268:	d0e4      	beq.n	8007234 <__ieee754_atan2+0x84>
 800726a:	1a9b      	subs	r3, r3, r2
 800726c:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007270:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007274:	da1e      	bge.n	80072b4 <__ieee754_atan2+0x104>
 8007276:	2f00      	cmp	r7, #0
 8007278:	da01      	bge.n	800727e <__ieee754_atan2+0xce>
 800727a:	323c      	adds	r2, #60	; 0x3c
 800727c:	db1e      	blt.n	80072bc <__ieee754_atan2+0x10c>
 800727e:	4632      	mov	r2, r6
 8007280:	463b      	mov	r3, r7
 8007282:	f7f9 fafb 	bl	800087c <__aeabi_ddiv>
 8007286:	ec41 0b10 	vmov	d0, r0, r1
 800728a:	f000 fab5 	bl	80077f8 <fabs>
 800728e:	f000 f913 	bl	80074b8 <atan>
 8007292:	ec51 0b10 	vmov	r0, r1, d0
 8007296:	2c01      	cmp	r4, #1
 8007298:	d013      	beq.n	80072c2 <__ieee754_atan2+0x112>
 800729a:	2c02      	cmp	r4, #2
 800729c:	d015      	beq.n	80072ca <__ieee754_atan2+0x11a>
 800729e:	2c00      	cmp	r4, #0
 80072a0:	d0a7      	beq.n	80071f2 <__ieee754_atan2+0x42>
 80072a2:	a319      	add	r3, pc, #100	; (adr r3, 8007308 <__ieee754_atan2+0x158>)
 80072a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a8:	f7f9 f806 	bl	80002b8 <__aeabi_dsub>
 80072ac:	a318      	add	r3, pc, #96	; (adr r3, 8007310 <__ieee754_atan2+0x160>)
 80072ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b2:	e014      	b.n	80072de <__ieee754_atan2+0x12e>
 80072b4:	a118      	add	r1, pc, #96	; (adr r1, 8007318 <__ieee754_atan2+0x168>)
 80072b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072ba:	e7ec      	b.n	8007296 <__ieee754_atan2+0xe6>
 80072bc:	2000      	movs	r0, #0
 80072be:	2100      	movs	r1, #0
 80072c0:	e7e9      	b.n	8007296 <__ieee754_atan2+0xe6>
 80072c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072c6:	4619      	mov	r1, r3
 80072c8:	e793      	b.n	80071f2 <__ieee754_atan2+0x42>
 80072ca:	a30f      	add	r3, pc, #60	; (adr r3, 8007308 <__ieee754_atan2+0x158>)
 80072cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072d0:	f7f8 fff2 	bl	80002b8 <__aeabi_dsub>
 80072d4:	4602      	mov	r2, r0
 80072d6:	460b      	mov	r3, r1
 80072d8:	a10d      	add	r1, pc, #52	; (adr r1, 8007310 <__ieee754_atan2+0x160>)
 80072da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072de:	f7f8 ffeb 	bl	80002b8 <__aeabi_dsub>
 80072e2:	e786      	b.n	80071f2 <__ieee754_atan2+0x42>
 80072e4:	a10a      	add	r1, pc, #40	; (adr r1, 8007310 <__ieee754_atan2+0x160>)
 80072e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072ea:	e782      	b.n	80071f2 <__ieee754_atan2+0x42>
 80072ec:	a10c      	add	r1, pc, #48	; (adr r1, 8007320 <__ieee754_atan2+0x170>)
 80072ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072f2:	e77e      	b.n	80071f2 <__ieee754_atan2+0x42>
 80072f4:	2000      	movs	r0, #0
 80072f6:	2100      	movs	r1, #0
 80072f8:	e77b      	b.n	80071f2 <__ieee754_atan2+0x42>
 80072fa:	a107      	add	r1, pc, #28	; (adr r1, 8007318 <__ieee754_atan2+0x168>)
 80072fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007300:	e777      	b.n	80071f2 <__ieee754_atan2+0x42>
 8007302:	bf00      	nop
 8007304:	f3af 8000 	nop.w
 8007308:	33145c07 	.word	0x33145c07
 800730c:	3ca1a626 	.word	0x3ca1a626
 8007310:	54442d18 	.word	0x54442d18
 8007314:	400921fb 	.word	0x400921fb
 8007318:	54442d18 	.word	0x54442d18
 800731c:	3ff921fb 	.word	0x3ff921fb
 8007320:	54442d18 	.word	0x54442d18
 8007324:	3fe921fb 	.word	0x3fe921fb
 8007328:	08007a58 	.word	0x08007a58
 800732c:	08007a70 	.word	0x08007a70
 8007330:	54442d18 	.word	0x54442d18
 8007334:	c00921fb 	.word	0xc00921fb
 8007338:	54442d18 	.word	0x54442d18
 800733c:	bff921fb 	.word	0xbff921fb
 8007340:	7ff00000 	.word	0x7ff00000

08007344 <__ieee754_sqrt>:
 8007344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007348:	ec55 4b10 	vmov	r4, r5, d0
 800734c:	4e56      	ldr	r6, [pc, #344]	; (80074a8 <__ieee754_sqrt+0x164>)
 800734e:	43ae      	bics	r6, r5
 8007350:	ee10 0a10 	vmov	r0, s0
 8007354:	ee10 3a10 	vmov	r3, s0
 8007358:	4629      	mov	r1, r5
 800735a:	462a      	mov	r2, r5
 800735c:	d110      	bne.n	8007380 <__ieee754_sqrt+0x3c>
 800735e:	ee10 2a10 	vmov	r2, s0
 8007362:	462b      	mov	r3, r5
 8007364:	f7f9 f960 	bl	8000628 <__aeabi_dmul>
 8007368:	4602      	mov	r2, r0
 800736a:	460b      	mov	r3, r1
 800736c:	4620      	mov	r0, r4
 800736e:	4629      	mov	r1, r5
 8007370:	f7f8 ffa4 	bl	80002bc <__adddf3>
 8007374:	4604      	mov	r4, r0
 8007376:	460d      	mov	r5, r1
 8007378:	ec45 4b10 	vmov	d0, r4, r5
 800737c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007380:	2d00      	cmp	r5, #0
 8007382:	dc10      	bgt.n	80073a6 <__ieee754_sqrt+0x62>
 8007384:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007388:	4330      	orrs	r0, r6
 800738a:	d0f5      	beq.n	8007378 <__ieee754_sqrt+0x34>
 800738c:	b15d      	cbz	r5, 80073a6 <__ieee754_sqrt+0x62>
 800738e:	ee10 2a10 	vmov	r2, s0
 8007392:	462b      	mov	r3, r5
 8007394:	ee10 0a10 	vmov	r0, s0
 8007398:	f7f8 ff8e 	bl	80002b8 <__aeabi_dsub>
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	f7f9 fa6c 	bl	800087c <__aeabi_ddiv>
 80073a4:	e7e6      	b.n	8007374 <__ieee754_sqrt+0x30>
 80073a6:	1509      	asrs	r1, r1, #20
 80073a8:	d076      	beq.n	8007498 <__ieee754_sqrt+0x154>
 80073aa:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80073ae:	07ce      	lsls	r6, r1, #31
 80073b0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 80073b4:	bf5e      	ittt	pl
 80073b6:	0fda      	lsrpl	r2, r3, #31
 80073b8:	005b      	lslpl	r3, r3, #1
 80073ba:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 80073be:	0fda      	lsrs	r2, r3, #31
 80073c0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 80073c4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 80073c8:	2000      	movs	r0, #0
 80073ca:	106d      	asrs	r5, r5, #1
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	f04f 0e16 	mov.w	lr, #22
 80073d2:	4684      	mov	ip, r0
 80073d4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073d8:	eb0c 0401 	add.w	r4, ip, r1
 80073dc:	4294      	cmp	r4, r2
 80073de:	bfde      	ittt	le
 80073e0:	1b12      	suble	r2, r2, r4
 80073e2:	eb04 0c01 	addle.w	ip, r4, r1
 80073e6:	1840      	addle	r0, r0, r1
 80073e8:	0052      	lsls	r2, r2, #1
 80073ea:	f1be 0e01 	subs.w	lr, lr, #1
 80073ee:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80073f2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80073f6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80073fa:	d1ed      	bne.n	80073d8 <__ieee754_sqrt+0x94>
 80073fc:	4671      	mov	r1, lr
 80073fe:	2720      	movs	r7, #32
 8007400:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007404:	4562      	cmp	r2, ip
 8007406:	eb04 060e 	add.w	r6, r4, lr
 800740a:	dc02      	bgt.n	8007412 <__ieee754_sqrt+0xce>
 800740c:	d113      	bne.n	8007436 <__ieee754_sqrt+0xf2>
 800740e:	429e      	cmp	r6, r3
 8007410:	d811      	bhi.n	8007436 <__ieee754_sqrt+0xf2>
 8007412:	2e00      	cmp	r6, #0
 8007414:	eb06 0e04 	add.w	lr, r6, r4
 8007418:	da43      	bge.n	80074a2 <__ieee754_sqrt+0x15e>
 800741a:	f1be 0f00 	cmp.w	lr, #0
 800741e:	db40      	blt.n	80074a2 <__ieee754_sqrt+0x15e>
 8007420:	f10c 0801 	add.w	r8, ip, #1
 8007424:	eba2 020c 	sub.w	r2, r2, ip
 8007428:	429e      	cmp	r6, r3
 800742a:	bf88      	it	hi
 800742c:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8007430:	1b9b      	subs	r3, r3, r6
 8007432:	4421      	add	r1, r4
 8007434:	46c4      	mov	ip, r8
 8007436:	0052      	lsls	r2, r2, #1
 8007438:	3f01      	subs	r7, #1
 800743a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800743e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007442:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007446:	d1dd      	bne.n	8007404 <__ieee754_sqrt+0xc0>
 8007448:	4313      	orrs	r3, r2
 800744a:	d006      	beq.n	800745a <__ieee754_sqrt+0x116>
 800744c:	1c4c      	adds	r4, r1, #1
 800744e:	bf13      	iteet	ne
 8007450:	3101      	addne	r1, #1
 8007452:	3001      	addeq	r0, #1
 8007454:	4639      	moveq	r1, r7
 8007456:	f021 0101 	bicne.w	r1, r1, #1
 800745a:	1043      	asrs	r3, r0, #1
 800745c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007460:	0849      	lsrs	r1, r1, #1
 8007462:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007466:	07c2      	lsls	r2, r0, #31
 8007468:	bf48      	it	mi
 800746a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800746e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007472:	460c      	mov	r4, r1
 8007474:	463d      	mov	r5, r7
 8007476:	e77f      	b.n	8007378 <__ieee754_sqrt+0x34>
 8007478:	0ada      	lsrs	r2, r3, #11
 800747a:	3815      	subs	r0, #21
 800747c:	055b      	lsls	r3, r3, #21
 800747e:	2a00      	cmp	r2, #0
 8007480:	d0fa      	beq.n	8007478 <__ieee754_sqrt+0x134>
 8007482:	02d7      	lsls	r7, r2, #11
 8007484:	d50a      	bpl.n	800749c <__ieee754_sqrt+0x158>
 8007486:	f1c1 0420 	rsb	r4, r1, #32
 800748a:	fa23 f404 	lsr.w	r4, r3, r4
 800748e:	1e4d      	subs	r5, r1, #1
 8007490:	408b      	lsls	r3, r1
 8007492:	4322      	orrs	r2, r4
 8007494:	1b41      	subs	r1, r0, r5
 8007496:	e788      	b.n	80073aa <__ieee754_sqrt+0x66>
 8007498:	4608      	mov	r0, r1
 800749a:	e7f0      	b.n	800747e <__ieee754_sqrt+0x13a>
 800749c:	0052      	lsls	r2, r2, #1
 800749e:	3101      	adds	r1, #1
 80074a0:	e7ef      	b.n	8007482 <__ieee754_sqrt+0x13e>
 80074a2:	46e0      	mov	r8, ip
 80074a4:	e7be      	b.n	8007424 <__ieee754_sqrt+0xe0>
 80074a6:	bf00      	nop
 80074a8:	7ff00000 	.word	0x7ff00000

080074ac <__ieee754_sqrtf>:
 80074ac:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80074b0:	4770      	bx	lr
 80074b2:	0000      	movs	r0, r0
 80074b4:	0000      	movs	r0, r0
	...

080074b8 <atan>:
 80074b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074bc:	ec55 4b10 	vmov	r4, r5, d0
 80074c0:	4bc3      	ldr	r3, [pc, #780]	; (80077d0 <atan+0x318>)
 80074c2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80074c6:	429e      	cmp	r6, r3
 80074c8:	46ab      	mov	fp, r5
 80074ca:	dd18      	ble.n	80074fe <atan+0x46>
 80074cc:	4bc1      	ldr	r3, [pc, #772]	; (80077d4 <atan+0x31c>)
 80074ce:	429e      	cmp	r6, r3
 80074d0:	dc01      	bgt.n	80074d6 <atan+0x1e>
 80074d2:	d109      	bne.n	80074e8 <atan+0x30>
 80074d4:	b144      	cbz	r4, 80074e8 <atan+0x30>
 80074d6:	4622      	mov	r2, r4
 80074d8:	462b      	mov	r3, r5
 80074da:	4620      	mov	r0, r4
 80074dc:	4629      	mov	r1, r5
 80074de:	f7f8 feed 	bl	80002bc <__adddf3>
 80074e2:	4604      	mov	r4, r0
 80074e4:	460d      	mov	r5, r1
 80074e6:	e006      	b.n	80074f6 <atan+0x3e>
 80074e8:	f1bb 0f00 	cmp.w	fp, #0
 80074ec:	f300 8131 	bgt.w	8007752 <atan+0x29a>
 80074f0:	a59b      	add	r5, pc, #620	; (adr r5, 8007760 <atan+0x2a8>)
 80074f2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80074f6:	ec45 4b10 	vmov	d0, r4, r5
 80074fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074fe:	4bb6      	ldr	r3, [pc, #728]	; (80077d8 <atan+0x320>)
 8007500:	429e      	cmp	r6, r3
 8007502:	dc14      	bgt.n	800752e <atan+0x76>
 8007504:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8007508:	429e      	cmp	r6, r3
 800750a:	dc0d      	bgt.n	8007528 <atan+0x70>
 800750c:	a396      	add	r3, pc, #600	; (adr r3, 8007768 <atan+0x2b0>)
 800750e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007512:	ee10 0a10 	vmov	r0, s0
 8007516:	4629      	mov	r1, r5
 8007518:	f7f8 fed0 	bl	80002bc <__adddf3>
 800751c:	4baf      	ldr	r3, [pc, #700]	; (80077dc <atan+0x324>)
 800751e:	2200      	movs	r2, #0
 8007520:	f7f9 fb12 	bl	8000b48 <__aeabi_dcmpgt>
 8007524:	2800      	cmp	r0, #0
 8007526:	d1e6      	bne.n	80074f6 <atan+0x3e>
 8007528:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800752c:	e02b      	b.n	8007586 <atan+0xce>
 800752e:	f000 f963 	bl	80077f8 <fabs>
 8007532:	4bab      	ldr	r3, [pc, #684]	; (80077e0 <atan+0x328>)
 8007534:	429e      	cmp	r6, r3
 8007536:	ec55 4b10 	vmov	r4, r5, d0
 800753a:	f300 80bf 	bgt.w	80076bc <atan+0x204>
 800753e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8007542:	429e      	cmp	r6, r3
 8007544:	f300 80a0 	bgt.w	8007688 <atan+0x1d0>
 8007548:	ee10 2a10 	vmov	r2, s0
 800754c:	ee10 0a10 	vmov	r0, s0
 8007550:	462b      	mov	r3, r5
 8007552:	4629      	mov	r1, r5
 8007554:	f7f8 feb2 	bl	80002bc <__adddf3>
 8007558:	4ba0      	ldr	r3, [pc, #640]	; (80077dc <atan+0x324>)
 800755a:	2200      	movs	r2, #0
 800755c:	f7f8 feac 	bl	80002b8 <__aeabi_dsub>
 8007560:	2200      	movs	r2, #0
 8007562:	4606      	mov	r6, r0
 8007564:	460f      	mov	r7, r1
 8007566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800756a:	4620      	mov	r0, r4
 800756c:	4629      	mov	r1, r5
 800756e:	f7f8 fea5 	bl	80002bc <__adddf3>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4630      	mov	r0, r6
 8007578:	4639      	mov	r1, r7
 800757a:	f7f9 f97f 	bl	800087c <__aeabi_ddiv>
 800757e:	f04f 0a00 	mov.w	sl, #0
 8007582:	4604      	mov	r4, r0
 8007584:	460d      	mov	r5, r1
 8007586:	4622      	mov	r2, r4
 8007588:	462b      	mov	r3, r5
 800758a:	4620      	mov	r0, r4
 800758c:	4629      	mov	r1, r5
 800758e:	f7f9 f84b 	bl	8000628 <__aeabi_dmul>
 8007592:	4602      	mov	r2, r0
 8007594:	460b      	mov	r3, r1
 8007596:	4680      	mov	r8, r0
 8007598:	4689      	mov	r9, r1
 800759a:	f7f9 f845 	bl	8000628 <__aeabi_dmul>
 800759e:	a374      	add	r3, pc, #464	; (adr r3, 8007770 <atan+0x2b8>)
 80075a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a4:	4606      	mov	r6, r0
 80075a6:	460f      	mov	r7, r1
 80075a8:	f7f9 f83e 	bl	8000628 <__aeabi_dmul>
 80075ac:	a372      	add	r3, pc, #456	; (adr r3, 8007778 <atan+0x2c0>)
 80075ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075b2:	f7f8 fe83 	bl	80002bc <__adddf3>
 80075b6:	4632      	mov	r2, r6
 80075b8:	463b      	mov	r3, r7
 80075ba:	f7f9 f835 	bl	8000628 <__aeabi_dmul>
 80075be:	a370      	add	r3, pc, #448	; (adr r3, 8007780 <atan+0x2c8>)
 80075c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075c4:	f7f8 fe7a 	bl	80002bc <__adddf3>
 80075c8:	4632      	mov	r2, r6
 80075ca:	463b      	mov	r3, r7
 80075cc:	f7f9 f82c 	bl	8000628 <__aeabi_dmul>
 80075d0:	a36d      	add	r3, pc, #436	; (adr r3, 8007788 <atan+0x2d0>)
 80075d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d6:	f7f8 fe71 	bl	80002bc <__adddf3>
 80075da:	4632      	mov	r2, r6
 80075dc:	463b      	mov	r3, r7
 80075de:	f7f9 f823 	bl	8000628 <__aeabi_dmul>
 80075e2:	a36b      	add	r3, pc, #428	; (adr r3, 8007790 <atan+0x2d8>)
 80075e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e8:	f7f8 fe68 	bl	80002bc <__adddf3>
 80075ec:	4632      	mov	r2, r6
 80075ee:	463b      	mov	r3, r7
 80075f0:	f7f9 f81a 	bl	8000628 <__aeabi_dmul>
 80075f4:	a368      	add	r3, pc, #416	; (adr r3, 8007798 <atan+0x2e0>)
 80075f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075fa:	f7f8 fe5f 	bl	80002bc <__adddf3>
 80075fe:	4642      	mov	r2, r8
 8007600:	464b      	mov	r3, r9
 8007602:	f7f9 f811 	bl	8000628 <__aeabi_dmul>
 8007606:	a366      	add	r3, pc, #408	; (adr r3, 80077a0 <atan+0x2e8>)
 8007608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760c:	4680      	mov	r8, r0
 800760e:	4689      	mov	r9, r1
 8007610:	4630      	mov	r0, r6
 8007612:	4639      	mov	r1, r7
 8007614:	f7f9 f808 	bl	8000628 <__aeabi_dmul>
 8007618:	a363      	add	r3, pc, #396	; (adr r3, 80077a8 <atan+0x2f0>)
 800761a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800761e:	f7f8 fe4b 	bl	80002b8 <__aeabi_dsub>
 8007622:	4632      	mov	r2, r6
 8007624:	463b      	mov	r3, r7
 8007626:	f7f8 ffff 	bl	8000628 <__aeabi_dmul>
 800762a:	a361      	add	r3, pc, #388	; (adr r3, 80077b0 <atan+0x2f8>)
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f7f8 fe42 	bl	80002b8 <__aeabi_dsub>
 8007634:	4632      	mov	r2, r6
 8007636:	463b      	mov	r3, r7
 8007638:	f7f8 fff6 	bl	8000628 <__aeabi_dmul>
 800763c:	a35e      	add	r3, pc, #376	; (adr r3, 80077b8 <atan+0x300>)
 800763e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007642:	f7f8 fe39 	bl	80002b8 <__aeabi_dsub>
 8007646:	4632      	mov	r2, r6
 8007648:	463b      	mov	r3, r7
 800764a:	f7f8 ffed 	bl	8000628 <__aeabi_dmul>
 800764e:	a35c      	add	r3, pc, #368	; (adr r3, 80077c0 <atan+0x308>)
 8007650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007654:	f7f8 fe30 	bl	80002b8 <__aeabi_dsub>
 8007658:	4632      	mov	r2, r6
 800765a:	463b      	mov	r3, r7
 800765c:	f7f8 ffe4 	bl	8000628 <__aeabi_dmul>
 8007660:	4602      	mov	r2, r0
 8007662:	460b      	mov	r3, r1
 8007664:	4640      	mov	r0, r8
 8007666:	4649      	mov	r1, r9
 8007668:	f7f8 fe28 	bl	80002bc <__adddf3>
 800766c:	4622      	mov	r2, r4
 800766e:	462b      	mov	r3, r5
 8007670:	f7f8 ffda 	bl	8000628 <__aeabi_dmul>
 8007674:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8007678:	4602      	mov	r2, r0
 800767a:	460b      	mov	r3, r1
 800767c:	d14b      	bne.n	8007716 <atan+0x25e>
 800767e:	4620      	mov	r0, r4
 8007680:	4629      	mov	r1, r5
 8007682:	f7f8 fe19 	bl	80002b8 <__aeabi_dsub>
 8007686:	e72c      	b.n	80074e2 <atan+0x2a>
 8007688:	ee10 0a10 	vmov	r0, s0
 800768c:	4b53      	ldr	r3, [pc, #332]	; (80077dc <atan+0x324>)
 800768e:	2200      	movs	r2, #0
 8007690:	4629      	mov	r1, r5
 8007692:	f7f8 fe11 	bl	80002b8 <__aeabi_dsub>
 8007696:	4b51      	ldr	r3, [pc, #324]	; (80077dc <atan+0x324>)
 8007698:	4606      	mov	r6, r0
 800769a:	460f      	mov	r7, r1
 800769c:	2200      	movs	r2, #0
 800769e:	4620      	mov	r0, r4
 80076a0:	4629      	mov	r1, r5
 80076a2:	f7f8 fe0b 	bl	80002bc <__adddf3>
 80076a6:	4602      	mov	r2, r0
 80076a8:	460b      	mov	r3, r1
 80076aa:	4630      	mov	r0, r6
 80076ac:	4639      	mov	r1, r7
 80076ae:	f7f9 f8e5 	bl	800087c <__aeabi_ddiv>
 80076b2:	f04f 0a01 	mov.w	sl, #1
 80076b6:	4604      	mov	r4, r0
 80076b8:	460d      	mov	r5, r1
 80076ba:	e764      	b.n	8007586 <atan+0xce>
 80076bc:	4b49      	ldr	r3, [pc, #292]	; (80077e4 <atan+0x32c>)
 80076be:	429e      	cmp	r6, r3
 80076c0:	da1d      	bge.n	80076fe <atan+0x246>
 80076c2:	ee10 0a10 	vmov	r0, s0
 80076c6:	4b48      	ldr	r3, [pc, #288]	; (80077e8 <atan+0x330>)
 80076c8:	2200      	movs	r2, #0
 80076ca:	4629      	mov	r1, r5
 80076cc:	f7f8 fdf4 	bl	80002b8 <__aeabi_dsub>
 80076d0:	4b45      	ldr	r3, [pc, #276]	; (80077e8 <atan+0x330>)
 80076d2:	4606      	mov	r6, r0
 80076d4:	460f      	mov	r7, r1
 80076d6:	2200      	movs	r2, #0
 80076d8:	4620      	mov	r0, r4
 80076da:	4629      	mov	r1, r5
 80076dc:	f7f8 ffa4 	bl	8000628 <__aeabi_dmul>
 80076e0:	4b3e      	ldr	r3, [pc, #248]	; (80077dc <atan+0x324>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	f7f8 fdea 	bl	80002bc <__adddf3>
 80076e8:	4602      	mov	r2, r0
 80076ea:	460b      	mov	r3, r1
 80076ec:	4630      	mov	r0, r6
 80076ee:	4639      	mov	r1, r7
 80076f0:	f7f9 f8c4 	bl	800087c <__aeabi_ddiv>
 80076f4:	f04f 0a02 	mov.w	sl, #2
 80076f8:	4604      	mov	r4, r0
 80076fa:	460d      	mov	r5, r1
 80076fc:	e743      	b.n	8007586 <atan+0xce>
 80076fe:	462b      	mov	r3, r5
 8007700:	ee10 2a10 	vmov	r2, s0
 8007704:	4939      	ldr	r1, [pc, #228]	; (80077ec <atan+0x334>)
 8007706:	2000      	movs	r0, #0
 8007708:	f7f9 f8b8 	bl	800087c <__aeabi_ddiv>
 800770c:	f04f 0a03 	mov.w	sl, #3
 8007710:	4604      	mov	r4, r0
 8007712:	460d      	mov	r5, r1
 8007714:	e737      	b.n	8007586 <atan+0xce>
 8007716:	4b36      	ldr	r3, [pc, #216]	; (80077f0 <atan+0x338>)
 8007718:	4e36      	ldr	r6, [pc, #216]	; (80077f4 <atan+0x33c>)
 800771a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800771e:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8007722:	e9da 2300 	ldrd	r2, r3, [sl]
 8007726:	f7f8 fdc7 	bl	80002b8 <__aeabi_dsub>
 800772a:	4622      	mov	r2, r4
 800772c:	462b      	mov	r3, r5
 800772e:	f7f8 fdc3 	bl	80002b8 <__aeabi_dsub>
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	e9d6 0100 	ldrd	r0, r1, [r6]
 800773a:	f7f8 fdbd 	bl	80002b8 <__aeabi_dsub>
 800773e:	f1bb 0f00 	cmp.w	fp, #0
 8007742:	4604      	mov	r4, r0
 8007744:	460d      	mov	r5, r1
 8007746:	f6bf aed6 	bge.w	80074f6 <atan+0x3e>
 800774a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800774e:	461d      	mov	r5, r3
 8007750:	e6d1      	b.n	80074f6 <atan+0x3e>
 8007752:	a51d      	add	r5, pc, #116	; (adr r5, 80077c8 <atan+0x310>)
 8007754:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007758:	e6cd      	b.n	80074f6 <atan+0x3e>
 800775a:	bf00      	nop
 800775c:	f3af 8000 	nop.w
 8007760:	54442d18 	.word	0x54442d18
 8007764:	bff921fb 	.word	0xbff921fb
 8007768:	8800759c 	.word	0x8800759c
 800776c:	7e37e43c 	.word	0x7e37e43c
 8007770:	e322da11 	.word	0xe322da11
 8007774:	3f90ad3a 	.word	0x3f90ad3a
 8007778:	24760deb 	.word	0x24760deb
 800777c:	3fa97b4b 	.word	0x3fa97b4b
 8007780:	a0d03d51 	.word	0xa0d03d51
 8007784:	3fb10d66 	.word	0x3fb10d66
 8007788:	c54c206e 	.word	0xc54c206e
 800778c:	3fb745cd 	.word	0x3fb745cd
 8007790:	920083ff 	.word	0x920083ff
 8007794:	3fc24924 	.word	0x3fc24924
 8007798:	5555550d 	.word	0x5555550d
 800779c:	3fd55555 	.word	0x3fd55555
 80077a0:	2c6a6c2f 	.word	0x2c6a6c2f
 80077a4:	bfa2b444 	.word	0xbfa2b444
 80077a8:	52defd9a 	.word	0x52defd9a
 80077ac:	3fadde2d 	.word	0x3fadde2d
 80077b0:	af749a6d 	.word	0xaf749a6d
 80077b4:	3fb3b0f2 	.word	0x3fb3b0f2
 80077b8:	fe231671 	.word	0xfe231671
 80077bc:	3fbc71c6 	.word	0x3fbc71c6
 80077c0:	9998ebc4 	.word	0x9998ebc4
 80077c4:	3fc99999 	.word	0x3fc99999
 80077c8:	54442d18 	.word	0x54442d18
 80077cc:	3ff921fb 	.word	0x3ff921fb
 80077d0:	440fffff 	.word	0x440fffff
 80077d4:	7ff00000 	.word	0x7ff00000
 80077d8:	3fdbffff 	.word	0x3fdbffff
 80077dc:	3ff00000 	.word	0x3ff00000
 80077e0:	3ff2ffff 	.word	0x3ff2ffff
 80077e4:	40038000 	.word	0x40038000
 80077e8:	3ff80000 	.word	0x3ff80000
 80077ec:	bff00000 	.word	0xbff00000
 80077f0:	08007aa8 	.word	0x08007aa8
 80077f4:	08007a88 	.word	0x08007a88

080077f8 <fabs>:
 80077f8:	ec51 0b10 	vmov	r0, r1, d0
 80077fc:	ee10 2a10 	vmov	r2, s0
 8007800:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007804:	ec43 2b10 	vmov	d0, r2, r3
 8007808:	4770      	bx	lr
	...

0800780c <_init>:
 800780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780e:	bf00      	nop
 8007810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007812:	bc08      	pop	{r3}
 8007814:	469e      	mov	lr, r3
 8007816:	4770      	bx	lr

08007818 <_fini>:
 8007818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800781a:	bf00      	nop
 800781c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781e:	bc08      	pop	{r3}
 8007820:	469e      	mov	lr, r3
 8007822:	4770      	bx	lr
