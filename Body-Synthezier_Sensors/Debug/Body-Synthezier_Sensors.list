
Body-Synthezier_Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073fc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  080075d0  080075d0  000175d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007860  08007860  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007860  08007860  00017860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007868  08007868  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007868  08007868  00017868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800786c  0800786c  0001786c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000074  080078e4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  080078e4  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ffc  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000267e  00000000  00000000  000320a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  00034720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c98  00000000  00000000  00035468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000239e7  00000000  00000000  00036100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012634  00000000  00000000  00059ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfcdf  00000000  00000000  0006c11b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013bdfa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d0  00000000  00000000  0013be50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080075b4 	.word	0x080075b4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	080075b4 	.word	0x080075b4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c3c:	f000 b96e 	b.w	8000f1c <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468c      	mov	ip, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	f040 8083 	bne.w	8000d6e <__udivmoddi4+0x116>
 8000c68:	428a      	cmp	r2, r1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	d947      	bls.n	8000cfe <__udivmoddi4+0xa6>
 8000c6e:	fab2 f282 	clz	r2, r2
 8000c72:	b142      	cbz	r2, 8000c86 <__udivmoddi4+0x2e>
 8000c74:	f1c2 0020 	rsb	r0, r2, #32
 8000c78:	fa24 f000 	lsr.w	r0, r4, r0
 8000c7c:	4091      	lsls	r1, r2
 8000c7e:	4097      	lsls	r7, r2
 8000c80:	ea40 0c01 	orr.w	ip, r0, r1
 8000c84:	4094      	lsls	r4, r2
 8000c86:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c8a:	0c23      	lsrs	r3, r4, #16
 8000c8c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c90:	fa1f fe87 	uxth.w	lr, r7
 8000c94:	fb08 c116 	mls	r1, r8, r6, ip
 8000c98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9c:	fb06 f10e 	mul.w	r1, r6, lr
 8000ca0:	4299      	cmp	r1, r3
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x60>
 8000ca4:	18fb      	adds	r3, r7, r3
 8000ca6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000caa:	f080 8119 	bcs.w	8000ee0 <__udivmoddi4+0x288>
 8000cae:	4299      	cmp	r1, r3
 8000cb0:	f240 8116 	bls.w	8000ee0 <__udivmoddi4+0x288>
 8000cb4:	3e02      	subs	r6, #2
 8000cb6:	443b      	add	r3, r7
 8000cb8:	1a5b      	subs	r3, r3, r1
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc0:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d909      	bls.n	8000ce4 <__udivmoddi4+0x8c>
 8000cd0:	193c      	adds	r4, r7, r4
 8000cd2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cd6:	f080 8105 	bcs.w	8000ee4 <__udivmoddi4+0x28c>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f240 8102 	bls.w	8000ee4 <__udivmoddi4+0x28c>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	443c      	add	r4, r7
 8000ce4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce8:	eba4 040e 	sub.w	r4, r4, lr
 8000cec:	2600      	movs	r6, #0
 8000cee:	b11d      	cbz	r5, 8000cf8 <__udivmoddi4+0xa0>
 8000cf0:	40d4      	lsrs	r4, r2
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	b902      	cbnz	r2, 8000d02 <__udivmoddi4+0xaa>
 8000d00:	deff      	udf	#255	; 0xff
 8000d02:	fab2 f282 	clz	r2, r2
 8000d06:	2a00      	cmp	r2, #0
 8000d08:	d150      	bne.n	8000dac <__udivmoddi4+0x154>
 8000d0a:	1bcb      	subs	r3, r1, r7
 8000d0c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d10:	fa1f f887 	uxth.w	r8, r7
 8000d14:	2601      	movs	r6, #1
 8000d16:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d1a:	0c21      	lsrs	r1, r4, #16
 8000d1c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d24:	fb08 f30c 	mul.w	r3, r8, ip
 8000d28:	428b      	cmp	r3, r1
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0xe4>
 8000d2c:	1879      	adds	r1, r7, r1
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0xe2>
 8000d34:	428b      	cmp	r3, r1
 8000d36:	f200 80e9 	bhi.w	8000f0c <__udivmoddi4+0x2b4>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1ac9      	subs	r1, r1, r3
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d48:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x10c>
 8000d54:	193c      	adds	r4, r7, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x10a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80d9 	bhi.w	8000f14 <__udivmoddi4+0x2bc>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e7bf      	b.n	8000cee <__udivmoddi4+0x96>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0x12e>
 8000d72:	2d00      	cmp	r5, #0
 8000d74:	f000 80b1 	beq.w	8000eda <__udivmoddi4+0x282>
 8000d78:	2600      	movs	r6, #0
 8000d7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7e:	4630      	mov	r0, r6
 8000d80:	4631      	mov	r1, r6
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f683 	clz	r6, r3
 8000d8a:	2e00      	cmp	r6, #0
 8000d8c:	d14a      	bne.n	8000e24 <__udivmoddi4+0x1cc>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0x140>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80b8 	bhi.w	8000f08 <__udivmoddi4+0x2b0>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	468c      	mov	ip, r1
 8000da2:	2d00      	cmp	r5, #0
 8000da4:	d0a8      	beq.n	8000cf8 <__udivmoddi4+0xa0>
 8000da6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000daa:	e7a5      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000dac:	f1c2 0320 	rsb	r3, r2, #32
 8000db0:	fa20 f603 	lsr.w	r6, r0, r3
 8000db4:	4097      	lsls	r7, r2
 8000db6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dba:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dbe:	40d9      	lsrs	r1, r3
 8000dc0:	4330      	orrs	r0, r6
 8000dc2:	0c03      	lsrs	r3, r0, #16
 8000dc4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dc8:	fa1f f887 	uxth.w	r8, r7
 8000dcc:	fb0e 1116 	mls	r1, lr, r6, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb06 f108 	mul.w	r1, r6, r8
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	fa04 f402 	lsl.w	r4, r4, r2
 8000dde:	d909      	bls.n	8000df4 <__udivmoddi4+0x19c>
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000de6:	f080 808d 	bcs.w	8000f04 <__udivmoddi4+0x2ac>
 8000dea:	4299      	cmp	r1, r3
 8000dec:	f240 808a 	bls.w	8000f04 <__udivmoddi4+0x2ac>
 8000df0:	3e02      	subs	r6, #2
 8000df2:	443b      	add	r3, r7
 8000df4:	1a5b      	subs	r3, r3, r1
 8000df6:	b281      	uxth	r1, r0
 8000df8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dfc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e04:	fb00 f308 	mul.w	r3, r0, r8
 8000e08:	428b      	cmp	r3, r1
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x1c4>
 8000e0c:	1879      	adds	r1, r7, r1
 8000e0e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e12:	d273      	bcs.n	8000efc <__udivmoddi4+0x2a4>
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d971      	bls.n	8000efc <__udivmoddi4+0x2a4>
 8000e18:	3802      	subs	r0, #2
 8000e1a:	4439      	add	r1, r7
 8000e1c:	1acb      	subs	r3, r1, r3
 8000e1e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e22:	e778      	b.n	8000d16 <__udivmoddi4+0xbe>
 8000e24:	f1c6 0c20 	rsb	ip, r6, #32
 8000e28:	fa03 f406 	lsl.w	r4, r3, r6
 8000e2c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e30:	431c      	orrs	r4, r3
 8000e32:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e36:	fa01 f306 	lsl.w	r3, r1, r6
 8000e3a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e3e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e42:	431f      	orrs	r7, r3
 8000e44:	0c3b      	lsrs	r3, r7, #16
 8000e46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e4a:	fa1f f884 	uxth.w	r8, r4
 8000e4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e52:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e56:	fb09 fa08 	mul.w	sl, r9, r8
 8000e5a:	458a      	cmp	sl, r1
 8000e5c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e60:	fa00 f306 	lsl.w	r3, r0, r6
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x220>
 8000e66:	1861      	adds	r1, r4, r1
 8000e68:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e6c:	d248      	bcs.n	8000f00 <__udivmoddi4+0x2a8>
 8000e6e:	458a      	cmp	sl, r1
 8000e70:	d946      	bls.n	8000f00 <__udivmoddi4+0x2a8>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4421      	add	r1, r4
 8000e78:	eba1 010a 	sub.w	r1, r1, sl
 8000e7c:	b2bf      	uxth	r7, r7
 8000e7e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e82:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e86:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e8a:	fb00 f808 	mul.w	r8, r0, r8
 8000e8e:	45b8      	cmp	r8, r7
 8000e90:	d907      	bls.n	8000ea2 <__udivmoddi4+0x24a>
 8000e92:	19e7      	adds	r7, r4, r7
 8000e94:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e98:	d22e      	bcs.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e9a:	45b8      	cmp	r8, r7
 8000e9c:	d92c      	bls.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4427      	add	r7, r4
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	eba7 0708 	sub.w	r7, r7, r8
 8000eaa:	fba0 8902 	umull	r8, r9, r0, r2
 8000eae:	454f      	cmp	r7, r9
 8000eb0:	46c6      	mov	lr, r8
 8000eb2:	4649      	mov	r1, r9
 8000eb4:	d31a      	bcc.n	8000eec <__udivmoddi4+0x294>
 8000eb6:	d017      	beq.n	8000ee8 <__udivmoddi4+0x290>
 8000eb8:	b15d      	cbz	r5, 8000ed2 <__udivmoddi4+0x27a>
 8000eba:	ebb3 020e 	subs.w	r2, r3, lr
 8000ebe:	eb67 0701 	sbc.w	r7, r7, r1
 8000ec2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ec6:	40f2      	lsrs	r2, r6
 8000ec8:	ea4c 0202 	orr.w	r2, ip, r2
 8000ecc:	40f7      	lsrs	r7, r6
 8000ece:	e9c5 2700 	strd	r2, r7, [r5]
 8000ed2:	2600      	movs	r6, #0
 8000ed4:	4631      	mov	r1, r6
 8000ed6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e70b      	b.n	8000cf8 <__udivmoddi4+0xa0>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0x60>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6fd      	b.n	8000ce4 <__udivmoddi4+0x8c>
 8000ee8:	4543      	cmp	r3, r8
 8000eea:	d2e5      	bcs.n	8000eb8 <__udivmoddi4+0x260>
 8000eec:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ef0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7df      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000ef8:	4608      	mov	r0, r1
 8000efa:	e7d2      	b.n	8000ea2 <__udivmoddi4+0x24a>
 8000efc:	4660      	mov	r0, ip
 8000efe:	e78d      	b.n	8000e1c <__udivmoddi4+0x1c4>
 8000f00:	4681      	mov	r9, r0
 8000f02:	e7b9      	b.n	8000e78 <__udivmoddi4+0x220>
 8000f04:	4666      	mov	r6, ip
 8000f06:	e775      	b.n	8000df4 <__udivmoddi4+0x19c>
 8000f08:	4630      	mov	r0, r6
 8000f0a:	e74a      	b.n	8000da2 <__udivmoddi4+0x14a>
 8000f0c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f10:	4439      	add	r1, r7
 8000f12:	e713      	b.n	8000d3c <__udivmoddi4+0xe4>
 8000f14:	3802      	subs	r0, #2
 8000f16:	443c      	add	r4, r7
 8000f18:	e724      	b.n	8000d64 <__udivmoddi4+0x10c>
 8000f1a:	bf00      	nop

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <MPU6050_init>:

#include "MPU6050_GY521.h"



MPU6050_STATUS MPU6050_init(I2C_HandleTypeDef* __hi2c, MPU6050_Data* Sensor_Data_pointer, MPU6050_ACCL_RES accl_resolution, MPU6050_GYRO_RES gyro_resolution, uint8_t samplerate){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b08a      	sub	sp, #40	; 0x28
 8000f24:	af04      	add	r7, sp, #16
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	460b      	mov	r3, r1
 8000f30:	71fb      	strb	r3, [r7, #7]
 8000f32:	4613      	mov	r3, r2
 8000f34:	71bb      	strb	r3, [r7, #6]

	uint8_t Data=0x00;
 8000f36:	2300      	movs	r3, #0
 8000f38:	75fb      	strb	r3, [r7, #23]
	MPU6050_hi2c = __hi2c;
 8000f3a:	4aa6      	ldr	r2, [pc, #664]	; (80011d4 <MPU6050_init+0x2b4>)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6013      	str	r3, [r2, #0]
	Sensor_Data = Sensor_Data_pointer;
 8000f40:	4aa5      	ldr	r2, [pc, #660]	; (80011d8 <MPU6050_init+0x2b8>)
 8000f42:	68bb      	ldr	r3, [r7, #8]
 8000f44:	6013      	str	r3, [r2, #0]
	printf("MPU6050 init beginn\r\n");
 8000f46:	48a5      	ldr	r0, [pc, #660]	; (80011dc <MPU6050_init+0x2bc>)
 8000f48:	f005 f864 	bl	8006014 <puts>
	//Check if device is ready: Let LED blink 3 times if yes
	if((HAL_I2C_IsDeviceReady(MPU6050_hi2c, MPU6050_ADDR, 2, 20)) != HAL_OK){
 8000f4c:	4ba1      	ldr	r3, [pc, #644]	; (80011d4 <MPU6050_init+0x2b4>)
 8000f4e:	6818      	ldr	r0, [r3, #0]
 8000f50:	2314      	movs	r3, #20
 8000f52:	2202      	movs	r2, #2
 8000f54:	21d0      	movs	r1, #208	; 0xd0
 8000f56:	f002 fef9 	bl	8003d4c <HAL_I2C_IsDeviceReady>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d004      	beq.n	8000f6a <MPU6050_init+0x4a>
		printf("MPU 6050 No Connection\r\n");
 8000f60:	489f      	ldr	r0, [pc, #636]	; (80011e0 <MPU6050_init+0x2c0>)
 8000f62:	f005 f857 	bl	8006014 <puts>
		return MPU6050_Status_Notconnected;
 8000f66:	2304      	movs	r3, #4
 8000f68:	e12f      	b.n	80011ca <MPU6050_init+0x2aa>
    }



	//check WHO_AM_I: If answer is I_AM toggle LED
	HAL_I2C_Mem_Read(MPU6050_hi2c, MPU6050_ADDR, MPU6050_WHO_AM_I_REG, 1, &Data, 1, 1000);
 8000f6a:	4b9a      	ldr	r3, [pc, #616]	; (80011d4 <MPU6050_init+0x2b4>)
 8000f6c:	6818      	ldr	r0, [r3, #0]
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	9302      	str	r3, [sp, #8]
 8000f74:	2301      	movs	r3, #1
 8000f76:	9301      	str	r3, [sp, #4]
 8000f78:	f107 0317 	add.w	r3, r7, #23
 8000f7c:	9300      	str	r3, [sp, #0]
 8000f7e:	2301      	movs	r3, #1
 8000f80:	2275      	movs	r2, #117	; 0x75
 8000f82:	21d0      	movs	r1, #208	; 0xd0
 8000f84:	f002 fcbc 	bl	8003900 <HAL_I2C_Mem_Read>

	if ((Data =! MPU6050_I_AM)) // if-statement is 1 if MPU is present
 8000f88:	2300      	movs	r3, #0
 8000f8a:	75fb      	strb	r3, [r7, #23]
	}



	// wake sensor
	Data=0x00;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR, MPU6050_PWR_MGMT_1_REG, 1, &Data, 1, 1000)!=HAL_OK)
 8000f90:	4b90      	ldr	r3, [pc, #576]	; (80011d4 <MPU6050_init+0x2b4>)
 8000f92:	6818      	ldr	r0, [r3, #0]
 8000f94:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f98:	9302      	str	r3, [sp, #8]
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	9301      	str	r3, [sp, #4]
 8000f9e:	f107 0317 	add.w	r3, r7, #23
 8000fa2:	9300      	str	r3, [sp, #0]
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	226b      	movs	r2, #107	; 0x6b
 8000fa8:	21d0      	movs	r1, #208	; 0xd0
 8000faa:	f002 fbaf 	bl	800370c <HAL_I2C_Mem_Write>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <MPU6050_init+0x98>
	{
		return MPU6050_Status_Invalid;
 8000fb4:	2305      	movs	r3, #5
 8000fb6:	e108      	b.n	80011ca <MPU6050_init+0x2aa>
	}


	// Config range/resolution Gyroscope
	Data = 0xE0 | (gyro_resolution<<3);
 8000fb8:	79bb      	ldrb	r3, [r7, #6]
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	b25b      	sxtb	r3, r3
 8000fbe:	f063 031f 	orn	r3, r3, #31
 8000fc2:	b25b      	sxtb	r3, r3
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR, MPU6050_GYRO_CONFIG_REG, 1, &Data, 1, 1000) != HAL_OK){
 8000fc8:	4b82      	ldr	r3, [pc, #520]	; (80011d4 <MPU6050_init+0x2b4>)
 8000fca:	6818      	ldr	r0, [r3, #0]
 8000fcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fd0:	9302      	str	r3, [sp, #8]
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	f107 0317 	add.w	r3, r7, #23
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	2301      	movs	r3, #1
 8000fde:	221b      	movs	r2, #27
 8000fe0:	21d0      	movs	r1, #208	; 0xd0
 8000fe2:	f002 fb93 	bl	800370c <HAL_I2C_Mem_Write>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MPU6050_init+0xd0>
		return MPU6050_Status_Error;
 8000fec:	2302      	movs	r3, #2
 8000fee:	e0ec      	b.n	80011ca <MPU6050_init+0x2aa>
	}
	//for normalization of Gyroscope range
	switch (gyro_resolution){
 8000ff0:	79bb      	ldrb	r3, [r7, #6]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d81e      	bhi.n	8001034 <MPU6050_init+0x114>
 8000ff6:	a201      	add	r2, pc, #4	; (adr r2, 8000ffc <MPU6050_init+0xdc>)
 8000ff8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffc:	0800100d 	.word	0x0800100d
 8001000:	08001017 	.word	0x08001017
 8001004:	08001021 	.word	0x08001021
 8001008:	0800102b 	.word	0x0800102b
		case MPU6050_GYRO_250deg:
			Sensor_Data->Gyro_mult = MPU6050_GYRO_SENS_250;
 800100c:	4b72      	ldr	r3, [pc, #456]	; (80011d8 <MPU6050_init+0x2b8>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a74      	ldr	r2, [pc, #464]	; (80011e4 <MPU6050_init+0x2c4>)
 8001012:	619a      	str	r2, [r3, #24]
			break;
 8001014:	e00e      	b.n	8001034 <MPU6050_init+0x114>
		case MPU6050_GYRO_500deg:
			Sensor_Data->Gyro_mult = MPU6050_GYRO_SENS_500;
 8001016:	4b70      	ldr	r3, [pc, #448]	; (80011d8 <MPU6050_init+0x2b8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a73      	ldr	r2, [pc, #460]	; (80011e8 <MPU6050_init+0x2c8>)
 800101c:	619a      	str	r2, [r3, #24]
			break;
 800101e:	e009      	b.n	8001034 <MPU6050_init+0x114>
		case MPU6050_GYRO_1000deg:
			Sensor_Data->Gyro_mult = MPU6050_GYRO_SENS_1000;
 8001020:	4b6d      	ldr	r3, [pc, #436]	; (80011d8 <MPU6050_init+0x2b8>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a71      	ldr	r2, [pc, #452]	; (80011ec <MPU6050_init+0x2cc>)
 8001026:	619a      	str	r2, [r3, #24]
			break;
 8001028:	e004      	b.n	8001034 <MPU6050_init+0x114>
		case MPU6050_GYRO_2000deg:
			Sensor_Data->Gyro_mult = MPU6050_GYRO_SENS_2000;
 800102a:	4b6b      	ldr	r3, [pc, #428]	; (80011d8 <MPU6050_init+0x2b8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a70      	ldr	r2, [pc, #448]	; (80011f0 <MPU6050_init+0x2d0>)
 8001030:	619a      	str	r2, [r3, #24]
			break;
 8001032:	bf00      	nop
		}


	// Config range/resolution of Accelerometer
	Data = 0xE0 | (accl_resolution<<3);
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	b25b      	sxtb	r3, r3
 800103a:	f063 031f 	orn	r3, r3, #31
 800103e:	b25b      	sxtb	r3, r3
 8001040:	b2db      	uxtb	r3, r3
 8001042:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR, MPU6050_ACCL_CONFIG_REG, 1, &Data, 1, 1000) != HAL_OK){
 8001044:	4b63      	ldr	r3, [pc, #396]	; (80011d4 <MPU6050_init+0x2b4>)
 8001046:	6818      	ldr	r0, [r3, #0]
 8001048:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104c:	9302      	str	r3, [sp, #8]
 800104e:	2301      	movs	r3, #1
 8001050:	9301      	str	r3, [sp, #4]
 8001052:	f107 0317 	add.w	r3, r7, #23
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	2301      	movs	r3, #1
 800105a:	221c      	movs	r2, #28
 800105c:	21d0      	movs	r1, #208	; 0xd0
 800105e:	f002 fb55 	bl	800370c <HAL_I2C_Mem_Write>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MPU6050_init+0x14c>
		return MPU6050_Status_Error;
 8001068:	2302      	movs	r3, #2
 800106a:	e0ae      	b.n	80011ca <MPU6050_init+0x2aa>
	}

	switch(accl_resolution){
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	2b03      	cmp	r3, #3
 8001070:	d822      	bhi.n	80010b8 <MPU6050_init+0x198>
 8001072:	a201      	add	r2, pc, #4	; (adr r2, 8001078 <MPU6050_init+0x158>)
 8001074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001078:	08001089 	.word	0x08001089
 800107c:	08001095 	.word	0x08001095
 8001080:	080010a1 	.word	0x080010a1
 8001084:	080010ad 	.word	0x080010ad
	case MPU6050_ACCL_2G:
		Sensor_Data->Accl_mult = MPU6050_ACCL_SENS_2;
 8001088:	4b53      	ldr	r3, [pc, #332]	; (80011d8 <MPU6050_init+0x2b8>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8001090:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 8001092:	e011      	b.n	80010b8 <MPU6050_init+0x198>
	case MPU6050_ACCL_4G:
		Sensor_Data->Accl_mult = MPU6050_ACCL_SENS_4;
 8001094:	4b50      	ldr	r3, [pc, #320]	; (80011d8 <MPU6050_init+0x2b8>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 800109c:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800109e:	e00b      	b.n	80010b8 <MPU6050_init+0x198>
	case MPU6050_ACCL_8G:
		Sensor_Data->Accl_mult = MPU6050_ACCL_SENS_8;
 80010a0:	4b4d      	ldr	r3, [pc, #308]	; (80011d8 <MPU6050_init+0x2b8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 80010a8:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80010aa:	e005      	b.n	80010b8 <MPU6050_init+0x198>
	case MPU6050_ACCL_16G:
		Sensor_Data->Accl_mult = MPU6050_ACCL_SENS_16;
 80010ac:	4b4a      	ldr	r3, [pc, #296]	; (80011d8 <MPU6050_init+0x2b8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 80010b4:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 80010b6:	bf00      	nop
	}


	// Config Sample Rate: Sample Rate=8/(1+Data)
	Data=samplerate;
 80010b8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010bc:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR, MPU6050_SMPLRT_DIV_REG, 1, &Data, 1, 1000) != HAL_OK){
 80010be:	4b45      	ldr	r3, [pc, #276]	; (80011d4 <MPU6050_init+0x2b4>)
 80010c0:	6818      	ldr	r0, [r3, #0]
 80010c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010c6:	9302      	str	r3, [sp, #8]
 80010c8:	2301      	movs	r3, #1
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	f107 0317 	add.w	r3, r7, #23
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	2301      	movs	r3, #1
 80010d4:	2219      	movs	r2, #25
 80010d6:	21d0      	movs	r1, #208	; 0xd0
 80010d8:	f002 fb18 	bl	800370c <HAL_I2C_Mem_Write>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MPU6050_init+0x1c6>
		return MPU6050_Status_Error;
 80010e2:	2302      	movs	r3, #2
 80010e4:	e071      	b.n	80011ca <MPU6050_init+0x2aa>
	}

	//Set Gyroscope offset to zero
	Sensor_Data->Gx_offset = 0;
 80010e6:	4b3c      	ldr	r3, [pc, #240]	; (80011d8 <MPU6050_init+0x2b8>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2200      	movs	r2, #0
 80010ec:	80da      	strh	r2, [r3, #6]
	Sensor_Data->Gy_offset = 0;
 80010ee:	4b3a      	ldr	r3, [pc, #232]	; (80011d8 <MPU6050_init+0x2b8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2200      	movs	r2, #0
 80010f4:	811a      	strh	r2, [r3, #8]
	Sensor_Data->Gz_offset = 0;
 80010f6:	4b38      	ldr	r3, [pc, #224]	; (80011d8 <MPU6050_init+0x2b8>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2200      	movs	r2, #0
 80010fc:	815a      	strh	r2, [r3, #10]

	//Set Accelerometer offset to zero
	Sensor_Data->Ax_offset = 0;
 80010fe:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <MPU6050_init+0x2b8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2200      	movs	r2, #0
 8001104:	869a      	strh	r2, [r3, #52]	; 0x34
	Sensor_Data->Ay_offset = 0;
 8001106:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <MPU6050_init+0x2b8>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2200      	movs	r2, #0
 800110c:	86da      	strh	r2, [r3, #54]	; 0x36
	Sensor_Data->Az_offset = 0;
 800110e:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <MPU6050_init+0x2b8>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2200      	movs	r2, #0
 8001114:	871a      	strh	r2, [r3, #56]	; 0x38

//	//Set User Controll, Enable FIFO
	Data = MPU6050_USR_CRTL_FIFO_EN;
 8001116:	2340      	movs	r3, #64	; 0x40
 8001118:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR, MPU6050_USR_CRTL_REG, 1, &Data, 1, 1000) != HAL_OK){
 800111a:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <MPU6050_init+0x2b4>)
 800111c:	6818      	ldr	r0, [r3, #0]
 800111e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001122:	9302      	str	r3, [sp, #8]
 8001124:	2301      	movs	r3, #1
 8001126:	9301      	str	r3, [sp, #4]
 8001128:	f107 0317 	add.w	r3, r7, #23
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	2301      	movs	r3, #1
 8001130:	226a      	movs	r2, #106	; 0x6a
 8001132:	21d0      	movs	r1, #208	; 0xd0
 8001134:	f002 faea 	bl	800370c <HAL_I2C_Mem_Write>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MPU6050_init+0x222>
		return MPU6050_Status_Error;
 800113e:	2302      	movs	r3, #2
 8001140:	e043      	b.n	80011ca <MPU6050_init+0x2aa>
	}
	HAL_I2C_Mem_Read(MPU6050_hi2c, MPU6050_ADDR, MPU6050_USR_CRTL_REG, 1, &Data, 1, 1000);
 8001142:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <MPU6050_init+0x2b4>)
 8001144:	6818      	ldr	r0, [r3, #0]
 8001146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800114a:	9302      	str	r3, [sp, #8]
 800114c:	2301      	movs	r3, #1
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	f107 0317 	add.w	r3, r7, #23
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	2301      	movs	r3, #1
 8001158:	226a      	movs	r2, #106	; 0x6a
 800115a:	21d0      	movs	r1, #208	; 0xd0
 800115c:	f002 fbd0 	bl	8003900 <HAL_I2C_Mem_Read>
	printf("MPU6050_USR_CRTL_REG: %i\r\n",Data);
 8001160:	7dfb      	ldrb	r3, [r7, #23]
 8001162:	4619      	mov	r1, r3
 8001164:	4823      	ldr	r0, [pc, #140]	; (80011f4 <MPU6050_init+0x2d4>)
 8001166:	f004 fecf 	bl	8005f08 <iprintf>
// Interruppt Enable
	Data = MPU6050_INT_EN_DATA_RDY;
 800116a:	2301      	movs	r3, #1
 800116c:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR,MPU6050_RA_INT_ENABLE, 1, &Data, 1, 1000) != HAL_OK){
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <MPU6050_init+0x2b4>)
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001176:	9302      	str	r3, [sp, #8]
 8001178:	2301      	movs	r3, #1
 800117a:	9301      	str	r3, [sp, #4]
 800117c:	f107 0317 	add.w	r3, r7, #23
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2301      	movs	r3, #1
 8001184:	2238      	movs	r2, #56	; 0x38
 8001186:	21d0      	movs	r1, #208	; 0xd0
 8001188:	f002 fac0 	bl	800370c <HAL_I2C_Mem_Write>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MPU6050_init+0x276>
		return MPU6050_Status_Error;
 8001192:	2302      	movs	r3, #2
 8001194:	e019      	b.n	80011ca <MPU6050_init+0x2aa>
	}


	//determines which sensor measurements are loaded into the FIFO buffer
//	Data = MPU6050_FIFO_EN_ACCEL | MPU6050_FIFO_EN_ZG | MPU6050_FIFO_EN_YG | MPU6050_FIFO_EN_XG;
	Data = 0x00;
 8001196:	2300      	movs	r3, #0
 8001198:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR, MPU6050_FIFO_DATA_REG, 1, &Data, 1, 1000) != HAL_OK){
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <MPU6050_init+0x2b4>)
 800119c:	6818      	ldr	r0, [r3, #0]
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	9302      	str	r3, [sp, #8]
 80011a4:	2301      	movs	r3, #1
 80011a6:	9301      	str	r3, [sp, #4]
 80011a8:	f107 0317 	add.w	r3, r7, #23
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	2301      	movs	r3, #1
 80011b0:	2274      	movs	r2, #116	; 0x74
 80011b2:	21d0      	movs	r1, #208	; 0xd0
 80011b4:	f002 faaa 	bl	800370c <HAL_I2C_Mem_Write>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <MPU6050_init+0x2a2>
		return MPU6050_Status_Error;
 80011be:	2302      	movs	r3, #2
 80011c0:	e003      	b.n	80011ca <MPU6050_init+0x2aa>
	}
	printf("MPU6050 init end\r\n");
 80011c2:	480d      	ldr	r0, [pc, #52]	; (80011f8 <MPU6050_init+0x2d8>)
 80011c4:	f004 ff26 	bl	8006014 <puts>
	return MPU6050_Status_OK;
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	200000a8 	.word	0x200000a8
 80011d8:	200000a4 	.word	0x200000a4
 80011dc:	080075d0 	.word	0x080075d0
 80011e0:	080075e8 	.word	0x080075e8
 80011e4:	3bfa232d 	.word	0x3bfa232d
 80011e8:	3c7a232d 	.word	0x3c7a232d
 80011ec:	3cf9c190 	.word	0x3cf9c190
 80011f0:	3d79c190 	.word	0x3d79c190
 80011f4:	08007600 	.word	0x08007600
 80011f8:	0800761c 	.word	0x0800761c

080011fc <MPU6050_Read_Accl>:




MPU6050_STATUS MPU6050_Read_Accl(){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b086      	sub	sp, #24
 8001200:	af04      	add	r7, sp, #16

	uint8_t Rec_Data[6];

	// Read 6Bytes (2byte per axis) starting from ACCL_XOUT_H register
	if(HAL_I2C_Mem_Read (MPU6050_hi2c, MPU6050_ADDR, MPU6050_ACCL_XOUT_H_REG, 1, Rec_Data, 6, 1000) != HAL_OK){
 8001202:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <MPU6050_Read_Accl+0xa8>)
 8001204:	6818      	ldr	r0, [r3, #0]
 8001206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800120a:	9302      	str	r3, [sp, #8]
 800120c:	2306      	movs	r3, #6
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	463b      	mov	r3, r7
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2301      	movs	r3, #1
 8001216:	223b      	movs	r2, #59	; 0x3b
 8001218:	21d0      	movs	r1, #208	; 0xd0
 800121a:	f002 fb71 	bl	8003900 <HAL_I2C_Mem_Read>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MPU6050_Read_Accl+0x2c>
		return MPU6050_Status_Error;
 8001224:	2302      	movs	r3, #2
 8001226:	e039      	b.n	800129c <MPU6050_Read_Accl+0xa0>
	}

	// Data for all axis comes as 6Byte array, in the following it is filled into one 16-bit array for each axis
	Sensor_Data->Accl_X = (int16_t)(Rec_Data[0]<<8 | Rec_Data[1]) - Sensor_Data->Ax_offset;
 8001228:	783b      	ldrb	r3, [r7, #0]
 800122a:	021b      	lsls	r3, r3, #8
 800122c:	b21a      	sxth	r2, r3
 800122e:	787b      	ldrb	r3, [r7, #1]
 8001230:	b21b      	sxth	r3, r3
 8001232:	4313      	orrs	r3, r2
 8001234:	b21b      	sxth	r3, r3
 8001236:	b29a      	uxth	r2, r3
 8001238:	4b1b      	ldr	r3, [pc, #108]	; (80012a8 <MPU6050_Read_Accl+0xac>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001240:	b29b      	uxth	r3, r3
 8001242:	1ad3      	subs	r3, r2, r3
 8001244:	b29a      	uxth	r2, r3
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <MPU6050_Read_Accl+0xac>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b212      	sxth	r2, r2
 800124c:	851a      	strh	r2, [r3, #40]	; 0x28
	Sensor_Data->Accl_Y = (int16_t)(Rec_Data[2]<<8 | Rec_Data[3]) - Sensor_Data->Ay_offset;
 800124e:	78bb      	ldrb	r3, [r7, #2]
 8001250:	021b      	lsls	r3, r3, #8
 8001252:	b21a      	sxth	r2, r3
 8001254:	78fb      	ldrb	r3, [r7, #3]
 8001256:	b21b      	sxth	r3, r3
 8001258:	4313      	orrs	r3, r2
 800125a:	b21b      	sxth	r3, r3
 800125c:	b29a      	uxth	r2, r3
 800125e:	4b12      	ldr	r3, [pc, #72]	; (80012a8 <MPU6050_Read_Accl+0xac>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8001266:	b29b      	uxth	r3, r3
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	b29a      	uxth	r2, r3
 800126c:	4b0e      	ldr	r3, [pc, #56]	; (80012a8 <MPU6050_Read_Accl+0xac>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	b212      	sxth	r2, r2
 8001272:	855a      	strh	r2, [r3, #42]	; 0x2a
	Sensor_Data->Accl_Z = (int16_t)(Rec_Data[4]<<8 | Rec_Data[5]) - Sensor_Data->Az_offset;
 8001274:	793b      	ldrb	r3, [r7, #4]
 8001276:	021b      	lsls	r3, r3, #8
 8001278:	b21a      	sxth	r2, r3
 800127a:	797b      	ldrb	r3, [r7, #5]
 800127c:	b21b      	sxth	r3, r3
 800127e:	4313      	orrs	r3, r2
 8001280:	b21b      	sxth	r3, r3
 8001282:	b29a      	uxth	r2, r3
 8001284:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <MPU6050_Read_Accl+0xac>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800128c:	b29b      	uxth	r3, r3
 800128e:	1ad3      	subs	r3, r2, r3
 8001290:	b29a      	uxth	r2, r3
 8001292:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <MPU6050_Read_Accl+0xac>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	b212      	sxth	r2, r2
 8001298:	859a      	strh	r2, [r3, #44]	; 0x2c

	return MPU6050_Read_OK;
 800129a:	2301      	movs	r3, #1
}
 800129c:	4618      	mov	r0, r3
 800129e:	3708      	adds	r7, #8
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	200000a8 	.word	0x200000a8
 80012a8:	200000a4 	.word	0x200000a4

080012ac <MPU6050_Read_Sensor>:


	return MPU6050_Read_OK;
}

MPU6050_STATUS MPU6050_Read_Sensor(){
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af04      	add	r7, sp, #16

	uint8_t Rec_Data[14];

		// Read 6Bytes (2byte per axis) starting from ACCL_XOUT_H register
		if (HAL_I2C_Mem_Read (MPU6050_hi2c, MPU6050_ADDR, MPU6050_ACCL_XOUT_H_REG, 1, Rec_Data, 14, 1000) != HAL_OK ){
 80012b2:	4b49      	ldr	r3, [pc, #292]	; (80013d8 <MPU6050_Read_Sensor+0x12c>)
 80012b4:	6818      	ldr	r0, [r3, #0]
 80012b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ba:	9302      	str	r3, [sp, #8]
 80012bc:	230e      	movs	r3, #14
 80012be:	9301      	str	r3, [sp, #4]
 80012c0:	463b      	mov	r3, r7
 80012c2:	9300      	str	r3, [sp, #0]
 80012c4:	2301      	movs	r3, #1
 80012c6:	223b      	movs	r2, #59	; 0x3b
 80012c8:	21d0      	movs	r1, #208	; 0xd0
 80012ca:	f002 fb19 	bl	8003900 <HAL_I2C_Mem_Read>
 80012ce:	4603      	mov	r3, r0
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d001      	beq.n	80012d8 <MPU6050_Read_Sensor+0x2c>
			return MPU6050_Status_Error;
 80012d4:	2302      	movs	r3, #2
 80012d6:	e07a      	b.n	80013ce <MPU6050_Read_Sensor+0x122>
		}
		// Get time of new Measurement and safe time of last measurement
		Sensor_Data->Gyro_time	=	DWT->CYCCNT;
 80012d8:	4b40      	ldr	r3, [pc, #256]	; (80013dc <MPU6050_Read_Sensor+0x130>)
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	4b40      	ldr	r3, [pc, #256]	; (80013e0 <MPU6050_Read_Sensor+0x134>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	615a      	str	r2, [r3, #20]
		DWT->CYCCNT				=	0;
 80012e2:	4b3e      	ldr	r3, [pc, #248]	; (80013dc <MPU6050_Read_Sensor+0x130>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]
		// Data for all axis comes as 6Byte array, in the following it is filled into one 16-bit array for each axis
		Sensor_Data->Accl_X = (int16_t)(Rec_Data[0]<<8 | Rec_Data[1]) - Sensor_Data->Ax_offset;
 80012e8:	783b      	ldrb	r3, [r7, #0]
 80012ea:	021b      	lsls	r3, r3, #8
 80012ec:	b21a      	sxth	r2, r3
 80012ee:	787b      	ldrb	r3, [r7, #1]
 80012f0:	b21b      	sxth	r3, r3
 80012f2:	4313      	orrs	r3, r2
 80012f4:	b21b      	sxth	r3, r3
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <MPU6050_Read_Sensor+0x134>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8001300:	b29b      	uxth	r3, r3
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	b29a      	uxth	r2, r3
 8001306:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <MPU6050_Read_Sensor+0x134>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	b212      	sxth	r2, r2
 800130c:	851a      	strh	r2, [r3, #40]	; 0x28
		Sensor_Data->Accl_Y = (int16_t)(Rec_Data[2]<<8 | Rec_Data[3]) - Sensor_Data->Ay_offset;
 800130e:	78bb      	ldrb	r3, [r7, #2]
 8001310:	021b      	lsls	r3, r3, #8
 8001312:	b21a      	sxth	r2, r3
 8001314:	78fb      	ldrb	r3, [r7, #3]
 8001316:	b21b      	sxth	r3, r3
 8001318:	4313      	orrs	r3, r2
 800131a:	b21b      	sxth	r3, r3
 800131c:	b29a      	uxth	r2, r3
 800131e:	4b30      	ldr	r3, [pc, #192]	; (80013e0 <MPU6050_Read_Sensor+0x134>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8001326:	b29b      	uxth	r3, r3
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	b29a      	uxth	r2, r3
 800132c:	4b2c      	ldr	r3, [pc, #176]	; (80013e0 <MPU6050_Read_Sensor+0x134>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	b212      	sxth	r2, r2
 8001332:	855a      	strh	r2, [r3, #42]	; 0x2a
		Sensor_Data->Accl_Z = (int16_t)(Rec_Data[4]<<8 | Rec_Data[5]) - Sensor_Data->Az_offset;
 8001334:	793b      	ldrb	r3, [r7, #4]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	b21a      	sxth	r2, r3
 800133a:	797b      	ldrb	r3, [r7, #5]
 800133c:	b21b      	sxth	r3, r3
 800133e:	4313      	orrs	r3, r2
 8001340:	b21b      	sxth	r3, r3
 8001342:	b29a      	uxth	r2, r3
 8001344:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <MPU6050_Read_Sensor+0x134>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800134c:	b29b      	uxth	r3, r3
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	b29a      	uxth	r2, r3
 8001352:	4b23      	ldr	r3, [pc, #140]	; (80013e0 <MPU6050_Read_Sensor+0x134>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	b212      	sxth	r2, r2
 8001358:	859a      	strh	r2, [r3, #44]	; 0x2c
		// Data for all axis comes as 6Byte array, in the following it is filled into one 16-bit array for each axis
		Sensor_Data->Gyro_X = (int16_t)(Rec_Data[8]<<8 | Rec_Data[9]) - Sensor_Data->Gx_offset;
 800135a:	7a3b      	ldrb	r3, [r7, #8]
 800135c:	021b      	lsls	r3, r3, #8
 800135e:	b21a      	sxth	r2, r3
 8001360:	7a7b      	ldrb	r3, [r7, #9]
 8001362:	b21b      	sxth	r3, r3
 8001364:	4313      	orrs	r3, r2
 8001366:	b21b      	sxth	r3, r3
 8001368:	b29a      	uxth	r2, r3
 800136a:	4b1d      	ldr	r3, [pc, #116]	; (80013e0 <MPU6050_Read_Sensor+0x134>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001372:	b29b      	uxth	r3, r3
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	b29a      	uxth	r2, r3
 8001378:	4b19      	ldr	r3, [pc, #100]	; (80013e0 <MPU6050_Read_Sensor+0x134>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	b212      	sxth	r2, r2
 800137e:	801a      	strh	r2, [r3, #0]
		Sensor_Data->Gyro_Y = (int16_t)(Rec_Data[10]<<8 | Rec_Data[11]) - Sensor_Data->Gy_offset;
 8001380:	7abb      	ldrb	r3, [r7, #10]
 8001382:	021b      	lsls	r3, r3, #8
 8001384:	b21a      	sxth	r2, r3
 8001386:	7afb      	ldrb	r3, [r7, #11]
 8001388:	b21b      	sxth	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	b21b      	sxth	r3, r3
 800138e:	b29a      	uxth	r2, r3
 8001390:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <MPU6050_Read_Sensor+0x134>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001398:	b29b      	uxth	r3, r3
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	b29a      	uxth	r2, r3
 800139e:	4b10      	ldr	r3, [pc, #64]	; (80013e0 <MPU6050_Read_Sensor+0x134>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	b212      	sxth	r2, r2
 80013a4:	805a      	strh	r2, [r3, #2]
		Sensor_Data->Gyro_Z = (int16_t)(Rec_Data[12]<<8 | Rec_Data[13]) - Sensor_Data->Gz_offset;
 80013a6:	7b3b      	ldrb	r3, [r7, #12]
 80013a8:	021b      	lsls	r3, r3, #8
 80013aa:	b21a      	sxth	r2, r3
 80013ac:	7b7b      	ldrb	r3, [r7, #13]
 80013ae:	b21b      	sxth	r3, r3
 80013b0:	4313      	orrs	r3, r2
 80013b2:	b21b      	sxth	r3, r3
 80013b4:	b29a      	uxth	r2, r3
 80013b6:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <MPU6050_Read_Sensor+0x134>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80013be:	b29b      	uxth	r3, r3
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	b29a      	uxth	r2, r3
 80013c4:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MPU6050_Read_Sensor+0x134>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	b212      	sxth	r2, r2
 80013ca:	809a      	strh	r2, [r3, #4]

		return MPU6050_Read_OK;
 80013cc:	2301      	movs	r3, #1
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	200000a8 	.word	0x200000a8
 80013dc:	e0001000 	.word	0xe0001000
 80013e0:	200000a4 	.word	0x200000a4

080013e4 <MPU6050_Calculate_Mean>:


MPU6050_STATUS MPU6050_Calculate_Mean(){
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08c      	sub	sp, #48	; 0x30
 80013e8:	af00      	add	r7, sp, #0
	// Temp memory to sum up values for mean calculation
	// Gyroscope
	int32_t Gx_mean_tempbuffer	=	0;
 80013ea:	2300      	movs	r3, #0
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t Gy_mean_tempbuffer	=	0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t Gz_mean_tempbuffer	=	0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
	// Accelerometer
	int32_t Ax_mean_tempbuffer	=	0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	623b      	str	r3, [r7, #32]
	int32_t Ay_mean_tempbuffer	=	0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
	int32_t Az_mean_tempbuffer	=	0;
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
	// First measurements have to be skipped
	int n_skipping		=	100;
 8001402:	2364      	movs	r3, #100	; 0x64
 8001404:	613b      	str	r3, [r7, #16]
	int n_measurements 	=	500;
 8001406:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800140a:	60fb      	str	r3, [r7, #12]
//	int n_skipping		=	10;
//	int n_measurements 	=	100;
	for (int i=n_skipping; i < n_measurements + n_skipping; i++){
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	e04f      	b.n	80014b2 <MPU6050_Calculate_Mean+0xce>
		// Read Data

		// from Gyroscope
		if (MPU6050_Read_Sensor(Sensor_Data) != MPU6050_Read_OK){
 8001412:	4b45      	ldr	r3, [pc, #276]	; (8001528 <MPU6050_Calculate_Mean+0x144>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff48 	bl	80012ac <MPU6050_Read_Sensor>
 800141c:	4603      	mov	r3, r0
 800141e:	2b01      	cmp	r3, #1
 8001420:	d001      	beq.n	8001426 <MPU6050_Calculate_Mean+0x42>
			return MPU6050_Status_Error;
 8001422:	2302      	movs	r3, #2
 8001424:	e07c      	b.n	8001520 <MPU6050_Calculate_Mean+0x13c>
		}
		int16_t Gx = Sensor_Data	->	Gyro_X;
 8001426:	4b40      	ldr	r3, [pc, #256]	; (8001528 <MPU6050_Calculate_Mean+0x144>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	817b      	strh	r3, [r7, #10]
		int16_t Gy = Sensor_Data	->	Gyro_Y;
 800142e:	4b3e      	ldr	r3, [pc, #248]	; (8001528 <MPU6050_Calculate_Mean+0x144>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	885b      	ldrh	r3, [r3, #2]
 8001434:	813b      	strh	r3, [r7, #8]
		int16_t Gz = Sensor_Data	->	Gyro_Z;
 8001436:	4b3c      	ldr	r3, [pc, #240]	; (8001528 <MPU6050_Calculate_Mean+0x144>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	889b      	ldrh	r3, [r3, #4]
 800143c:	80fb      	strh	r3, [r7, #6]
		// from Accelerometer
		if (MPU6050_Read_Accl(Sensor_Data) != MPU6050_Read_OK){
 800143e:	4b3a      	ldr	r3, [pc, #232]	; (8001528 <MPU6050_Calculate_Mean+0x144>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff feda 	bl	80011fc <MPU6050_Read_Accl>
 8001448:	4603      	mov	r3, r0
 800144a:	2b01      	cmp	r3, #1
 800144c:	d001      	beq.n	8001452 <MPU6050_Calculate_Mean+0x6e>
			return MPU6050_Status_Error;
 800144e:	2302      	movs	r3, #2
 8001450:	e066      	b.n	8001520 <MPU6050_Calculate_Mean+0x13c>
		}
		int16_t Ax = Sensor_Data	->	Accl_X;
 8001452:	4b35      	ldr	r3, [pc, #212]	; (8001528 <MPU6050_Calculate_Mean+0x144>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001458:	80bb      	strh	r3, [r7, #4]
		int16_t Ay = Sensor_Data	->	Accl_Y;
 800145a:	4b33      	ldr	r3, [pc, #204]	; (8001528 <MPU6050_Calculate_Mean+0x144>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001460:	807b      	strh	r3, [r7, #2]
		int16_t Az = Sensor_Data	->	Accl_Z;
 8001462:	4b31      	ldr	r3, [pc, #196]	; (8001528 <MPU6050_Calculate_Mean+0x144>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8001468:	803b      	strh	r3, [r7, #0]
		// sum it up
		Gx_mean_tempbuffer	+=	Gx;
 800146a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800146e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001470:	4413      	add	r3, r2
 8001472:	62fb      	str	r3, [r7, #44]	; 0x2c
		Gy_mean_tempbuffer	+=	Gy;
 8001474:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001478:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800147a:	4413      	add	r3, r2
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
		Gz_mean_tempbuffer	+=	Gz;
 800147e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001484:	4413      	add	r3, r2
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
		Ax_mean_tempbuffer	+=	Ax;
 8001488:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800148c:	6a3a      	ldr	r2, [r7, #32]
 800148e:	4413      	add	r3, r2
 8001490:	623b      	str	r3, [r7, #32]
		Ay_mean_tempbuffer	+=	Ay;
 8001492:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001496:	69fa      	ldr	r2, [r7, #28]
 8001498:	4413      	add	r3, r2
 800149a:	61fb      	str	r3, [r7, #28]
		Az_mean_tempbuffer	+=	Az;
 800149c:	f9b7 3000 	ldrsh.w	r3, [r7]
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	4413      	add	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
		// Wait to prevent double measurements
		HAL_Delay(2);
 80014a6:	2002      	movs	r0, #2
 80014a8:	f001 f9b2 	bl	8002810 <HAL_Delay>
	for (int i=n_skipping; i < n_measurements + n_skipping; i++){
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	3301      	adds	r3, #1
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4413      	add	r3, r2
 80014b8:	697a      	ldr	r2, [r7, #20]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	dba9      	blt.n	8001412 <MPU6050_Calculate_Mean+0x2e>
	}

	//Save offset to Sensor_Data
	//Gyroscope offset
	Sensor_Data->Gx_mean=Gx_mean_tempbuffer/n_measurements;
 80014be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	fb92 f2f3 	sdiv	r2, r2, r3
 80014c6:	4b18      	ldr	r3, [pc, #96]	; (8001528 <MPU6050_Calculate_Mean+0x144>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	b212      	sxth	r2, r2
 80014cc:	819a      	strh	r2, [r3, #12]
	Sensor_Data->Gy_mean=Gy_mean_tempbuffer/n_measurements;
 80014ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	fb92 f2f3 	sdiv	r2, r2, r3
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <MPU6050_Calculate_Mean+0x144>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	b212      	sxth	r2, r2
 80014dc:	81da      	strh	r2, [r3, #14]
	Sensor_Data->Gz_mean=Gz_mean_tempbuffer/n_measurements;
 80014de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	fb92 f2f3 	sdiv	r2, r2, r3
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <MPU6050_Calculate_Mean+0x144>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	b212      	sxth	r2, r2
 80014ec:	821a      	strh	r2, [r3, #16]
	//Accelerometer offset
	Sensor_Data->Ax_mean=Ax_mean_tempbuffer/n_measurements;
 80014ee:	6a3a      	ldr	r2, [r7, #32]
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	fb92 f2f3 	sdiv	r2, r2, r3
 80014f6:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <MPU6050_Calculate_Mean+0x144>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	b212      	sxth	r2, r2
 80014fc:	875a      	strh	r2, [r3, #58]	; 0x3a
	Sensor_Data->Ay_mean=Ay_mean_tempbuffer/n_measurements;
 80014fe:	69fa      	ldr	r2, [r7, #28]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	fb92 f2f3 	sdiv	r2, r2, r3
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MPU6050_Calculate_Mean+0x144>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	b212      	sxth	r2, r2
 800150c:	879a      	strh	r2, [r3, #60]	; 0x3c
	Sensor_Data->Az_mean=Az_mean_tempbuffer/n_measurements;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	fb92 f2f3 	sdiv	r2, r2, r3
 8001516:	4b04      	ldr	r3, [pc, #16]	; (8001528 <MPU6050_Calculate_Mean+0x144>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	b212      	sxth	r2, r2
 800151c:	87da      	strh	r2, [r3, #62]	; 0x3e

	return MPU6050_Read_OK;
 800151e:	2301      	movs	r3, #1
}
 8001520:	4618      	mov	r0, r3
 8001522:	3730      	adds	r7, #48	; 0x30
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	200000a4 	.word	0x200000a4

0800152c <MPU6050_Calibrate>:

MPU6050_STATUS MPU6050_Calibrate(){
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0

	// gravitational constant depending on accelerometer resolution
	int16_t gravitation	= (int16_t)((float)1 / Sensor_Data -> Accl_mult);
 8001532:	4b93      	ldr	r3, [pc, #588]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800153a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800153e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001542:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001546:	ee17 3a90 	vmov	r3, s15
 800154a:	807b      	strh	r3, [r7, #2]
	// allowed deviation from mean for raw data from sensors
	int8_t	gyro_tolerance  = 1;
 800154c:	2301      	movs	r3, #1
 800154e:	707b      	strb	r3, [r7, #1]
	int8_t	accl_tolerance  = 5;
 8001550:	2305      	movs	r3, #5
 8001552:	703b      	strb	r3, [r7, #0]

	// Set offset Initially (offset is subtracted from future measurements)
	Sensor_Data -> Gx_offset		=	Sensor_Data -> Gx_mean;
 8001554:	4b8a      	ldr	r3, [pc, #552]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b89      	ldr	r3, [pc, #548]	; (8001780 <MPU6050_Calibrate+0x254>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001560:	80da      	strh	r2, [r3, #6]
	Sensor_Data -> Gy_offset		=	Sensor_Data -> Gy_mean;
 8001562:	4b87      	ldr	r3, [pc, #540]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	4b86      	ldr	r3, [pc, #536]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800156e:	811a      	strh	r2, [r3, #8]
	Sensor_Data -> Gz_offset		=	Sensor_Data -> Gz_mean;
 8001570:	4b83      	ldr	r3, [pc, #524]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	4b82      	ldr	r3, [pc, #520]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800157c:	815a      	strh	r2, [r3, #10]
	Sensor_Data -> Ax_offset		=	Sensor_Data -> Ax_mean;
 800157e:	4b80      	ldr	r3, [pc, #512]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	4b7f      	ldr	r3, [pc, #508]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	; 0x3a
 800158a:	869a      	strh	r2, [r3, #52]	; 0x34
	Sensor_Data -> Ay_offset		=	Sensor_Data -> Ay_mean;
 800158c:	4b7c      	ldr	r3, [pc, #496]	; (8001780 <MPU6050_Calibrate+0x254>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b7b      	ldr	r3, [pc, #492]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f9b2 203c 	ldrsh.w	r2, [r2, #60]	; 0x3c
 8001598:	86da      	strh	r2, [r3, #54]	; 0x36
	Sensor_Data -> Az_offset		=	(Sensor_Data -> Az_mean) + gravitation;
 800159a:	4b79      	ldr	r3, [pc, #484]	; (8001780 <MPU6050_Calibrate+0x254>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	887b      	ldrh	r3, [r7, #2]
 80015a6:	4413      	add	r3, r2
 80015a8:	b29a      	uxth	r2, r3
 80015aa:	4b75      	ldr	r3, [pc, #468]	; (8001780 <MPU6050_Calibrate+0x254>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	b212      	sxth	r2, r2
 80015b0:	871a      	strh	r2, [r3, #56]	; 0x38

	// Indicator for correct calibration of all axis
	int calibrated = 0;
 80015b2:	2300      	movs	r3, #0
 80015b4:	607b      	str	r3, [r7, #4]
	while(calibrated <= 6){
 80015b6:	e0d9      	b.n	800176c <MPU6050_Calibrate+0x240>
	printf("%i\n\r",calibrated );
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	4872      	ldr	r0, [pc, #456]	; (8001784 <MPU6050_Calibrate+0x258>)
 80015bc:	f004 fca4 	bl	8005f08 <iprintf>
	// Calculate means of sensors
		if (MPU6050_Calculate_Mean(Sensor_Data)!= MPU6050_Read_OK){
 80015c0:	4b6f      	ldr	r3, [pc, #444]	; (8001780 <MPU6050_Calibrate+0x254>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff0d 	bl	80013e4 <MPU6050_Calculate_Mean>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d001      	beq.n	80015d4 <MPU6050_Calibrate+0xa8>
			return MPU6050_Status_Error;
 80015d0:	2302      	movs	r3, #2
 80015d2:	e0d0      	b.n	8001776 <MPU6050_Calibrate+0x24a>
		}
	// Validate or Update Calibration
	// Gyroscope X Y Z
	if (abs(Sensor_Data -> Gx_mean)<gyro_tolerance) calibrated++;
 80015d4:	4b6a      	ldr	r3, [pc, #424]	; (8001780 <MPU6050_Calibrate+0x254>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	bfb8      	it	lt
 80015e0:	425b      	neglt	r3, r3
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	461a      	mov	r2, r3
 80015e6:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80015ea:	429a      	cmp	r2, r3
 80015ec:	da03      	bge.n	80015f6 <MPU6050_Calibrate+0xca>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3301      	adds	r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	e00f      	b.n	8001616 <MPU6050_Calibrate+0xea>
	else Sensor_Data -> Gx_offset		=	(Sensor_Data -> Gx_offset)	+	(Sensor_Data -> Gx_mean);
 80015f6:	4b62      	ldr	r3, [pc, #392]	; (8001780 <MPU6050_Calibrate+0x254>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80015fe:	b29a      	uxth	r2, r3
 8001600:	4b5f      	ldr	r3, [pc, #380]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001608:	b29b      	uxth	r3, r3
 800160a:	4413      	add	r3, r2
 800160c:	b29a      	uxth	r2, r3
 800160e:	4b5c      	ldr	r3, [pc, #368]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	b212      	sxth	r2, r2
 8001614:	80da      	strh	r2, [r3, #6]

	if (abs(Sensor_Data -> Gy_mean)<gyro_tolerance) calibrated++;
 8001616:	4b5a      	ldr	r3, [pc, #360]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800161e:	2b00      	cmp	r3, #0
 8001620:	bfb8      	it	lt
 8001622:	425b      	neglt	r3, r3
 8001624:	b29b      	uxth	r3, r3
 8001626:	461a      	mov	r2, r3
 8001628:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800162c:	429a      	cmp	r2, r3
 800162e:	da03      	bge.n	8001638 <MPU6050_Calibrate+0x10c>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	3301      	adds	r3, #1
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	e00f      	b.n	8001658 <MPU6050_Calibrate+0x12c>
	else Sensor_Data -> Gy_offset		=	(Sensor_Data -> Gy_offset)	+	(Sensor_Data -> Gy_mean);
 8001638:	4b51      	ldr	r3, [pc, #324]	; (8001780 <MPU6050_Calibrate+0x254>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001640:	b29a      	uxth	r2, r3
 8001642:	4b4f      	ldr	r3, [pc, #316]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800164a:	b29b      	uxth	r3, r3
 800164c:	4413      	add	r3, r2
 800164e:	b29a      	uxth	r2, r3
 8001650:	4b4b      	ldr	r3, [pc, #300]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	b212      	sxth	r2, r2
 8001656:	811a      	strh	r2, [r3, #8]

	if (abs(Sensor_Data -> Gz_mean)<gyro_tolerance) calibrated++;
 8001658:	4b49      	ldr	r3, [pc, #292]	; (8001780 <MPU6050_Calibrate+0x254>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001660:	2b00      	cmp	r3, #0
 8001662:	bfb8      	it	lt
 8001664:	425b      	neglt	r3, r3
 8001666:	b29b      	uxth	r3, r3
 8001668:	461a      	mov	r2, r3
 800166a:	f997 3001 	ldrsb.w	r3, [r7, #1]
 800166e:	429a      	cmp	r2, r3
 8001670:	da03      	bge.n	800167a <MPU6050_Calibrate+0x14e>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3301      	adds	r3, #1
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	e00f      	b.n	800169a <MPU6050_Calibrate+0x16e>
	else Sensor_Data -> Gz_offset		=	(Sensor_Data -> Gz_offset)	+	(Sensor_Data -> Gz_mean);
 800167a:	4b41      	ldr	r3, [pc, #260]	; (8001780 <MPU6050_Calibrate+0x254>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001682:	b29a      	uxth	r2, r3
 8001684:	4b3e      	ldr	r3, [pc, #248]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800168c:	b29b      	uxth	r3, r3
 800168e:	4413      	add	r3, r2
 8001690:	b29a      	uxth	r2, r3
 8001692:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	b212      	sxth	r2, r2
 8001698:	815a      	strh	r2, [r3, #10]
	// Accelerometer X Y Z
	if (abs(Sensor_Data -> Ax_mean)<accl_tolerance) calibrated++;
 800169a:	4b39      	ldr	r3, [pc, #228]	; (8001780 <MPU6050_Calibrate+0x254>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	bfb8      	it	lt
 80016a6:	425b      	neglt	r3, r3
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	461a      	mov	r2, r3
 80016ac:	f997 3000 	ldrsb.w	r3, [r7]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	da03      	bge.n	80016bc <MPU6050_Calibrate+0x190>
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3301      	adds	r3, #1
 80016b8:	607b      	str	r3, [r7, #4]
 80016ba:	e00f      	b.n	80016dc <MPU6050_Calibrate+0x1b0>
	else Sensor_Data -> Ax_offset		=	(Sensor_Data -> Ax_offset)	+	(Sensor_Data -> Ax_mean);
 80016bc:	4b30      	ldr	r3, [pc, #192]	; (8001780 <MPU6050_Calibrate+0x254>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80016c4:	b29a      	uxth	r2, r3
 80016c6:	4b2e      	ldr	r3, [pc, #184]	; (8001780 <MPU6050_Calibrate+0x254>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	4413      	add	r3, r2
 80016d2:	b29a      	uxth	r2, r3
 80016d4:	4b2a      	ldr	r3, [pc, #168]	; (8001780 <MPU6050_Calibrate+0x254>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	b212      	sxth	r2, r2
 80016da:	869a      	strh	r2, [r3, #52]	; 0x34

	if (abs(Sensor_Data -> Ay_mean)<accl_tolerance) calibrated++;
 80016dc:	4b28      	ldr	r3, [pc, #160]	; (8001780 <MPU6050_Calibrate+0x254>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	bfb8      	it	lt
 80016e8:	425b      	neglt	r3, r3
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	461a      	mov	r2, r3
 80016ee:	f997 3000 	ldrsb.w	r3, [r7]
 80016f2:	429a      	cmp	r2, r3
 80016f4:	da03      	bge.n	80016fe <MPU6050_Calibrate+0x1d2>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	3301      	adds	r3, #1
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	e00f      	b.n	800171e <MPU6050_Calibrate+0x1f2>
	else Sensor_Data -> Ay_offset		=	(Sensor_Data -> Ay_offset)	+	(Sensor_Data -> Ay_mean);
 80016fe:	4b20      	ldr	r3, [pc, #128]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8001706:	b29a      	uxth	r2, r3
 8001708:	4b1d      	ldr	r3, [pc, #116]	; (8001780 <MPU6050_Calibrate+0x254>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8001710:	b29b      	uxth	r3, r3
 8001712:	4413      	add	r3, r2
 8001714:	b29a      	uxth	r2, r3
 8001716:	4b1a      	ldr	r3, [pc, #104]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	b212      	sxth	r2, r2
 800171c:	86da      	strh	r2, [r3, #54]	; 0x36

	if ((abs((Sensor_Data -> Az_mean) - gravitation)) <accl_tolerance) calibrated++;
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8001726:	461a      	mov	r2, r3
 8001728:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001732:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001736:	f997 3000 	ldrsb.w	r3, [r7]
 800173a:	429a      	cmp	r2, r3
 800173c:	da03      	bge.n	8001746 <MPU6050_Calibrate+0x21a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	3301      	adds	r3, #1
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	e012      	b.n	800176c <MPU6050_Calibrate+0x240>
	else Sensor_Data -> Az_offset		=	(Sensor_Data -> Az_offset)	+	((Sensor_Data -> Az_mean) - gravitation);
 8001746:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 800174e:	b29a      	uxth	r2, r3
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8001758:	b299      	uxth	r1, r3
 800175a:	887b      	ldrh	r3, [r7, #2]
 800175c:	1acb      	subs	r3, r1, r3
 800175e:	b29b      	uxth	r3, r3
 8001760:	4413      	add	r3, r2
 8001762:	b29a      	uxth	r2, r3
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <MPU6050_Calibrate+0x254>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	b212      	sxth	r2, r2
 800176a:	871a      	strh	r2, [r3, #56]	; 0x38
	while(calibrated <= 6){
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b06      	cmp	r3, #6
 8001770:	f77f af22 	ble.w	80015b8 <MPU6050_Calibrate+0x8c>

	}
	return MPU6050_Read_OK;
 8001774:	2301      	movs	r3, #1
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	200000a4 	.word	0x200000a4
 8001784:	08007630 	.word	0x08007630

08001788 <getGyroRoll>:

void getAcclFilt(){

}

void getGyroRoll(){
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0

	// time of measurement for integration
	float cycletime = 80000000;
 800178e:	4b78      	ldr	r3, [pc, #480]	; (8001970 <getGyroRoll+0x1e8>)
 8001790:	607b      	str	r3, [r7, #4]

	// Get Roll
	// RAW Gyrodata: Gyro_X; transformation to Deg/s: Gyro_mult; time since last measurement: Gyro_time; cycletime per second: cycletime
	Sensor_Data -> Gx_deg =  (float)( ((Sensor_Data -> Gyro_X) * Sensor_Data -> Gyro_mult ) * (Sensor_Data -> Gyro_time)) / cycletime;
 8001792:	4b78      	ldr	r3, [pc, #480]	; (8001974 <getGyroRoll+0x1ec>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800179a:	ee07 3a90 	vmov	s15, r3
 800179e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a2:	4b74      	ldr	r3, [pc, #464]	; (8001974 <getGyroRoll+0x1ec>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	edd3 7a06 	vldr	s15, [r3, #24]
 80017aa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ae:	4b71      	ldr	r3, [pc, #452]	; (8001974 <getGyroRoll+0x1ec>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	695b      	ldr	r3, [r3, #20]
 80017b4:	ee07 3a90 	vmov	s15, r3
 80017b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017bc:	ee67 6a27 	vmul.f32	s13, s14, s15
 80017c0:	4b6c      	ldr	r3, [pc, #432]	; (8001974 <getGyroRoll+0x1ec>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	ed97 7a01 	vldr	s14, [r7, #4]
 80017c8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017cc:	edc3 7a07 	vstr	s15, [r3, #28]
	Sensor_Data -> Gy_deg =  (float)( ((Sensor_Data -> Gyro_Y) * Sensor_Data -> Gyro_mult ) * (Sensor_Data -> Gyro_time)) / cycletime;
 80017d0:	4b68      	ldr	r3, [pc, #416]	; (8001974 <getGyroRoll+0x1ec>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80017d8:	ee07 3a90 	vmov	s15, r3
 80017dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017e0:	4b64      	ldr	r3, [pc, #400]	; (8001974 <getGyroRoll+0x1ec>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80017e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017ec:	4b61      	ldr	r3, [pc, #388]	; (8001974 <getGyroRoll+0x1ec>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	ee07 3a90 	vmov	s15, r3
 80017f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017fa:	ee67 6a27 	vmul.f32	s13, s14, s15
 80017fe:	4b5d      	ldr	r3, [pc, #372]	; (8001974 <getGyroRoll+0x1ec>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	ed97 7a01 	vldr	s14, [r7, #4]
 8001806:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800180a:	edc3 7a08 	vstr	s15, [r3, #32]
	Sensor_Data -> Gz_deg =  (float)( ((Sensor_Data -> Gyro_Z) * Sensor_Data -> Gyro_mult ) * (Sensor_Data -> Gyro_time)) / cycletime;
 800180e:	4b59      	ldr	r3, [pc, #356]	; (8001974 <getGyroRoll+0x1ec>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001816:	ee07 3a90 	vmov	s15, r3
 800181a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800181e:	4b55      	ldr	r3, [pc, #340]	; (8001974 <getGyroRoll+0x1ec>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	edd3 7a06 	vldr	s15, [r3, #24]
 8001826:	ee27 7a27 	vmul.f32	s14, s14, s15
 800182a:	4b52      	ldr	r3, [pc, #328]	; (8001974 <getGyroRoll+0x1ec>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	ee07 3a90 	vmov	s15, r3
 8001834:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001838:	ee67 6a27 	vmul.f32	s13, s14, s15
 800183c:	4b4d      	ldr	r3, [pc, #308]	; (8001974 <getGyroRoll+0x1ec>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	ed97 7a01 	vldr	s14, [r7, #4]
 8001844:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001848:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	// Take into account that +-360 degrees is the same as 0 degrees
	if (Sensor_Data -> Gx_deg >=180) Sensor_Data -> Gx_deg = Sensor_Data -> Gx_deg - 360;
 800184c:	4b49      	ldr	r3, [pc, #292]	; (8001974 <getGyroRoll+0x1ec>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	edd3 7a07 	vldr	s15, [r3, #28]
 8001854:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8001978 <getGyroRoll+0x1f0>
 8001858:	eef4 7ac7 	vcmpe.f32	s15, s14
 800185c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001860:	db0b      	blt.n	800187a <getGyroRoll+0xf2>
 8001862:	4b44      	ldr	r3, [pc, #272]	; (8001974 <getGyroRoll+0x1ec>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	edd3 7a07 	vldr	s15, [r3, #28]
 800186a:	4b42      	ldr	r3, [pc, #264]	; (8001974 <getGyroRoll+0x1ec>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800197c <getGyroRoll+0x1f4>
 8001872:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001876:	edc3 7a07 	vstr	s15, [r3, #28]
	if (Sensor_Data -> Gx_deg <=-180) Sensor_Data -> Gx_deg = Sensor_Data -> Gx_deg + 360;
 800187a:	4b3e      	ldr	r3, [pc, #248]	; (8001974 <getGyroRoll+0x1ec>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001882:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8001980 <getGyroRoll+0x1f8>
 8001886:	eef4 7ac7 	vcmpe.f32	s15, s14
 800188a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800188e:	d80b      	bhi.n	80018a8 <getGyroRoll+0x120>
 8001890:	4b38      	ldr	r3, [pc, #224]	; (8001974 <getGyroRoll+0x1ec>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	edd3 7a07 	vldr	s15, [r3, #28]
 8001898:	4b36      	ldr	r3, [pc, #216]	; (8001974 <getGyroRoll+0x1ec>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800197c <getGyroRoll+0x1f4>
 80018a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018a4:	edc3 7a07 	vstr	s15, [r3, #28]

	if (Sensor_Data -> Gy_deg >=180) Sensor_Data -> Gy_deg = Sensor_Data -> Gy_deg - 360;
 80018a8:	4b32      	ldr	r3, [pc, #200]	; (8001974 <getGyroRoll+0x1ec>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	edd3 7a08 	vldr	s15, [r3, #32]
 80018b0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8001978 <getGyroRoll+0x1f0>
 80018b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018bc:	db0b      	blt.n	80018d6 <getGyroRoll+0x14e>
 80018be:	4b2d      	ldr	r3, [pc, #180]	; (8001974 <getGyroRoll+0x1ec>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	edd3 7a08 	vldr	s15, [r3, #32]
 80018c6:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <getGyroRoll+0x1ec>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800197c <getGyroRoll+0x1f4>
 80018ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018d2:	edc3 7a08 	vstr	s15, [r3, #32]
	if (Sensor_Data -> Gy_deg <=-180) Sensor_Data -> Gy_deg = Sensor_Data -> Gy_deg + 360;
 80018d6:	4b27      	ldr	r3, [pc, #156]	; (8001974 <getGyroRoll+0x1ec>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	edd3 7a08 	vldr	s15, [r3, #32]
 80018de:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8001980 <getGyroRoll+0x1f8>
 80018e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ea:	d80b      	bhi.n	8001904 <getGyroRoll+0x17c>
 80018ec:	4b21      	ldr	r3, [pc, #132]	; (8001974 <getGyroRoll+0x1ec>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	edd3 7a08 	vldr	s15, [r3, #32]
 80018f4:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <getGyroRoll+0x1ec>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800197c <getGyroRoll+0x1f4>
 80018fc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001900:	edc3 7a08 	vstr	s15, [r3, #32]

	if (Sensor_Data -> Gy_deg >=180) Sensor_Data -> Gz_deg = Sensor_Data -> Gz_deg - 360;
 8001904:	4b1b      	ldr	r3, [pc, #108]	; (8001974 <getGyroRoll+0x1ec>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	edd3 7a08 	vldr	s15, [r3, #32]
 800190c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8001978 <getGyroRoll+0x1f0>
 8001910:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001918:	db0b      	blt.n	8001932 <getGyroRoll+0x1aa>
 800191a:	4b16      	ldr	r3, [pc, #88]	; (8001974 <getGyroRoll+0x1ec>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001922:	4b14      	ldr	r3, [pc, #80]	; (8001974 <getGyroRoll+0x1ec>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800197c <getGyroRoll+0x1f4>
 800192a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800192e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	if (Sensor_Data -> Gy_deg <=-180) Sensor_Data -> Gz_deg = Sensor_Data -> Gz_deg + 360;
 8001932:	4b10      	ldr	r3, [pc, #64]	; (8001974 <getGyroRoll+0x1ec>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	edd3 7a08 	vldr	s15, [r3, #32]
 800193a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001980 <getGyroRoll+0x1f8>
 800193e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001946:	d900      	bls.n	800194a <getGyroRoll+0x1c2>
}
 8001948:	e00b      	b.n	8001962 <getGyroRoll+0x1da>
	if (Sensor_Data -> Gy_deg <=-180) Sensor_Data -> Gz_deg = Sensor_Data -> Gz_deg + 360;
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <getGyroRoll+0x1ec>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <getGyroRoll+0x1ec>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800197c <getGyroRoll+0x1f4>
 800195a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800195e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	4c989680 	.word	0x4c989680
 8001974:	200000a4 	.word	0x200000a4
 8001978:	43340000 	.word	0x43340000
 800197c:	43b40000 	.word	0x43b40000
 8001980:	c3340000 	.word	0xc3340000

08001984 <getAcclRoll>:


void getAcclRoll(){
 8001984:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0

	//Parameter for stability in Regions where X and Z or Y and Z are near zero
	int16_t mu = 0.01;
 800198c:	2300      	movs	r3, #0
 800198e:	81bb      	strh	r3, [r7, #12]


	int16_t X = Sensor_Data -> Accl_X;
 8001990:	4b55      	ldr	r3, [pc, #340]	; (8001ae8 <getAcclRoll+0x164>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001996:	817b      	strh	r3, [r7, #10]
	int16_t Y = Sensor_Data -> Accl_Y;
 8001998:	4b53      	ldr	r3, [pc, #332]	; (8001ae8 <getAcclRoll+0x164>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800199e:	813b      	strh	r3, [r7, #8]
	int16_t Z = Sensor_Data -> Accl_Z;
 80019a0:	4b51      	ldr	r3, [pc, #324]	; (8001ae8 <getAcclRoll+0x164>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80019a6:	80fb      	strh	r3, [r7, #6]

	// parameter for correct orientation
	int16_t 	sign;
	if (Z>0)	sign = 1;
 80019a8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	dd02      	ble.n	80019b6 <getAcclRoll+0x32>
 80019b0:	2301      	movs	r3, #1
 80019b2:	81fb      	strh	r3, [r7, #14]
 80019b4:	e002      	b.n	80019bc <getAcclRoll+0x38>
	else 		sign = -1;
 80019b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ba:	81fb      	strh	r3, [r7, #14]

	//77transform radians to degree
	float RAD_TO_DEG = 180/M_PI;
 80019bc:	4b4b      	ldr	r3, [pc, #300]	; (8001aec <getAcclRoll+0x168>)
 80019be:	603b      	str	r3, [r7, #0]

	// Get Roll
	// RAW Gyrodata: Gyro_X; transformation to Deg/s: Gyro_mult; time since last measurement: Gyro_time; cycletime per second: cycletime
	Sensor_Data -> Ax_deg = atan2( Y ,   sign * sqrt(Z*Z+ mu*X*X)) * RAD_TO_DEG;
 80019c0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fdc5 	bl	8000554 <__aeabi_i2d>
 80019ca:	4680      	mov	r8, r0
 80019cc:	4689      	mov	r9, r1
 80019ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fdbe 	bl	8000554 <__aeabi_i2d>
 80019d8:	4604      	mov	r4, r0
 80019da:	460d      	mov	r5, r1
 80019dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019e4:	fb02 f203 	mul.w	r2, r2, r3
 80019e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80019ec:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 80019f8:	fb01 f303 	mul.w	r3, r1, r3
 80019fc:	4413      	add	r3, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fda8 	bl	8000554 <__aeabi_i2d>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	ec43 2b10 	vmov	d0, r2, r3
 8001a0c:	f005 fa4a 	bl	8006ea4 <sqrt>
 8001a10:	ec53 2b10 	vmov	r2, r3, d0
 8001a14:	4620      	mov	r0, r4
 8001a16:	4629      	mov	r1, r5
 8001a18:	f7fe fe06 	bl	8000628 <__aeabi_dmul>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	460b      	mov	r3, r1
 8001a20:	ec43 2b17 	vmov	d7, r2, r3
 8001a24:	eeb0 1a47 	vmov.f32	s2, s14
 8001a28:	eef0 1a67 	vmov.f32	s3, s15
 8001a2c:	ec49 8b10 	vmov	d0, r8, r9
 8001a30:	f005 fa36 	bl	8006ea0 <atan2>
 8001a34:	ec55 4b10 	vmov	r4, r5, d0
 8001a38:	6838      	ldr	r0, [r7, #0]
 8001a3a:	f7fe fd9d 	bl	8000578 <__aeabi_f2d>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	460b      	mov	r3, r1
 8001a42:	4620      	mov	r0, r4
 8001a44:	4629      	mov	r1, r5
 8001a46:	f7fe fdef 	bl	8000628 <__aeabi_dmul>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	4926      	ldr	r1, [pc, #152]	; (8001ae8 <getAcclRoll+0x164>)
 8001a50:	680c      	ldr	r4, [r1, #0]
 8001a52:	4610      	mov	r0, r2
 8001a54:	4619      	mov	r1, r3
 8001a56:	f7ff f897 	bl	8000b88 <__aeabi_d2f>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	6463      	str	r3, [r4, #68]	; 0x44
	Sensor_Data -> Ay_deg = atan2(-X, sqrt(Y*Y + Z*Z)) * RAD_TO_DEG;
 8001a5e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001a62:	425b      	negs	r3, r3
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7fe fd75 	bl	8000554 <__aeabi_i2d>
 8001a6a:	4604      	mov	r4, r0
 8001a6c:	460d      	mov	r5, r1
 8001a6e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a72:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001a76:	fb02 f203 	mul.w	r2, r2, r3
 8001a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a7e:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001a82:	fb01 f303 	mul.w	r3, r1, r3
 8001a86:	4413      	add	r3, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7fe fd63 	bl	8000554 <__aeabi_i2d>
 8001a8e:	4602      	mov	r2, r0
 8001a90:	460b      	mov	r3, r1
 8001a92:	ec43 2b10 	vmov	d0, r2, r3
 8001a96:	f005 fa05 	bl	8006ea4 <sqrt>
 8001a9a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a9e:	eef0 7a60 	vmov.f32	s15, s1
 8001aa2:	eeb0 1a47 	vmov.f32	s2, s14
 8001aa6:	eef0 1a67 	vmov.f32	s3, s15
 8001aaa:	ec45 4b10 	vmov	d0, r4, r5
 8001aae:	f005 f9f7 	bl	8006ea0 <atan2>
 8001ab2:	ec55 4b10 	vmov	r4, r5, d0
 8001ab6:	6838      	ldr	r0, [r7, #0]
 8001ab8:	f7fe fd5e 	bl	8000578 <__aeabi_f2d>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4620      	mov	r0, r4
 8001ac2:	4629      	mov	r1, r5
 8001ac4:	f7fe fdb0 	bl	8000628 <__aeabi_dmul>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4906      	ldr	r1, [pc, #24]	; (8001ae8 <getAcclRoll+0x164>)
 8001ace:	680c      	ldr	r4, [r1, #0]
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7ff f858 	bl	8000b88 <__aeabi_d2f>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	64a3      	str	r3, [r4, #72]	; 0x48

}
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ae6:	bf00      	nop
 8001ae8:	200000a4 	.word	0x200000a4
 8001aec:	42652ee1 	.word	0x42652ee1

08001af0 <getAngleRoll>:


/* 3D-Rotation around x-,y- and z-Axis
 *
 */
void getAngleRoll(){
 8001af0:	b5b0      	push	{r4, r5, r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0

	MPU6050_Read_Sensor(Sensor_Data);
 8001af6:	4b48      	ldr	r3, [pc, #288]	; (8001c18 <getAngleRoll+0x128>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fbd6 	bl	80012ac <MPU6050_Read_Sensor>
	getAcclRoll(Sensor_Data);
 8001b00:	4b45      	ldr	r3, [pc, #276]	; (8001c18 <getAngleRoll+0x128>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff3d 	bl	8001984 <getAcclRoll>
	getGyroRoll(Sensor_Data);
 8001b0a:	4b43      	ldr	r3, [pc, #268]	; (8001c18 <getAngleRoll+0x128>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff fe3a 	bl	8001788 <getGyroRoll>

	float X = Sensor_Data -> X_deg;
 8001b14:	4b40      	ldr	r3, [pc, #256]	; (8001c18 <getAngleRoll+0x128>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1a:	607b      	str	r3, [r7, #4]
	float Y = Sensor_Data -> Y_deg;
 8001b1c:	4b3e      	ldr	r3, [pc, #248]	; (8001c18 <getAngleRoll+0x128>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b22:	603b      	str	r3, [r7, #0]

	Sensor_Data -> X_deg =  0.98 * (X + Sensor_Data -> Gx_deg) + (0.02 * (Sensor_Data -> Ax_deg));
 8001b24:	4b3c      	ldr	r3, [pc, #240]	; (8001c18 <getAngleRoll+0x128>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	ed93 7a07 	vldr	s14, [r3, #28]
 8001b2c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b34:	ee17 0a90 	vmov	r0, s15
 8001b38:	f7fe fd1e 	bl	8000578 <__aeabi_f2d>
 8001b3c:	a332      	add	r3, pc, #200	; (adr r3, 8001c08 <getAngleRoll+0x118>)
 8001b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b42:	f7fe fd71 	bl	8000628 <__aeabi_dmul>
 8001b46:	4602      	mov	r2, r0
 8001b48:	460b      	mov	r3, r1
 8001b4a:	4614      	mov	r4, r2
 8001b4c:	461d      	mov	r5, r3
 8001b4e:	4b32      	ldr	r3, [pc, #200]	; (8001c18 <getAngleRoll+0x128>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7fe fd0f 	bl	8000578 <__aeabi_f2d>
 8001b5a:	a32d      	add	r3, pc, #180	; (adr r3, 8001c10 <getAngleRoll+0x120>)
 8001b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b60:	f7fe fd62 	bl	8000628 <__aeabi_dmul>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4620      	mov	r0, r4
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	f7fe fba6 	bl	80002bc <__adddf3>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4928      	ldr	r1, [pc, #160]	; (8001c18 <getAngleRoll+0x128>)
 8001b76:	680c      	ldr	r4, [r1, #0]
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f7ff f804 	bl	8000b88 <__aeabi_d2f>
 8001b80:	4603      	mov	r3, r0
 8001b82:	64e3      	str	r3, [r4, #76]	; 0x4c
	Sensor_Data -> Y_deg =  0.98 * (Y + Sensor_Data -> Gy_deg) + (0.02 * (Sensor_Data -> Ay_deg));
 8001b84:	4b24      	ldr	r3, [pc, #144]	; (8001c18 <getAngleRoll+0x128>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	ed93 7a08 	vldr	s14, [r3, #32]
 8001b8c:	edd7 7a00 	vldr	s15, [r7]
 8001b90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b94:	ee17 0a90 	vmov	r0, s15
 8001b98:	f7fe fcee 	bl	8000578 <__aeabi_f2d>
 8001b9c:	a31a      	add	r3, pc, #104	; (adr r3, 8001c08 <getAngleRoll+0x118>)
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	f7fe fd41 	bl	8000628 <__aeabi_dmul>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4614      	mov	r4, r2
 8001bac:	461d      	mov	r5, r3
 8001bae:	4b1a      	ldr	r3, [pc, #104]	; (8001c18 <getAngleRoll+0x128>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7fe fcdf 	bl	8000578 <__aeabi_f2d>
 8001bba:	a315      	add	r3, pc, #84	; (adr r3, 8001c10 <getAngleRoll+0x120>)
 8001bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc0:	f7fe fd32 	bl	8000628 <__aeabi_dmul>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	460b      	mov	r3, r1
 8001bc8:	4620      	mov	r0, r4
 8001bca:	4629      	mov	r1, r5
 8001bcc:	f7fe fb76 	bl	80002bc <__adddf3>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	4910      	ldr	r1, [pc, #64]	; (8001c18 <getAngleRoll+0x128>)
 8001bd6:	680c      	ldr	r4, [r1, #0]
 8001bd8:	4610      	mov	r0, r2
 8001bda:	4619      	mov	r1, r3
 8001bdc:	f7fe ffd4 	bl	8000b88 <__aeabi_d2f>
 8001be0:	4603      	mov	r3, r0
 8001be2:	6523      	str	r3, [r4, #80]	; 0x50
	Sensor_Data -> Z_deg = Sensor_Data -> Z_deg + Sensor_Data -> Gz_deg;
 8001be4:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <getAngleRoll+0x128>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8001bec:	4b0a      	ldr	r3, [pc, #40]	; (8001c18 <getAngleRoll+0x128>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <getAngleRoll+0x128>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bfc:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
}
 8001c00:	bf00      	nop
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bdb0      	pop	{r4, r5, r7, pc}
 8001c08:	f5c28f5c 	.word	0xf5c28f5c
 8001c0c:	3fef5c28 	.word	0x3fef5c28
 8001c10:	47ae147b 	.word	0x47ae147b
 8001c14:	3f947ae1 	.word	0x3f947ae1
 8001c18:	200000a4 	.word	0x200000a4

08001c1c <MPU6050_Display_Data>:


void MPU6050_Display_Data(){
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
//	uint8_t buffer[1024];
	MPU6050_Read_Sensor(Sensor_Data);
 8001c20:	4b1b      	ldr	r3, [pc, #108]	; (8001c90 <MPU6050_Display_Data+0x74>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7ff fb41 	bl	80012ac <MPU6050_Read_Sensor>
	printf("Gx: %i\r\n", Sensor_Data->Gyro_X);//+(buffer[5]<<8)+(buffer[6]<<16)+(buffer[7]<<24));
 8001c2a:	4b19      	ldr	r3, [pc, #100]	; (8001c90 <MPU6050_Display_Data+0x74>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c32:	4619      	mov	r1, r3
 8001c34:	4817      	ldr	r0, [pc, #92]	; (8001c94 <MPU6050_Display_Data+0x78>)
 8001c36:	f004 f967 	bl	8005f08 <iprintf>
	printf("Gy: %i\r\n", Sensor_Data->Gyro_Y);
 8001c3a:	4b15      	ldr	r3, [pc, #84]	; (8001c90 <MPU6050_Display_Data+0x74>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c42:	4619      	mov	r1, r3
 8001c44:	4814      	ldr	r0, [pc, #80]	; (8001c98 <MPU6050_Display_Data+0x7c>)
 8001c46:	f004 f95f 	bl	8005f08 <iprintf>
	printf("Gz: %i\r\n", Sensor_Data->Gyro_Z);
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <MPU6050_Display_Data+0x74>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c52:	4619      	mov	r1, r3
 8001c54:	4811      	ldr	r0, [pc, #68]	; (8001c9c <MPU6050_Display_Data+0x80>)
 8001c56:	f004 f957 	bl	8005f08 <iprintf>
	printf("Ax: %i\r\n", Sensor_Data->Accl_X);
 8001c5a:	4b0d      	ldr	r3, [pc, #52]	; (8001c90 <MPU6050_Display_Data+0x74>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001c62:	4619      	mov	r1, r3
 8001c64:	480e      	ldr	r0, [pc, #56]	; (8001ca0 <MPU6050_Display_Data+0x84>)
 8001c66:	f004 f94f 	bl	8005f08 <iprintf>
	printf("Ay: %i\r\n", Sensor_Data->Accl_Y);
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <MPU6050_Display_Data+0x74>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001c72:	4619      	mov	r1, r3
 8001c74:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <MPU6050_Display_Data+0x88>)
 8001c76:	f004 f947 	bl	8005f08 <iprintf>
	printf("Az: %i\r\n", Sensor_Data->Accl_Z);
 8001c7a:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <MPU6050_Display_Data+0x74>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001c82:	4619      	mov	r1, r3
 8001c84:	4808      	ldr	r0, [pc, #32]	; (8001ca8 <MPU6050_Display_Data+0x8c>)
 8001c86:	f004 f93f 	bl	8005f08 <iprintf>

//	printf("Gx: %i		**Gy: %i		**Gz: %i\r\n",Sensor_Data->Gyro_X ,Sensor_Data->Gyro_Y ,Sensor_Data->Gyro_Z);
//	printf("Ax: %i		**Ay: %i		**Az: %i\r\n", Sensor_Data->Accl_X,Sensor_Data->Accl_Y, Sensor_Data->Accl_Z);
}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200000a4 	.word	0x200000a4
 8001c94:	08007638 	.word	0x08007638
 8001c98:	08007644 	.word	0x08007644
 8001c9c:	08007650 	.word	0x08007650
 8001ca0:	0800765c 	.word	0x0800765c
 8001ca4:	08007668 	.word	0x08007668
 8001ca8:	08007674 	.word	0x08007674

08001cac <MPU6050_detectTilt>:
//		}
//
//	else return a;
//}

tilt_direction_t MPU6050_detectTilt(){
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
	//tilt Thresholds, right, left , front
	int16_t tilt_TH_X_r,tilt_TH_X_l,  tilt_TH_Y, tilt_TH_Y_f,tilt_TH_Y_b, tilt_TH_Z;
	tilt_TH_X_r = -2000;
 8001cb2:	f64f 0330 	movw	r3, #63536	; 0xf830
 8001cb6:	82fb      	strh	r3, [r7, #22]
	tilt_TH_X_l = 2000;
 8001cb8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001cbc:	82bb      	strh	r3, [r7, #20]
	tilt_TH_Y   = 1500;
 8001cbe:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001cc2:	827b      	strh	r3, [r7, #18]
	tilt_TH_Y_f = -2500;
 8001cc4:	f24f 633c 	movw	r3, #63036	; 0xf63c
 8001cc8:	823b      	strh	r3, [r7, #16]
	tilt_TH_Y_b = 2500;
 8001cca:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001cce:	81fb      	strh	r3, [r7, #14]
	tilt_TH_Z   = 3800;
 8001cd0:	f640 63d8 	movw	r3, #3800	; 0xed8
 8001cd4:	81bb      	strh	r3, [r7, #12]
	float angle_TH = 25.0;
 8001cd6:	4b44      	ldr	r3, [pc, #272]	; (8001de8 <MPU6050_detectTilt+0x13c>)
 8001cd8:	60bb      	str	r3, [r7, #8]

	getAngleRoll(Sensor_Data);
 8001cda:	4b44      	ldr	r3, [pc, #272]	; (8001dec <MPU6050_detectTilt+0x140>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7ff ff06 	bl	8001af0 <getAngleRoll>
	float alpha = sqrtf(Sensor_Data->X_deg*Sensor_Data->X_deg + Sensor_Data->Y_deg* Sensor_Data->Y_deg);
 8001ce4:	4b41      	ldr	r3, [pc, #260]	; (8001dec <MPU6050_detectTilt+0x140>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 8001cec:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <MPU6050_detectTilt+0x140>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8001cf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cf8:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <MPU6050_detectTilt+0x140>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8001d00:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <MPU6050_detectTilt+0x140>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8001d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d10:	eeb0 0a67 	vmov.f32	s0, s15
 8001d14:	f005 f8fa 	bl	8006f0c <sqrtf>
 8001d18:	ed87 0a01 	vstr	s0, [r7, #4]
	if ((alpha > angle_TH) &&  (abs(Sensor_Data->Accl_Z) < tilt_TH_Z)){
 8001d1c:	ed97 7a01 	vldr	s14, [r7, #4]
 8001d20:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d2c:	dd57      	ble.n	8001dde <MPU6050_detectTilt+0x132>
 8001d2e:	4b2f      	ldr	r3, [pc, #188]	; (8001dec <MPU6050_detectTilt+0x140>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	; 0x2c
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	bfb8      	it	lt
 8001d3a:	425b      	neglt	r3, r3
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	da4a      	bge.n	8001dde <MPU6050_detectTilt+0x132>
		if (abs(Sensor_Data->Accl_Y) < tilt_TH_Y){
 8001d48:	4b28      	ldr	r3, [pc, #160]	; (8001dec <MPU6050_detectTilt+0x140>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bfb8      	it	lt
 8001d54:	425b      	neglt	r3, r3
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	da23      	bge.n	8001daa <MPU6050_detectTilt+0xfe>
			if (Sensor_Data->Accl_X < tilt_TH_X_r){
 8001d62:	4b22      	ldr	r3, [pc, #136]	; (8001dec <MPU6050_detectTilt+0x140>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001d6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	dd04      	ble.n	8001d7c <MPU6050_detectTilt+0xd0>
				printf("tilt right \r\n");
 8001d72:	481f      	ldr	r0, [pc, #124]	; (8001df0 <MPU6050_detectTilt+0x144>)
 8001d74:	f004 f94e 	bl	8006014 <puts>
				return TILT_RIGHT;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	e031      	b.n	8001de0 <MPU6050_detectTilt+0x134>
			}
			else if ((Sensor_Data->Accl_X > tilt_TH_X_l) && abs(Sensor_Data->Accl_Y)){
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	; (8001dec <MPU6050_detectTilt+0x140>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	; 0x28
 8001d84:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	da28      	bge.n	8001dde <MPU6050_detectTilt+0x132>
 8001d8c:	4b17      	ldr	r3, [pc, #92]	; (8001dec <MPU6050_detectTilt+0x140>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	bfb8      	it	lt
 8001d98:	425b      	neglt	r3, r3
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d01e      	beq.n	8001dde <MPU6050_detectTilt+0x132>
				printf("tilt left\r\n");
 8001da0:	4814      	ldr	r0, [pc, #80]	; (8001df4 <MPU6050_detectTilt+0x148>)
 8001da2:	f004 f937 	bl	8006014 <puts>
				return TILT_LEFT;
 8001da6:	2302      	movs	r3, #2
 8001da8:	e01a      	b.n	8001de0 <MPU6050_detectTilt+0x134>
			}
		}
		else if (Sensor_Data->Accl_Y < tilt_TH_Y_f){
 8001daa:	4b10      	ldr	r3, [pc, #64]	; (8001dec <MPU6050_detectTilt+0x140>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001db2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	dd04      	ble.n	8001dc4 <MPU6050_detectTilt+0x118>
			printf("tilt front\r\n");
 8001dba:	480f      	ldr	r0, [pc, #60]	; (8001df8 <MPU6050_detectTilt+0x14c>)
 8001dbc:	f004 f92a 	bl	8006014 <puts>
			return TILT_FRONT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e00d      	b.n	8001de0 <MPU6050_detectTilt+0x134>
		}
		else if (Sensor_Data->Accl_Y > tilt_TH_Y_b){
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <MPU6050_detectTilt+0x140>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	; 0x2a
 8001dcc:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	da04      	bge.n	8001dde <MPU6050_detectTilt+0x132>
			printf("tilt back\r\n");
 8001dd4:	4809      	ldr	r0, [pc, #36]	; (8001dfc <MPU6050_detectTilt+0x150>)
 8001dd6:	f004 f91d 	bl	8006014 <puts>
			return TILT_BACK;
 8001dda:	2304      	movs	r3, #4
 8001ddc:	e000      	b.n	8001de0 <MPU6050_detectTilt+0x134>
		}
	}
	return TILT_NONE;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	41c80000 	.word	0x41c80000
 8001dec:	200000a4 	.word	0x200000a4
 8001df0:	080076d0 	.word	0x080076d0
 8001df4:	080076e0 	.word	0x080076e0
 8001df8:	080076ec 	.word	0x080076ec
 8001dfc:	080076f8 	.word	0x080076f8

08001e00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b09a      	sub	sp, #104	; 0x68
 8001e04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e06:	f000 fc91 	bl	800272c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e0a:	f000 f871 	bl	8001ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e0e:	f000 f98f 	bl	8002130 <MX_GPIO_Init>
  MX_DMA_Init();
 8001e12:	f000 f965 	bl	80020e0 <MX_DMA_Init>
  MX_SPI1_Init();
 8001e16:	f000 f907 	bl	8002028 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001e1a:	f000 f937 	bl	800208c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001e1e:	f000 f8d5 	bl	8001fcc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	 for (int i =0;i<BUFFERSIZE;i++){
 8001e22:	2300      	movs	r3, #0
 8001e24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e26:	e00c      	b.n	8001e42 <main+0x42>
		 pTxData[i] = 0;
 8001e28:	4a2a      	ldr	r2, [pc, #168]	; (8001ed4 <main+0xd4>)
 8001e2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e2c:	4413      	add	r3, r2
 8001e2e:	2200      	movs	r2, #0
 8001e30:	701a      	strb	r2, [r3, #0]
		 pRxData[i] = 0;
 8001e32:	4a29      	ldr	r2, [pc, #164]	; (8001ed8 <main+0xd8>)
 8001e34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e36:	4413      	add	r3, r2
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
	 for (int i =0;i<BUFFERSIZE;i++){
 8001e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e3e:	3301      	adds	r3, #1
 8001e40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e44:	2b07      	cmp	r3, #7
 8001e46:	d9ef      	bls.n	8001e28 <main+0x28>
	 }

	//Gyros Init
	MPU6050_Data gyro_data;
	MPU6050_STATUS gyro_status = MPU6050_init(&hi2c1, &gyro_data, MPU6050_ACCL_8G, MPU6050_GYRO_2000deg, MPU6050_SampleRate_2KHz);
 8001e48:	4639      	mov	r1, r7
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	9300      	str	r3, [sp, #0]
 8001e4e:	2303      	movs	r3, #3
 8001e50:	2202      	movs	r2, #2
 8001e52:	4822      	ldr	r0, [pc, #136]	; (8001edc <main+0xdc>)
 8001e54:	f7ff f864 	bl	8000f20 <MPU6050_init>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	if (gyro_status != MPU6050_Status_OK){
 8001e5e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <main+0x6c>
		SyncBuffer.gyro_initilized = false;
 8001e66:	4b1e      	ldr	r3, [pc, #120]	; (8001ee0 <main+0xe0>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	70da      	strb	r2, [r3, #3]
	}
	 if ( MPU6050_Calibrate(&gyro_data) == MPU6050_Read_OK){
 8001e6c:	463b      	mov	r3, r7
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fb5c 	bl	800152c <MPU6050_Calibrate>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b01      	cmp	r3, #1
 8001e78:	d106      	bne.n	8001e88 <main+0x88>
		 printf("MPU6050 calibrated\r\n");
 8001e7a:	481a      	ldr	r0, [pc, #104]	; (8001ee4 <main+0xe4>)
 8001e7c:	f004 f8ca 	bl	8006014 <puts>
	     SyncBuffer.gyro_initilized =true;
 8001e80:	4b17      	ldr	r3, [pc, #92]	; (8001ee0 <main+0xe0>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	70da      	strb	r2, [r3, #3]
 8001e86:	e005      	b.n	8001e94 <main+0x94>
	 }

	 else{
		 SyncBuffer.gyro_initilized = false;
 8001e88:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <main+0xe0>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	70da      	strb	r2, [r3, #3]
		 printf("MPU6050 Error\r\n");
 8001e8e:	4816      	ldr	r0, [pc, #88]	; (8001ee8 <main+0xe8>)
 8001e90:	f004 f8c0 	bl	8006014 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


	 HAL_SPI_TransmitReceive_DMA(&hspi1, pTxData, pRxData, BUFFERSIZE);
 8001e94:	2308      	movs	r3, #8
 8001e96:	4a10      	ldr	r2, [pc, #64]	; (8001ed8 <main+0xd8>)
 8001e98:	490e      	ldr	r1, [pc, #56]	; (8001ed4 <main+0xd4>)
 8001e9a:	4814      	ldr	r0, [pc, #80]	; (8001eec <main+0xec>)
 8001e9c:	f003 f9d4 	bl	8005248 <HAL_SPI_TransmitReceive_DMA>
	 while (1)
  {
		 if(SyncBuffer.gyro_initilized == true){
 8001ea0:	4b0f      	ldr	r3, [pc, #60]	; (8001ee0 <main+0xe0>)
 8001ea2:	78db      	ldrb	r3, [r3, #3]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d107      	bne.n	8001eb8 <main+0xb8>
			MPU6050_Display_Data();
 8001ea8:	f7ff feb8 	bl	8001c1c <MPU6050_Display_Data>
			SyncBuffer.tilt_detecded  = MPU6050_detectTilt();
 8001eac:	f7ff fefe 	bl	8001cac <MPU6050_detectTilt>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <main+0xe0>)
 8001eb6:	711a      	strb	r2, [r3, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001eb8:	b672      	cpsid	i
}
 8001eba:	bf00      	nop




	__disable_irq();
	memcpy((void*)pTxData,(void*)&SyncBuffer, BUFFERSIZE);
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <main+0xd4>)
 8001ebe:	4a08      	ldr	r2, [pc, #32]	; (8001ee0 <main+0xe0>)
 8001ec0:	6811      	ldr	r1, [r2, #0]
 8001ec2:	6852      	ldr	r2, [r2, #4]
 8001ec4:	6019      	str	r1, [r3, #0]
 8001ec6:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8001ec8:	b662      	cpsie	i
}
 8001eca:	bf00      	nop
	__enable_irq();

	HAL_Delay(100);
 8001ecc:	2064      	movs	r0, #100	; 0x64
 8001ece:	f000 fc9f 	bl	8002810 <HAL_Delay>
		 if(SyncBuffer.gyro_initilized == true){
 8001ed2:	e7e5      	b.n	8001ea0 <main+0xa0>
 8001ed4:	200000b4 	.word	0x200000b4
 8001ed8:	2000009c 	.word	0x2000009c
 8001edc:	200000bc 	.word	0x200000bc
 8001ee0:	200000ac 	.word	0x200000ac
 8001ee4:	08007704 	.word	0x08007704
 8001ee8:	08007718 	.word	0x08007718
 8001eec:	20000110 	.word	0x20000110

08001ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b094      	sub	sp, #80	; 0x50
 8001ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ef6:	f107 031c 	add.w	r3, r7, #28
 8001efa:	2234      	movs	r2, #52	; 0x34
 8001efc:	2100      	movs	r1, #0
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fffa 	bl	8005ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f04:	f107 0308 	add.w	r3, r7, #8
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	60da      	str	r2, [r3, #12]
 8001f12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f14:	2300      	movs	r3, #0
 8001f16:	607b      	str	r3, [r7, #4]
 8001f18:	4b2a      	ldr	r3, [pc, #168]	; (8001fc4 <SystemClock_Config+0xd4>)
 8001f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1c:	4a29      	ldr	r2, [pc, #164]	; (8001fc4 <SystemClock_Config+0xd4>)
 8001f1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f22:	6413      	str	r3, [r2, #64]	; 0x40
 8001f24:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <SystemClock_Config+0xd4>)
 8001f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	607b      	str	r3, [r7, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001f30:	2300      	movs	r3, #0
 8001f32:	603b      	str	r3, [r7, #0]
 8001f34:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <SystemClock_Config+0xd8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f3c:	4a22      	ldr	r2, [pc, #136]	; (8001fc8 <SystemClock_Config+0xd8>)
 8001f3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f42:	6013      	str	r3, [r2, #0]
 8001f44:	4b20      	ldr	r3, [pc, #128]	; (8001fc8 <SystemClock_Config+0xd8>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f50:	2302      	movs	r3, #2
 8001f52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f54:	2301      	movs	r3, #1
 8001f56:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f58:	2310      	movs	r3, #16
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f60:	2300      	movs	r3, #0
 8001f62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001f64:	2310      	movs	r3, #16
 8001f66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001f68:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001f6c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001f72:	2302      	movs	r3, #2
 8001f74:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001f76:	2302      	movs	r3, #2
 8001f78:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f7a:	f107 031c 	add.w	r3, r7, #28
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f002 fe3a 	bl	8004bf8 <HAL_RCC_OscConfig>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001f8a:	f000 f95d 	bl	8002248 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f8e:	230f      	movs	r3, #15
 8001f90:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f92:	2302      	movs	r3, #2
 8001f94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001fa4:	f107 0308 	add.w	r3, r7, #8
 8001fa8:	2102      	movs	r1, #2
 8001faa:	4618      	mov	r0, r3
 8001fac:	f002 fb58 	bl	8004660 <HAL_RCC_ClockConfig>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001fb6:	f000 f947 	bl	8002248 <Error_Handler>
  }
}
 8001fba:	bf00      	nop
 8001fbc:	3750      	adds	r7, #80	; 0x50
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800
 8001fc8:	40007000 	.word	0x40007000

08001fcc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001fd0:	4b12      	ldr	r3, [pc, #72]	; (800201c <MX_I2C1_Init+0x50>)
 8001fd2:	4a13      	ldr	r2, [pc, #76]	; (8002020 <MX_I2C1_Init+0x54>)
 8001fd4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001fd6:	4b11      	ldr	r3, [pc, #68]	; (800201c <MX_I2C1_Init+0x50>)
 8001fd8:	4a12      	ldr	r2, [pc, #72]	; (8002024 <MX_I2C1_Init+0x58>)
 8001fda:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	; (800201c <MX_I2C1_Init+0x50>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <MX_I2C1_Init+0x50>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <MX_I2C1_Init+0x50>)
 8001fea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001fee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <MX_I2C1_Init+0x50>)
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ff6:	4b09      	ldr	r3, [pc, #36]	; (800201c <MX_I2C1_Init+0x50>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ffc:	4b07      	ldr	r3, [pc, #28]	; (800201c <MX_I2C1_Init+0x50>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002002:	4b06      	ldr	r3, [pc, #24]	; (800201c <MX_I2C1_Init+0x50>)
 8002004:	2200      	movs	r2, #0
 8002006:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002008:	4804      	ldr	r0, [pc, #16]	; (800201c <MX_I2C1_Init+0x50>)
 800200a:	f001 fa3b 	bl	8003484 <HAL_I2C_Init>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002014:	f000 f918 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200000bc 	.word	0x200000bc
 8002020:	40005400 	.word	0x40005400
 8002024:	00061a80 	.word	0x00061a80

08002028 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800202c:	4b15      	ldr	r3, [pc, #84]	; (8002084 <MX_SPI1_Init+0x5c>)
 800202e:	4a16      	ldr	r2, [pc, #88]	; (8002088 <MX_SPI1_Init+0x60>)
 8002030:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8002032:	4b14      	ldr	r3, [pc, #80]	; (8002084 <MX_SPI1_Init+0x5c>)
 8002034:	2200      	movs	r2, #0
 8002036:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002038:	4b12      	ldr	r3, [pc, #72]	; (8002084 <MX_SPI1_Init+0x5c>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800203e:	4b11      	ldr	r3, [pc, #68]	; (8002084 <MX_SPI1_Init+0x5c>)
 8002040:	2200      	movs	r2, #0
 8002042:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002044:	4b0f      	ldr	r3, [pc, #60]	; (8002084 <MX_SPI1_Init+0x5c>)
 8002046:	2202      	movs	r2, #2
 8002048:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800204a:	4b0e      	ldr	r3, [pc, #56]	; (8002084 <MX_SPI1_Init+0x5c>)
 800204c:	2200      	movs	r2, #0
 800204e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002050:	4b0c      	ldr	r3, [pc, #48]	; (8002084 <MX_SPI1_Init+0x5c>)
 8002052:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002056:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <MX_SPI1_Init+0x5c>)
 800205a:	2200      	movs	r2, #0
 800205c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800205e:	4b09      	ldr	r3, [pc, #36]	; (8002084 <MX_SPI1_Init+0x5c>)
 8002060:	2200      	movs	r2, #0
 8002062:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002064:	4b07      	ldr	r3, [pc, #28]	; (8002084 <MX_SPI1_Init+0x5c>)
 8002066:	2200      	movs	r2, #0
 8002068:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <MX_SPI1_Init+0x5c>)
 800206c:	220a      	movs	r2, #10
 800206e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002070:	4804      	ldr	r0, [pc, #16]	; (8002084 <MX_SPI1_Init+0x5c>)
 8002072:	f003 f85f 	bl	8005134 <HAL_SPI_Init>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <MX_SPI1_Init+0x58>
  {
    Error_Handler();
 800207c:	f000 f8e4 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002080:	bf00      	nop
 8002082:	bd80      	pop	{r7, pc}
 8002084:	20000110 	.word	0x20000110
 8002088:	40013000 	.word	0x40013000

0800208c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 8002092:	4a12      	ldr	r2, [pc, #72]	; (80020dc <MX_USART2_UART_Init+0x50>)
 8002094:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 8002098:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800209c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800209e:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020a4:	4b0c      	ldr	r3, [pc, #48]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020aa:	4b0b      	ldr	r3, [pc, #44]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020b0:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020b2:	220c      	movs	r2, #12
 80020b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020b6:	4b08      	ldr	r3, [pc, #32]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020be:	2200      	movs	r2, #0
 80020c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <MX_USART2_UART_Init+0x4c>)
 80020c4:	f003 fbfc 	bl	80058c0 <HAL_UART_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020ce:	f000 f8bb 	bl	8002248 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000168 	.word	0x20000168
 80020dc:	40004400 	.word	0x40004400

080020e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	607b      	str	r3, [r7, #4]
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <MX_DMA_Init+0x4c>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	4a0f      	ldr	r2, [pc, #60]	; (800212c <MX_DMA_Init+0x4c>)
 80020f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80020f4:	6313      	str	r3, [r2, #48]	; 0x30
 80020f6:	4b0d      	ldr	r3, [pc, #52]	; (800212c <MX_DMA_Init+0x4c>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020fe:	607b      	str	r3, [r7, #4]
 8002100:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	2100      	movs	r1, #0
 8002106:	2038      	movs	r0, #56	; 0x38
 8002108:	f000 fc81 	bl	8002a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800210c:	2038      	movs	r0, #56	; 0x38
 800210e:	f000 fc9a 	bl	8002a46 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8002112:	2200      	movs	r2, #0
 8002114:	2100      	movs	r1, #0
 8002116:	203b      	movs	r0, #59	; 0x3b
 8002118:	f000 fc79 	bl	8002a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800211c:	203b      	movs	r0, #59	; 0x3b
 800211e:	f000 fc92 	bl	8002a46 <HAL_NVIC_EnableIRQ>

}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800

08002130 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08a      	sub	sp, #40	; 0x28
 8002134:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
 8002144:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	4b23      	ldr	r3, [pc, #140]	; (80021d8 <MX_GPIO_Init+0xa8>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a22      	ldr	r2, [pc, #136]	; (80021d8 <MX_GPIO_Init+0xa8>)
 8002150:	f043 0304 	orr.w	r3, r3, #4
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b20      	ldr	r3, [pc, #128]	; (80021d8 <MX_GPIO_Init+0xa8>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0304 	and.w	r3, r3, #4
 800215e:	613b      	str	r3, [r7, #16]
 8002160:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002162:	2300      	movs	r3, #0
 8002164:	60fb      	str	r3, [r7, #12]
 8002166:	4b1c      	ldr	r3, [pc, #112]	; (80021d8 <MX_GPIO_Init+0xa8>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216a:	4a1b      	ldr	r2, [pc, #108]	; (80021d8 <MX_GPIO_Init+0xa8>)
 800216c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002170:	6313      	str	r3, [r2, #48]	; 0x30
 8002172:	4b19      	ldr	r3, [pc, #100]	; (80021d8 <MX_GPIO_Init+0xa8>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60bb      	str	r3, [r7, #8]
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <MX_GPIO_Init+0xa8>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002186:	4a14      	ldr	r2, [pc, #80]	; (80021d8 <MX_GPIO_Init+0xa8>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6313      	str	r3, [r2, #48]	; 0x30
 800218e:	4b12      	ldr	r3, [pc, #72]	; (80021d8 <MX_GPIO_Init+0xa8>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	60bb      	str	r3, [r7, #8]
 8002198:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	607b      	str	r3, [r7, #4]
 800219e:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <MX_GPIO_Init+0xa8>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a0d      	ldr	r2, [pc, #52]	; (80021d8 <MX_GPIO_Init+0xa8>)
 80021a4:	f043 0302 	orr.w	r3, r3, #2
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <MX_GPIO_Init+0xa8>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	607b      	str	r3, [r7, #4]
 80021b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021bc:	4b07      	ldr	r3, [pc, #28]	; (80021dc <MX_GPIO_Init+0xac>)
 80021be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c0:	2300      	movs	r3, #0
 80021c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4619      	mov	r1, r3
 80021ca:	4805      	ldr	r0, [pc, #20]	; (80021e0 <MX_GPIO_Init+0xb0>)
 80021cc:	f000 ffc6 	bl	800315c <HAL_GPIO_Init>

}
 80021d0:	bf00      	nop
 80021d2:	3728      	adds	r7, #40	; 0x28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	10210000 	.word	0x10210000
 80021e0:	40020800 	.word	0x40020800

080021e4 <__io_putchar>:

/* USER CODE BEGIN 4 */
//printf()
int __io_putchar(int ch)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 uint8_t c[1];
 c[0] = ch & 0x00FF;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	733b      	strb	r3, [r7, #12]
 HAL_UART_Transmit(&huart2, &*c, 1, 10);
 80021f2:	f107 010c 	add.w	r1, r7, #12
 80021f6:	230a      	movs	r3, #10
 80021f8:	2201      	movs	r2, #1
 80021fa:	4804      	ldr	r0, [pc, #16]	; (800220c <__io_putchar+0x28>)
 80021fc:	f003 fbad 	bl	800595a <HAL_UART_Transmit>
 return ch;
 8002200:	687b      	ldr	r3, [r7, #4]
}
 8002202:	4618      	mov	r0, r3
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000168 	.word	0x20000168

08002210 <_write>:

int _write(int file,char *ptr, int len)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b086      	sub	sp, #24
 8002214:	af00      	add	r7, sp, #0
 8002216:	60f8      	str	r0, [r7, #12]
 8002218:	60b9      	str	r1, [r7, #8]
 800221a:	607a      	str	r2, [r7, #4]
 int DataIdx;
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]
 8002220:	e009      	b.n	8002236 <_write+0x26>
 {
 __io_putchar(*ptr++);
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	1c5a      	adds	r2, r3, #1
 8002226:	60ba      	str	r2, [r7, #8]
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff ffda 	bl	80021e4 <__io_putchar>
 for(DataIdx= 0; DataIdx< len; DataIdx++)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	3301      	adds	r3, #1
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	697a      	ldr	r2, [r7, #20]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	429a      	cmp	r2, r3
 800223c:	dbf1      	blt.n	8002222 <_write+0x12>
 }
return len;
 800223e:	687b      	ldr	r3, [r7, #4]
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800224c:	b672      	cpsid	i
}
 800224e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002250:	e7fe      	b.n	8002250 <Error_Handler+0x8>
	...

08002254 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
 800225e:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_MspInit+0x4c>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4a0f      	ldr	r2, [pc, #60]	; (80022a0 <HAL_MspInit+0x4c>)
 8002264:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002268:	6453      	str	r3, [r2, #68]	; 0x44
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <HAL_MspInit+0x4c>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002272:	607b      	str	r3, [r7, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	603b      	str	r3, [r7, #0]
 800227a:	4b09      	ldr	r3, [pc, #36]	; (80022a0 <HAL_MspInit+0x4c>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <HAL_MspInit+0x4c>)
 8002280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002284:	6413      	str	r3, [r2, #64]	; 0x40
 8002286:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_MspInit+0x4c>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800228e:	603b      	str	r3, [r7, #0]
 8002290:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002292:	2007      	movs	r0, #7
 8002294:	f000 fbb0 	bl	80029f8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002298:	bf00      	nop
 800229a:	3708      	adds	r7, #8
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40023800 	.word	0x40023800

080022a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	; 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a19      	ldr	r2, [pc, #100]	; (8002328 <HAL_I2C_MspInit+0x84>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d12c      	bne.n	8002320 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	4b18      	ldr	r3, [pc, #96]	; (800232c <HAL_I2C_MspInit+0x88>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <HAL_I2C_MspInit+0x88>)
 80022d0:	f043 0302 	orr.w	r3, r3, #2
 80022d4:	6313      	str	r3, [r2, #48]	; 0x30
 80022d6:	4b15      	ldr	r3, [pc, #84]	; (800232c <HAL_I2C_MspInit+0x88>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022e8:	2312      	movs	r3, #18
 80022ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ec:	2301      	movs	r3, #1
 80022ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f0:	2303      	movs	r3, #3
 80022f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022f4:	2304      	movs	r3, #4
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022f8:	f107 0314 	add.w	r3, r7, #20
 80022fc:	4619      	mov	r1, r3
 80022fe:	480c      	ldr	r0, [pc, #48]	; (8002330 <HAL_I2C_MspInit+0x8c>)
 8002300:	f000 ff2c 	bl	800315c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002304:	2300      	movs	r3, #0
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	4b08      	ldr	r3, [pc, #32]	; (800232c <HAL_I2C_MspInit+0x88>)
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	4a07      	ldr	r2, [pc, #28]	; (800232c <HAL_I2C_MspInit+0x88>)
 800230e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002312:	6413      	str	r3, [r2, #64]	; 0x40
 8002314:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_I2C_MspInit+0x88>)
 8002316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002318:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002320:	bf00      	nop
 8002322:	3728      	adds	r7, #40	; 0x28
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40005400 	.word	0x40005400
 800232c:	40023800 	.word	0x40023800
 8002330:	40020400 	.word	0x40020400

08002334 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08a      	sub	sp, #40	; 0x28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a48      	ldr	r2, [pc, #288]	; (8002474 <HAL_SPI_MspInit+0x140>)
 8002352:	4293      	cmp	r3, r2
 8002354:	f040 808a 	bne.w	800246c <HAL_SPI_MspInit+0x138>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002358:	2300      	movs	r3, #0
 800235a:	613b      	str	r3, [r7, #16]
 800235c:	4b46      	ldr	r3, [pc, #280]	; (8002478 <HAL_SPI_MspInit+0x144>)
 800235e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002360:	4a45      	ldr	r2, [pc, #276]	; (8002478 <HAL_SPI_MspInit+0x144>)
 8002362:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002366:	6453      	str	r3, [r2, #68]	; 0x44
 8002368:	4b43      	ldr	r3, [pc, #268]	; (8002478 <HAL_SPI_MspInit+0x144>)
 800236a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002370:	613b      	str	r3, [r7, #16]
 8002372:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002374:	2300      	movs	r3, #0
 8002376:	60fb      	str	r3, [r7, #12]
 8002378:	4b3f      	ldr	r3, [pc, #252]	; (8002478 <HAL_SPI_MspInit+0x144>)
 800237a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237c:	4a3e      	ldr	r2, [pc, #248]	; (8002478 <HAL_SPI_MspInit+0x144>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	6313      	str	r3, [r2, #48]	; 0x30
 8002384:	4b3c      	ldr	r3, [pc, #240]	; (8002478 <HAL_SPI_MspInit+0x144>)
 8002386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	60fb      	str	r3, [r7, #12]
 800238e:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002390:	23e0      	movs	r3, #224	; 0xe0
 8002392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002394:	2302      	movs	r3, #2
 8002396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800239c:	2303      	movs	r3, #3
 800239e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80023a0:	2305      	movs	r3, #5
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a4:	f107 0314 	add.w	r3, r7, #20
 80023a8:	4619      	mov	r1, r3
 80023aa:	4834      	ldr	r0, [pc, #208]	; (800247c <HAL_SPI_MspInit+0x148>)
 80023ac:	f000 fed6 	bl	800315c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80023b0:	4b33      	ldr	r3, [pc, #204]	; (8002480 <HAL_SPI_MspInit+0x14c>)
 80023b2:	4a34      	ldr	r2, [pc, #208]	; (8002484 <HAL_SPI_MspInit+0x150>)
 80023b4:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80023b6:	4b32      	ldr	r3, [pc, #200]	; (8002480 <HAL_SPI_MspInit+0x14c>)
 80023b8:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80023bc:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023be:	4b30      	ldr	r3, [pc, #192]	; (8002480 <HAL_SPI_MspInit+0x14c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c4:	4b2e      	ldr	r3, [pc, #184]	; (8002480 <HAL_SPI_MspInit+0x14c>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023ca:	4b2d      	ldr	r3, [pc, #180]	; (8002480 <HAL_SPI_MspInit+0x14c>)
 80023cc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023d0:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023d2:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <HAL_SPI_MspInit+0x14c>)
 80023d4:	2200      	movs	r2, #0
 80023d6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023d8:	4b29      	ldr	r3, [pc, #164]	; (8002480 <HAL_SPI_MspInit+0x14c>)
 80023da:	2200      	movs	r2, #0
 80023dc:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80023de:	4b28      	ldr	r3, [pc, #160]	; (8002480 <HAL_SPI_MspInit+0x14c>)
 80023e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023e4:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023e6:	4b26      	ldr	r3, [pc, #152]	; (8002480 <HAL_SPI_MspInit+0x14c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023ec:	4b24      	ldr	r3, [pc, #144]	; (8002480 <HAL_SPI_MspInit+0x14c>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80023f2:	4823      	ldr	r0, [pc, #140]	; (8002480 <HAL_SPI_MspInit+0x14c>)
 80023f4:	f000 fb42 	bl	8002a7c <HAL_DMA_Init>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80023fe:	f7ff ff23 	bl	8002248 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	4a1e      	ldr	r2, [pc, #120]	; (8002480 <HAL_SPI_MspInit+0x14c>)
 8002406:	64da      	str	r2, [r3, #76]	; 0x4c
 8002408:	4a1d      	ldr	r2, [pc, #116]	; (8002480 <HAL_SPI_MspInit+0x14c>)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 800240e:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <HAL_SPI_MspInit+0x154>)
 8002410:	4a1e      	ldr	r2, [pc, #120]	; (800248c <HAL_SPI_MspInit+0x158>)
 8002412:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8002414:	4b1c      	ldr	r3, [pc, #112]	; (8002488 <HAL_SPI_MspInit+0x154>)
 8002416:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800241a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800241c:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <HAL_SPI_MspInit+0x154>)
 800241e:	2240      	movs	r2, #64	; 0x40
 8002420:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002422:	4b19      	ldr	r3, [pc, #100]	; (8002488 <HAL_SPI_MspInit+0x154>)
 8002424:	2200      	movs	r2, #0
 8002426:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002428:	4b17      	ldr	r3, [pc, #92]	; (8002488 <HAL_SPI_MspInit+0x154>)
 800242a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800242e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002430:	4b15      	ldr	r3, [pc, #84]	; (8002488 <HAL_SPI_MspInit+0x154>)
 8002432:	2200      	movs	r2, #0
 8002434:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002436:	4b14      	ldr	r3, [pc, #80]	; (8002488 <HAL_SPI_MspInit+0x154>)
 8002438:	2200      	movs	r2, #0
 800243a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 800243c:	4b12      	ldr	r3, [pc, #72]	; (8002488 <HAL_SPI_MspInit+0x154>)
 800243e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002442:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002444:	4b10      	ldr	r3, [pc, #64]	; (8002488 <HAL_SPI_MspInit+0x154>)
 8002446:	2200      	movs	r2, #0
 8002448:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800244a:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <HAL_SPI_MspInit+0x154>)
 800244c:	2200      	movs	r2, #0
 800244e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8002450:	480d      	ldr	r0, [pc, #52]	; (8002488 <HAL_SPI_MspInit+0x154>)
 8002452:	f000 fb13 	bl	8002a7c <HAL_DMA_Init>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 800245c:	f7ff fef4 	bl	8002248 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a09      	ldr	r2, [pc, #36]	; (8002488 <HAL_SPI_MspInit+0x154>)
 8002464:	649a      	str	r2, [r3, #72]	; 0x48
 8002466:	4a08      	ldr	r2, [pc, #32]	; (8002488 <HAL_SPI_MspInit+0x154>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800246c:	bf00      	nop
 800246e:	3728      	adds	r7, #40	; 0x28
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40013000 	.word	0x40013000
 8002478:	40023800 	.word	0x40023800
 800247c:	40020000 	.word	0x40020000
 8002480:	200001ac 	.word	0x200001ac
 8002484:	40026410 	.word	0x40026410
 8002488:	2000020c 	.word	0x2000020c
 800248c:	40026458 	.word	0x40026458

08002490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	; 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a19      	ldr	r2, [pc, #100]	; (8002514 <HAL_UART_MspInit+0x84>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d12b      	bne.n	800250a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
 80024b6:	4b18      	ldr	r3, [pc, #96]	; (8002518 <HAL_UART_MspInit+0x88>)
 80024b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ba:	4a17      	ldr	r2, [pc, #92]	; (8002518 <HAL_UART_MspInit+0x88>)
 80024bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024c0:	6413      	str	r3, [r2, #64]	; 0x40
 80024c2:	4b15      	ldr	r3, [pc, #84]	; (8002518 <HAL_UART_MspInit+0x88>)
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	4b11      	ldr	r3, [pc, #68]	; (8002518 <HAL_UART_MspInit+0x88>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	4a10      	ldr	r2, [pc, #64]	; (8002518 <HAL_UART_MspInit+0x88>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	6313      	str	r3, [r2, #48]	; 0x30
 80024de:	4b0e      	ldr	r3, [pc, #56]	; (8002518 <HAL_UART_MspInit+0x88>)
 80024e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024ea:	230c      	movs	r3, #12
 80024ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ee:	2302      	movs	r3, #2
 80024f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f2:	2300      	movs	r3, #0
 80024f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f6:	2303      	movs	r3, #3
 80024f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024fa:	2307      	movs	r3, #7
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024fe:	f107 0314 	add.w	r3, r7, #20
 8002502:	4619      	mov	r1, r3
 8002504:	4805      	ldr	r0, [pc, #20]	; (800251c <HAL_UART_MspInit+0x8c>)
 8002506:	f000 fe29 	bl	800315c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800250a:	bf00      	nop
 800250c:	3728      	adds	r7, #40	; 0x28
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40004400 	.word	0x40004400
 8002518:	40023800 	.word	0x40023800
 800251c:	40020000 	.word	0x40020000

08002520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <NMI_Handler+0x4>

08002526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800252a:	e7fe      	b.n	800252a <HardFault_Handler+0x4>

0800252c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002530:	e7fe      	b.n	8002530 <MemManage_Handler+0x4>

08002532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002536:	e7fe      	b.n	8002536 <BusFault_Handler+0x4>

08002538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800253c:	e7fe      	b.n	800253c <UsageFault_Handler+0x4>

0800253e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800256c:	f000 f930 	bl	80027d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}

08002574 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8002578:	4802      	ldr	r0, [pc, #8]	; (8002584 <DMA2_Stream0_IRQHandler+0x10>)
 800257a:	f000 fb85 	bl	8002c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200001ac 	.word	0x200001ac

08002588 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800258c:	4803      	ldr	r0, [pc, #12]	; (800259c <DMA2_Stream3_IRQHandler+0x14>)
 800258e:	f000 fb7b 	bl	8002c88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */
  printf("SPI Transmit\r\n");
 8002592:	4803      	ldr	r0, [pc, #12]	; (80025a0 <DMA2_Stream3_IRQHandler+0x18>)
 8002594:	f003 fd3e 	bl	8006014 <puts>
  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002598:	bf00      	nop
 800259a:	bd80      	pop	{r7, pc}
 800259c:	2000020c 	.word	0x2000020c
 80025a0:	08007728 	.word	0x08007728

080025a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	e00a      	b.n	80025cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025b6:	f3af 8000 	nop.w
 80025ba:	4601      	mov	r1, r0
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	1c5a      	adds	r2, r3, #1
 80025c0:	60ba      	str	r2, [r7, #8]
 80025c2:	b2ca      	uxtb	r2, r1
 80025c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	3301      	adds	r3, #1
 80025ca:	617b      	str	r3, [r7, #20]
 80025cc:	697a      	ldr	r2, [r7, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	dbf0      	blt.n	80025b6 <_read+0x12>
	}

return len;
 80025d4:	687b      	ldr	r3, [r7, #4]
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3718      	adds	r7, #24
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <_close>:
	}
	return len;
}

int _close(int file)
{
 80025de:	b480      	push	{r7}
 80025e0:	b083      	sub	sp, #12
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	6078      	str	r0, [r7, #4]
	return -1;
 80025e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
 80025fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002606:	605a      	str	r2, [r3, #4]
	return 0;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	370c      	adds	r7, #12
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr

08002616 <_isatty>:

int _isatty(int file)
{
 8002616:	b480      	push	{r7}
 8002618:	b083      	sub	sp, #12
 800261a:	af00      	add	r7, sp, #0
 800261c:	6078      	str	r0, [r7, #4]
	return 1;
 800261e:	2301      	movs	r3, #1
}
 8002620:	4618      	mov	r0, r3
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800262c:	b480      	push	{r7}
 800262e:	b085      	sub	sp, #20
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
	return 0;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
	...

08002648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002650:	4a14      	ldr	r2, [pc, #80]	; (80026a4 <_sbrk+0x5c>)
 8002652:	4b15      	ldr	r3, [pc, #84]	; (80026a8 <_sbrk+0x60>)
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800265c:	4b13      	ldr	r3, [pc, #76]	; (80026ac <_sbrk+0x64>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d102      	bne.n	800266a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002664:	4b11      	ldr	r3, [pc, #68]	; (80026ac <_sbrk+0x64>)
 8002666:	4a12      	ldr	r2, [pc, #72]	; (80026b0 <_sbrk+0x68>)
 8002668:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800266a:	4b10      	ldr	r3, [pc, #64]	; (80026ac <_sbrk+0x64>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	693a      	ldr	r2, [r7, #16]
 8002674:	429a      	cmp	r2, r3
 8002676:	d207      	bcs.n	8002688 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002678:	f003 fc14 	bl	8005ea4 <__errno>
 800267c:	4603      	mov	r3, r0
 800267e:	220c      	movs	r2, #12
 8002680:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002682:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002686:	e009      	b.n	800269c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002688:	4b08      	ldr	r3, [pc, #32]	; (80026ac <_sbrk+0x64>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <_sbrk+0x64>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4413      	add	r3, r2
 8002696:	4a05      	ldr	r2, [pc, #20]	; (80026ac <_sbrk+0x64>)
 8002698:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800269a:	68fb      	ldr	r3, [r7, #12]
}
 800269c:	4618      	mov	r0, r3
 800269e:	3718      	adds	r7, #24
 80026a0:	46bd      	mov	sp, r7
 80026a2:	bd80      	pop	{r7, pc}
 80026a4:	20020000 	.word	0x20020000
 80026a8:	00000400 	.word	0x00000400
 80026ac:	20000090 	.word	0x20000090
 80026b0:	20000280 	.word	0x20000280

080026b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026b4:	b480      	push	{r7}
 80026b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <SystemInit+0x20>)
 80026ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026be:	4a05      	ldr	r2, [pc, #20]	; (80026d4 <SystemInit+0x20>)
 80026c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026c8:	bf00      	nop
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80026d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002710 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026dc:	480d      	ldr	r0, [pc, #52]	; (8002714 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80026de:	490e      	ldr	r1, [pc, #56]	; (8002718 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80026e0:	4a0e      	ldr	r2, [pc, #56]	; (800271c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80026e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026e4:	e002      	b.n	80026ec <LoopCopyDataInit>

080026e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ea:	3304      	adds	r3, #4

080026ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026f0:	d3f9      	bcc.n	80026e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026f2:	4a0b      	ldr	r2, [pc, #44]	; (8002720 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80026f4:	4c0b      	ldr	r4, [pc, #44]	; (8002724 <LoopFillZerobss+0x26>)
  movs r3, #0
 80026f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026f8:	e001      	b.n	80026fe <LoopFillZerobss>

080026fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026fc:	3204      	adds	r2, #4

080026fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002700:	d3fb      	bcc.n	80026fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002702:	f7ff ffd7 	bl	80026b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002706:	f003 fbd3 	bl	8005eb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800270a:	f7ff fb79 	bl	8001e00 <main>
  bx  lr    
 800270e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002710:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002714:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002718:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800271c:	08007870 	.word	0x08007870
  ldr r2, =_sbss
 8002720:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8002724:	20000280 	.word	0x20000280

08002728 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002728:	e7fe      	b.n	8002728 <ADC_IRQHandler>
	...

0800272c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002730:	4b0e      	ldr	r3, [pc, #56]	; (800276c <HAL_Init+0x40>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a0d      	ldr	r2, [pc, #52]	; (800276c <HAL_Init+0x40>)
 8002736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800273a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800273c:	4b0b      	ldr	r3, [pc, #44]	; (800276c <HAL_Init+0x40>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a0a      	ldr	r2, [pc, #40]	; (800276c <HAL_Init+0x40>)
 8002742:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002746:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002748:	4b08      	ldr	r3, [pc, #32]	; (800276c <HAL_Init+0x40>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a07      	ldr	r2, [pc, #28]	; (800276c <HAL_Init+0x40>)
 800274e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002752:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002754:	2003      	movs	r0, #3
 8002756:	f000 f94f 	bl	80029f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800275a:	2000      	movs	r0, #0
 800275c:	f000 f808 	bl	8002770 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002760:	f7ff fd78 	bl	8002254 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40023c00 	.word	0x40023c00

08002770 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <HAL_InitTick+0x54>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_InitTick+0x58>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	4619      	mov	r1, r3
 8002782:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002786:	fbb3 f3f1 	udiv	r3, r3, r1
 800278a:	fbb2 f3f3 	udiv	r3, r2, r3
 800278e:	4618      	mov	r0, r3
 8002790:	f000 f967 	bl	8002a62 <HAL_SYSTICK_Config>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e00e      	b.n	80027bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b0f      	cmp	r3, #15
 80027a2:	d80a      	bhi.n	80027ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80027a4:	2200      	movs	r2, #0
 80027a6:	6879      	ldr	r1, [r7, #4]
 80027a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80027ac:	f000 f92f 	bl	8002a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80027b0:	4a06      	ldr	r2, [pc, #24]	; (80027cc <HAL_InitTick+0x5c>)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
 80027b8:	e000      	b.n	80027bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	20000000 	.word	0x20000000
 80027c8:	20000008 	.word	0x20000008
 80027cc:	20000004 	.word	0x20000004

080027d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027d4:	4b06      	ldr	r3, [pc, #24]	; (80027f0 <HAL_IncTick+0x20>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_IncTick+0x24>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	4a04      	ldr	r2, [pc, #16]	; (80027f4 <HAL_IncTick+0x24>)
 80027e2:	6013      	str	r3, [r2, #0]
}
 80027e4:	bf00      	nop
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr
 80027ee:	bf00      	nop
 80027f0:	20000008 	.word	0x20000008
 80027f4:	2000026c 	.word	0x2000026c

080027f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027f8:	b480      	push	{r7}
 80027fa:	af00      	add	r7, sp, #0
  return uwTick;
 80027fc:	4b03      	ldr	r3, [pc, #12]	; (800280c <HAL_GetTick+0x14>)
 80027fe:	681b      	ldr	r3, [r3, #0]
}
 8002800:	4618      	mov	r0, r3
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop
 800280c:	2000026c 	.word	0x2000026c

08002810 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002818:	f7ff ffee 	bl	80027f8 <HAL_GetTick>
 800281c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002828:	d005      	beq.n	8002836 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800282a:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <HAL_Delay+0x44>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	4413      	add	r3, r2
 8002834:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002836:	bf00      	nop
 8002838:	f7ff ffde 	bl	80027f8 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	429a      	cmp	r2, r3
 8002846:	d8f7      	bhi.n	8002838 <HAL_Delay+0x28>
  {
  }
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	3710      	adds	r7, #16
 800284e:	46bd      	mov	sp, r7
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	20000008 	.word	0x20000008

08002858 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002858:	b480      	push	{r7}
 800285a:	b085      	sub	sp, #20
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002868:	4b0c      	ldr	r3, [pc, #48]	; (800289c <__NVIC_SetPriorityGrouping+0x44>)
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002874:	4013      	ands	r3, r2
 8002876:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002880:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002884:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002888:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800288a:	4a04      	ldr	r2, [pc, #16]	; (800289c <__NVIC_SetPriorityGrouping+0x44>)
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	60d3      	str	r3, [r2, #12]
}
 8002890:	bf00      	nop
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr
 800289c:	e000ed00 	.word	0xe000ed00

080028a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028a4:	4b04      	ldr	r3, [pc, #16]	; (80028b8 <__NVIC_GetPriorityGrouping+0x18>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	0a1b      	lsrs	r3, r3, #8
 80028aa:	f003 0307 	and.w	r3, r3, #7
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr
 80028b8:	e000ed00 	.word	0xe000ed00

080028bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	db0b      	blt.n	80028e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028ce:	79fb      	ldrb	r3, [r7, #7]
 80028d0:	f003 021f 	and.w	r2, r3, #31
 80028d4:	4907      	ldr	r1, [pc, #28]	; (80028f4 <__NVIC_EnableIRQ+0x38>)
 80028d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028da:	095b      	lsrs	r3, r3, #5
 80028dc:	2001      	movs	r0, #1
 80028de:	fa00 f202 	lsl.w	r2, r0, r2
 80028e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	e000e100 	.word	0xe000e100

080028f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	6039      	str	r1, [r7, #0]
 8002902:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002904:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002908:	2b00      	cmp	r3, #0
 800290a:	db0a      	blt.n	8002922 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	b2da      	uxtb	r2, r3
 8002910:	490c      	ldr	r1, [pc, #48]	; (8002944 <__NVIC_SetPriority+0x4c>)
 8002912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002916:	0112      	lsls	r2, r2, #4
 8002918:	b2d2      	uxtb	r2, r2
 800291a:	440b      	add	r3, r1
 800291c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002920:	e00a      	b.n	8002938 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4908      	ldr	r1, [pc, #32]	; (8002948 <__NVIC_SetPriority+0x50>)
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	3b04      	subs	r3, #4
 8002930:	0112      	lsls	r2, r2, #4
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	440b      	add	r3, r1
 8002936:	761a      	strb	r2, [r3, #24]
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	e000e100 	.word	0xe000e100
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800294c:	b480      	push	{r7}
 800294e:	b089      	sub	sp, #36	; 0x24
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f1c3 0307 	rsb	r3, r3, #7
 8002966:	2b04      	cmp	r3, #4
 8002968:	bf28      	it	cs
 800296a:	2304      	movcs	r3, #4
 800296c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	3304      	adds	r3, #4
 8002972:	2b06      	cmp	r3, #6
 8002974:	d902      	bls.n	800297c <NVIC_EncodePriority+0x30>
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3b03      	subs	r3, #3
 800297a:	e000      	b.n	800297e <NVIC_EncodePriority+0x32>
 800297c:	2300      	movs	r3, #0
 800297e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002980:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	43da      	mvns	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	401a      	ands	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002994:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	43d9      	mvns	r1, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029a4:	4313      	orrs	r3, r2
         );
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3724      	adds	r7, #36	; 0x24
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
	...

080029b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3b01      	subs	r3, #1
 80029c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029c4:	d301      	bcc.n	80029ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029c6:	2301      	movs	r3, #1
 80029c8:	e00f      	b.n	80029ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029ca:	4a0a      	ldr	r2, [pc, #40]	; (80029f4 <SysTick_Config+0x40>)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80029d2:	210f      	movs	r1, #15
 80029d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029d8:	f7ff ff8e 	bl	80028f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <SysTick_Config+0x40>)
 80029de:	2200      	movs	r2, #0
 80029e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80029e2:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <SysTick_Config+0x40>)
 80029e4:	2207      	movs	r2, #7
 80029e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	e000e010 	.word	0xe000e010

080029f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff ff29 	bl	8002858 <__NVIC_SetPriorityGrouping>
}
 8002a06:	bf00      	nop
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}

08002a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	b086      	sub	sp, #24
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	4603      	mov	r3, r0
 8002a16:	60b9      	str	r1, [r7, #8]
 8002a18:	607a      	str	r2, [r7, #4]
 8002a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a20:	f7ff ff3e 	bl	80028a0 <__NVIC_GetPriorityGrouping>
 8002a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	68b9      	ldr	r1, [r7, #8]
 8002a2a:	6978      	ldr	r0, [r7, #20]
 8002a2c:	f7ff ff8e 	bl	800294c <NVIC_EncodePriority>
 8002a30:	4602      	mov	r2, r0
 8002a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a36:	4611      	mov	r1, r2
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7ff ff5d 	bl	80028f8 <__NVIC_SetPriority>
}
 8002a3e:	bf00      	nop
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b082      	sub	sp, #8
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff ff31 	bl	80028bc <__NVIC_EnableIRQ>
}
 8002a5a:	bf00      	nop
 8002a5c:	3708      	adds	r7, #8
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}

08002a62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a62:	b580      	push	{r7, lr}
 8002a64:	b082      	sub	sp, #8
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7ff ffa2 	bl	80029b4 <SysTick_Config>
 8002a70:	4603      	mov	r3, r0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a88:	f7ff feb6 	bl	80027f8 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d101      	bne.n	8002a98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e099      	b.n	8002bcc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f022 0201 	bic.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ab8:	e00f      	b.n	8002ada <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002aba:	f7ff fe9d 	bl	80027f8 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b05      	cmp	r3, #5
 8002ac6:	d908      	bls.n	8002ada <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2220      	movs	r2, #32
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e078      	b.n	8002bcc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d1e8      	bne.n	8002aba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	4b38      	ldr	r3, [pc, #224]	; (8002bd4 <HAL_DMA_Init+0x158>)
 8002af4:	4013      	ands	r3, r2
 8002af6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685a      	ldr	r2, [r3, #4]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d107      	bne.n	8002b44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3c:	4313      	orrs	r3, r2
 8002b3e:	697a      	ldr	r2, [r7, #20]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	697a      	ldr	r2, [r7, #20]
 8002b4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	f023 0307 	bic.w	r3, r3, #7
 8002b5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	2b04      	cmp	r3, #4
 8002b6c:	d117      	bne.n	8002b9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d00e      	beq.n	8002b9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 fa6f 	bl	8003064 <DMA_CheckFifoParam>
 8002b86:	4603      	mov	r3, r0
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d008      	beq.n	8002b9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2240      	movs	r2, #64	; 0x40
 8002b90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e016      	b.n	8002bcc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	697a      	ldr	r2, [r7, #20]
 8002ba4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 fa26 	bl	8002ff8 <DMA_CalcBaseAndBitshift>
 8002bac:	4603      	mov	r3, r0
 8002bae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb4:	223f      	movs	r2, #63	; 0x3f
 8002bb6:	409a      	lsls	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	f010803f 	.word	0xf010803f

08002bd8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
 8002be4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002be6:	2300      	movs	r3, #0
 8002be8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_DMA_Start_IT+0x26>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e040      	b.n	8002c80 <HAL_DMA_Start_IT+0xa8>
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d12f      	bne.n	8002c72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2202      	movs	r2, #2
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	687a      	ldr	r2, [r7, #4]
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f000 f9b8 	bl	8002f9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c30:	223f      	movs	r2, #63	; 0x3f
 8002c32:	409a      	lsls	r2, r3
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0216 	orr.w	r2, r2, #22
 8002c46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d007      	beq.n	8002c60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f042 0208 	orr.w	r2, r2, #8
 8002c5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f042 0201 	orr.w	r2, r2, #1
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	e005      	b.n	8002c7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c7a:	2302      	movs	r3, #2
 8002c7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c94:	4b92      	ldr	r3, [pc, #584]	; (8002ee0 <HAL_DMA_IRQHandler+0x258>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a92      	ldr	r2, [pc, #584]	; (8002ee4 <HAL_DMA_IRQHandler+0x25c>)
 8002c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9e:	0a9b      	lsrs	r3, r3, #10
 8002ca0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ca6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb2:	2208      	movs	r2, #8
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d01a      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d013      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f022 0204 	bic.w	r2, r2, #4
 8002cda:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce0:	2208      	movs	r2, #8
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cec:	f043 0201 	orr.w	r2, r3, #1
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d012      	beq.n	8002d2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	695b      	ldr	r3, [r3, #20]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00b      	beq.n	8002d2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d16:	2201      	movs	r2, #1
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d22:	f043 0202 	orr.w	r2, r3, #2
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2e:	2204      	movs	r2, #4
 8002d30:	409a      	lsls	r2, r3
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4013      	ands	r3, r2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d012      	beq.n	8002d60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 0302 	and.w	r3, r3, #2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d00b      	beq.n	8002d60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	409a      	lsls	r2, r3
 8002d50:	693b      	ldr	r3, [r7, #16]
 8002d52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d58:	f043 0204 	orr.w	r2, r3, #4
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d64:	2210      	movs	r2, #16
 8002d66:	409a      	lsls	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d043      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0308 	and.w	r3, r3, #8
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d03c      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d82:	2210      	movs	r2, #16
 8002d84:	409a      	lsls	r2, r3
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d018      	beq.n	8002dca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d108      	bne.n	8002db8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d024      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	4798      	blx	r3
 8002db6:	e01f      	b.n	8002df8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d01b      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4798      	blx	r3
 8002dc8:	e016      	b.n	8002df8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d107      	bne.n	8002de8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f022 0208 	bic.w	r2, r2, #8
 8002de6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d003      	beq.n	8002df8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfc:	2220      	movs	r2, #32
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	4013      	ands	r3, r2
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 808e 	beq.w	8002f26 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0310 	and.w	r3, r3, #16
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 8086 	beq.w	8002f26 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1e:	2220      	movs	r2, #32
 8002e20:	409a      	lsls	r2, r3
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b05      	cmp	r3, #5
 8002e30:	d136      	bne.n	8002ea0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0216 	bic.w	r2, r2, #22
 8002e40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	695a      	ldr	r2, [r3, #20]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d103      	bne.n	8002e62 <HAL_DMA_IRQHandler+0x1da>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d007      	beq.n	8002e72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0208 	bic.w	r2, r2, #8
 8002e70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e76:	223f      	movs	r2, #63	; 0x3f
 8002e78:	409a      	lsls	r2, r3
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2200      	movs	r2, #0
 8002e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d07d      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	4798      	blx	r3
        }
        return;
 8002e9e:	e078      	b.n	8002f92 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d01c      	beq.n	8002ee8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d108      	bne.n	8002ece <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d030      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	4798      	blx	r3
 8002ecc:	e02b      	b.n	8002f26 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d027      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	4798      	blx	r3
 8002ede:	e022      	b.n	8002f26 <HAL_DMA_IRQHandler+0x29e>
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10f      	bne.n	8002f16 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 0210 	bic.w	r2, r2, #16
 8002f04:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2201      	movs	r2, #1
 8002f12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d032      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d022      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2205      	movs	r2, #5
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f022 0201 	bic.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	3301      	adds	r3, #1
 8002f56:	60bb      	str	r3, [r7, #8]
 8002f58:	697a      	ldr	r2, [r7, #20]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d307      	bcc.n	8002f6e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1f2      	bne.n	8002f52 <HAL_DMA_IRQHandler+0x2ca>
 8002f6c:	e000      	b.n	8002f70 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002f6e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d005      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
 8002f90:	e000      	b.n	8002f94 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002f92:	bf00      	nop
    }
  }
}
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop

08002f9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002fb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	683a      	ldr	r2, [r7, #0]
 8002fc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	2b40      	cmp	r3, #64	; 0x40
 8002fc8:	d108      	bne.n	8002fdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fda:	e007      	b.n	8002fec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68ba      	ldr	r2, [r7, #8]
 8002fe2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	60da      	str	r2, [r3, #12]
}
 8002fec:	bf00      	nop
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr

08002ff8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	3b10      	subs	r3, #16
 8003008:	4a14      	ldr	r2, [pc, #80]	; (800305c <DMA_CalcBaseAndBitshift+0x64>)
 800300a:	fba2 2303 	umull	r2, r3, r2, r3
 800300e:	091b      	lsrs	r3, r3, #4
 8003010:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003012:	4a13      	ldr	r2, [pc, #76]	; (8003060 <DMA_CalcBaseAndBitshift+0x68>)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4413      	add	r3, r2
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	461a      	mov	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2b03      	cmp	r3, #3
 8003024:	d909      	bls.n	800303a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800302e:	f023 0303 	bic.w	r3, r3, #3
 8003032:	1d1a      	adds	r2, r3, #4
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	659a      	str	r2, [r3, #88]	; 0x58
 8003038:	e007      	b.n	800304a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003042:	f023 0303 	bic.w	r3, r3, #3
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	aaaaaaab 	.word	0xaaaaaaab
 8003060:	08007750 	.word	0x08007750

08003064 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d11f      	bne.n	80030be <DMA_CheckFifoParam+0x5a>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	2b03      	cmp	r3, #3
 8003082:	d856      	bhi.n	8003132 <DMA_CheckFifoParam+0xce>
 8003084:	a201      	add	r2, pc, #4	; (adr r2, 800308c <DMA_CheckFifoParam+0x28>)
 8003086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308a:	bf00      	nop
 800308c:	0800309d 	.word	0x0800309d
 8003090:	080030af 	.word	0x080030af
 8003094:	0800309d 	.word	0x0800309d
 8003098:	08003133 	.word	0x08003133
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d046      	beq.n	8003136 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ac:	e043      	b.n	8003136 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030b6:	d140      	bne.n	800313a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030bc:	e03d      	b.n	800313a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030c6:	d121      	bne.n	800310c <DMA_CheckFifoParam+0xa8>
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	2b03      	cmp	r3, #3
 80030cc:	d837      	bhi.n	800313e <DMA_CheckFifoParam+0xda>
 80030ce:	a201      	add	r2, pc, #4	; (adr r2, 80030d4 <DMA_CheckFifoParam+0x70>)
 80030d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d4:	080030e5 	.word	0x080030e5
 80030d8:	080030eb 	.word	0x080030eb
 80030dc:	080030e5 	.word	0x080030e5
 80030e0:	080030fd 	.word	0x080030fd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	73fb      	strb	r3, [r7, #15]
      break;
 80030e8:	e030      	b.n	800314c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d025      	beq.n	8003142 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fa:	e022      	b.n	8003142 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003100:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003104:	d11f      	bne.n	8003146 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800310a:	e01c      	b.n	8003146 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b02      	cmp	r3, #2
 8003110:	d903      	bls.n	800311a <DMA_CheckFifoParam+0xb6>
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	2b03      	cmp	r3, #3
 8003116:	d003      	beq.n	8003120 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003118:	e018      	b.n	800314c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	73fb      	strb	r3, [r7, #15]
      break;
 800311e:	e015      	b.n	800314c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003124:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00e      	beq.n	800314a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	73fb      	strb	r3, [r7, #15]
      break;
 8003130:	e00b      	b.n	800314a <DMA_CheckFifoParam+0xe6>
      break;
 8003132:	bf00      	nop
 8003134:	e00a      	b.n	800314c <DMA_CheckFifoParam+0xe8>
      break;
 8003136:	bf00      	nop
 8003138:	e008      	b.n	800314c <DMA_CheckFifoParam+0xe8>
      break;
 800313a:	bf00      	nop
 800313c:	e006      	b.n	800314c <DMA_CheckFifoParam+0xe8>
      break;
 800313e:	bf00      	nop
 8003140:	e004      	b.n	800314c <DMA_CheckFifoParam+0xe8>
      break;
 8003142:	bf00      	nop
 8003144:	e002      	b.n	800314c <DMA_CheckFifoParam+0xe8>
      break;   
 8003146:	bf00      	nop
 8003148:	e000      	b.n	800314c <DMA_CheckFifoParam+0xe8>
      break;
 800314a:	bf00      	nop
    }
  } 
  
  return status; 
 800314c:	7bfb      	ldrb	r3, [r7, #15]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3714      	adds	r7, #20
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop

0800315c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800315c:	b480      	push	{r7}
 800315e:	b089      	sub	sp, #36	; 0x24
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003166:	2300      	movs	r3, #0
 8003168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800316a:	2300      	movs	r3, #0
 800316c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800316e:	2300      	movs	r3, #0
 8003170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	e165      	b.n	8003444 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003178:	2201      	movs	r2, #1
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4013      	ands	r3, r2
 800318a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	429a      	cmp	r2, r3
 8003192:	f040 8154 	bne.w	800343e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d005      	beq.n	80031ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d130      	bne.n	8003210 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031b4:	69fb      	ldr	r3, [r7, #28]
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	2203      	movs	r2, #3
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	fa02 f303 	lsl.w	r3, r2, r3
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031e4:	2201      	movs	r2, #1
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ec:	43db      	mvns	r3, r3
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4013      	ands	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	091b      	lsrs	r3, r3, #4
 80031fa:	f003 0201 	and.w	r2, r3, #1
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	fa02 f303 	lsl.w	r3, r2, r3
 8003204:	69ba      	ldr	r2, [r7, #24]
 8003206:	4313      	orrs	r3, r2
 8003208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f003 0303 	and.w	r3, r3, #3
 8003218:	2b03      	cmp	r3, #3
 800321a:	d017      	beq.n	800324c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	2203      	movs	r2, #3
 8003228:	fa02 f303 	lsl.w	r3, r2, r3
 800322c:	43db      	mvns	r3, r3
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4013      	ands	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	2b02      	cmp	r3, #2
 8003256:	d123      	bne.n	80032a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003258:	69fb      	ldr	r3, [r7, #28]
 800325a:	08da      	lsrs	r2, r3, #3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	3208      	adds	r2, #8
 8003260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	220f      	movs	r2, #15
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f003 0307 	and.w	r3, r3, #7
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	4313      	orrs	r3, r2
 8003290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	08da      	lsrs	r2, r3, #3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	3208      	adds	r2, #8
 800329a:	69b9      	ldr	r1, [r7, #24]
 800329c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	2203      	movs	r2, #3
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	f003 0203 	and.w	r2, r3, #3
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	005b      	lsls	r3, r3, #1
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 80ae 	beq.w	800343e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	4b5d      	ldr	r3, [pc, #372]	; (800345c <HAL_GPIO_Init+0x300>)
 80032e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ea:	4a5c      	ldr	r2, [pc, #368]	; (800345c <HAL_GPIO_Init+0x300>)
 80032ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032f0:	6453      	str	r3, [r2, #68]	; 0x44
 80032f2:	4b5a      	ldr	r3, [pc, #360]	; (800345c <HAL_GPIO_Init+0x300>)
 80032f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032fe:	4a58      	ldr	r2, [pc, #352]	; (8003460 <HAL_GPIO_Init+0x304>)
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	089b      	lsrs	r3, r3, #2
 8003304:	3302      	adds	r3, #2
 8003306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	f003 0303 	and.w	r3, r3, #3
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	220f      	movs	r2, #15
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	4a4f      	ldr	r2, [pc, #316]	; (8003464 <HAL_GPIO_Init+0x308>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d025      	beq.n	8003376 <HAL_GPIO_Init+0x21a>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	4a4e      	ldr	r2, [pc, #312]	; (8003468 <HAL_GPIO_Init+0x30c>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d01f      	beq.n	8003372 <HAL_GPIO_Init+0x216>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a4d      	ldr	r2, [pc, #308]	; (800346c <HAL_GPIO_Init+0x310>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d019      	beq.n	800336e <HAL_GPIO_Init+0x212>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a4c      	ldr	r2, [pc, #304]	; (8003470 <HAL_GPIO_Init+0x314>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d013      	beq.n	800336a <HAL_GPIO_Init+0x20e>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a4b      	ldr	r2, [pc, #300]	; (8003474 <HAL_GPIO_Init+0x318>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d00d      	beq.n	8003366 <HAL_GPIO_Init+0x20a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a4a      	ldr	r2, [pc, #296]	; (8003478 <HAL_GPIO_Init+0x31c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d007      	beq.n	8003362 <HAL_GPIO_Init+0x206>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a49      	ldr	r2, [pc, #292]	; (800347c <HAL_GPIO_Init+0x320>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d101      	bne.n	800335e <HAL_GPIO_Init+0x202>
 800335a:	2306      	movs	r3, #6
 800335c:	e00c      	b.n	8003378 <HAL_GPIO_Init+0x21c>
 800335e:	2307      	movs	r3, #7
 8003360:	e00a      	b.n	8003378 <HAL_GPIO_Init+0x21c>
 8003362:	2305      	movs	r3, #5
 8003364:	e008      	b.n	8003378 <HAL_GPIO_Init+0x21c>
 8003366:	2304      	movs	r3, #4
 8003368:	e006      	b.n	8003378 <HAL_GPIO_Init+0x21c>
 800336a:	2303      	movs	r3, #3
 800336c:	e004      	b.n	8003378 <HAL_GPIO_Init+0x21c>
 800336e:	2302      	movs	r3, #2
 8003370:	e002      	b.n	8003378 <HAL_GPIO_Init+0x21c>
 8003372:	2301      	movs	r3, #1
 8003374:	e000      	b.n	8003378 <HAL_GPIO_Init+0x21c>
 8003376:	2300      	movs	r3, #0
 8003378:	69fa      	ldr	r2, [r7, #28]
 800337a:	f002 0203 	and.w	r2, r2, #3
 800337e:	0092      	lsls	r2, r2, #2
 8003380:	4093      	lsls	r3, r2
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	4313      	orrs	r3, r2
 8003386:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003388:	4935      	ldr	r1, [pc, #212]	; (8003460 <HAL_GPIO_Init+0x304>)
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	089b      	lsrs	r3, r3, #2
 800338e:	3302      	adds	r3, #2
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003396:	4b3a      	ldr	r3, [pc, #232]	; (8003480 <HAL_GPIO_Init+0x324>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033ba:	4a31      	ldr	r2, [pc, #196]	; (8003480 <HAL_GPIO_Init+0x324>)
 80033bc:	69bb      	ldr	r3, [r7, #24]
 80033be:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033c0:	4b2f      	ldr	r3, [pc, #188]	; (8003480 <HAL_GPIO_Init+0x324>)
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d003      	beq.n	80033e4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033e4:	4a26      	ldr	r2, [pc, #152]	; (8003480 <HAL_GPIO_Init+0x324>)
 80033e6:	69bb      	ldr	r3, [r7, #24]
 80033e8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033ea:	4b25      	ldr	r3, [pc, #148]	; (8003480 <HAL_GPIO_Init+0x324>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	43db      	mvns	r3, r3
 80033f4:	69ba      	ldr	r2, [r7, #24]
 80033f6:	4013      	ands	r3, r2
 80033f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003406:	69ba      	ldr	r2, [r7, #24]
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800340e:	4a1c      	ldr	r2, [pc, #112]	; (8003480 <HAL_GPIO_Init+0x324>)
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003414:	4b1a      	ldr	r3, [pc, #104]	; (8003480 <HAL_GPIO_Init+0x324>)
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8003430:	69ba      	ldr	r2, [r7, #24]
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003438:	4a11      	ldr	r2, [pc, #68]	; (8003480 <HAL_GPIO_Init+0x324>)
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	3301      	adds	r3, #1
 8003442:	61fb      	str	r3, [r7, #28]
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	2b0f      	cmp	r3, #15
 8003448:	f67f ae96 	bls.w	8003178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800344c:	bf00      	nop
 800344e:	bf00      	nop
 8003450:	3724      	adds	r7, #36	; 0x24
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40023800 	.word	0x40023800
 8003460:	40013800 	.word	0x40013800
 8003464:	40020000 	.word	0x40020000
 8003468:	40020400 	.word	0x40020400
 800346c:	40020800 	.word	0x40020800
 8003470:	40020c00 	.word	0x40020c00
 8003474:	40021000 	.word	0x40021000
 8003478:	40021400 	.word	0x40021400
 800347c:	40021800 	.word	0x40021800
 8003480:	40013c00 	.word	0x40013c00

08003484 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e12b      	b.n	80036ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fe fefa 	bl	80022a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2224      	movs	r2, #36	; 0x24
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0201 	bic.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034e8:	f001 f9ac 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 80034ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4a81      	ldr	r2, [pc, #516]	; (80036f8 <HAL_I2C_Init+0x274>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d807      	bhi.n	8003508 <HAL_I2C_Init+0x84>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4a80      	ldr	r2, [pc, #512]	; (80036fc <HAL_I2C_Init+0x278>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	bf94      	ite	ls
 8003500:	2301      	movls	r3, #1
 8003502:	2300      	movhi	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	e006      	b.n	8003516 <HAL_I2C_Init+0x92>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4a7d      	ldr	r2, [pc, #500]	; (8003700 <HAL_I2C_Init+0x27c>)
 800350c:	4293      	cmp	r3, r2
 800350e:	bf94      	ite	ls
 8003510:	2301      	movls	r3, #1
 8003512:	2300      	movhi	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e0e7      	b.n	80036ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4a78      	ldr	r2, [pc, #480]	; (8003704 <HAL_I2C_Init+0x280>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	0c9b      	lsrs	r3, r3, #18
 8003528:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4a6a      	ldr	r2, [pc, #424]	; (80036f8 <HAL_I2C_Init+0x274>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d802      	bhi.n	8003558 <HAL_I2C_Init+0xd4>
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	3301      	adds	r3, #1
 8003556:	e009      	b.n	800356c <HAL_I2C_Init+0xe8>
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	4a69      	ldr	r2, [pc, #420]	; (8003708 <HAL_I2C_Init+0x284>)
 8003564:	fba2 2303 	umull	r2, r3, r2, r3
 8003568:	099b      	lsrs	r3, r3, #6
 800356a:	3301      	adds	r3, #1
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	430b      	orrs	r3, r1
 8003572:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800357e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	495c      	ldr	r1, [pc, #368]	; (80036f8 <HAL_I2C_Init+0x274>)
 8003588:	428b      	cmp	r3, r1
 800358a:	d819      	bhi.n	80035c0 <HAL_I2C_Init+0x13c>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	1e59      	subs	r1, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	fbb1 f3f3 	udiv	r3, r1, r3
 800359a:	1c59      	adds	r1, r3, #1
 800359c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035a0:	400b      	ands	r3, r1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00a      	beq.n	80035bc <HAL_I2C_Init+0x138>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	1e59      	subs	r1, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80035b4:	3301      	adds	r3, #1
 80035b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ba:	e051      	b.n	8003660 <HAL_I2C_Init+0x1dc>
 80035bc:	2304      	movs	r3, #4
 80035be:	e04f      	b.n	8003660 <HAL_I2C_Init+0x1dc>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d111      	bne.n	80035ec <HAL_I2C_Init+0x168>
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	1e58      	subs	r0, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6859      	ldr	r1, [r3, #4]
 80035d0:	460b      	mov	r3, r1
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	440b      	add	r3, r1
 80035d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035da:	3301      	adds	r3, #1
 80035dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf0c      	ite	eq
 80035e4:	2301      	moveq	r3, #1
 80035e6:	2300      	movne	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	e012      	b.n	8003612 <HAL_I2C_Init+0x18e>
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	1e58      	subs	r0, r3, #1
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6859      	ldr	r1, [r3, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	0099      	lsls	r1, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8003602:	3301      	adds	r3, #1
 8003604:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003608:	2b00      	cmp	r3, #0
 800360a:	bf0c      	ite	eq
 800360c:	2301      	moveq	r3, #1
 800360e:	2300      	movne	r3, #0
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <HAL_I2C_Init+0x196>
 8003616:	2301      	movs	r3, #1
 8003618:	e022      	b.n	8003660 <HAL_I2C_Init+0x1dc>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10e      	bne.n	8003640 <HAL_I2C_Init+0x1bc>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	1e58      	subs	r0, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6859      	ldr	r1, [r3, #4]
 800362a:	460b      	mov	r3, r1
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	440b      	add	r3, r1
 8003630:	fbb0 f3f3 	udiv	r3, r0, r3
 8003634:	3301      	adds	r3, #1
 8003636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800363e:	e00f      	b.n	8003660 <HAL_I2C_Init+0x1dc>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	1e58      	subs	r0, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6859      	ldr	r1, [r3, #4]
 8003648:	460b      	mov	r3, r1
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	440b      	add	r3, r1
 800364e:	0099      	lsls	r1, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	fbb0 f3f3 	udiv	r3, r0, r3
 8003656:	3301      	adds	r3, #1
 8003658:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800365c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003660:	6879      	ldr	r1, [r7, #4]
 8003662:	6809      	ldr	r1, [r1, #0]
 8003664:	4313      	orrs	r3, r2
 8003666:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	69da      	ldr	r2, [r3, #28]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	430a      	orrs	r2, r1
 8003682:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800368e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6911      	ldr	r1, [r2, #16]
 8003696:	687a      	ldr	r2, [r7, #4]
 8003698:	68d2      	ldr	r2, [r2, #12]
 800369a:	4311      	orrs	r1, r2
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	6812      	ldr	r2, [r2, #0]
 80036a0:	430b      	orrs	r3, r1
 80036a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	695a      	ldr	r2, [r3, #20]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	431a      	orrs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f042 0201 	orr.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2220      	movs	r2, #32
 80036da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	000186a0 	.word	0x000186a0
 80036fc:	001e847f 	.word	0x001e847f
 8003700:	003d08ff 	.word	0x003d08ff
 8003704:	431bde83 	.word	0x431bde83
 8003708:	10624dd3 	.word	0x10624dd3

0800370c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	4608      	mov	r0, r1
 8003716:	4611      	mov	r1, r2
 8003718:	461a      	mov	r2, r3
 800371a:	4603      	mov	r3, r0
 800371c:	817b      	strh	r3, [r7, #10]
 800371e:	460b      	mov	r3, r1
 8003720:	813b      	strh	r3, [r7, #8]
 8003722:	4613      	mov	r3, r2
 8003724:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003726:	f7ff f867 	bl	80027f8 <HAL_GetTick>
 800372a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003732:	b2db      	uxtb	r3, r3
 8003734:	2b20      	cmp	r3, #32
 8003736:	f040 80d9 	bne.w	80038ec <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	9300      	str	r3, [sp, #0]
 800373e:	2319      	movs	r3, #25
 8003740:	2201      	movs	r2, #1
 8003742:	496d      	ldr	r1, [pc, #436]	; (80038f8 <HAL_I2C_Mem_Write+0x1ec>)
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 fdad 	bl	80042a4 <I2C_WaitOnFlagUntilTimeout>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003750:	2302      	movs	r3, #2
 8003752:	e0cc      	b.n	80038ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375a:	2b01      	cmp	r3, #1
 800375c:	d101      	bne.n	8003762 <HAL_I2C_Mem_Write+0x56>
 800375e:	2302      	movs	r3, #2
 8003760:	e0c5      	b.n	80038ee <HAL_I2C_Mem_Write+0x1e2>
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	2b01      	cmp	r3, #1
 8003776:	d007      	beq.n	8003788 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f042 0201 	orr.w	r2, r2, #1
 8003786:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003796:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2221      	movs	r2, #33	; 0x21
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2240      	movs	r2, #64	; 0x40
 80037a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a3a      	ldr	r2, [r7, #32]
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037be:	b29a      	uxth	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	4a4d      	ldr	r2, [pc, #308]	; (80038fc <HAL_I2C_Mem_Write+0x1f0>)
 80037c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037ca:	88f8      	ldrh	r0, [r7, #6]
 80037cc:	893a      	ldrh	r2, [r7, #8]
 80037ce:	8979      	ldrh	r1, [r7, #10]
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037d6:	9300      	str	r3, [sp, #0]
 80037d8:	4603      	mov	r3, r0
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 fbe4 	bl	8003fa8 <I2C_RequestMemoryWrite>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d052      	beq.n	800388c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e081      	b.n	80038ee <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037ea:	697a      	ldr	r2, [r7, #20]
 80037ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 fe2e 	bl	8004450 <I2C_WaitOnTXEFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00d      	beq.n	8003816 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037fe:	2b04      	cmp	r3, #4
 8003800:	d107      	bne.n	8003812 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003810:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e06b      	b.n	80038ee <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	781a      	ldrb	r2, [r3, #0]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b04      	cmp	r3, #4
 8003852:	d11b      	bne.n	800388c <HAL_I2C_Mem_Write+0x180>
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003858:	2b00      	cmp	r3, #0
 800385a:	d017      	beq.n	800388c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003860:	781a      	ldrb	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003876:	3b01      	subs	r3, #1
 8003878:	b29a      	uxth	r2, r3
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003882:	b29b      	uxth	r3, r3
 8003884:	3b01      	subs	r3, #1
 8003886:	b29a      	uxth	r2, r3
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003890:	2b00      	cmp	r3, #0
 8003892:	d1aa      	bne.n	80037ea <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 fe1a 	bl	80044d2 <I2C_WaitOnBTFFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00d      	beq.n	80038c0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d107      	bne.n	80038bc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ba:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e016      	b.n	80038ee <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2220      	movs	r2, #32
 80038d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80038e8:	2300      	movs	r3, #0
 80038ea:	e000      	b.n	80038ee <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80038ec:	2302      	movs	r3, #2
  }
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3718      	adds	r7, #24
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	00100002 	.word	0x00100002
 80038fc:	ffff0000 	.word	0xffff0000

08003900 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b08c      	sub	sp, #48	; 0x30
 8003904:	af02      	add	r7, sp, #8
 8003906:	60f8      	str	r0, [r7, #12]
 8003908:	4608      	mov	r0, r1
 800390a:	4611      	mov	r1, r2
 800390c:	461a      	mov	r2, r3
 800390e:	4603      	mov	r3, r0
 8003910:	817b      	strh	r3, [r7, #10]
 8003912:	460b      	mov	r3, r1
 8003914:	813b      	strh	r3, [r7, #8]
 8003916:	4613      	mov	r3, r2
 8003918:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800391a:	f7fe ff6d 	bl	80027f8 <HAL_GetTick>
 800391e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b20      	cmp	r3, #32
 800392a:	f040 8208 	bne.w	8003d3e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800392e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	2319      	movs	r3, #25
 8003934:	2201      	movs	r2, #1
 8003936:	497b      	ldr	r1, [pc, #492]	; (8003b24 <HAL_I2C_Mem_Read+0x224>)
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 fcb3 	bl	80042a4 <I2C_WaitOnFlagUntilTimeout>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003944:	2302      	movs	r3, #2
 8003946:	e1fb      	b.n	8003d40 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800394e:	2b01      	cmp	r3, #1
 8003950:	d101      	bne.n	8003956 <HAL_I2C_Mem_Read+0x56>
 8003952:	2302      	movs	r3, #2
 8003954:	e1f4      	b.n	8003d40 <HAL_I2C_Mem_Read+0x440>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b01      	cmp	r3, #1
 800396a:	d007      	beq.n	800397c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0201 	orr.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800398a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2222      	movs	r2, #34	; 0x22
 8003990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2240      	movs	r2, #64	; 0x40
 8003998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80039ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4a5b      	ldr	r2, [pc, #364]	; (8003b28 <HAL_I2C_Mem_Read+0x228>)
 80039bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039be:	88f8      	ldrh	r0, [r7, #6]
 80039c0:	893a      	ldrh	r2, [r7, #8]
 80039c2:	8979      	ldrh	r1, [r7, #10]
 80039c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039c6:	9301      	str	r3, [sp, #4]
 80039c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039ca:	9300      	str	r3, [sp, #0]
 80039cc:	4603      	mov	r3, r0
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 fb80 	bl	80040d4 <I2C_RequestMemoryRead>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e1b0      	b.n	8003d40 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d113      	bne.n	8003a0e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039e6:	2300      	movs	r3, #0
 80039e8:	623b      	str	r3, [r7, #32]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	695b      	ldr	r3, [r3, #20]
 80039f0:	623b      	str	r3, [r7, #32]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	699b      	ldr	r3, [r3, #24]
 80039f8:	623b      	str	r3, [r7, #32]
 80039fa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a0a:	601a      	str	r2, [r3, #0]
 8003a0c:	e184      	b.n	8003d18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a12:	2b01      	cmp	r3, #1
 8003a14:	d11b      	bne.n	8003a4e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a24:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a26:	2300      	movs	r3, #0
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a4a:	601a      	str	r2, [r3, #0]
 8003a4c:	e164      	b.n	8003d18 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d11b      	bne.n	8003a8e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a64:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a76:	2300      	movs	r3, #0
 8003a78:	61bb      	str	r3, [r7, #24]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	61bb      	str	r3, [r7, #24]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	61bb      	str	r3, [r7, #24]
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	e144      	b.n	8003d18 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a8e:	2300      	movs	r3, #0
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	617b      	str	r3, [r7, #20]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	617b      	str	r3, [r7, #20]
 8003aa2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003aa4:	e138      	b.n	8003d18 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aaa:	2b03      	cmp	r3, #3
 8003aac:	f200 80f1 	bhi.w	8003c92 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d123      	bne.n	8003b00 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 fd49 	bl	8004554 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e139      	b.n	8003d40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	691a      	ldr	r2, [r3, #16]
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	b2d2      	uxtb	r2, r2
 8003ad8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	1c5a      	adds	r2, r3, #1
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	b29a      	uxth	r2, r3
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	3b01      	subs	r3, #1
 8003af8:	b29a      	uxth	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003afe:	e10b      	b.n	8003d18 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d14e      	bne.n	8003ba6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b0e:	2200      	movs	r2, #0
 8003b10:	4906      	ldr	r1, [pc, #24]	; (8003b2c <HAL_I2C_Mem_Read+0x22c>)
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f000 fbc6 	bl	80042a4 <I2C_WaitOnFlagUntilTimeout>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d008      	beq.n	8003b30 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e10e      	b.n	8003d40 <HAL_I2C_Mem_Read+0x440>
 8003b22:	bf00      	nop
 8003b24:	00100002 	.word	0x00100002
 8003b28:	ffff0000 	.word	0xffff0000
 8003b2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	691a      	ldr	r2, [r3, #16]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	b2d2      	uxtb	r2, r2
 8003b4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b52:	1c5a      	adds	r2, r3, #1
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	b2d2      	uxtb	r2, r2
 8003b7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b8e:	3b01      	subs	r3, #1
 8003b90:	b29a      	uxth	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ba4:	e0b8      	b.n	8003d18 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bac:	2200      	movs	r2, #0
 8003bae:	4966      	ldr	r1, [pc, #408]	; (8003d48 <HAL_I2C_Mem_Read+0x448>)
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f000 fb77 	bl	80042a4 <I2C_WaitOnFlagUntilTimeout>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d001      	beq.n	8003bc0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0bf      	b.n	8003d40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	691a      	ldr	r2, [r3, #16]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bda:	b2d2      	uxtb	r2, r2
 8003bdc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	1c5a      	adds	r2, r3, #1
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	9300      	str	r3, [sp, #0]
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c08:	2200      	movs	r2, #0
 8003c0a:	494f      	ldr	r1, [pc, #316]	; (8003d48 <HAL_I2C_Mem_Read+0x448>)
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 fb49 	bl	80042a4 <I2C_WaitOnFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e091      	b.n	8003d40 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	691a      	ldr	r2, [r3, #16]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3e:	1c5a      	adds	r2, r3, #1
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c48:	3b01      	subs	r3, #1
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	691a      	ldr	r2, [r3, #16]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c68:	b2d2      	uxtb	r2, r2
 8003c6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b29a      	uxth	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c90:	e042      	b.n	8003d18 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c94:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c96:	68f8      	ldr	r0, [r7, #12]
 8003c98:	f000 fc5c 	bl	8004554 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e04c      	b.n	8003d40 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	691a      	ldr	r2, [r3, #16]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	b2d2      	uxtb	r2, r2
 8003cb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	f003 0304 	and.w	r3, r3, #4
 8003ce2:	2b04      	cmp	r3, #4
 8003ce4:	d118      	bne.n	8003d18 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	691a      	ldr	r2, [r3, #16]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	b2d2      	uxtb	r2, r2
 8003cf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	1c5a      	adds	r2, r3, #1
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f47f aec2 	bne.w	8003aa6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	e000      	b.n	8003d40 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003d3e:	2302      	movs	r3, #2
  }
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3728      	adds	r7, #40	; 0x28
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	00010004 	.word	0x00010004

08003d4c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b08a      	sub	sp, #40	; 0x28
 8003d50:	af02      	add	r7, sp, #8
 8003d52:	60f8      	str	r0, [r7, #12]
 8003d54:	607a      	str	r2, [r7, #4]
 8003d56:	603b      	str	r3, [r7, #0]
 8003d58:	460b      	mov	r3, r1
 8003d5a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003d5c:	f7fe fd4c 	bl	80027f8 <HAL_GetTick>
 8003d60:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003d62:	2301      	movs	r3, #1
 8003d64:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b20      	cmp	r3, #32
 8003d70:	f040 8111 	bne.w	8003f96 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	9300      	str	r3, [sp, #0]
 8003d78:	2319      	movs	r3, #25
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	4988      	ldr	r1, [pc, #544]	; (8003fa0 <HAL_I2C_IsDeviceReady+0x254>)
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f000 fa90 	bl	80042a4 <I2C_WaitOnFlagUntilTimeout>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d001      	beq.n	8003d8e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003d8a:	2302      	movs	r3, #2
 8003d8c:	e104      	b.n	8003f98 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_I2C_IsDeviceReady+0x50>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e0fd      	b.n	8003f98 <HAL_I2C_IsDeviceReady+0x24c>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0301 	and.w	r3, r3, #1
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d007      	beq.n	8003dc2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0201 	orr.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dd0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2224      	movs	r2, #36	; 0x24
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	4a70      	ldr	r2, [pc, #448]	; (8003fa4 <HAL_I2C_IsDeviceReady+0x258>)
 8003de4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003df4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f000 fa4e 	bl	80042a4 <I2C_WaitOnFlagUntilTimeout>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00d      	beq.n	8003e2a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e1c:	d103      	bne.n	8003e26 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e0b6      	b.n	8003f98 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e2a:	897b      	ldrh	r3, [r7, #10]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e38:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003e3a:	f7fe fcdd 	bl	80027f8 <HAL_GetTick>
 8003e3e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	695b      	ldr	r3, [r3, #20]
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	bf0c      	ite	eq
 8003e4e:	2301      	moveq	r3, #1
 8003e50:	2300      	movne	r3, #0
 8003e52:	b2db      	uxtb	r3, r3
 8003e54:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	695b      	ldr	r3, [r3, #20]
 8003e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e64:	bf0c      	ite	eq
 8003e66:	2301      	moveq	r3, #1
 8003e68:	2300      	movne	r3, #0
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003e6e:	e025      	b.n	8003ebc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e70:	f7fe fcc2 	bl	80027f8 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d302      	bcc.n	8003e86 <HAL_I2C_IsDeviceReady+0x13a>
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d103      	bne.n	8003e8e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	22a0      	movs	r2, #160	; 0xa0
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	bf0c      	ite	eq
 8003e9c:	2301      	moveq	r3, #1
 8003e9e:	2300      	movne	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	695b      	ldr	r3, [r3, #20]
 8003eaa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb2:	bf0c      	ite	eq
 8003eb4:	2301      	moveq	r3, #1
 8003eb6:	2300      	movne	r3, #0
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	2ba0      	cmp	r3, #160	; 0xa0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_I2C_IsDeviceReady+0x188>
 8003ec8:	7dfb      	ldrb	r3, [r7, #23]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d102      	bne.n	8003ed4 <HAL_I2C_IsDeviceReady+0x188>
 8003ece:	7dbb      	ldrb	r3, [r7, #22]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d0cd      	beq.n	8003e70 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2220      	movs	r2, #32
 8003ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	695b      	ldr	r3, [r3, #20]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d129      	bne.n	8003f3e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681a      	ldr	r2, [r3, #0]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003efa:	2300      	movs	r3, #0
 8003efc:	613b      	str	r3, [r7, #16]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	613b      	str	r3, [r7, #16]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	613b      	str	r3, [r7, #16]
 8003f0e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	2319      	movs	r3, #25
 8003f16:	2201      	movs	r2, #1
 8003f18:	4921      	ldr	r1, [pc, #132]	; (8003fa0 <HAL_I2C_IsDeviceReady+0x254>)
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f9c2 	bl	80042a4 <I2C_WaitOnFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d001      	beq.n	8003f2a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e036      	b.n	8003f98 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	e02c      	b.n	8003f98 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f4c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f56:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	2319      	movs	r3, #25
 8003f5e:	2201      	movs	r2, #1
 8003f60:	490f      	ldr	r1, [pc, #60]	; (8003fa0 <HAL_I2C_IsDeviceReady+0x254>)
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 f99e 	bl	80042a4 <I2C_WaitOnFlagUntilTimeout>
 8003f68:	4603      	mov	r3, r0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d001      	beq.n	8003f72 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e012      	b.n	8003f98 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	3301      	adds	r3, #1
 8003f76:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	f4ff af32 	bcc.w	8003de6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003f96:	2302      	movs	r3, #2
  }
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	00100002 	.word	0x00100002
 8003fa4:	ffff0000 	.word	0xffff0000

08003fa8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	4608      	mov	r0, r1
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	817b      	strh	r3, [r7, #10]
 8003fba:	460b      	mov	r3, r1
 8003fbc:	813b      	strh	r3, [r7, #8]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fd0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 f960 	bl	80042a4 <I2C_WaitOnFlagUntilTimeout>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00d      	beq.n	8004006 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff8:	d103      	bne.n	8004002 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004000:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e05f      	b.n	80040c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004006:	897b      	ldrh	r3, [r7, #10]
 8004008:	b2db      	uxtb	r3, r3
 800400a:	461a      	mov	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004014:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004018:	6a3a      	ldr	r2, [r7, #32]
 800401a:	492d      	ldr	r1, [pc, #180]	; (80040d0 <I2C_RequestMemoryWrite+0x128>)
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 f998 	bl	8004352 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004022:	4603      	mov	r3, r0
 8004024:	2b00      	cmp	r3, #0
 8004026:	d001      	beq.n	800402c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e04c      	b.n	80040c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800402c:	2300      	movs	r3, #0
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	699b      	ldr	r3, [r3, #24]
 800403e:	617b      	str	r3, [r7, #20]
 8004040:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004042:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004044:	6a39      	ldr	r1, [r7, #32]
 8004046:	68f8      	ldr	r0, [r7, #12]
 8004048:	f000 fa02 	bl	8004450 <I2C_WaitOnTXEFlagUntilTimeout>
 800404c:	4603      	mov	r3, r0
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00d      	beq.n	800406e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004056:	2b04      	cmp	r3, #4
 8004058:	d107      	bne.n	800406a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004068:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e02b      	b.n	80040c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800406e:	88fb      	ldrh	r3, [r7, #6]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d105      	bne.n	8004080 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004074:	893b      	ldrh	r3, [r7, #8]
 8004076:	b2da      	uxtb	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	611a      	str	r2, [r3, #16]
 800407e:	e021      	b.n	80040c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004080:	893b      	ldrh	r3, [r7, #8]
 8004082:	0a1b      	lsrs	r3, r3, #8
 8004084:	b29b      	uxth	r3, r3
 8004086:	b2da      	uxtb	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800408e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004090:	6a39      	ldr	r1, [r7, #32]
 8004092:	68f8      	ldr	r0, [r7, #12]
 8004094:	f000 f9dc 	bl	8004450 <I2C_WaitOnTXEFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d00d      	beq.n	80040ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a2:	2b04      	cmp	r3, #4
 80040a4:	d107      	bne.n	80040b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e005      	b.n	80040c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040ba:	893b      	ldrh	r3, [r7, #8]
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040c4:	2300      	movs	r3, #0
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	00010002 	.word	0x00010002

080040d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af02      	add	r7, sp, #8
 80040da:	60f8      	str	r0, [r7, #12]
 80040dc:	4608      	mov	r0, r1
 80040de:	4611      	mov	r1, r2
 80040e0:	461a      	mov	r2, r3
 80040e2:	4603      	mov	r3, r0
 80040e4:	817b      	strh	r3, [r7, #10]
 80040e6:	460b      	mov	r3, r1
 80040e8:	813b      	strh	r3, [r7, #8]
 80040ea:	4613      	mov	r3, r2
 80040ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800410c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	6a3b      	ldr	r3, [r7, #32]
 8004114:	2200      	movs	r2, #0
 8004116:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f8c2 	bl	80042a4 <I2C_WaitOnFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00d      	beq.n	8004142 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004130:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004134:	d103      	bne.n	800413e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f44f 7200 	mov.w	r2, #512	; 0x200
 800413c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e0aa      	b.n	8004298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004142:	897b      	ldrh	r3, [r7, #10]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	461a      	mov	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004150:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	6a3a      	ldr	r2, [r7, #32]
 8004156:	4952      	ldr	r1, [pc, #328]	; (80042a0 <I2C_RequestMemoryRead+0x1cc>)
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f000 f8fa 	bl	8004352 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	e097      	b.n	8004298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004168:	2300      	movs	r3, #0
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800417e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004180:	6a39      	ldr	r1, [r7, #32]
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f000 f964 	bl	8004450 <I2C_WaitOnTXEFlagUntilTimeout>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d00d      	beq.n	80041aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004192:	2b04      	cmp	r3, #4
 8004194:	d107      	bne.n	80041a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681a      	ldr	r2, [r3, #0]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e076      	b.n	8004298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041aa:	88fb      	ldrh	r3, [r7, #6]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d105      	bne.n	80041bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041b0:	893b      	ldrh	r3, [r7, #8]
 80041b2:	b2da      	uxtb	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	611a      	str	r2, [r3, #16]
 80041ba:	e021      	b.n	8004200 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041bc:	893b      	ldrh	r3, [r7, #8]
 80041be:	0a1b      	lsrs	r3, r3, #8
 80041c0:	b29b      	uxth	r3, r3
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041cc:	6a39      	ldr	r1, [r7, #32]
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 f93e 	bl	8004450 <I2C_WaitOnTXEFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00d      	beq.n	80041f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d107      	bne.n	80041f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041f2:	2301      	movs	r3, #1
 80041f4:	e050      	b.n	8004298 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041f6:	893b      	ldrh	r3, [r7, #8]
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004200:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004202:	6a39      	ldr	r1, [r7, #32]
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 f923 	bl	8004450 <I2C_WaitOnTXEFlagUntilTimeout>
 800420a:	4603      	mov	r3, r0
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00d      	beq.n	800422c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004214:	2b04      	cmp	r3, #4
 8004216:	d107      	bne.n	8004228 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004226:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e035      	b.n	8004298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	681a      	ldr	r2, [r3, #0]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800423a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	9300      	str	r3, [sp, #0]
 8004240:	6a3b      	ldr	r3, [r7, #32]
 8004242:	2200      	movs	r2, #0
 8004244:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f82b 	bl	80042a4 <I2C_WaitOnFlagUntilTimeout>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d00d      	beq.n	8004270 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800425e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004262:	d103      	bne.n	800426c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f44f 7200 	mov.w	r2, #512	; 0x200
 800426a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e013      	b.n	8004298 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004270:	897b      	ldrh	r3, [r7, #10]
 8004272:	b2db      	uxtb	r3, r3
 8004274:	f043 0301 	orr.w	r3, r3, #1
 8004278:	b2da      	uxtb	r2, r3
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	6a3a      	ldr	r2, [r7, #32]
 8004284:	4906      	ldr	r1, [pc, #24]	; (80042a0 <I2C_RequestMemoryRead+0x1cc>)
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f000 f863 	bl	8004352 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d001      	beq.n	8004296 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e000      	b.n	8004298 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004296:	2300      	movs	r3, #0
}
 8004298:	4618      	mov	r0, r3
 800429a:	3718      	adds	r7, #24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	00010002 	.word	0x00010002

080042a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	603b      	str	r3, [r7, #0]
 80042b0:	4613      	mov	r3, r2
 80042b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042b4:	e025      	b.n	8004302 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042bc:	d021      	beq.n	8004302 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042be:	f7fe fa9b 	bl	80027f8 <HAL_GetTick>
 80042c2:	4602      	mov	r2, r0
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	1ad3      	subs	r3, r2, r3
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d302      	bcc.n	80042d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d116      	bne.n	8004302 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2220      	movs	r2, #32
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f043 0220 	orr.w	r2, r3, #32
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e023      	b.n	800434a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	0c1b      	lsrs	r3, r3, #16
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b01      	cmp	r3, #1
 800430a:	d10d      	bne.n	8004328 <I2C_WaitOnFlagUntilTimeout+0x84>
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	43da      	mvns	r2, r3
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4013      	ands	r3, r2
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	bf0c      	ite	eq
 800431e:	2301      	moveq	r3, #1
 8004320:	2300      	movne	r3, #0
 8004322:	b2db      	uxtb	r3, r3
 8004324:	461a      	mov	r2, r3
 8004326:	e00c      	b.n	8004342 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	43da      	mvns	r2, r3
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4013      	ands	r3, r2
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	bf0c      	ite	eq
 800433a:	2301      	moveq	r3, #1
 800433c:	2300      	movne	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	429a      	cmp	r2, r3
 8004346:	d0b6      	beq.n	80042b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	607a      	str	r2, [r7, #4]
 800435e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004360:	e051      	b.n	8004406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800436c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004370:	d123      	bne.n	80043ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004380:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800438a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2200      	movs	r2, #0
 8004390:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2220      	movs	r2, #32
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2200      	movs	r2, #0
 800439e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a6:	f043 0204 	orr.w	r2, r3, #4
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e046      	b.n	8004448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043c0:	d021      	beq.n	8004406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043c2:	f7fe fa19 	bl	80027f8 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d302      	bcc.n	80043d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d116      	bne.n	8004406 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2220      	movs	r2, #32
 80043e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	f043 0220 	orr.w	r2, r3, #32
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	2200      	movs	r2, #0
 80043fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e020      	b.n	8004448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	0c1b      	lsrs	r3, r3, #16
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b01      	cmp	r3, #1
 800440e:	d10c      	bne.n	800442a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	43da      	mvns	r2, r3
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	4013      	ands	r3, r2
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	bf14      	ite	ne
 8004422:	2301      	movne	r3, #1
 8004424:	2300      	moveq	r3, #0
 8004426:	b2db      	uxtb	r3, r3
 8004428:	e00b      	b.n	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	699b      	ldr	r3, [r3, #24]
 8004430:	43da      	mvns	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4013      	ands	r3, r2
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf14      	ite	ne
 800443c:	2301      	movne	r3, #1
 800443e:	2300      	moveq	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	2b00      	cmp	r3, #0
 8004444:	d18d      	bne.n	8004362 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800445c:	e02d      	b.n	80044ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f8ce 	bl	8004600 <I2C_IsAcknowledgeFailed>
 8004464:	4603      	mov	r3, r0
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800446a:	2301      	movs	r3, #1
 800446c:	e02d      	b.n	80044ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004474:	d021      	beq.n	80044ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004476:	f7fe f9bf 	bl	80027f8 <HAL_GetTick>
 800447a:	4602      	mov	r2, r0
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	1ad3      	subs	r3, r2, r3
 8004480:	68ba      	ldr	r2, [r7, #8]
 8004482:	429a      	cmp	r2, r3
 8004484:	d302      	bcc.n	800448c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d116      	bne.n	80044ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2200      	movs	r2, #0
 8004490:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	f043 0220 	orr.w	r2, r3, #32
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e007      	b.n	80044ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c4:	2b80      	cmp	r3, #128	; 0x80
 80044c6:	d1ca      	bne.n	800445e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3710      	adds	r7, #16
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b084      	sub	sp, #16
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	60f8      	str	r0, [r7, #12]
 80044da:	60b9      	str	r1, [r7, #8]
 80044dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80044de:	e02d      	b.n	800453c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044e0:	68f8      	ldr	r0, [r7, #12]
 80044e2:	f000 f88d 	bl	8004600 <I2C_IsAcknowledgeFailed>
 80044e6:	4603      	mov	r3, r0
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d001      	beq.n	80044f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e02d      	b.n	800454c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044f6:	d021      	beq.n	800453c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f8:	f7fe f97e 	bl	80027f8 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	429a      	cmp	r2, r3
 8004506:	d302      	bcc.n	800450e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d116      	bne.n	800453c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2200      	movs	r2, #0
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004528:	f043 0220 	orr.w	r2, r3, #32
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004538:	2301      	movs	r3, #1
 800453a:	e007      	b.n	800454c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f003 0304 	and.w	r3, r3, #4
 8004546:	2b04      	cmp	r3, #4
 8004548:	d1ca      	bne.n	80044e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b084      	sub	sp, #16
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004560:	e042      	b.n	80045e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695b      	ldr	r3, [r3, #20]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b10      	cmp	r3, #16
 800456e:	d119      	bne.n	80045a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f06f 0210 	mvn.w	r2, #16
 8004578:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2220      	movs	r2, #32
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045a0:	2301      	movs	r3, #1
 80045a2:	e029      	b.n	80045f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a4:	f7fe f928 	bl	80027f8 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	68ba      	ldr	r2, [r7, #8]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d302      	bcc.n	80045ba <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d116      	bne.n	80045e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d4:	f043 0220 	orr.w	r2, r3, #32
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e007      	b.n	80045f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695b      	ldr	r3, [r3, #20]
 80045ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045f2:	2b40      	cmp	r3, #64	; 0x40
 80045f4:	d1b5      	bne.n	8004562 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3710      	adds	r7, #16
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd80      	pop	{r7, pc}

08004600 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004600:	b480      	push	{r7}
 8004602:	b083      	sub	sp, #12
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004616:	d11b      	bne.n	8004650 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004620:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2200      	movs	r2, #0
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2220      	movs	r2, #32
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463c:	f043 0204 	orr.w	r2, r3, #4
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2200      	movs	r2, #0
 8004648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	e000      	b.n	8004652 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
	...

08004660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
 8004668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e0cc      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004674:	4b68      	ldr	r3, [pc, #416]	; (8004818 <HAL_RCC_ClockConfig+0x1b8>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 030f 	and.w	r3, r3, #15
 800467c:	683a      	ldr	r2, [r7, #0]
 800467e:	429a      	cmp	r2, r3
 8004680:	d90c      	bls.n	800469c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004682:	4b65      	ldr	r3, [pc, #404]	; (8004818 <HAL_RCC_ClockConfig+0x1b8>)
 8004684:	683a      	ldr	r2, [r7, #0]
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800468a:	4b63      	ldr	r3, [pc, #396]	; (8004818 <HAL_RCC_ClockConfig+0x1b8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 030f 	and.w	r3, r3, #15
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	429a      	cmp	r2, r3
 8004696:	d001      	beq.n	800469c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e0b8      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0302 	and.w	r3, r3, #2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d020      	beq.n	80046ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f003 0304 	and.w	r3, r3, #4
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d005      	beq.n	80046c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046b4:	4b59      	ldr	r3, [pc, #356]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	4a58      	ldr	r2, [pc, #352]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80046be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f003 0308 	and.w	r3, r3, #8
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046cc:	4b53      	ldr	r3, [pc, #332]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	4a52      	ldr	r2, [pc, #328]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80046d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046d8:	4b50      	ldr	r3, [pc, #320]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	494d      	ldr	r1, [pc, #308]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80046e6:	4313      	orrs	r3, r2
 80046e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d044      	beq.n	8004780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d107      	bne.n	800470e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fe:	4b47      	ldr	r3, [pc, #284]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d119      	bne.n	800473e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e07f      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	2b02      	cmp	r3, #2
 8004714:	d003      	beq.n	800471e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800471a:	2b03      	cmp	r3, #3
 800471c:	d107      	bne.n	800472e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800471e:	4b3f      	ldr	r3, [pc, #252]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d109      	bne.n	800473e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e06f      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800472e:	4b3b      	ldr	r3, [pc, #236]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0302 	and.w	r3, r3, #2
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e067      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800473e:	4b37      	ldr	r3, [pc, #220]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f023 0203 	bic.w	r2, r3, #3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	4934      	ldr	r1, [pc, #208]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 800474c:	4313      	orrs	r3, r2
 800474e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004750:	f7fe f852 	bl	80027f8 <HAL_GetTick>
 8004754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004756:	e00a      	b.n	800476e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004758:	f7fe f84e 	bl	80027f8 <HAL_GetTick>
 800475c:	4602      	mov	r2, r0
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	f241 3288 	movw	r2, #5000	; 0x1388
 8004766:	4293      	cmp	r3, r2
 8004768:	d901      	bls.n	800476e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800476a:	2303      	movs	r3, #3
 800476c:	e04f      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800476e:	4b2b      	ldr	r3, [pc, #172]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 020c 	and.w	r2, r3, #12
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	429a      	cmp	r2, r3
 800477e:	d1eb      	bne.n	8004758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004780:	4b25      	ldr	r3, [pc, #148]	; (8004818 <HAL_RCC_ClockConfig+0x1b8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	429a      	cmp	r2, r3
 800478c:	d20c      	bcs.n	80047a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800478e:	4b22      	ldr	r3, [pc, #136]	; (8004818 <HAL_RCC_ClockConfig+0x1b8>)
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	b2d2      	uxtb	r2, r2
 8004794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004796:	4b20      	ldr	r3, [pc, #128]	; (8004818 <HAL_RCC_ClockConfig+0x1b8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 030f 	and.w	r3, r3, #15
 800479e:	683a      	ldr	r2, [r7, #0]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d001      	beq.n	80047a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e032      	b.n	800480e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d008      	beq.n	80047c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047b4:	4b19      	ldr	r3, [pc, #100]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4916      	ldr	r1, [pc, #88]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d009      	beq.n	80047e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80047d2:	4b12      	ldr	r3, [pc, #72]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	490e      	ldr	r1, [pc, #56]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047e6:	f000 f855 	bl	8004894 <HAL_RCC_GetSysClockFreq>
 80047ea:	4602      	mov	r2, r0
 80047ec:	4b0b      	ldr	r3, [pc, #44]	; (800481c <HAL_RCC_ClockConfig+0x1bc>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	091b      	lsrs	r3, r3, #4
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	490a      	ldr	r1, [pc, #40]	; (8004820 <HAL_RCC_ClockConfig+0x1c0>)
 80047f8:	5ccb      	ldrb	r3, [r1, r3]
 80047fa:	fa22 f303 	lsr.w	r3, r2, r3
 80047fe:	4a09      	ldr	r2, [pc, #36]	; (8004824 <HAL_RCC_ClockConfig+0x1c4>)
 8004800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004802:	4b09      	ldr	r3, [pc, #36]	; (8004828 <HAL_RCC_ClockConfig+0x1c8>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4618      	mov	r0, r3
 8004808:	f7fd ffb2 	bl	8002770 <HAL_InitTick>

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}
 8004816:	bf00      	nop
 8004818:	40023c00 	.word	0x40023c00
 800481c:	40023800 	.word	0x40023800
 8004820:	08007738 	.word	0x08007738
 8004824:	20000000 	.word	0x20000000
 8004828:	20000004 	.word	0x20000004

0800482c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004830:	4b03      	ldr	r3, [pc, #12]	; (8004840 <HAL_RCC_GetHCLKFreq+0x14>)
 8004832:	681b      	ldr	r3, [r3, #0]
}
 8004834:	4618      	mov	r0, r3
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	20000000 	.word	0x20000000

08004844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004848:	f7ff fff0 	bl	800482c <HAL_RCC_GetHCLKFreq>
 800484c:	4602      	mov	r2, r0
 800484e:	4b05      	ldr	r3, [pc, #20]	; (8004864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	0a9b      	lsrs	r3, r3, #10
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	4903      	ldr	r1, [pc, #12]	; (8004868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800485a:	5ccb      	ldrb	r3, [r1, r3]
 800485c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004860:	4618      	mov	r0, r3
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40023800 	.word	0x40023800
 8004868:	08007748 	.word	0x08007748

0800486c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004870:	f7ff ffdc 	bl	800482c <HAL_RCC_GetHCLKFreq>
 8004874:	4602      	mov	r2, r0
 8004876:	4b05      	ldr	r3, [pc, #20]	; (800488c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	0b5b      	lsrs	r3, r3, #13
 800487c:	f003 0307 	and.w	r3, r3, #7
 8004880:	4903      	ldr	r1, [pc, #12]	; (8004890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004882:	5ccb      	ldrb	r3, [r1, r3]
 8004884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004888:	4618      	mov	r0, r3
 800488a:	bd80      	pop	{r7, pc}
 800488c:	40023800 	.word	0x40023800
 8004890:	08007748 	.word	0x08007748

08004894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004898:	b088      	sub	sp, #32
 800489a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80048a4:	2300      	movs	r3, #0
 80048a6:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80048a8:	2300      	movs	r3, #0
 80048aa:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80048ac:	2300      	movs	r3, #0
 80048ae:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048b0:	4bce      	ldr	r3, [pc, #824]	; (8004bec <HAL_RCC_GetSysClockFreq+0x358>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f003 030c 	and.w	r3, r3, #12
 80048b8:	2b0c      	cmp	r3, #12
 80048ba:	f200 818d 	bhi.w	8004bd8 <HAL_RCC_GetSysClockFreq+0x344>
 80048be:	a201      	add	r2, pc, #4	; (adr r2, 80048c4 <HAL_RCC_GetSysClockFreq+0x30>)
 80048c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c4:	080048f9 	.word	0x080048f9
 80048c8:	08004bd9 	.word	0x08004bd9
 80048cc:	08004bd9 	.word	0x08004bd9
 80048d0:	08004bd9 	.word	0x08004bd9
 80048d4:	080048ff 	.word	0x080048ff
 80048d8:	08004bd9 	.word	0x08004bd9
 80048dc:	08004bd9 	.word	0x08004bd9
 80048e0:	08004bd9 	.word	0x08004bd9
 80048e4:	08004905 	.word	0x08004905
 80048e8:	08004bd9 	.word	0x08004bd9
 80048ec:	08004bd9 	.word	0x08004bd9
 80048f0:	08004bd9 	.word	0x08004bd9
 80048f4:	08004a79 	.word	0x08004a79
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048f8:	4bbd      	ldr	r3, [pc, #756]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80048fa:	61bb      	str	r3, [r7, #24]
       break;
 80048fc:	e16f      	b.n	8004bde <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048fe:	4bbd      	ldr	r3, [pc, #756]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x360>)
 8004900:	61bb      	str	r3, [r7, #24]
      break;
 8004902:	e16c      	b.n	8004bde <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004904:	4bb9      	ldr	r3, [pc, #740]	; (8004bec <HAL_RCC_GetSysClockFreq+0x358>)
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800490c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800490e:	4bb7      	ldr	r3, [pc, #732]	; (8004bec <HAL_RCC_GetSysClockFreq+0x358>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d053      	beq.n	80049c2 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491a:	4bb4      	ldr	r3, [pc, #720]	; (8004bec <HAL_RCC_GetSysClockFreq+0x358>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	099b      	lsrs	r3, r3, #6
 8004920:	461a      	mov	r2, r3
 8004922:	f04f 0300 	mov.w	r3, #0
 8004926:	f240 10ff 	movw	r0, #511	; 0x1ff
 800492a:	f04f 0100 	mov.w	r1, #0
 800492e:	ea02 0400 	and.w	r4, r2, r0
 8004932:	603c      	str	r4, [r7, #0]
 8004934:	400b      	ands	r3, r1
 8004936:	607b      	str	r3, [r7, #4]
 8004938:	e9d7 4500 	ldrd	r4, r5, [r7]
 800493c:	4620      	mov	r0, r4
 800493e:	4629      	mov	r1, r5
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	014b      	lsls	r3, r1, #5
 800494a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800494e:	0142      	lsls	r2, r0, #5
 8004950:	4610      	mov	r0, r2
 8004952:	4619      	mov	r1, r3
 8004954:	4623      	mov	r3, r4
 8004956:	1ac0      	subs	r0, r0, r3
 8004958:	462b      	mov	r3, r5
 800495a:	eb61 0103 	sbc.w	r1, r1, r3
 800495e:	f04f 0200 	mov.w	r2, #0
 8004962:	f04f 0300 	mov.w	r3, #0
 8004966:	018b      	lsls	r3, r1, #6
 8004968:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800496c:	0182      	lsls	r2, r0, #6
 800496e:	1a12      	subs	r2, r2, r0
 8004970:	eb63 0301 	sbc.w	r3, r3, r1
 8004974:	f04f 0000 	mov.w	r0, #0
 8004978:	f04f 0100 	mov.w	r1, #0
 800497c:	00d9      	lsls	r1, r3, #3
 800497e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004982:	00d0      	lsls	r0, r2, #3
 8004984:	4602      	mov	r2, r0
 8004986:	460b      	mov	r3, r1
 8004988:	4621      	mov	r1, r4
 800498a:	1852      	adds	r2, r2, r1
 800498c:	4629      	mov	r1, r5
 800498e:	eb43 0101 	adc.w	r1, r3, r1
 8004992:	460b      	mov	r3, r1
 8004994:	f04f 0000 	mov.w	r0, #0
 8004998:	f04f 0100 	mov.w	r1, #0
 800499c:	0259      	lsls	r1, r3, #9
 800499e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80049a2:	0250      	lsls	r0, r2, #9
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	4610      	mov	r0, r2
 80049aa:	4619      	mov	r1, r3
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	461a      	mov	r2, r3
 80049b0:	f04f 0300 	mov.w	r3, #0
 80049b4:	f7fc f938 	bl	8000c28 <__aeabi_uldivmod>
 80049b8:	4602      	mov	r2, r0
 80049ba:	460b      	mov	r3, r1
 80049bc:	4613      	mov	r3, r2
 80049be:	61fb      	str	r3, [r7, #28]
 80049c0:	e04c      	b.n	8004a5c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c2:	4b8a      	ldr	r3, [pc, #552]	; (8004bec <HAL_RCC_GetSysClockFreq+0x358>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	099b      	lsrs	r3, r3, #6
 80049c8:	461a      	mov	r2, r3
 80049ca:	f04f 0300 	mov.w	r3, #0
 80049ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049d2:	f04f 0100 	mov.w	r1, #0
 80049d6:	ea02 0a00 	and.w	sl, r2, r0
 80049da:	ea03 0b01 	and.w	fp, r3, r1
 80049de:	4650      	mov	r0, sl
 80049e0:	4659      	mov	r1, fp
 80049e2:	f04f 0200 	mov.w	r2, #0
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	014b      	lsls	r3, r1, #5
 80049ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80049f0:	0142      	lsls	r2, r0, #5
 80049f2:	4610      	mov	r0, r2
 80049f4:	4619      	mov	r1, r3
 80049f6:	ebb0 000a 	subs.w	r0, r0, sl
 80049fa:	eb61 010b 	sbc.w	r1, r1, fp
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	018b      	lsls	r3, r1, #6
 8004a08:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a0c:	0182      	lsls	r2, r0, #6
 8004a0e:	1a12      	subs	r2, r2, r0
 8004a10:	eb63 0301 	sbc.w	r3, r3, r1
 8004a14:	f04f 0000 	mov.w	r0, #0
 8004a18:	f04f 0100 	mov.w	r1, #0
 8004a1c:	00d9      	lsls	r1, r3, #3
 8004a1e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a22:	00d0      	lsls	r0, r2, #3
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	eb12 020a 	adds.w	r2, r2, sl
 8004a2c:	eb43 030b 	adc.w	r3, r3, fp
 8004a30:	f04f 0000 	mov.w	r0, #0
 8004a34:	f04f 0100 	mov.w	r1, #0
 8004a38:	0299      	lsls	r1, r3, #10
 8004a3a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a3e:	0290      	lsls	r0, r2, #10
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4610      	mov	r0, r2
 8004a46:	4619      	mov	r1, r3
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f04f 0300 	mov.w	r3, #0
 8004a50:	f7fc f8ea 	bl	8000c28 <__aeabi_uldivmod>
 8004a54:	4602      	mov	r2, r0
 8004a56:	460b      	mov	r3, r1
 8004a58:	4613      	mov	r3, r2
 8004a5a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a5c:	4b63      	ldr	r3, [pc, #396]	; (8004bec <HAL_RCC_GetSysClockFreq+0x358>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	0c1b      	lsrs	r3, r3, #16
 8004a62:	f003 0303 	and.w	r3, r3, #3
 8004a66:	3301      	adds	r3, #1
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8004a6c:	69fa      	ldr	r2, [r7, #28]
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a74:	61bb      	str	r3, [r7, #24]
      break;
 8004a76:	e0b2      	b.n	8004bde <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a78:	4b5c      	ldr	r3, [pc, #368]	; (8004bec <HAL_RCC_GetSysClockFreq+0x358>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a80:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a82:	4b5a      	ldr	r3, [pc, #360]	; (8004bec <HAL_RCC_GetSysClockFreq+0x358>)
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d04d      	beq.n	8004b2a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a8e:	4b57      	ldr	r3, [pc, #348]	; (8004bec <HAL_RCC_GetSysClockFreq+0x358>)
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	099b      	lsrs	r3, r3, #6
 8004a94:	461a      	mov	r2, r3
 8004a96:	f04f 0300 	mov.w	r3, #0
 8004a9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004a9e:	f04f 0100 	mov.w	r1, #0
 8004aa2:	ea02 0800 	and.w	r8, r2, r0
 8004aa6:	ea03 0901 	and.w	r9, r3, r1
 8004aaa:	4640      	mov	r0, r8
 8004aac:	4649      	mov	r1, r9
 8004aae:	f04f 0200 	mov.w	r2, #0
 8004ab2:	f04f 0300 	mov.w	r3, #0
 8004ab6:	014b      	lsls	r3, r1, #5
 8004ab8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004abc:	0142      	lsls	r2, r0, #5
 8004abe:	4610      	mov	r0, r2
 8004ac0:	4619      	mov	r1, r3
 8004ac2:	ebb0 0008 	subs.w	r0, r0, r8
 8004ac6:	eb61 0109 	sbc.w	r1, r1, r9
 8004aca:	f04f 0200 	mov.w	r2, #0
 8004ace:	f04f 0300 	mov.w	r3, #0
 8004ad2:	018b      	lsls	r3, r1, #6
 8004ad4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004ad8:	0182      	lsls	r2, r0, #6
 8004ada:	1a12      	subs	r2, r2, r0
 8004adc:	eb63 0301 	sbc.w	r3, r3, r1
 8004ae0:	f04f 0000 	mov.w	r0, #0
 8004ae4:	f04f 0100 	mov.w	r1, #0
 8004ae8:	00d9      	lsls	r1, r3, #3
 8004aea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004aee:	00d0      	lsls	r0, r2, #3
 8004af0:	4602      	mov	r2, r0
 8004af2:	460b      	mov	r3, r1
 8004af4:	eb12 0208 	adds.w	r2, r2, r8
 8004af8:	eb43 0309 	adc.w	r3, r3, r9
 8004afc:	f04f 0000 	mov.w	r0, #0
 8004b00:	f04f 0100 	mov.w	r1, #0
 8004b04:	0259      	lsls	r1, r3, #9
 8004b06:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b0a:	0250      	lsls	r0, r2, #9
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4610      	mov	r0, r2
 8004b12:	4619      	mov	r1, r3
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	461a      	mov	r2, r3
 8004b18:	f04f 0300 	mov.w	r3, #0
 8004b1c:	f7fc f884 	bl	8000c28 <__aeabi_uldivmod>
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4613      	mov	r3, r2
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	e04a      	b.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b2a:	4b30      	ldr	r3, [pc, #192]	; (8004bec <HAL_RCC_GetSysClockFreq+0x358>)
 8004b2c:	685b      	ldr	r3, [r3, #4]
 8004b2e:	099b      	lsrs	r3, r3, #6
 8004b30:	461a      	mov	r2, r3
 8004b32:	f04f 0300 	mov.w	r3, #0
 8004b36:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b3a:	f04f 0100 	mov.w	r1, #0
 8004b3e:	ea02 0400 	and.w	r4, r2, r0
 8004b42:	ea03 0501 	and.w	r5, r3, r1
 8004b46:	4620      	mov	r0, r4
 8004b48:	4629      	mov	r1, r5
 8004b4a:	f04f 0200 	mov.w	r2, #0
 8004b4e:	f04f 0300 	mov.w	r3, #0
 8004b52:	014b      	lsls	r3, r1, #5
 8004b54:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b58:	0142      	lsls	r2, r0, #5
 8004b5a:	4610      	mov	r0, r2
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	1b00      	subs	r0, r0, r4
 8004b60:	eb61 0105 	sbc.w	r1, r1, r5
 8004b64:	f04f 0200 	mov.w	r2, #0
 8004b68:	f04f 0300 	mov.w	r3, #0
 8004b6c:	018b      	lsls	r3, r1, #6
 8004b6e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b72:	0182      	lsls	r2, r0, #6
 8004b74:	1a12      	subs	r2, r2, r0
 8004b76:	eb63 0301 	sbc.w	r3, r3, r1
 8004b7a:	f04f 0000 	mov.w	r0, #0
 8004b7e:	f04f 0100 	mov.w	r1, #0
 8004b82:	00d9      	lsls	r1, r3, #3
 8004b84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b88:	00d0      	lsls	r0, r2, #3
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	460b      	mov	r3, r1
 8004b8e:	1912      	adds	r2, r2, r4
 8004b90:	eb45 0303 	adc.w	r3, r5, r3
 8004b94:	f04f 0000 	mov.w	r0, #0
 8004b98:	f04f 0100 	mov.w	r1, #0
 8004b9c:	0299      	lsls	r1, r3, #10
 8004b9e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004ba2:	0290      	lsls	r0, r2, #10
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4610      	mov	r0, r2
 8004baa:	4619      	mov	r1, r3
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	f7fc f838 	bl	8000c28 <__aeabi_uldivmod>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004bc0:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <HAL_RCC_GetSysClockFreq+0x358>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	0f1b      	lsrs	r3, r3, #28
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8004bcc:	69fa      	ldr	r2, [r7, #28]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd4:	61bb      	str	r3, [r7, #24]
      break;
 8004bd6:	e002      	b.n	8004bde <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bd8:	4b05      	ldr	r3, [pc, #20]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8004bda:	61bb      	str	r3, [r7, #24]
      break;
 8004bdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bde:	69bb      	ldr	r3, [r7, #24]
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3720      	adds	r7, #32
 8004be4:	46bd      	mov	sp, r7
 8004be6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bea:	bf00      	nop
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	00f42400 	.word	0x00f42400
 8004bf4:	007a1200 	.word	0x007a1200

08004bf8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b086      	sub	sp, #24
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e28d      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 8083 	beq.w	8004d1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c18:	4b94      	ldr	r3, [pc, #592]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f003 030c 	and.w	r3, r3, #12
 8004c20:	2b04      	cmp	r3, #4
 8004c22:	d019      	beq.n	8004c58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c24:	4b91      	ldr	r3, [pc, #580]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	d106      	bne.n	8004c3e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c30:	4b8e      	ldr	r3, [pc, #568]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c3c:	d00c      	beq.n	8004c58 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c3e:	4b8b      	ldr	r3, [pc, #556]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004c46:	2b0c      	cmp	r3, #12
 8004c48:	d112      	bne.n	8004c70 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c4a:	4b88      	ldr	r3, [pc, #544]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c56:	d10b      	bne.n	8004c70 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c58:	4b84      	ldr	r3, [pc, #528]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d05b      	beq.n	8004d1c <HAL_RCC_OscConfig+0x124>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d157      	bne.n	8004d1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e25a      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c78:	d106      	bne.n	8004c88 <HAL_RCC_OscConfig+0x90>
 8004c7a:	4b7c      	ldr	r3, [pc, #496]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a7b      	ldr	r2, [pc, #492]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c84:	6013      	str	r3, [r2, #0]
 8004c86:	e01d      	b.n	8004cc4 <HAL_RCC_OscConfig+0xcc>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c90:	d10c      	bne.n	8004cac <HAL_RCC_OscConfig+0xb4>
 8004c92:	4b76      	ldr	r3, [pc, #472]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a75      	ldr	r2, [pc, #468]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004c98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c9c:	6013      	str	r3, [r2, #0]
 8004c9e:	4b73      	ldr	r3, [pc, #460]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a72      	ldr	r2, [pc, #456]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ca8:	6013      	str	r3, [r2, #0]
 8004caa:	e00b      	b.n	8004cc4 <HAL_RCC_OscConfig+0xcc>
 8004cac:	4b6f      	ldr	r3, [pc, #444]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a6e      	ldr	r2, [pc, #440]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004cb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cb6:	6013      	str	r3, [r2, #0]
 8004cb8:	4b6c      	ldr	r3, [pc, #432]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a6b      	ldr	r2, [pc, #428]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004cbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d013      	beq.n	8004cf4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ccc:	f7fd fd94 	bl	80027f8 <HAL_GetTick>
 8004cd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cd2:	e008      	b.n	8004ce6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cd4:	f7fd fd90 	bl	80027f8 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	693b      	ldr	r3, [r7, #16]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	2b64      	cmp	r3, #100	; 0x64
 8004ce0:	d901      	bls.n	8004ce6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	e21f      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ce6:	4b61      	ldr	r3, [pc, #388]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d0f0      	beq.n	8004cd4 <HAL_RCC_OscConfig+0xdc>
 8004cf2:	e014      	b.n	8004d1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7fd fd80 	bl	80027f8 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cfc:	f7fd fd7c 	bl	80027f8 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b64      	cmp	r3, #100	; 0x64
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e20b      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d0e:	4b57      	ldr	r3, [pc, #348]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d1f0      	bne.n	8004cfc <HAL_RCC_OscConfig+0x104>
 8004d1a:	e000      	b.n	8004d1e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0302 	and.w	r3, r3, #2
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d06f      	beq.n	8004e0a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d2a:	4b50      	ldr	r3, [pc, #320]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	f003 030c 	and.w	r3, r3, #12
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d017      	beq.n	8004d66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d36:	4b4d      	ldr	r3, [pc, #308]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004d3e:	2b08      	cmp	r3, #8
 8004d40:	d105      	bne.n	8004d4e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d42:	4b4a      	ldr	r3, [pc, #296]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00b      	beq.n	8004d66 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d4e:	4b47      	ldr	r3, [pc, #284]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004d56:	2b0c      	cmp	r3, #12
 8004d58:	d11c      	bne.n	8004d94 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d5a:	4b44      	ldr	r3, [pc, #272]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d116      	bne.n	8004d94 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d66:	4b41      	ldr	r3, [pc, #260]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d005      	beq.n	8004d7e <HAL_RCC_OscConfig+0x186>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d001      	beq.n	8004d7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e1d3      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d7e:	4b3b      	ldr	r3, [pc, #236]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	00db      	lsls	r3, r3, #3
 8004d8c:	4937      	ldr	r1, [pc, #220]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d92:	e03a      	b.n	8004e0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d020      	beq.n	8004dde <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d9c:	4b34      	ldr	r3, [pc, #208]	; (8004e70 <HAL_RCC_OscConfig+0x278>)
 8004d9e:	2201      	movs	r2, #1
 8004da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da2:	f7fd fd29 	bl	80027f8 <HAL_GetTick>
 8004da6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da8:	e008      	b.n	8004dbc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004daa:	f7fd fd25 	bl	80027f8 <HAL_GetTick>
 8004dae:	4602      	mov	r2, r0
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	1ad3      	subs	r3, r2, r3
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d901      	bls.n	8004dbc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e1b4      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dbc:	4b2b      	ldr	r3, [pc, #172]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0302 	and.w	r3, r3, #2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d0f0      	beq.n	8004daa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dc8:	4b28      	ldr	r3, [pc, #160]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	4925      	ldr	r1, [pc, #148]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	600b      	str	r3, [r1, #0]
 8004ddc:	e015      	b.n	8004e0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004dde:	4b24      	ldr	r3, [pc, #144]	; (8004e70 <HAL_RCC_OscConfig+0x278>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004de4:	f7fd fd08 	bl	80027f8 <HAL_GetTick>
 8004de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dea:	e008      	b.n	8004dfe <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004dec:	f7fd fd04 	bl	80027f8 <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d901      	bls.n	8004dfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	e193      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dfe:	4b1b      	ldr	r3, [pc, #108]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1f0      	bne.n	8004dec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d036      	beq.n	8004e84 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	695b      	ldr	r3, [r3, #20]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d016      	beq.n	8004e4c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e1e:	4b15      	ldr	r3, [pc, #84]	; (8004e74 <HAL_RCC_OscConfig+0x27c>)
 8004e20:	2201      	movs	r2, #1
 8004e22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e24:	f7fd fce8 	bl	80027f8 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e2c:	f7fd fce4 	bl	80027f8 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e173      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e3e:	4b0b      	ldr	r3, [pc, #44]	; (8004e6c <HAL_RCC_OscConfig+0x274>)
 8004e40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d0f0      	beq.n	8004e2c <HAL_RCC_OscConfig+0x234>
 8004e4a:	e01b      	b.n	8004e84 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e4c:	4b09      	ldr	r3, [pc, #36]	; (8004e74 <HAL_RCC_OscConfig+0x27c>)
 8004e4e:	2200      	movs	r2, #0
 8004e50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e52:	f7fd fcd1 	bl	80027f8 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e58:	e00e      	b.n	8004e78 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e5a:	f7fd fccd 	bl	80027f8 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d907      	bls.n	8004e78 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e15c      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
 8004e6c:	40023800 	.word	0x40023800
 8004e70:	42470000 	.word	0x42470000
 8004e74:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e78:	4b8a      	ldr	r3, [pc, #552]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004e7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d1ea      	bne.n	8004e5a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 8097 	beq.w	8004fc0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e92:	2300      	movs	r3, #0
 8004e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e96:	4b83      	ldr	r3, [pc, #524]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d10f      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60bb      	str	r3, [r7, #8]
 8004ea6:	4b7f      	ldr	r3, [pc, #508]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eaa:	4a7e      	ldr	r2, [pc, #504]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8004eb2:	4b7c      	ldr	r3, [pc, #496]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eba:	60bb      	str	r3, [r7, #8]
 8004ebc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ec2:	4b79      	ldr	r3, [pc, #484]	; (80050a8 <HAL_RCC_OscConfig+0x4b0>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d118      	bne.n	8004f00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ece:	4b76      	ldr	r3, [pc, #472]	; (80050a8 <HAL_RCC_OscConfig+0x4b0>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	4a75      	ldr	r2, [pc, #468]	; (80050a8 <HAL_RCC_OscConfig+0x4b0>)
 8004ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004eda:	f7fd fc8d 	bl	80027f8 <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ee0:	e008      	b.n	8004ef4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ee2:	f7fd fc89 	bl	80027f8 <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	2b02      	cmp	r3, #2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e118      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef4:	4b6c      	ldr	r3, [pc, #432]	; (80050a8 <HAL_RCC_OscConfig+0x4b0>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d0f0      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d106      	bne.n	8004f16 <HAL_RCC_OscConfig+0x31e>
 8004f08:	4b66      	ldr	r3, [pc, #408]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0c:	4a65      	ldr	r2, [pc, #404]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f0e:	f043 0301 	orr.w	r3, r3, #1
 8004f12:	6713      	str	r3, [r2, #112]	; 0x70
 8004f14:	e01c      	b.n	8004f50 <HAL_RCC_OscConfig+0x358>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	2b05      	cmp	r3, #5
 8004f1c:	d10c      	bne.n	8004f38 <HAL_RCC_OscConfig+0x340>
 8004f1e:	4b61      	ldr	r3, [pc, #388]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f22:	4a60      	ldr	r2, [pc, #384]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f24:	f043 0304 	orr.w	r3, r3, #4
 8004f28:	6713      	str	r3, [r2, #112]	; 0x70
 8004f2a:	4b5e      	ldr	r3, [pc, #376]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f2e:	4a5d      	ldr	r2, [pc, #372]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	6713      	str	r3, [r2, #112]	; 0x70
 8004f36:	e00b      	b.n	8004f50 <HAL_RCC_OscConfig+0x358>
 8004f38:	4b5a      	ldr	r3, [pc, #360]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3c:	4a59      	ldr	r2, [pc, #356]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f3e:	f023 0301 	bic.w	r3, r3, #1
 8004f42:	6713      	str	r3, [r2, #112]	; 0x70
 8004f44:	4b57      	ldr	r3, [pc, #348]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f48:	4a56      	ldr	r2, [pc, #344]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f4a:	f023 0304 	bic.w	r3, r3, #4
 8004f4e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d015      	beq.n	8004f84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f58:	f7fd fc4e 	bl	80027f8 <HAL_GetTick>
 8004f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f5e:	e00a      	b.n	8004f76 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f60:	f7fd fc4a 	bl	80027f8 <HAL_GetTick>
 8004f64:	4602      	mov	r2, r0
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e0d7      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f76:	4b4b      	ldr	r3, [pc, #300]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0ee      	beq.n	8004f60 <HAL_RCC_OscConfig+0x368>
 8004f82:	e014      	b.n	8004fae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f84:	f7fd fc38 	bl	80027f8 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f8a:	e00a      	b.n	8004fa2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f8c:	f7fd fc34 	bl	80027f8 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e0c1      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fa2:	4b40      	ldr	r3, [pc, #256]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa6:	f003 0302 	and.w	r3, r3, #2
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1ee      	bne.n	8004f8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004fae:	7dfb      	ldrb	r3, [r7, #23]
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d105      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fb4:	4b3b      	ldr	r3, [pc, #236]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	4a3a      	ldr	r2, [pc, #232]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004fba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fbe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 80ad 	beq.w	8005124 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004fca:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d060      	beq.n	8005098 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	699b      	ldr	r3, [r3, #24]
 8004fda:	2b02      	cmp	r3, #2
 8004fdc:	d145      	bne.n	800506a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fde:	4b33      	ldr	r3, [pc, #204]	; (80050ac <HAL_RCC_OscConfig+0x4b4>)
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe4:	f7fd fc08 	bl	80027f8 <HAL_GetTick>
 8004fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fea:	e008      	b.n	8004ffe <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fec:	f7fd fc04 	bl	80027f8 <HAL_GetTick>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	1ad3      	subs	r3, r2, r3
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d901      	bls.n	8004ffe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e093      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffe:	4b29      	ldr	r3, [pc, #164]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1f0      	bne.n	8004fec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	69da      	ldr	r2, [r3, #28]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a1b      	ldr	r3, [r3, #32]
 8005012:	431a      	orrs	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	019b      	lsls	r3, r3, #6
 800501a:	431a      	orrs	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005020:	085b      	lsrs	r3, r3, #1
 8005022:	3b01      	subs	r3, #1
 8005024:	041b      	lsls	r3, r3, #16
 8005026:	431a      	orrs	r2, r3
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502c:	061b      	lsls	r3, r3, #24
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005034:	071b      	lsls	r3, r3, #28
 8005036:	491b      	ldr	r1, [pc, #108]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 8005038:	4313      	orrs	r3, r2
 800503a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800503c:	4b1b      	ldr	r3, [pc, #108]	; (80050ac <HAL_RCC_OscConfig+0x4b4>)
 800503e:	2201      	movs	r2, #1
 8005040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005042:	f7fd fbd9 	bl	80027f8 <HAL_GetTick>
 8005046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005048:	e008      	b.n	800505c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800504a:	f7fd fbd5 	bl	80027f8 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	2b02      	cmp	r3, #2
 8005056:	d901      	bls.n	800505c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8005058:	2303      	movs	r3, #3
 800505a:	e064      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800505c:	4b11      	ldr	r3, [pc, #68]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d0f0      	beq.n	800504a <HAL_RCC_OscConfig+0x452>
 8005068:	e05c      	b.n	8005124 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800506a:	4b10      	ldr	r3, [pc, #64]	; (80050ac <HAL_RCC_OscConfig+0x4b4>)
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fd fbc2 	bl	80027f8 <HAL_GetTick>
 8005074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005076:	e008      	b.n	800508a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005078:	f7fd fbbe 	bl	80027f8 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	2b02      	cmp	r3, #2
 8005084:	d901      	bls.n	800508a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8005086:	2303      	movs	r3, #3
 8005088:	e04d      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800508a:	4b06      	ldr	r3, [pc, #24]	; (80050a4 <HAL_RCC_OscConfig+0x4ac>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005092:	2b00      	cmp	r3, #0
 8005094:	d1f0      	bne.n	8005078 <HAL_RCC_OscConfig+0x480>
 8005096:	e045      	b.n	8005124 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	2b01      	cmp	r3, #1
 800509e:	d107      	bne.n	80050b0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e040      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
 80050a4:	40023800 	.word	0x40023800
 80050a8:	40007000 	.word	0x40007000
 80050ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80050b0:	4b1f      	ldr	r3, [pc, #124]	; (8005130 <HAL_RCC_OscConfig+0x538>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d030      	beq.n	8005120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d129      	bne.n	8005120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d122      	bne.n	8005120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80050e0:	4013      	ands	r3, r2
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80050e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d119      	bne.n	8005120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	085b      	lsrs	r3, r3, #1
 80050f8:	3b01      	subs	r3, #1
 80050fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d10f      	bne.n	8005120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800510a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800510c:	429a      	cmp	r2, r3
 800510e:	d107      	bne.n	8005120 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800511c:	429a      	cmp	r2, r3
 800511e:	d001      	beq.n	8005124 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e000      	b.n	8005126 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8005124:	2300      	movs	r3, #0
}
 8005126:	4618      	mov	r0, r3
 8005128:	3718      	adds	r7, #24
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40023800 	.word	0x40023800

08005134 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e07b      	b.n	800523e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514a:	2b00      	cmp	r3, #0
 800514c:	d108      	bne.n	8005160 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005156:	d009      	beq.n	800516c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2200      	movs	r2, #0
 800515c:	61da      	str	r2, [r3, #28]
 800515e:	e005      	b.n	800516c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d106      	bne.n	800518c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2200      	movs	r2, #0
 8005182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f7fd f8d4 	bl	8002334 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80051a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80051be:	431a      	orrs	r2, r3
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f003 0301 	and.w	r3, r3, #1
 80051d2:	431a      	orrs	r2, r3
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f0:	ea42 0103 	orr.w	r1, r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	430a      	orrs	r2, r1
 8005202:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	699b      	ldr	r3, [r3, #24]
 8005208:	0c1b      	lsrs	r3, r3, #16
 800520a:	f003 0104 	and.w	r1, r3, #4
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	f003 0210 	and.w	r2, r3, #16
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	430a      	orrs	r2, r1
 800521c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69da      	ldr	r2, [r3, #28]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800522c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2201      	movs	r2, #1
 8005238:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
	...

08005248 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005260:	2b01      	cmp	r3, #1
 8005262:	d101      	bne.n	8005268 <HAL_SPI_TransmitReceive_DMA+0x20>
 8005264:	2302      	movs	r3, #2
 8005266:	e0e3      	b.n	8005430 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005276:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800527e:	7dbb      	ldrb	r3, [r7, #22]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d00d      	beq.n	80052a0 <HAL_SPI_TransmitReceive_DMA+0x58>
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800528a:	d106      	bne.n	800529a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d102      	bne.n	800529a <HAL_SPI_TransmitReceive_DMA+0x52>
 8005294:	7dbb      	ldrb	r3, [r7, #22]
 8005296:	2b04      	cmp	r3, #4
 8005298:	d002      	beq.n	80052a0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800529a:	2302      	movs	r3, #2
 800529c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800529e:	e0c2      	b.n	8005426 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d005      	beq.n	80052b2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d002      	beq.n	80052b2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 80052ac:	887b      	ldrh	r3, [r7, #2]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d102      	bne.n	80052b8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 80052b2:	2301      	movs	r3, #1
 80052b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80052b6:	e0b6      	b.n	8005426 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80052be:	b2db      	uxtb	r3, r3
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d003      	beq.n	80052cc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2205      	movs	r2, #5
 80052c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	2200      	movs	r2, #0
 80052d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	887a      	ldrh	r2, [r7, #2]
 80052dc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	887a      	ldrh	r2, [r7, #2]
 80052e2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	887a      	ldrh	r2, [r7, #2]
 80052ee:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	887a      	ldrh	r2, [r7, #2]
 80052f4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005308:	b2db      	uxtb	r3, r3
 800530a:	2b04      	cmp	r3, #4
 800530c:	d108      	bne.n	8005320 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005312:	4a49      	ldr	r2, [pc, #292]	; (8005438 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8005314:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800531a:	4a48      	ldr	r2, [pc, #288]	; (800543c <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 800531c:	63da      	str	r2, [r3, #60]	; 0x3c
 800531e:	e007      	b.n	8005330 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005324:	4a46      	ldr	r2, [pc, #280]	; (8005440 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8005326:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532c:	4a45      	ldr	r2, [pc, #276]	; (8005444 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800532e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005334:	4a44      	ldr	r2, [pc, #272]	; (8005448 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8005336:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800533c:	2200      	movs	r2, #0
 800533e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	330c      	adds	r3, #12
 800534a:	4619      	mov	r1, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005350:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005356:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8005358:	f7fd fc3e 	bl	8002bd8 <HAL_DMA_Start_IT>
 800535c:	4603      	mov	r3, r0
 800535e:	2b00      	cmp	r3, #0
 8005360:	d00c      	beq.n	800537c <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005366:	f043 0210 	orr.w	r2, r3, #16
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2201      	movs	r2, #1
 8005376:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800537a:	e054      	b.n	8005426 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685a      	ldr	r2, [r3, #4]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005390:	2200      	movs	r2, #0
 8005392:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005398:	2200      	movs	r2, #0
 800539a:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a0:	2200      	movs	r2, #0
 80053a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053a8:	2200      	movs	r2, #0
 80053aa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053b4:	4619      	mov	r1, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	330c      	adds	r3, #12
 80053bc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80053c2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80053c4:	f7fd fc08 	bl	8002bd8 <HAL_DMA_Start_IT>
 80053c8:	4603      	mov	r3, r0
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d00c      	beq.n	80053e8 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d2:	f043 0210 	orr.w	r2, r3, #16
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80053da:	2301      	movs	r3, #1
 80053dc:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80053e6:	e01e      	b.n	8005426 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f2:	2b40      	cmp	r3, #64	; 0x40
 80053f4:	d007      	beq.n	8005406 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	681a      	ldr	r2, [r3, #0]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005404:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685a      	ldr	r2, [r3, #4]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0220 	orr.w	r2, r2, #32
 8005414:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	685a      	ldr	r2, [r3, #4]
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f042 0202 	orr.w	r2, r2, #2
 8005424:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800542e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3718      	adds	r7, #24
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	080055e9 	.word	0x080055e9
 800543c:	080054b1 	.word	0x080054b1
 8005440:	08005605 	.word	0x08005605
 8005444:	08005559 	.word	0x08005559
 8005448:	08005621 	.word	0x08005621

0800544c <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8005490:	bf00      	nop
 8005492:	370c      	adds	r7, #12
 8005494:	46bd      	mov	sp, r7
 8005496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549a:	4770      	bx	lr

0800549c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80054be:	f7fd f99b 	bl	80027f8 <HAL_GetTick>
 80054c2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054d2:	d03b      	beq.n	800554c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685a      	ldr	r2, [r3, #4]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f022 0220 	bic.w	r2, r2, #32
 80054e2:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10d      	bne.n	8005508 <SPI_DMAReceiveCplt+0x58>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054f4:	d108      	bne.n	8005508 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f022 0203 	bic.w	r2, r2, #3
 8005504:	605a      	str	r2, [r3, #4]
 8005506:	e007      	b.n	8005518 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685a      	ldr	r2, [r3, #4]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f022 0201 	bic.w	r2, r2, #1
 8005516:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005518:	68ba      	ldr	r2, [r7, #8]
 800551a:	2164      	movs	r1, #100	; 0x64
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f927 	bl	8005770 <SPI_EndRxTransaction>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d002      	beq.n	800552e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2220      	movs	r2, #32
 800552c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005540:	2b00      	cmp	r3, #0
 8005542:	d003      	beq.n	800554c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005544:	68f8      	ldr	r0, [r7, #12]
 8005546:	f7ff ffa9 	bl	800549c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800554a:	e002      	b.n	8005552 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800554c:	68f8      	ldr	r0, [r7, #12]
 800554e:	f7ff ff7d 	bl	800544c <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005564:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005566:	f7fd f947 	bl	80027f8 <HAL_GetTick>
 800556a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800557a:	d02f      	beq.n	80055dc <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f022 0220 	bic.w	r2, r2, #32
 800558a:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	2164      	movs	r1, #100	; 0x64
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	f000 f953 	bl	800583c <SPI_EndRxTxTransaction>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d005      	beq.n	80055a8 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055a0:	f043 0220 	orr.w	r2, r3, #32
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f022 0203 	bic.w	r2, r2, #3
 80055b6:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	2200      	movs	r2, #0
 80055bc:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2200      	movs	r2, #0
 80055c2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d003      	beq.n	80055dc <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80055d4:	68f8      	ldr	r0, [r7, #12]
 80055d6:	f7ff ff61 	bl	800549c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80055da:	e002      	b.n	80055e2 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80055dc:	68f8      	ldr	r0, [r7, #12]
 80055de:	f7ff ff3f 	bl	8005460 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055f4:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80055f6:	68f8      	ldr	r0, [r7, #12]
 80055f8:	f7ff ff3c 	bl	8005474 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80055fc:	bf00      	nop
 80055fe:	3710      	adds	r7, #16
 8005600:	46bd      	mov	sp, r7
 8005602:	bd80      	pop	{r7, pc}

08005604 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005610:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f7ff ff38 	bl	8005488 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005618:	bf00      	nop
 800561a:	3710      	adds	r7, #16
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800562c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0203 	bic.w	r2, r2, #3
 800563c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005642:	f043 0210 	orr.w	r2, r3, #16
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2201      	movs	r2, #1
 800564e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005652:	68f8      	ldr	r0, [r7, #12]
 8005654:	f7ff ff22 	bl	800549c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005658:	bf00      	nop
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	603b      	str	r3, [r7, #0]
 800566c:	4613      	mov	r3, r2
 800566e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005670:	f7fd f8c2 	bl	80027f8 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005678:	1a9b      	subs	r3, r3, r2
 800567a:	683a      	ldr	r2, [r7, #0]
 800567c:	4413      	add	r3, r2
 800567e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005680:	f7fd f8ba 	bl	80027f8 <HAL_GetTick>
 8005684:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005686:	4b39      	ldr	r3, [pc, #228]	; (800576c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	015b      	lsls	r3, r3, #5
 800568c:	0d1b      	lsrs	r3, r3, #20
 800568e:	69fa      	ldr	r2, [r7, #28]
 8005690:	fb02 f303 	mul.w	r3, r2, r3
 8005694:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005696:	e054      	b.n	8005742 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800569e:	d050      	beq.n	8005742 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056a0:	f7fd f8aa 	bl	80027f8 <HAL_GetTick>
 80056a4:	4602      	mov	r2, r0
 80056a6:	69bb      	ldr	r3, [r7, #24]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	69fa      	ldr	r2, [r7, #28]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d902      	bls.n	80056b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80056b0:	69fb      	ldr	r3, [r7, #28]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d13d      	bne.n	8005732 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80056c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	685b      	ldr	r3, [r3, #4]
 80056ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80056ce:	d111      	bne.n	80056f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056d8:	d004      	beq.n	80056e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056e2:	d107      	bne.n	80056f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80056f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056fc:	d10f      	bne.n	800571e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800570c:	601a      	str	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	681a      	ldr	r2, [r3, #0]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800571c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800572e:	2303      	movs	r3, #3
 8005730:	e017      	b.n	8005762 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	3b01      	subs	r3, #1
 8005740:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689a      	ldr	r2, [r3, #8]
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	4013      	ands	r3, r2
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	429a      	cmp	r2, r3
 8005750:	bf0c      	ite	eq
 8005752:	2301      	moveq	r3, #1
 8005754:	2300      	movne	r3, #0
 8005756:	b2db      	uxtb	r3, r3
 8005758:	461a      	mov	r2, r3
 800575a:	79fb      	ldrb	r3, [r7, #7]
 800575c:	429a      	cmp	r2, r3
 800575e:	d19b      	bne.n	8005698 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005760:	2300      	movs	r3, #0
}
 8005762:	4618      	mov	r0, r3
 8005764:	3720      	adds	r7, #32
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
 800576a:	bf00      	nop
 800576c:	20000000 	.word	0x20000000

08005770 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af02      	add	r7, sp, #8
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005784:	d111      	bne.n	80057aa <SPI_EndRxTransaction+0x3a>
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800578e:	d004      	beq.n	800579a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005798:	d107      	bne.n	80057aa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	681a      	ldr	r2, [r3, #0]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057a8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057b2:	d12a      	bne.n	800580a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057bc:	d012      	beq.n	80057e4 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	9300      	str	r3, [sp, #0]
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	2200      	movs	r2, #0
 80057c6:	2180      	movs	r1, #128	; 0x80
 80057c8:	68f8      	ldr	r0, [r7, #12]
 80057ca:	f7ff ff49 	bl	8005660 <SPI_WaitFlagStateUntilTimeout>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d02d      	beq.n	8005830 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d8:	f043 0220 	orr.w	r2, r3, #32
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80057e0:	2303      	movs	r3, #3
 80057e2:	e026      	b.n	8005832 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	9300      	str	r3, [sp, #0]
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	2200      	movs	r2, #0
 80057ec:	2101      	movs	r1, #1
 80057ee:	68f8      	ldr	r0, [r7, #12]
 80057f0:	f7ff ff36 	bl	8005660 <SPI_WaitFlagStateUntilTimeout>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d01a      	beq.n	8005830 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057fe:	f043 0220 	orr.w	r2, r3, #32
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005806:	2303      	movs	r3, #3
 8005808:	e013      	b.n	8005832 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	9300      	str	r3, [sp, #0]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	2200      	movs	r2, #0
 8005812:	2101      	movs	r1, #1
 8005814:	68f8      	ldr	r0, [r7, #12]
 8005816:	f7ff ff23 	bl	8005660 <SPI_WaitFlagStateUntilTimeout>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d007      	beq.n	8005830 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005824:	f043 0220 	orr.w	r2, r3, #32
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	e000      	b.n	8005832 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
	...

0800583c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af02      	add	r7, sp, #8
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005848:	4b1b      	ldr	r3, [pc, #108]	; (80058b8 <SPI_EndRxTxTransaction+0x7c>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4a1b      	ldr	r2, [pc, #108]	; (80058bc <SPI_EndRxTxTransaction+0x80>)
 800584e:	fba2 2303 	umull	r2, r3, r2, r3
 8005852:	0d5b      	lsrs	r3, r3, #21
 8005854:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005858:	fb02 f303 	mul.w	r3, r2, r3
 800585c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005866:	d112      	bne.n	800588e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	9300      	str	r3, [sp, #0]
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	2200      	movs	r2, #0
 8005870:	2180      	movs	r1, #128	; 0x80
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f7ff fef4 	bl	8005660 <SPI_WaitFlagStateUntilTimeout>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d016      	beq.n	80058ac <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005882:	f043 0220 	orr.w	r2, r3, #32
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e00f      	b.n	80058ae <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00a      	beq.n	80058aa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	3b01      	subs	r3, #1
 8005898:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058a4:	2b80      	cmp	r3, #128	; 0x80
 80058a6:	d0f2      	beq.n	800588e <SPI_EndRxTxTransaction+0x52>
 80058a8:	e000      	b.n	80058ac <SPI_EndRxTxTransaction+0x70>
        break;
 80058aa:	bf00      	nop
  }

  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3718      	adds	r7, #24
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	20000000 	.word	0x20000000
 80058bc:	165e9f81 	.word	0x165e9f81

080058c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d101      	bne.n	80058d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e03f      	b.n	8005952 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d106      	bne.n	80058ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f7fc fdd2 	bl	8002490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2224      	movs	r2, #36	; 0x24
 80058f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68da      	ldr	r2, [r3, #12]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005902:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005904:	6878      	ldr	r0, [r7, #4]
 8005906:	f000 f905 	bl	8005b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005918:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	695a      	ldr	r2, [r3, #20]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005928:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68da      	ldr	r2, [r3, #12]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005938:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2220      	movs	r2, #32
 8005944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005950:	2300      	movs	r3, #0
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800595a:	b580      	push	{r7, lr}
 800595c:	b08a      	sub	sp, #40	; 0x28
 800595e:	af02      	add	r7, sp, #8
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	603b      	str	r3, [r7, #0]
 8005966:	4613      	mov	r3, r2
 8005968:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b20      	cmp	r3, #32
 8005978:	d17c      	bne.n	8005a74 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <HAL_UART_Transmit+0x2c>
 8005980:	88fb      	ldrh	r3, [r7, #6]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e075      	b.n	8005a76 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005990:	2b01      	cmp	r3, #1
 8005992:	d101      	bne.n	8005998 <HAL_UART_Transmit+0x3e>
 8005994:	2302      	movs	r3, #2
 8005996:	e06e      	b.n	8005a76 <HAL_UART_Transmit+0x11c>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2200      	movs	r2, #0
 80059a4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2221      	movs	r2, #33	; 0x21
 80059aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059ae:	f7fc ff23 	bl	80027f8 <HAL_GetTick>
 80059b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	88fa      	ldrh	r2, [r7, #6]
 80059b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	88fa      	ldrh	r2, [r7, #6]
 80059be:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c8:	d108      	bne.n	80059dc <HAL_UART_Transmit+0x82>
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d104      	bne.n	80059dc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	61bb      	str	r3, [r7, #24]
 80059da:	e003      	b.n	80059e4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059e0:	2300      	movs	r3, #0
 80059e2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2200      	movs	r2, #0
 80059e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80059ec:	e02a      	b.n	8005a44 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	9300      	str	r3, [sp, #0]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	2200      	movs	r2, #0
 80059f6:	2180      	movs	r1, #128	; 0x80
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 f840 	bl	8005a7e <UART_WaitOnFlagUntilTimeout>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d001      	beq.n	8005a08 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a04:	2303      	movs	r3, #3
 8005a06:	e036      	b.n	8005a76 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d10b      	bne.n	8005a26 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	461a      	mov	r2, r3
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a1c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a1e:	69bb      	ldr	r3, [r7, #24]
 8005a20:	3302      	adds	r3, #2
 8005a22:	61bb      	str	r3, [r7, #24]
 8005a24:	e007      	b.n	8005a36 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	781a      	ldrb	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	3301      	adds	r3, #1
 8005a34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a48:	b29b      	uxth	r3, r3
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1cf      	bne.n	80059ee <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	9300      	str	r3, [sp, #0]
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	2200      	movs	r2, #0
 8005a56:	2140      	movs	r1, #64	; 0x40
 8005a58:	68f8      	ldr	r0, [r7, #12]
 8005a5a:	f000 f810 	bl	8005a7e <UART_WaitOnFlagUntilTimeout>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e006      	b.n	8005a76 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005a70:	2300      	movs	r3, #0
 8005a72:	e000      	b.n	8005a76 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005a74:	2302      	movs	r3, #2
  }
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3720      	adds	r7, #32
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b084      	sub	sp, #16
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	60f8      	str	r0, [r7, #12]
 8005a86:	60b9      	str	r1, [r7, #8]
 8005a88:	603b      	str	r3, [r7, #0]
 8005a8a:	4613      	mov	r3, r2
 8005a8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a8e:	e02c      	b.n	8005aea <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a90:	69bb      	ldr	r3, [r7, #24]
 8005a92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a96:	d028      	beq.n	8005aea <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d007      	beq.n	8005aae <UART_WaitOnFlagUntilTimeout+0x30>
 8005a9e:	f7fc feab 	bl	80027f8 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d21d      	bcs.n	8005aea <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	68da      	ldr	r2, [r3, #12]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005abc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	695a      	ldr	r2, [r3, #20]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0201 	bic.w	r2, r2, #1
 8005acc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	2220      	movs	r2, #32
 8005ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e00f      	b.n	8005b0a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	4013      	ands	r3, r2
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	bf0c      	ite	eq
 8005afa:	2301      	moveq	r3, #1
 8005afc:	2300      	movne	r3, #0
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	461a      	mov	r2, r3
 8005b02:	79fb      	ldrb	r3, [r7, #7]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d0c3      	beq.n	8005a90 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b18:	b09f      	sub	sp, #124	; 0x7c
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691b      	ldr	r3, [r3, #16]
 8005b24:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b2a:	68d9      	ldr	r1, [r3, #12]
 8005b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	ea40 0301 	orr.w	r3, r0, r1
 8005b34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b38:	689a      	ldr	r2, [r3, #8]
 8005b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	431a      	orrs	r2, r3
 8005b46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b48:	69db      	ldr	r3, [r3, #28]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005b4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005b58:	f021 010c 	bic.w	r1, r1, #12
 8005b5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b5e:	681a      	ldr	r2, [r3, #0]
 8005b60:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005b62:	430b      	orrs	r3, r1
 8005b64:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	695b      	ldr	r3, [r3, #20]
 8005b6c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005b70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b72:	6999      	ldr	r1, [r3, #24]
 8005b74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	ea40 0301 	orr.w	r3, r0, r1
 8005b7c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	4bc5      	ldr	r3, [pc, #788]	; (8005e98 <UART_SetConfig+0x384>)
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d004      	beq.n	8005b92 <UART_SetConfig+0x7e>
 8005b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	4bc3      	ldr	r3, [pc, #780]	; (8005e9c <UART_SetConfig+0x388>)
 8005b8e:	429a      	cmp	r2, r3
 8005b90:	d103      	bne.n	8005b9a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b92:	f7fe fe6b 	bl	800486c <HAL_RCC_GetPCLK2Freq>
 8005b96:	6778      	str	r0, [r7, #116]	; 0x74
 8005b98:	e002      	b.n	8005ba0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b9a:	f7fe fe53 	bl	8004844 <HAL_RCC_GetPCLK1Freq>
 8005b9e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ba0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ba8:	f040 80b6 	bne.w	8005d18 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bae:	461c      	mov	r4, r3
 8005bb0:	f04f 0500 	mov.w	r5, #0
 8005bb4:	4622      	mov	r2, r4
 8005bb6:	462b      	mov	r3, r5
 8005bb8:	1891      	adds	r1, r2, r2
 8005bba:	6439      	str	r1, [r7, #64]	; 0x40
 8005bbc:	415b      	adcs	r3, r3
 8005bbe:	647b      	str	r3, [r7, #68]	; 0x44
 8005bc0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bc4:	1912      	adds	r2, r2, r4
 8005bc6:	eb45 0303 	adc.w	r3, r5, r3
 8005bca:	f04f 0000 	mov.w	r0, #0
 8005bce:	f04f 0100 	mov.w	r1, #0
 8005bd2:	00d9      	lsls	r1, r3, #3
 8005bd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005bd8:	00d0      	lsls	r0, r2, #3
 8005bda:	4602      	mov	r2, r0
 8005bdc:	460b      	mov	r3, r1
 8005bde:	1911      	adds	r1, r2, r4
 8005be0:	6639      	str	r1, [r7, #96]	; 0x60
 8005be2:	416b      	adcs	r3, r5
 8005be4:	667b      	str	r3, [r7, #100]	; 0x64
 8005be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	461a      	mov	r2, r3
 8005bec:	f04f 0300 	mov.w	r3, #0
 8005bf0:	1891      	adds	r1, r2, r2
 8005bf2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005bf4:	415b      	adcs	r3, r3
 8005bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005bf8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005bfc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005c00:	f7fb f812 	bl	8000c28 <__aeabi_uldivmod>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4ba5      	ldr	r3, [pc, #660]	; (8005ea0 <UART_SetConfig+0x38c>)
 8005c0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	011e      	lsls	r6, r3, #4
 8005c12:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c14:	461c      	mov	r4, r3
 8005c16:	f04f 0500 	mov.w	r5, #0
 8005c1a:	4622      	mov	r2, r4
 8005c1c:	462b      	mov	r3, r5
 8005c1e:	1891      	adds	r1, r2, r2
 8005c20:	6339      	str	r1, [r7, #48]	; 0x30
 8005c22:	415b      	adcs	r3, r3
 8005c24:	637b      	str	r3, [r7, #52]	; 0x34
 8005c26:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005c2a:	1912      	adds	r2, r2, r4
 8005c2c:	eb45 0303 	adc.w	r3, r5, r3
 8005c30:	f04f 0000 	mov.w	r0, #0
 8005c34:	f04f 0100 	mov.w	r1, #0
 8005c38:	00d9      	lsls	r1, r3, #3
 8005c3a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c3e:	00d0      	lsls	r0, r2, #3
 8005c40:	4602      	mov	r2, r0
 8005c42:	460b      	mov	r3, r1
 8005c44:	1911      	adds	r1, r2, r4
 8005c46:	65b9      	str	r1, [r7, #88]	; 0x58
 8005c48:	416b      	adcs	r3, r5
 8005c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c4e:	685b      	ldr	r3, [r3, #4]
 8005c50:	461a      	mov	r2, r3
 8005c52:	f04f 0300 	mov.w	r3, #0
 8005c56:	1891      	adds	r1, r2, r2
 8005c58:	62b9      	str	r1, [r7, #40]	; 0x28
 8005c5a:	415b      	adcs	r3, r3
 8005c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c62:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005c66:	f7fa ffdf 	bl	8000c28 <__aeabi_uldivmod>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	4b8c      	ldr	r3, [pc, #560]	; (8005ea0 <UART_SetConfig+0x38c>)
 8005c70:	fba3 1302 	umull	r1, r3, r3, r2
 8005c74:	095b      	lsrs	r3, r3, #5
 8005c76:	2164      	movs	r1, #100	; 0x64
 8005c78:	fb01 f303 	mul.w	r3, r1, r3
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	3332      	adds	r3, #50	; 0x32
 8005c82:	4a87      	ldr	r2, [pc, #540]	; (8005ea0 <UART_SetConfig+0x38c>)
 8005c84:	fba2 2303 	umull	r2, r3, r2, r3
 8005c88:	095b      	lsrs	r3, r3, #5
 8005c8a:	005b      	lsls	r3, r3, #1
 8005c8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c90:	441e      	add	r6, r3
 8005c92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c94:	4618      	mov	r0, r3
 8005c96:	f04f 0100 	mov.w	r1, #0
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	1894      	adds	r4, r2, r2
 8005ca0:	623c      	str	r4, [r7, #32]
 8005ca2:	415b      	adcs	r3, r3
 8005ca4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005caa:	1812      	adds	r2, r2, r0
 8005cac:	eb41 0303 	adc.w	r3, r1, r3
 8005cb0:	f04f 0400 	mov.w	r4, #0
 8005cb4:	f04f 0500 	mov.w	r5, #0
 8005cb8:	00dd      	lsls	r5, r3, #3
 8005cba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005cbe:	00d4      	lsls	r4, r2, #3
 8005cc0:	4622      	mov	r2, r4
 8005cc2:	462b      	mov	r3, r5
 8005cc4:	1814      	adds	r4, r2, r0
 8005cc6:	653c      	str	r4, [r7, #80]	; 0x50
 8005cc8:	414b      	adcs	r3, r1
 8005cca:	657b      	str	r3, [r7, #84]	; 0x54
 8005ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	461a      	mov	r2, r3
 8005cd2:	f04f 0300 	mov.w	r3, #0
 8005cd6:	1891      	adds	r1, r2, r2
 8005cd8:	61b9      	str	r1, [r7, #24]
 8005cda:	415b      	adcs	r3, r3
 8005cdc:	61fb      	str	r3, [r7, #28]
 8005cde:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ce2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005ce6:	f7fa ff9f 	bl	8000c28 <__aeabi_uldivmod>
 8005cea:	4602      	mov	r2, r0
 8005cec:	460b      	mov	r3, r1
 8005cee:	4b6c      	ldr	r3, [pc, #432]	; (8005ea0 <UART_SetConfig+0x38c>)
 8005cf0:	fba3 1302 	umull	r1, r3, r3, r2
 8005cf4:	095b      	lsrs	r3, r3, #5
 8005cf6:	2164      	movs	r1, #100	; 0x64
 8005cf8:	fb01 f303 	mul.w	r3, r1, r3
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	00db      	lsls	r3, r3, #3
 8005d00:	3332      	adds	r3, #50	; 0x32
 8005d02:	4a67      	ldr	r2, [pc, #412]	; (8005ea0 <UART_SetConfig+0x38c>)
 8005d04:	fba2 2303 	umull	r2, r3, r2, r3
 8005d08:	095b      	lsrs	r3, r3, #5
 8005d0a:	f003 0207 	and.w	r2, r3, #7
 8005d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4432      	add	r2, r6
 8005d14:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d16:	e0b9      	b.n	8005e8c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d1a:	461c      	mov	r4, r3
 8005d1c:	f04f 0500 	mov.w	r5, #0
 8005d20:	4622      	mov	r2, r4
 8005d22:	462b      	mov	r3, r5
 8005d24:	1891      	adds	r1, r2, r2
 8005d26:	6139      	str	r1, [r7, #16]
 8005d28:	415b      	adcs	r3, r3
 8005d2a:	617b      	str	r3, [r7, #20]
 8005d2c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005d30:	1912      	adds	r2, r2, r4
 8005d32:	eb45 0303 	adc.w	r3, r5, r3
 8005d36:	f04f 0000 	mov.w	r0, #0
 8005d3a:	f04f 0100 	mov.w	r1, #0
 8005d3e:	00d9      	lsls	r1, r3, #3
 8005d40:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005d44:	00d0      	lsls	r0, r2, #3
 8005d46:	4602      	mov	r2, r0
 8005d48:	460b      	mov	r3, r1
 8005d4a:	eb12 0804 	adds.w	r8, r2, r4
 8005d4e:	eb43 0905 	adc.w	r9, r3, r5
 8005d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f04f 0100 	mov.w	r1, #0
 8005d5c:	f04f 0200 	mov.w	r2, #0
 8005d60:	f04f 0300 	mov.w	r3, #0
 8005d64:	008b      	lsls	r3, r1, #2
 8005d66:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d6a:	0082      	lsls	r2, r0, #2
 8005d6c:	4640      	mov	r0, r8
 8005d6e:	4649      	mov	r1, r9
 8005d70:	f7fa ff5a 	bl	8000c28 <__aeabi_uldivmod>
 8005d74:	4602      	mov	r2, r0
 8005d76:	460b      	mov	r3, r1
 8005d78:	4b49      	ldr	r3, [pc, #292]	; (8005ea0 <UART_SetConfig+0x38c>)
 8005d7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d7e:	095b      	lsrs	r3, r3, #5
 8005d80:	011e      	lsls	r6, r3, #4
 8005d82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d84:	4618      	mov	r0, r3
 8005d86:	f04f 0100 	mov.w	r1, #0
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	1894      	adds	r4, r2, r2
 8005d90:	60bc      	str	r4, [r7, #8]
 8005d92:	415b      	adcs	r3, r3
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d9a:	1812      	adds	r2, r2, r0
 8005d9c:	eb41 0303 	adc.w	r3, r1, r3
 8005da0:	f04f 0400 	mov.w	r4, #0
 8005da4:	f04f 0500 	mov.w	r5, #0
 8005da8:	00dd      	lsls	r5, r3, #3
 8005daa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005dae:	00d4      	lsls	r4, r2, #3
 8005db0:	4622      	mov	r2, r4
 8005db2:	462b      	mov	r3, r5
 8005db4:	1814      	adds	r4, r2, r0
 8005db6:	64bc      	str	r4, [r7, #72]	; 0x48
 8005db8:	414b      	adcs	r3, r1
 8005dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dbe:	685b      	ldr	r3, [r3, #4]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f04f 0100 	mov.w	r1, #0
 8005dc6:	f04f 0200 	mov.w	r2, #0
 8005dca:	f04f 0300 	mov.w	r3, #0
 8005dce:	008b      	lsls	r3, r1, #2
 8005dd0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005dd4:	0082      	lsls	r2, r0, #2
 8005dd6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005dda:	f7fa ff25 	bl	8000c28 <__aeabi_uldivmod>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	4b2f      	ldr	r3, [pc, #188]	; (8005ea0 <UART_SetConfig+0x38c>)
 8005de4:	fba3 1302 	umull	r1, r3, r3, r2
 8005de8:	095b      	lsrs	r3, r3, #5
 8005dea:	2164      	movs	r1, #100	; 0x64
 8005dec:	fb01 f303 	mul.w	r3, r1, r3
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	011b      	lsls	r3, r3, #4
 8005df4:	3332      	adds	r3, #50	; 0x32
 8005df6:	4a2a      	ldr	r2, [pc, #168]	; (8005ea0 <UART_SetConfig+0x38c>)
 8005df8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfc:	095b      	lsrs	r3, r3, #5
 8005dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e02:	441e      	add	r6, r3
 8005e04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e06:	4618      	mov	r0, r3
 8005e08:	f04f 0100 	mov.w	r1, #0
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	1894      	adds	r4, r2, r2
 8005e12:	603c      	str	r4, [r7, #0]
 8005e14:	415b      	adcs	r3, r3
 8005e16:	607b      	str	r3, [r7, #4]
 8005e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e1c:	1812      	adds	r2, r2, r0
 8005e1e:	eb41 0303 	adc.w	r3, r1, r3
 8005e22:	f04f 0400 	mov.w	r4, #0
 8005e26:	f04f 0500 	mov.w	r5, #0
 8005e2a:	00dd      	lsls	r5, r3, #3
 8005e2c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e30:	00d4      	lsls	r4, r2, #3
 8005e32:	4622      	mov	r2, r4
 8005e34:	462b      	mov	r3, r5
 8005e36:	eb12 0a00 	adds.w	sl, r2, r0
 8005e3a:	eb43 0b01 	adc.w	fp, r3, r1
 8005e3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	4618      	mov	r0, r3
 8005e44:	f04f 0100 	mov.w	r1, #0
 8005e48:	f04f 0200 	mov.w	r2, #0
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	008b      	lsls	r3, r1, #2
 8005e52:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e56:	0082      	lsls	r2, r0, #2
 8005e58:	4650      	mov	r0, sl
 8005e5a:	4659      	mov	r1, fp
 8005e5c:	f7fa fee4 	bl	8000c28 <__aeabi_uldivmod>
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4b0e      	ldr	r3, [pc, #56]	; (8005ea0 <UART_SetConfig+0x38c>)
 8005e66:	fba3 1302 	umull	r1, r3, r3, r2
 8005e6a:	095b      	lsrs	r3, r3, #5
 8005e6c:	2164      	movs	r1, #100	; 0x64
 8005e6e:	fb01 f303 	mul.w	r3, r1, r3
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	011b      	lsls	r3, r3, #4
 8005e76:	3332      	adds	r3, #50	; 0x32
 8005e78:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <UART_SetConfig+0x38c>)
 8005e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7e:	095b      	lsrs	r3, r3, #5
 8005e80:	f003 020f 	and.w	r2, r3, #15
 8005e84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4432      	add	r2, r6
 8005e8a:	609a      	str	r2, [r3, #8]
}
 8005e8c:	bf00      	nop
 8005e8e:	377c      	adds	r7, #124	; 0x7c
 8005e90:	46bd      	mov	sp, r7
 8005e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e96:	bf00      	nop
 8005e98:	40011000 	.word	0x40011000
 8005e9c:	40011400 	.word	0x40011400
 8005ea0:	51eb851f 	.word	0x51eb851f

08005ea4 <__errno>:
 8005ea4:	4b01      	ldr	r3, [pc, #4]	; (8005eac <__errno+0x8>)
 8005ea6:	6818      	ldr	r0, [r3, #0]
 8005ea8:	4770      	bx	lr
 8005eaa:	bf00      	nop
 8005eac:	2000000c 	.word	0x2000000c

08005eb0 <__libc_init_array>:
 8005eb0:	b570      	push	{r4, r5, r6, lr}
 8005eb2:	4d0d      	ldr	r5, [pc, #52]	; (8005ee8 <__libc_init_array+0x38>)
 8005eb4:	4c0d      	ldr	r4, [pc, #52]	; (8005eec <__libc_init_array+0x3c>)
 8005eb6:	1b64      	subs	r4, r4, r5
 8005eb8:	10a4      	asrs	r4, r4, #2
 8005eba:	2600      	movs	r6, #0
 8005ebc:	42a6      	cmp	r6, r4
 8005ebe:	d109      	bne.n	8005ed4 <__libc_init_array+0x24>
 8005ec0:	4d0b      	ldr	r5, [pc, #44]	; (8005ef0 <__libc_init_array+0x40>)
 8005ec2:	4c0c      	ldr	r4, [pc, #48]	; (8005ef4 <__libc_init_array+0x44>)
 8005ec4:	f001 fb76 	bl	80075b4 <_init>
 8005ec8:	1b64      	subs	r4, r4, r5
 8005eca:	10a4      	asrs	r4, r4, #2
 8005ecc:	2600      	movs	r6, #0
 8005ece:	42a6      	cmp	r6, r4
 8005ed0:	d105      	bne.n	8005ede <__libc_init_array+0x2e>
 8005ed2:	bd70      	pop	{r4, r5, r6, pc}
 8005ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ed8:	4798      	blx	r3
 8005eda:	3601      	adds	r6, #1
 8005edc:	e7ee      	b.n	8005ebc <__libc_init_array+0xc>
 8005ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ee2:	4798      	blx	r3
 8005ee4:	3601      	adds	r6, #1
 8005ee6:	e7f2      	b.n	8005ece <__libc_init_array+0x1e>
 8005ee8:	08007868 	.word	0x08007868
 8005eec:	08007868 	.word	0x08007868
 8005ef0:	08007868 	.word	0x08007868
 8005ef4:	0800786c 	.word	0x0800786c

08005ef8 <memset>:
 8005ef8:	4402      	add	r2, r0
 8005efa:	4603      	mov	r3, r0
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d100      	bne.n	8005f02 <memset+0xa>
 8005f00:	4770      	bx	lr
 8005f02:	f803 1b01 	strb.w	r1, [r3], #1
 8005f06:	e7f9      	b.n	8005efc <memset+0x4>

08005f08 <iprintf>:
 8005f08:	b40f      	push	{r0, r1, r2, r3}
 8005f0a:	4b0a      	ldr	r3, [pc, #40]	; (8005f34 <iprintf+0x2c>)
 8005f0c:	b513      	push	{r0, r1, r4, lr}
 8005f0e:	681c      	ldr	r4, [r3, #0]
 8005f10:	b124      	cbz	r4, 8005f1c <iprintf+0x14>
 8005f12:	69a3      	ldr	r3, [r4, #24]
 8005f14:	b913      	cbnz	r3, 8005f1c <iprintf+0x14>
 8005f16:	4620      	mov	r0, r4
 8005f18:	f000 fa5e 	bl	80063d8 <__sinit>
 8005f1c:	ab05      	add	r3, sp, #20
 8005f1e:	9a04      	ldr	r2, [sp, #16]
 8005f20:	68a1      	ldr	r1, [r4, #8]
 8005f22:	9301      	str	r3, [sp, #4]
 8005f24:	4620      	mov	r0, r4
 8005f26:	f000 fc2f 	bl	8006788 <_vfiprintf_r>
 8005f2a:	b002      	add	sp, #8
 8005f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f30:	b004      	add	sp, #16
 8005f32:	4770      	bx	lr
 8005f34:	2000000c 	.word	0x2000000c

08005f38 <_puts_r>:
 8005f38:	b570      	push	{r4, r5, r6, lr}
 8005f3a:	460e      	mov	r6, r1
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	b118      	cbz	r0, 8005f48 <_puts_r+0x10>
 8005f40:	6983      	ldr	r3, [r0, #24]
 8005f42:	b90b      	cbnz	r3, 8005f48 <_puts_r+0x10>
 8005f44:	f000 fa48 	bl	80063d8 <__sinit>
 8005f48:	69ab      	ldr	r3, [r5, #24]
 8005f4a:	68ac      	ldr	r4, [r5, #8]
 8005f4c:	b913      	cbnz	r3, 8005f54 <_puts_r+0x1c>
 8005f4e:	4628      	mov	r0, r5
 8005f50:	f000 fa42 	bl	80063d8 <__sinit>
 8005f54:	4b2c      	ldr	r3, [pc, #176]	; (8006008 <_puts_r+0xd0>)
 8005f56:	429c      	cmp	r4, r3
 8005f58:	d120      	bne.n	8005f9c <_puts_r+0x64>
 8005f5a:	686c      	ldr	r4, [r5, #4]
 8005f5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f5e:	07db      	lsls	r3, r3, #31
 8005f60:	d405      	bmi.n	8005f6e <_puts_r+0x36>
 8005f62:	89a3      	ldrh	r3, [r4, #12]
 8005f64:	0598      	lsls	r0, r3, #22
 8005f66:	d402      	bmi.n	8005f6e <_puts_r+0x36>
 8005f68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f6a:	f000 fad3 	bl	8006514 <__retarget_lock_acquire_recursive>
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	0719      	lsls	r1, r3, #28
 8005f72:	d51d      	bpl.n	8005fb0 <_puts_r+0x78>
 8005f74:	6923      	ldr	r3, [r4, #16]
 8005f76:	b1db      	cbz	r3, 8005fb0 <_puts_r+0x78>
 8005f78:	3e01      	subs	r6, #1
 8005f7a:	68a3      	ldr	r3, [r4, #8]
 8005f7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005f80:	3b01      	subs	r3, #1
 8005f82:	60a3      	str	r3, [r4, #8]
 8005f84:	bb39      	cbnz	r1, 8005fd6 <_puts_r+0x9e>
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	da38      	bge.n	8005ffc <_puts_r+0xc4>
 8005f8a:	4622      	mov	r2, r4
 8005f8c:	210a      	movs	r1, #10
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f000 f848 	bl	8006024 <__swbuf_r>
 8005f94:	3001      	adds	r0, #1
 8005f96:	d011      	beq.n	8005fbc <_puts_r+0x84>
 8005f98:	250a      	movs	r5, #10
 8005f9a:	e011      	b.n	8005fc0 <_puts_r+0x88>
 8005f9c:	4b1b      	ldr	r3, [pc, #108]	; (800600c <_puts_r+0xd4>)
 8005f9e:	429c      	cmp	r4, r3
 8005fa0:	d101      	bne.n	8005fa6 <_puts_r+0x6e>
 8005fa2:	68ac      	ldr	r4, [r5, #8]
 8005fa4:	e7da      	b.n	8005f5c <_puts_r+0x24>
 8005fa6:	4b1a      	ldr	r3, [pc, #104]	; (8006010 <_puts_r+0xd8>)
 8005fa8:	429c      	cmp	r4, r3
 8005faa:	bf08      	it	eq
 8005fac:	68ec      	ldreq	r4, [r5, #12]
 8005fae:	e7d5      	b.n	8005f5c <_puts_r+0x24>
 8005fb0:	4621      	mov	r1, r4
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	f000 f888 	bl	80060c8 <__swsetup_r>
 8005fb8:	2800      	cmp	r0, #0
 8005fba:	d0dd      	beq.n	8005f78 <_puts_r+0x40>
 8005fbc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005fc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005fc2:	07da      	lsls	r2, r3, #31
 8005fc4:	d405      	bmi.n	8005fd2 <_puts_r+0x9a>
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	059b      	lsls	r3, r3, #22
 8005fca:	d402      	bmi.n	8005fd2 <_puts_r+0x9a>
 8005fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005fce:	f000 faa2 	bl	8006516 <__retarget_lock_release_recursive>
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	bd70      	pop	{r4, r5, r6, pc}
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	da04      	bge.n	8005fe4 <_puts_r+0xac>
 8005fda:	69a2      	ldr	r2, [r4, #24]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	dc06      	bgt.n	8005fee <_puts_r+0xb6>
 8005fe0:	290a      	cmp	r1, #10
 8005fe2:	d004      	beq.n	8005fee <_puts_r+0xb6>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	6022      	str	r2, [r4, #0]
 8005fea:	7019      	strb	r1, [r3, #0]
 8005fec:	e7c5      	b.n	8005f7a <_puts_r+0x42>
 8005fee:	4622      	mov	r2, r4
 8005ff0:	4628      	mov	r0, r5
 8005ff2:	f000 f817 	bl	8006024 <__swbuf_r>
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	d1bf      	bne.n	8005f7a <_puts_r+0x42>
 8005ffa:	e7df      	b.n	8005fbc <_puts_r+0x84>
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	250a      	movs	r5, #10
 8006000:	1c5a      	adds	r2, r3, #1
 8006002:	6022      	str	r2, [r4, #0]
 8006004:	701d      	strb	r5, [r3, #0]
 8006006:	e7db      	b.n	8005fc0 <_puts_r+0x88>
 8006008:	0800777c 	.word	0x0800777c
 800600c:	0800779c 	.word	0x0800779c
 8006010:	0800775c 	.word	0x0800775c

08006014 <puts>:
 8006014:	4b02      	ldr	r3, [pc, #8]	; (8006020 <puts+0xc>)
 8006016:	4601      	mov	r1, r0
 8006018:	6818      	ldr	r0, [r3, #0]
 800601a:	f7ff bf8d 	b.w	8005f38 <_puts_r>
 800601e:	bf00      	nop
 8006020:	2000000c 	.word	0x2000000c

08006024 <__swbuf_r>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	460e      	mov	r6, r1
 8006028:	4614      	mov	r4, r2
 800602a:	4605      	mov	r5, r0
 800602c:	b118      	cbz	r0, 8006036 <__swbuf_r+0x12>
 800602e:	6983      	ldr	r3, [r0, #24]
 8006030:	b90b      	cbnz	r3, 8006036 <__swbuf_r+0x12>
 8006032:	f000 f9d1 	bl	80063d8 <__sinit>
 8006036:	4b21      	ldr	r3, [pc, #132]	; (80060bc <__swbuf_r+0x98>)
 8006038:	429c      	cmp	r4, r3
 800603a:	d12b      	bne.n	8006094 <__swbuf_r+0x70>
 800603c:	686c      	ldr	r4, [r5, #4]
 800603e:	69a3      	ldr	r3, [r4, #24]
 8006040:	60a3      	str	r3, [r4, #8]
 8006042:	89a3      	ldrh	r3, [r4, #12]
 8006044:	071a      	lsls	r2, r3, #28
 8006046:	d52f      	bpl.n	80060a8 <__swbuf_r+0x84>
 8006048:	6923      	ldr	r3, [r4, #16]
 800604a:	b36b      	cbz	r3, 80060a8 <__swbuf_r+0x84>
 800604c:	6923      	ldr	r3, [r4, #16]
 800604e:	6820      	ldr	r0, [r4, #0]
 8006050:	1ac0      	subs	r0, r0, r3
 8006052:	6963      	ldr	r3, [r4, #20]
 8006054:	b2f6      	uxtb	r6, r6
 8006056:	4283      	cmp	r3, r0
 8006058:	4637      	mov	r7, r6
 800605a:	dc04      	bgt.n	8006066 <__swbuf_r+0x42>
 800605c:	4621      	mov	r1, r4
 800605e:	4628      	mov	r0, r5
 8006060:	f000 f926 	bl	80062b0 <_fflush_r>
 8006064:	bb30      	cbnz	r0, 80060b4 <__swbuf_r+0x90>
 8006066:	68a3      	ldr	r3, [r4, #8]
 8006068:	3b01      	subs	r3, #1
 800606a:	60a3      	str	r3, [r4, #8]
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	6022      	str	r2, [r4, #0]
 8006072:	701e      	strb	r6, [r3, #0]
 8006074:	6963      	ldr	r3, [r4, #20]
 8006076:	3001      	adds	r0, #1
 8006078:	4283      	cmp	r3, r0
 800607a:	d004      	beq.n	8006086 <__swbuf_r+0x62>
 800607c:	89a3      	ldrh	r3, [r4, #12]
 800607e:	07db      	lsls	r3, r3, #31
 8006080:	d506      	bpl.n	8006090 <__swbuf_r+0x6c>
 8006082:	2e0a      	cmp	r6, #10
 8006084:	d104      	bne.n	8006090 <__swbuf_r+0x6c>
 8006086:	4621      	mov	r1, r4
 8006088:	4628      	mov	r0, r5
 800608a:	f000 f911 	bl	80062b0 <_fflush_r>
 800608e:	b988      	cbnz	r0, 80060b4 <__swbuf_r+0x90>
 8006090:	4638      	mov	r0, r7
 8006092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006094:	4b0a      	ldr	r3, [pc, #40]	; (80060c0 <__swbuf_r+0x9c>)
 8006096:	429c      	cmp	r4, r3
 8006098:	d101      	bne.n	800609e <__swbuf_r+0x7a>
 800609a:	68ac      	ldr	r4, [r5, #8]
 800609c:	e7cf      	b.n	800603e <__swbuf_r+0x1a>
 800609e:	4b09      	ldr	r3, [pc, #36]	; (80060c4 <__swbuf_r+0xa0>)
 80060a0:	429c      	cmp	r4, r3
 80060a2:	bf08      	it	eq
 80060a4:	68ec      	ldreq	r4, [r5, #12]
 80060a6:	e7ca      	b.n	800603e <__swbuf_r+0x1a>
 80060a8:	4621      	mov	r1, r4
 80060aa:	4628      	mov	r0, r5
 80060ac:	f000 f80c 	bl	80060c8 <__swsetup_r>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d0cb      	beq.n	800604c <__swbuf_r+0x28>
 80060b4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80060b8:	e7ea      	b.n	8006090 <__swbuf_r+0x6c>
 80060ba:	bf00      	nop
 80060bc:	0800777c 	.word	0x0800777c
 80060c0:	0800779c 	.word	0x0800779c
 80060c4:	0800775c 	.word	0x0800775c

080060c8 <__swsetup_r>:
 80060c8:	4b32      	ldr	r3, [pc, #200]	; (8006194 <__swsetup_r+0xcc>)
 80060ca:	b570      	push	{r4, r5, r6, lr}
 80060cc:	681d      	ldr	r5, [r3, #0]
 80060ce:	4606      	mov	r6, r0
 80060d0:	460c      	mov	r4, r1
 80060d2:	b125      	cbz	r5, 80060de <__swsetup_r+0x16>
 80060d4:	69ab      	ldr	r3, [r5, #24]
 80060d6:	b913      	cbnz	r3, 80060de <__swsetup_r+0x16>
 80060d8:	4628      	mov	r0, r5
 80060da:	f000 f97d 	bl	80063d8 <__sinit>
 80060de:	4b2e      	ldr	r3, [pc, #184]	; (8006198 <__swsetup_r+0xd0>)
 80060e0:	429c      	cmp	r4, r3
 80060e2:	d10f      	bne.n	8006104 <__swsetup_r+0x3c>
 80060e4:	686c      	ldr	r4, [r5, #4]
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80060ec:	0719      	lsls	r1, r3, #28
 80060ee:	d42c      	bmi.n	800614a <__swsetup_r+0x82>
 80060f0:	06dd      	lsls	r5, r3, #27
 80060f2:	d411      	bmi.n	8006118 <__swsetup_r+0x50>
 80060f4:	2309      	movs	r3, #9
 80060f6:	6033      	str	r3, [r6, #0]
 80060f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80060fc:	81a3      	strh	r3, [r4, #12]
 80060fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006102:	e03e      	b.n	8006182 <__swsetup_r+0xba>
 8006104:	4b25      	ldr	r3, [pc, #148]	; (800619c <__swsetup_r+0xd4>)
 8006106:	429c      	cmp	r4, r3
 8006108:	d101      	bne.n	800610e <__swsetup_r+0x46>
 800610a:	68ac      	ldr	r4, [r5, #8]
 800610c:	e7eb      	b.n	80060e6 <__swsetup_r+0x1e>
 800610e:	4b24      	ldr	r3, [pc, #144]	; (80061a0 <__swsetup_r+0xd8>)
 8006110:	429c      	cmp	r4, r3
 8006112:	bf08      	it	eq
 8006114:	68ec      	ldreq	r4, [r5, #12]
 8006116:	e7e6      	b.n	80060e6 <__swsetup_r+0x1e>
 8006118:	0758      	lsls	r0, r3, #29
 800611a:	d512      	bpl.n	8006142 <__swsetup_r+0x7a>
 800611c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800611e:	b141      	cbz	r1, 8006132 <__swsetup_r+0x6a>
 8006120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006124:	4299      	cmp	r1, r3
 8006126:	d002      	beq.n	800612e <__swsetup_r+0x66>
 8006128:	4630      	mov	r0, r6
 800612a:	f000 fa59 	bl	80065e0 <_free_r>
 800612e:	2300      	movs	r3, #0
 8006130:	6363      	str	r3, [r4, #52]	; 0x34
 8006132:	89a3      	ldrh	r3, [r4, #12]
 8006134:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006138:	81a3      	strh	r3, [r4, #12]
 800613a:	2300      	movs	r3, #0
 800613c:	6063      	str	r3, [r4, #4]
 800613e:	6923      	ldr	r3, [r4, #16]
 8006140:	6023      	str	r3, [r4, #0]
 8006142:	89a3      	ldrh	r3, [r4, #12]
 8006144:	f043 0308 	orr.w	r3, r3, #8
 8006148:	81a3      	strh	r3, [r4, #12]
 800614a:	6923      	ldr	r3, [r4, #16]
 800614c:	b94b      	cbnz	r3, 8006162 <__swsetup_r+0x9a>
 800614e:	89a3      	ldrh	r3, [r4, #12]
 8006150:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006154:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006158:	d003      	beq.n	8006162 <__swsetup_r+0x9a>
 800615a:	4621      	mov	r1, r4
 800615c:	4630      	mov	r0, r6
 800615e:	f000 f9ff 	bl	8006560 <__smakebuf_r>
 8006162:	89a0      	ldrh	r0, [r4, #12]
 8006164:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006168:	f010 0301 	ands.w	r3, r0, #1
 800616c:	d00a      	beq.n	8006184 <__swsetup_r+0xbc>
 800616e:	2300      	movs	r3, #0
 8006170:	60a3      	str	r3, [r4, #8]
 8006172:	6963      	ldr	r3, [r4, #20]
 8006174:	425b      	negs	r3, r3
 8006176:	61a3      	str	r3, [r4, #24]
 8006178:	6923      	ldr	r3, [r4, #16]
 800617a:	b943      	cbnz	r3, 800618e <__swsetup_r+0xc6>
 800617c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006180:	d1ba      	bne.n	80060f8 <__swsetup_r+0x30>
 8006182:	bd70      	pop	{r4, r5, r6, pc}
 8006184:	0781      	lsls	r1, r0, #30
 8006186:	bf58      	it	pl
 8006188:	6963      	ldrpl	r3, [r4, #20]
 800618a:	60a3      	str	r3, [r4, #8]
 800618c:	e7f4      	b.n	8006178 <__swsetup_r+0xb0>
 800618e:	2000      	movs	r0, #0
 8006190:	e7f7      	b.n	8006182 <__swsetup_r+0xba>
 8006192:	bf00      	nop
 8006194:	2000000c 	.word	0x2000000c
 8006198:	0800777c 	.word	0x0800777c
 800619c:	0800779c 	.word	0x0800779c
 80061a0:	0800775c 	.word	0x0800775c

080061a4 <__sflush_r>:
 80061a4:	898a      	ldrh	r2, [r1, #12]
 80061a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061aa:	4605      	mov	r5, r0
 80061ac:	0710      	lsls	r0, r2, #28
 80061ae:	460c      	mov	r4, r1
 80061b0:	d458      	bmi.n	8006264 <__sflush_r+0xc0>
 80061b2:	684b      	ldr	r3, [r1, #4]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	dc05      	bgt.n	80061c4 <__sflush_r+0x20>
 80061b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	dc02      	bgt.n	80061c4 <__sflush_r+0x20>
 80061be:	2000      	movs	r0, #0
 80061c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061c6:	2e00      	cmp	r6, #0
 80061c8:	d0f9      	beq.n	80061be <__sflush_r+0x1a>
 80061ca:	2300      	movs	r3, #0
 80061cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80061d0:	682f      	ldr	r7, [r5, #0]
 80061d2:	602b      	str	r3, [r5, #0]
 80061d4:	d032      	beq.n	800623c <__sflush_r+0x98>
 80061d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80061d8:	89a3      	ldrh	r3, [r4, #12]
 80061da:	075a      	lsls	r2, r3, #29
 80061dc:	d505      	bpl.n	80061ea <__sflush_r+0x46>
 80061de:	6863      	ldr	r3, [r4, #4]
 80061e0:	1ac0      	subs	r0, r0, r3
 80061e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80061e4:	b10b      	cbz	r3, 80061ea <__sflush_r+0x46>
 80061e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80061e8:	1ac0      	subs	r0, r0, r3
 80061ea:	2300      	movs	r3, #0
 80061ec:	4602      	mov	r2, r0
 80061ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80061f0:	6a21      	ldr	r1, [r4, #32]
 80061f2:	4628      	mov	r0, r5
 80061f4:	47b0      	blx	r6
 80061f6:	1c43      	adds	r3, r0, #1
 80061f8:	89a3      	ldrh	r3, [r4, #12]
 80061fa:	d106      	bne.n	800620a <__sflush_r+0x66>
 80061fc:	6829      	ldr	r1, [r5, #0]
 80061fe:	291d      	cmp	r1, #29
 8006200:	d82c      	bhi.n	800625c <__sflush_r+0xb8>
 8006202:	4a2a      	ldr	r2, [pc, #168]	; (80062ac <__sflush_r+0x108>)
 8006204:	40ca      	lsrs	r2, r1
 8006206:	07d6      	lsls	r6, r2, #31
 8006208:	d528      	bpl.n	800625c <__sflush_r+0xb8>
 800620a:	2200      	movs	r2, #0
 800620c:	6062      	str	r2, [r4, #4]
 800620e:	04d9      	lsls	r1, r3, #19
 8006210:	6922      	ldr	r2, [r4, #16]
 8006212:	6022      	str	r2, [r4, #0]
 8006214:	d504      	bpl.n	8006220 <__sflush_r+0x7c>
 8006216:	1c42      	adds	r2, r0, #1
 8006218:	d101      	bne.n	800621e <__sflush_r+0x7a>
 800621a:	682b      	ldr	r3, [r5, #0]
 800621c:	b903      	cbnz	r3, 8006220 <__sflush_r+0x7c>
 800621e:	6560      	str	r0, [r4, #84]	; 0x54
 8006220:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006222:	602f      	str	r7, [r5, #0]
 8006224:	2900      	cmp	r1, #0
 8006226:	d0ca      	beq.n	80061be <__sflush_r+0x1a>
 8006228:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800622c:	4299      	cmp	r1, r3
 800622e:	d002      	beq.n	8006236 <__sflush_r+0x92>
 8006230:	4628      	mov	r0, r5
 8006232:	f000 f9d5 	bl	80065e0 <_free_r>
 8006236:	2000      	movs	r0, #0
 8006238:	6360      	str	r0, [r4, #52]	; 0x34
 800623a:	e7c1      	b.n	80061c0 <__sflush_r+0x1c>
 800623c:	6a21      	ldr	r1, [r4, #32]
 800623e:	2301      	movs	r3, #1
 8006240:	4628      	mov	r0, r5
 8006242:	47b0      	blx	r6
 8006244:	1c41      	adds	r1, r0, #1
 8006246:	d1c7      	bne.n	80061d8 <__sflush_r+0x34>
 8006248:	682b      	ldr	r3, [r5, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d0c4      	beq.n	80061d8 <__sflush_r+0x34>
 800624e:	2b1d      	cmp	r3, #29
 8006250:	d001      	beq.n	8006256 <__sflush_r+0xb2>
 8006252:	2b16      	cmp	r3, #22
 8006254:	d101      	bne.n	800625a <__sflush_r+0xb6>
 8006256:	602f      	str	r7, [r5, #0]
 8006258:	e7b1      	b.n	80061be <__sflush_r+0x1a>
 800625a:	89a3      	ldrh	r3, [r4, #12]
 800625c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006260:	81a3      	strh	r3, [r4, #12]
 8006262:	e7ad      	b.n	80061c0 <__sflush_r+0x1c>
 8006264:	690f      	ldr	r7, [r1, #16]
 8006266:	2f00      	cmp	r7, #0
 8006268:	d0a9      	beq.n	80061be <__sflush_r+0x1a>
 800626a:	0793      	lsls	r3, r2, #30
 800626c:	680e      	ldr	r6, [r1, #0]
 800626e:	bf08      	it	eq
 8006270:	694b      	ldreq	r3, [r1, #20]
 8006272:	600f      	str	r7, [r1, #0]
 8006274:	bf18      	it	ne
 8006276:	2300      	movne	r3, #0
 8006278:	eba6 0807 	sub.w	r8, r6, r7
 800627c:	608b      	str	r3, [r1, #8]
 800627e:	f1b8 0f00 	cmp.w	r8, #0
 8006282:	dd9c      	ble.n	80061be <__sflush_r+0x1a>
 8006284:	6a21      	ldr	r1, [r4, #32]
 8006286:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006288:	4643      	mov	r3, r8
 800628a:	463a      	mov	r2, r7
 800628c:	4628      	mov	r0, r5
 800628e:	47b0      	blx	r6
 8006290:	2800      	cmp	r0, #0
 8006292:	dc06      	bgt.n	80062a2 <__sflush_r+0xfe>
 8006294:	89a3      	ldrh	r3, [r4, #12]
 8006296:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800629a:	81a3      	strh	r3, [r4, #12]
 800629c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062a0:	e78e      	b.n	80061c0 <__sflush_r+0x1c>
 80062a2:	4407      	add	r7, r0
 80062a4:	eba8 0800 	sub.w	r8, r8, r0
 80062a8:	e7e9      	b.n	800627e <__sflush_r+0xda>
 80062aa:	bf00      	nop
 80062ac:	20400001 	.word	0x20400001

080062b0 <_fflush_r>:
 80062b0:	b538      	push	{r3, r4, r5, lr}
 80062b2:	690b      	ldr	r3, [r1, #16]
 80062b4:	4605      	mov	r5, r0
 80062b6:	460c      	mov	r4, r1
 80062b8:	b913      	cbnz	r3, 80062c0 <_fflush_r+0x10>
 80062ba:	2500      	movs	r5, #0
 80062bc:	4628      	mov	r0, r5
 80062be:	bd38      	pop	{r3, r4, r5, pc}
 80062c0:	b118      	cbz	r0, 80062ca <_fflush_r+0x1a>
 80062c2:	6983      	ldr	r3, [r0, #24]
 80062c4:	b90b      	cbnz	r3, 80062ca <_fflush_r+0x1a>
 80062c6:	f000 f887 	bl	80063d8 <__sinit>
 80062ca:	4b14      	ldr	r3, [pc, #80]	; (800631c <_fflush_r+0x6c>)
 80062cc:	429c      	cmp	r4, r3
 80062ce:	d11b      	bne.n	8006308 <_fflush_r+0x58>
 80062d0:	686c      	ldr	r4, [r5, #4]
 80062d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0ef      	beq.n	80062ba <_fflush_r+0xa>
 80062da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80062dc:	07d0      	lsls	r0, r2, #31
 80062de:	d404      	bmi.n	80062ea <_fflush_r+0x3a>
 80062e0:	0599      	lsls	r1, r3, #22
 80062e2:	d402      	bmi.n	80062ea <_fflush_r+0x3a>
 80062e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80062e6:	f000 f915 	bl	8006514 <__retarget_lock_acquire_recursive>
 80062ea:	4628      	mov	r0, r5
 80062ec:	4621      	mov	r1, r4
 80062ee:	f7ff ff59 	bl	80061a4 <__sflush_r>
 80062f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80062f4:	07da      	lsls	r2, r3, #31
 80062f6:	4605      	mov	r5, r0
 80062f8:	d4e0      	bmi.n	80062bc <_fflush_r+0xc>
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	059b      	lsls	r3, r3, #22
 80062fe:	d4dd      	bmi.n	80062bc <_fflush_r+0xc>
 8006300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006302:	f000 f908 	bl	8006516 <__retarget_lock_release_recursive>
 8006306:	e7d9      	b.n	80062bc <_fflush_r+0xc>
 8006308:	4b05      	ldr	r3, [pc, #20]	; (8006320 <_fflush_r+0x70>)
 800630a:	429c      	cmp	r4, r3
 800630c:	d101      	bne.n	8006312 <_fflush_r+0x62>
 800630e:	68ac      	ldr	r4, [r5, #8]
 8006310:	e7df      	b.n	80062d2 <_fflush_r+0x22>
 8006312:	4b04      	ldr	r3, [pc, #16]	; (8006324 <_fflush_r+0x74>)
 8006314:	429c      	cmp	r4, r3
 8006316:	bf08      	it	eq
 8006318:	68ec      	ldreq	r4, [r5, #12]
 800631a:	e7da      	b.n	80062d2 <_fflush_r+0x22>
 800631c:	0800777c 	.word	0x0800777c
 8006320:	0800779c 	.word	0x0800779c
 8006324:	0800775c 	.word	0x0800775c

08006328 <std>:
 8006328:	2300      	movs	r3, #0
 800632a:	b510      	push	{r4, lr}
 800632c:	4604      	mov	r4, r0
 800632e:	e9c0 3300 	strd	r3, r3, [r0]
 8006332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006336:	6083      	str	r3, [r0, #8]
 8006338:	8181      	strh	r1, [r0, #12]
 800633a:	6643      	str	r3, [r0, #100]	; 0x64
 800633c:	81c2      	strh	r2, [r0, #14]
 800633e:	6183      	str	r3, [r0, #24]
 8006340:	4619      	mov	r1, r3
 8006342:	2208      	movs	r2, #8
 8006344:	305c      	adds	r0, #92	; 0x5c
 8006346:	f7ff fdd7 	bl	8005ef8 <memset>
 800634a:	4b05      	ldr	r3, [pc, #20]	; (8006360 <std+0x38>)
 800634c:	6263      	str	r3, [r4, #36]	; 0x24
 800634e:	4b05      	ldr	r3, [pc, #20]	; (8006364 <std+0x3c>)
 8006350:	62a3      	str	r3, [r4, #40]	; 0x28
 8006352:	4b05      	ldr	r3, [pc, #20]	; (8006368 <std+0x40>)
 8006354:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006356:	4b05      	ldr	r3, [pc, #20]	; (800636c <std+0x44>)
 8006358:	6224      	str	r4, [r4, #32]
 800635a:	6323      	str	r3, [r4, #48]	; 0x30
 800635c:	bd10      	pop	{r4, pc}
 800635e:	bf00      	nop
 8006360:	08006d31 	.word	0x08006d31
 8006364:	08006d53 	.word	0x08006d53
 8006368:	08006d8b 	.word	0x08006d8b
 800636c:	08006daf 	.word	0x08006daf

08006370 <_cleanup_r>:
 8006370:	4901      	ldr	r1, [pc, #4]	; (8006378 <_cleanup_r+0x8>)
 8006372:	f000 b8af 	b.w	80064d4 <_fwalk_reent>
 8006376:	bf00      	nop
 8006378:	080062b1 	.word	0x080062b1

0800637c <__sfmoreglue>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	1e4a      	subs	r2, r1, #1
 8006380:	2568      	movs	r5, #104	; 0x68
 8006382:	4355      	muls	r5, r2
 8006384:	460e      	mov	r6, r1
 8006386:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800638a:	f000 f979 	bl	8006680 <_malloc_r>
 800638e:	4604      	mov	r4, r0
 8006390:	b140      	cbz	r0, 80063a4 <__sfmoreglue+0x28>
 8006392:	2100      	movs	r1, #0
 8006394:	e9c0 1600 	strd	r1, r6, [r0]
 8006398:	300c      	adds	r0, #12
 800639a:	60a0      	str	r0, [r4, #8]
 800639c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80063a0:	f7ff fdaa 	bl	8005ef8 <memset>
 80063a4:	4620      	mov	r0, r4
 80063a6:	bd70      	pop	{r4, r5, r6, pc}

080063a8 <__sfp_lock_acquire>:
 80063a8:	4801      	ldr	r0, [pc, #4]	; (80063b0 <__sfp_lock_acquire+0x8>)
 80063aa:	f000 b8b3 	b.w	8006514 <__retarget_lock_acquire_recursive>
 80063ae:	bf00      	nop
 80063b0:	20000278 	.word	0x20000278

080063b4 <__sfp_lock_release>:
 80063b4:	4801      	ldr	r0, [pc, #4]	; (80063bc <__sfp_lock_release+0x8>)
 80063b6:	f000 b8ae 	b.w	8006516 <__retarget_lock_release_recursive>
 80063ba:	bf00      	nop
 80063bc:	20000278 	.word	0x20000278

080063c0 <__sinit_lock_acquire>:
 80063c0:	4801      	ldr	r0, [pc, #4]	; (80063c8 <__sinit_lock_acquire+0x8>)
 80063c2:	f000 b8a7 	b.w	8006514 <__retarget_lock_acquire_recursive>
 80063c6:	bf00      	nop
 80063c8:	20000273 	.word	0x20000273

080063cc <__sinit_lock_release>:
 80063cc:	4801      	ldr	r0, [pc, #4]	; (80063d4 <__sinit_lock_release+0x8>)
 80063ce:	f000 b8a2 	b.w	8006516 <__retarget_lock_release_recursive>
 80063d2:	bf00      	nop
 80063d4:	20000273 	.word	0x20000273

080063d8 <__sinit>:
 80063d8:	b510      	push	{r4, lr}
 80063da:	4604      	mov	r4, r0
 80063dc:	f7ff fff0 	bl	80063c0 <__sinit_lock_acquire>
 80063e0:	69a3      	ldr	r3, [r4, #24]
 80063e2:	b11b      	cbz	r3, 80063ec <__sinit+0x14>
 80063e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063e8:	f7ff bff0 	b.w	80063cc <__sinit_lock_release>
 80063ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80063f0:	6523      	str	r3, [r4, #80]	; 0x50
 80063f2:	4b13      	ldr	r3, [pc, #76]	; (8006440 <__sinit+0x68>)
 80063f4:	4a13      	ldr	r2, [pc, #76]	; (8006444 <__sinit+0x6c>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80063fa:	42a3      	cmp	r3, r4
 80063fc:	bf04      	itt	eq
 80063fe:	2301      	moveq	r3, #1
 8006400:	61a3      	streq	r3, [r4, #24]
 8006402:	4620      	mov	r0, r4
 8006404:	f000 f820 	bl	8006448 <__sfp>
 8006408:	6060      	str	r0, [r4, #4]
 800640a:	4620      	mov	r0, r4
 800640c:	f000 f81c 	bl	8006448 <__sfp>
 8006410:	60a0      	str	r0, [r4, #8]
 8006412:	4620      	mov	r0, r4
 8006414:	f000 f818 	bl	8006448 <__sfp>
 8006418:	2200      	movs	r2, #0
 800641a:	60e0      	str	r0, [r4, #12]
 800641c:	2104      	movs	r1, #4
 800641e:	6860      	ldr	r0, [r4, #4]
 8006420:	f7ff ff82 	bl	8006328 <std>
 8006424:	68a0      	ldr	r0, [r4, #8]
 8006426:	2201      	movs	r2, #1
 8006428:	2109      	movs	r1, #9
 800642a:	f7ff ff7d 	bl	8006328 <std>
 800642e:	68e0      	ldr	r0, [r4, #12]
 8006430:	2202      	movs	r2, #2
 8006432:	2112      	movs	r1, #18
 8006434:	f7ff ff78 	bl	8006328 <std>
 8006438:	2301      	movs	r3, #1
 800643a:	61a3      	str	r3, [r4, #24]
 800643c:	e7d2      	b.n	80063e4 <__sinit+0xc>
 800643e:	bf00      	nop
 8006440:	08007758 	.word	0x08007758
 8006444:	08006371 	.word	0x08006371

08006448 <__sfp>:
 8006448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644a:	4607      	mov	r7, r0
 800644c:	f7ff ffac 	bl	80063a8 <__sfp_lock_acquire>
 8006450:	4b1e      	ldr	r3, [pc, #120]	; (80064cc <__sfp+0x84>)
 8006452:	681e      	ldr	r6, [r3, #0]
 8006454:	69b3      	ldr	r3, [r6, #24]
 8006456:	b913      	cbnz	r3, 800645e <__sfp+0x16>
 8006458:	4630      	mov	r0, r6
 800645a:	f7ff ffbd 	bl	80063d8 <__sinit>
 800645e:	3648      	adds	r6, #72	; 0x48
 8006460:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006464:	3b01      	subs	r3, #1
 8006466:	d503      	bpl.n	8006470 <__sfp+0x28>
 8006468:	6833      	ldr	r3, [r6, #0]
 800646a:	b30b      	cbz	r3, 80064b0 <__sfp+0x68>
 800646c:	6836      	ldr	r6, [r6, #0]
 800646e:	e7f7      	b.n	8006460 <__sfp+0x18>
 8006470:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006474:	b9d5      	cbnz	r5, 80064ac <__sfp+0x64>
 8006476:	4b16      	ldr	r3, [pc, #88]	; (80064d0 <__sfp+0x88>)
 8006478:	60e3      	str	r3, [r4, #12]
 800647a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800647e:	6665      	str	r5, [r4, #100]	; 0x64
 8006480:	f000 f847 	bl	8006512 <__retarget_lock_init_recursive>
 8006484:	f7ff ff96 	bl	80063b4 <__sfp_lock_release>
 8006488:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800648c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006490:	6025      	str	r5, [r4, #0]
 8006492:	61a5      	str	r5, [r4, #24]
 8006494:	2208      	movs	r2, #8
 8006496:	4629      	mov	r1, r5
 8006498:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800649c:	f7ff fd2c 	bl	8005ef8 <memset>
 80064a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80064a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80064a8:	4620      	mov	r0, r4
 80064aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80064ac:	3468      	adds	r4, #104	; 0x68
 80064ae:	e7d9      	b.n	8006464 <__sfp+0x1c>
 80064b0:	2104      	movs	r1, #4
 80064b2:	4638      	mov	r0, r7
 80064b4:	f7ff ff62 	bl	800637c <__sfmoreglue>
 80064b8:	4604      	mov	r4, r0
 80064ba:	6030      	str	r0, [r6, #0]
 80064bc:	2800      	cmp	r0, #0
 80064be:	d1d5      	bne.n	800646c <__sfp+0x24>
 80064c0:	f7ff ff78 	bl	80063b4 <__sfp_lock_release>
 80064c4:	230c      	movs	r3, #12
 80064c6:	603b      	str	r3, [r7, #0]
 80064c8:	e7ee      	b.n	80064a8 <__sfp+0x60>
 80064ca:	bf00      	nop
 80064cc:	08007758 	.word	0x08007758
 80064d0:	ffff0001 	.word	0xffff0001

080064d4 <_fwalk_reent>:
 80064d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064d8:	4606      	mov	r6, r0
 80064da:	4688      	mov	r8, r1
 80064dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80064e0:	2700      	movs	r7, #0
 80064e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064e6:	f1b9 0901 	subs.w	r9, r9, #1
 80064ea:	d505      	bpl.n	80064f8 <_fwalk_reent+0x24>
 80064ec:	6824      	ldr	r4, [r4, #0]
 80064ee:	2c00      	cmp	r4, #0
 80064f0:	d1f7      	bne.n	80064e2 <_fwalk_reent+0xe>
 80064f2:	4638      	mov	r0, r7
 80064f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064f8:	89ab      	ldrh	r3, [r5, #12]
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d907      	bls.n	800650e <_fwalk_reent+0x3a>
 80064fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006502:	3301      	adds	r3, #1
 8006504:	d003      	beq.n	800650e <_fwalk_reent+0x3a>
 8006506:	4629      	mov	r1, r5
 8006508:	4630      	mov	r0, r6
 800650a:	47c0      	blx	r8
 800650c:	4307      	orrs	r7, r0
 800650e:	3568      	adds	r5, #104	; 0x68
 8006510:	e7e9      	b.n	80064e6 <_fwalk_reent+0x12>

08006512 <__retarget_lock_init_recursive>:
 8006512:	4770      	bx	lr

08006514 <__retarget_lock_acquire_recursive>:
 8006514:	4770      	bx	lr

08006516 <__retarget_lock_release_recursive>:
 8006516:	4770      	bx	lr

08006518 <__swhatbuf_r>:
 8006518:	b570      	push	{r4, r5, r6, lr}
 800651a:	460e      	mov	r6, r1
 800651c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006520:	2900      	cmp	r1, #0
 8006522:	b096      	sub	sp, #88	; 0x58
 8006524:	4614      	mov	r4, r2
 8006526:	461d      	mov	r5, r3
 8006528:	da07      	bge.n	800653a <__swhatbuf_r+0x22>
 800652a:	2300      	movs	r3, #0
 800652c:	602b      	str	r3, [r5, #0]
 800652e:	89b3      	ldrh	r3, [r6, #12]
 8006530:	061a      	lsls	r2, r3, #24
 8006532:	d410      	bmi.n	8006556 <__swhatbuf_r+0x3e>
 8006534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006538:	e00e      	b.n	8006558 <__swhatbuf_r+0x40>
 800653a:	466a      	mov	r2, sp
 800653c:	f000 fc5e 	bl	8006dfc <_fstat_r>
 8006540:	2800      	cmp	r0, #0
 8006542:	dbf2      	blt.n	800652a <__swhatbuf_r+0x12>
 8006544:	9a01      	ldr	r2, [sp, #4]
 8006546:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800654a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800654e:	425a      	negs	r2, r3
 8006550:	415a      	adcs	r2, r3
 8006552:	602a      	str	r2, [r5, #0]
 8006554:	e7ee      	b.n	8006534 <__swhatbuf_r+0x1c>
 8006556:	2340      	movs	r3, #64	; 0x40
 8006558:	2000      	movs	r0, #0
 800655a:	6023      	str	r3, [r4, #0]
 800655c:	b016      	add	sp, #88	; 0x58
 800655e:	bd70      	pop	{r4, r5, r6, pc}

08006560 <__smakebuf_r>:
 8006560:	898b      	ldrh	r3, [r1, #12]
 8006562:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006564:	079d      	lsls	r5, r3, #30
 8006566:	4606      	mov	r6, r0
 8006568:	460c      	mov	r4, r1
 800656a:	d507      	bpl.n	800657c <__smakebuf_r+0x1c>
 800656c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006570:	6023      	str	r3, [r4, #0]
 8006572:	6123      	str	r3, [r4, #16]
 8006574:	2301      	movs	r3, #1
 8006576:	6163      	str	r3, [r4, #20]
 8006578:	b002      	add	sp, #8
 800657a:	bd70      	pop	{r4, r5, r6, pc}
 800657c:	ab01      	add	r3, sp, #4
 800657e:	466a      	mov	r2, sp
 8006580:	f7ff ffca 	bl	8006518 <__swhatbuf_r>
 8006584:	9900      	ldr	r1, [sp, #0]
 8006586:	4605      	mov	r5, r0
 8006588:	4630      	mov	r0, r6
 800658a:	f000 f879 	bl	8006680 <_malloc_r>
 800658e:	b948      	cbnz	r0, 80065a4 <__smakebuf_r+0x44>
 8006590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006594:	059a      	lsls	r2, r3, #22
 8006596:	d4ef      	bmi.n	8006578 <__smakebuf_r+0x18>
 8006598:	f023 0303 	bic.w	r3, r3, #3
 800659c:	f043 0302 	orr.w	r3, r3, #2
 80065a0:	81a3      	strh	r3, [r4, #12]
 80065a2:	e7e3      	b.n	800656c <__smakebuf_r+0xc>
 80065a4:	4b0d      	ldr	r3, [pc, #52]	; (80065dc <__smakebuf_r+0x7c>)
 80065a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80065a8:	89a3      	ldrh	r3, [r4, #12]
 80065aa:	6020      	str	r0, [r4, #0]
 80065ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065b0:	81a3      	strh	r3, [r4, #12]
 80065b2:	9b00      	ldr	r3, [sp, #0]
 80065b4:	6163      	str	r3, [r4, #20]
 80065b6:	9b01      	ldr	r3, [sp, #4]
 80065b8:	6120      	str	r0, [r4, #16]
 80065ba:	b15b      	cbz	r3, 80065d4 <__smakebuf_r+0x74>
 80065bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065c0:	4630      	mov	r0, r6
 80065c2:	f000 fc2d 	bl	8006e20 <_isatty_r>
 80065c6:	b128      	cbz	r0, 80065d4 <__smakebuf_r+0x74>
 80065c8:	89a3      	ldrh	r3, [r4, #12]
 80065ca:	f023 0303 	bic.w	r3, r3, #3
 80065ce:	f043 0301 	orr.w	r3, r3, #1
 80065d2:	81a3      	strh	r3, [r4, #12]
 80065d4:	89a0      	ldrh	r0, [r4, #12]
 80065d6:	4305      	orrs	r5, r0
 80065d8:	81a5      	strh	r5, [r4, #12]
 80065da:	e7cd      	b.n	8006578 <__smakebuf_r+0x18>
 80065dc:	08006371 	.word	0x08006371

080065e0 <_free_r>:
 80065e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065e2:	2900      	cmp	r1, #0
 80065e4:	d048      	beq.n	8006678 <_free_r+0x98>
 80065e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065ea:	9001      	str	r0, [sp, #4]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	f1a1 0404 	sub.w	r4, r1, #4
 80065f2:	bfb8      	it	lt
 80065f4:	18e4      	addlt	r4, r4, r3
 80065f6:	f000 fc35 	bl	8006e64 <__malloc_lock>
 80065fa:	4a20      	ldr	r2, [pc, #128]	; (800667c <_free_r+0x9c>)
 80065fc:	9801      	ldr	r0, [sp, #4]
 80065fe:	6813      	ldr	r3, [r2, #0]
 8006600:	4615      	mov	r5, r2
 8006602:	b933      	cbnz	r3, 8006612 <_free_r+0x32>
 8006604:	6063      	str	r3, [r4, #4]
 8006606:	6014      	str	r4, [r2, #0]
 8006608:	b003      	add	sp, #12
 800660a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800660e:	f000 bc2f 	b.w	8006e70 <__malloc_unlock>
 8006612:	42a3      	cmp	r3, r4
 8006614:	d90b      	bls.n	800662e <_free_r+0x4e>
 8006616:	6821      	ldr	r1, [r4, #0]
 8006618:	1862      	adds	r2, r4, r1
 800661a:	4293      	cmp	r3, r2
 800661c:	bf04      	itt	eq
 800661e:	681a      	ldreq	r2, [r3, #0]
 8006620:	685b      	ldreq	r3, [r3, #4]
 8006622:	6063      	str	r3, [r4, #4]
 8006624:	bf04      	itt	eq
 8006626:	1852      	addeq	r2, r2, r1
 8006628:	6022      	streq	r2, [r4, #0]
 800662a:	602c      	str	r4, [r5, #0]
 800662c:	e7ec      	b.n	8006608 <_free_r+0x28>
 800662e:	461a      	mov	r2, r3
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	b10b      	cbz	r3, 8006638 <_free_r+0x58>
 8006634:	42a3      	cmp	r3, r4
 8006636:	d9fa      	bls.n	800662e <_free_r+0x4e>
 8006638:	6811      	ldr	r1, [r2, #0]
 800663a:	1855      	adds	r5, r2, r1
 800663c:	42a5      	cmp	r5, r4
 800663e:	d10b      	bne.n	8006658 <_free_r+0x78>
 8006640:	6824      	ldr	r4, [r4, #0]
 8006642:	4421      	add	r1, r4
 8006644:	1854      	adds	r4, r2, r1
 8006646:	42a3      	cmp	r3, r4
 8006648:	6011      	str	r1, [r2, #0]
 800664a:	d1dd      	bne.n	8006608 <_free_r+0x28>
 800664c:	681c      	ldr	r4, [r3, #0]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	6053      	str	r3, [r2, #4]
 8006652:	4421      	add	r1, r4
 8006654:	6011      	str	r1, [r2, #0]
 8006656:	e7d7      	b.n	8006608 <_free_r+0x28>
 8006658:	d902      	bls.n	8006660 <_free_r+0x80>
 800665a:	230c      	movs	r3, #12
 800665c:	6003      	str	r3, [r0, #0]
 800665e:	e7d3      	b.n	8006608 <_free_r+0x28>
 8006660:	6825      	ldr	r5, [r4, #0]
 8006662:	1961      	adds	r1, r4, r5
 8006664:	428b      	cmp	r3, r1
 8006666:	bf04      	itt	eq
 8006668:	6819      	ldreq	r1, [r3, #0]
 800666a:	685b      	ldreq	r3, [r3, #4]
 800666c:	6063      	str	r3, [r4, #4]
 800666e:	bf04      	itt	eq
 8006670:	1949      	addeq	r1, r1, r5
 8006672:	6021      	streq	r1, [r4, #0]
 8006674:	6054      	str	r4, [r2, #4]
 8006676:	e7c7      	b.n	8006608 <_free_r+0x28>
 8006678:	b003      	add	sp, #12
 800667a:	bd30      	pop	{r4, r5, pc}
 800667c:	20000094 	.word	0x20000094

08006680 <_malloc_r>:
 8006680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006682:	1ccd      	adds	r5, r1, #3
 8006684:	f025 0503 	bic.w	r5, r5, #3
 8006688:	3508      	adds	r5, #8
 800668a:	2d0c      	cmp	r5, #12
 800668c:	bf38      	it	cc
 800668e:	250c      	movcc	r5, #12
 8006690:	2d00      	cmp	r5, #0
 8006692:	4606      	mov	r6, r0
 8006694:	db01      	blt.n	800669a <_malloc_r+0x1a>
 8006696:	42a9      	cmp	r1, r5
 8006698:	d903      	bls.n	80066a2 <_malloc_r+0x22>
 800669a:	230c      	movs	r3, #12
 800669c:	6033      	str	r3, [r6, #0]
 800669e:	2000      	movs	r0, #0
 80066a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066a2:	f000 fbdf 	bl	8006e64 <__malloc_lock>
 80066a6:	4921      	ldr	r1, [pc, #132]	; (800672c <_malloc_r+0xac>)
 80066a8:	680a      	ldr	r2, [r1, #0]
 80066aa:	4614      	mov	r4, r2
 80066ac:	b99c      	cbnz	r4, 80066d6 <_malloc_r+0x56>
 80066ae:	4f20      	ldr	r7, [pc, #128]	; (8006730 <_malloc_r+0xb0>)
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	b923      	cbnz	r3, 80066be <_malloc_r+0x3e>
 80066b4:	4621      	mov	r1, r4
 80066b6:	4630      	mov	r0, r6
 80066b8:	f000 fb2a 	bl	8006d10 <_sbrk_r>
 80066bc:	6038      	str	r0, [r7, #0]
 80066be:	4629      	mov	r1, r5
 80066c0:	4630      	mov	r0, r6
 80066c2:	f000 fb25 	bl	8006d10 <_sbrk_r>
 80066c6:	1c43      	adds	r3, r0, #1
 80066c8:	d123      	bne.n	8006712 <_malloc_r+0x92>
 80066ca:	230c      	movs	r3, #12
 80066cc:	6033      	str	r3, [r6, #0]
 80066ce:	4630      	mov	r0, r6
 80066d0:	f000 fbce 	bl	8006e70 <__malloc_unlock>
 80066d4:	e7e3      	b.n	800669e <_malloc_r+0x1e>
 80066d6:	6823      	ldr	r3, [r4, #0]
 80066d8:	1b5b      	subs	r3, r3, r5
 80066da:	d417      	bmi.n	800670c <_malloc_r+0x8c>
 80066dc:	2b0b      	cmp	r3, #11
 80066de:	d903      	bls.n	80066e8 <_malloc_r+0x68>
 80066e0:	6023      	str	r3, [r4, #0]
 80066e2:	441c      	add	r4, r3
 80066e4:	6025      	str	r5, [r4, #0]
 80066e6:	e004      	b.n	80066f2 <_malloc_r+0x72>
 80066e8:	6863      	ldr	r3, [r4, #4]
 80066ea:	42a2      	cmp	r2, r4
 80066ec:	bf0c      	ite	eq
 80066ee:	600b      	streq	r3, [r1, #0]
 80066f0:	6053      	strne	r3, [r2, #4]
 80066f2:	4630      	mov	r0, r6
 80066f4:	f000 fbbc 	bl	8006e70 <__malloc_unlock>
 80066f8:	f104 000b 	add.w	r0, r4, #11
 80066fc:	1d23      	adds	r3, r4, #4
 80066fe:	f020 0007 	bic.w	r0, r0, #7
 8006702:	1ac2      	subs	r2, r0, r3
 8006704:	d0cc      	beq.n	80066a0 <_malloc_r+0x20>
 8006706:	1a1b      	subs	r3, r3, r0
 8006708:	50a3      	str	r3, [r4, r2]
 800670a:	e7c9      	b.n	80066a0 <_malloc_r+0x20>
 800670c:	4622      	mov	r2, r4
 800670e:	6864      	ldr	r4, [r4, #4]
 8006710:	e7cc      	b.n	80066ac <_malloc_r+0x2c>
 8006712:	1cc4      	adds	r4, r0, #3
 8006714:	f024 0403 	bic.w	r4, r4, #3
 8006718:	42a0      	cmp	r0, r4
 800671a:	d0e3      	beq.n	80066e4 <_malloc_r+0x64>
 800671c:	1a21      	subs	r1, r4, r0
 800671e:	4630      	mov	r0, r6
 8006720:	f000 faf6 	bl	8006d10 <_sbrk_r>
 8006724:	3001      	adds	r0, #1
 8006726:	d1dd      	bne.n	80066e4 <_malloc_r+0x64>
 8006728:	e7cf      	b.n	80066ca <_malloc_r+0x4a>
 800672a:	bf00      	nop
 800672c:	20000094 	.word	0x20000094
 8006730:	20000098 	.word	0x20000098

08006734 <__sfputc_r>:
 8006734:	6893      	ldr	r3, [r2, #8]
 8006736:	3b01      	subs	r3, #1
 8006738:	2b00      	cmp	r3, #0
 800673a:	b410      	push	{r4}
 800673c:	6093      	str	r3, [r2, #8]
 800673e:	da08      	bge.n	8006752 <__sfputc_r+0x1e>
 8006740:	6994      	ldr	r4, [r2, #24]
 8006742:	42a3      	cmp	r3, r4
 8006744:	db01      	blt.n	800674a <__sfputc_r+0x16>
 8006746:	290a      	cmp	r1, #10
 8006748:	d103      	bne.n	8006752 <__sfputc_r+0x1e>
 800674a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800674e:	f7ff bc69 	b.w	8006024 <__swbuf_r>
 8006752:	6813      	ldr	r3, [r2, #0]
 8006754:	1c58      	adds	r0, r3, #1
 8006756:	6010      	str	r0, [r2, #0]
 8006758:	7019      	strb	r1, [r3, #0]
 800675a:	4608      	mov	r0, r1
 800675c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006760:	4770      	bx	lr

08006762 <__sfputs_r>:
 8006762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006764:	4606      	mov	r6, r0
 8006766:	460f      	mov	r7, r1
 8006768:	4614      	mov	r4, r2
 800676a:	18d5      	adds	r5, r2, r3
 800676c:	42ac      	cmp	r4, r5
 800676e:	d101      	bne.n	8006774 <__sfputs_r+0x12>
 8006770:	2000      	movs	r0, #0
 8006772:	e007      	b.n	8006784 <__sfputs_r+0x22>
 8006774:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006778:	463a      	mov	r2, r7
 800677a:	4630      	mov	r0, r6
 800677c:	f7ff ffda 	bl	8006734 <__sfputc_r>
 8006780:	1c43      	adds	r3, r0, #1
 8006782:	d1f3      	bne.n	800676c <__sfputs_r+0xa>
 8006784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006788 <_vfiprintf_r>:
 8006788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800678c:	460d      	mov	r5, r1
 800678e:	b09d      	sub	sp, #116	; 0x74
 8006790:	4614      	mov	r4, r2
 8006792:	4698      	mov	r8, r3
 8006794:	4606      	mov	r6, r0
 8006796:	b118      	cbz	r0, 80067a0 <_vfiprintf_r+0x18>
 8006798:	6983      	ldr	r3, [r0, #24]
 800679a:	b90b      	cbnz	r3, 80067a0 <_vfiprintf_r+0x18>
 800679c:	f7ff fe1c 	bl	80063d8 <__sinit>
 80067a0:	4b89      	ldr	r3, [pc, #548]	; (80069c8 <_vfiprintf_r+0x240>)
 80067a2:	429d      	cmp	r5, r3
 80067a4:	d11b      	bne.n	80067de <_vfiprintf_r+0x56>
 80067a6:	6875      	ldr	r5, [r6, #4]
 80067a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067aa:	07d9      	lsls	r1, r3, #31
 80067ac:	d405      	bmi.n	80067ba <_vfiprintf_r+0x32>
 80067ae:	89ab      	ldrh	r3, [r5, #12]
 80067b0:	059a      	lsls	r2, r3, #22
 80067b2:	d402      	bmi.n	80067ba <_vfiprintf_r+0x32>
 80067b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067b6:	f7ff fead 	bl	8006514 <__retarget_lock_acquire_recursive>
 80067ba:	89ab      	ldrh	r3, [r5, #12]
 80067bc:	071b      	lsls	r3, r3, #28
 80067be:	d501      	bpl.n	80067c4 <_vfiprintf_r+0x3c>
 80067c0:	692b      	ldr	r3, [r5, #16]
 80067c2:	b9eb      	cbnz	r3, 8006800 <_vfiprintf_r+0x78>
 80067c4:	4629      	mov	r1, r5
 80067c6:	4630      	mov	r0, r6
 80067c8:	f7ff fc7e 	bl	80060c8 <__swsetup_r>
 80067cc:	b1c0      	cbz	r0, 8006800 <_vfiprintf_r+0x78>
 80067ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067d0:	07dc      	lsls	r4, r3, #31
 80067d2:	d50e      	bpl.n	80067f2 <_vfiprintf_r+0x6a>
 80067d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067d8:	b01d      	add	sp, #116	; 0x74
 80067da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067de:	4b7b      	ldr	r3, [pc, #492]	; (80069cc <_vfiprintf_r+0x244>)
 80067e0:	429d      	cmp	r5, r3
 80067e2:	d101      	bne.n	80067e8 <_vfiprintf_r+0x60>
 80067e4:	68b5      	ldr	r5, [r6, #8]
 80067e6:	e7df      	b.n	80067a8 <_vfiprintf_r+0x20>
 80067e8:	4b79      	ldr	r3, [pc, #484]	; (80069d0 <_vfiprintf_r+0x248>)
 80067ea:	429d      	cmp	r5, r3
 80067ec:	bf08      	it	eq
 80067ee:	68f5      	ldreq	r5, [r6, #12]
 80067f0:	e7da      	b.n	80067a8 <_vfiprintf_r+0x20>
 80067f2:	89ab      	ldrh	r3, [r5, #12]
 80067f4:	0598      	lsls	r0, r3, #22
 80067f6:	d4ed      	bmi.n	80067d4 <_vfiprintf_r+0x4c>
 80067f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067fa:	f7ff fe8c 	bl	8006516 <__retarget_lock_release_recursive>
 80067fe:	e7e9      	b.n	80067d4 <_vfiprintf_r+0x4c>
 8006800:	2300      	movs	r3, #0
 8006802:	9309      	str	r3, [sp, #36]	; 0x24
 8006804:	2320      	movs	r3, #32
 8006806:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800680a:	f8cd 800c 	str.w	r8, [sp, #12]
 800680e:	2330      	movs	r3, #48	; 0x30
 8006810:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80069d4 <_vfiprintf_r+0x24c>
 8006814:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006818:	f04f 0901 	mov.w	r9, #1
 800681c:	4623      	mov	r3, r4
 800681e:	469a      	mov	sl, r3
 8006820:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006824:	b10a      	cbz	r2, 800682a <_vfiprintf_r+0xa2>
 8006826:	2a25      	cmp	r2, #37	; 0x25
 8006828:	d1f9      	bne.n	800681e <_vfiprintf_r+0x96>
 800682a:	ebba 0b04 	subs.w	fp, sl, r4
 800682e:	d00b      	beq.n	8006848 <_vfiprintf_r+0xc0>
 8006830:	465b      	mov	r3, fp
 8006832:	4622      	mov	r2, r4
 8006834:	4629      	mov	r1, r5
 8006836:	4630      	mov	r0, r6
 8006838:	f7ff ff93 	bl	8006762 <__sfputs_r>
 800683c:	3001      	adds	r0, #1
 800683e:	f000 80aa 	beq.w	8006996 <_vfiprintf_r+0x20e>
 8006842:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006844:	445a      	add	r2, fp
 8006846:	9209      	str	r2, [sp, #36]	; 0x24
 8006848:	f89a 3000 	ldrb.w	r3, [sl]
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 80a2 	beq.w	8006996 <_vfiprintf_r+0x20e>
 8006852:	2300      	movs	r3, #0
 8006854:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006858:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800685c:	f10a 0a01 	add.w	sl, sl, #1
 8006860:	9304      	str	r3, [sp, #16]
 8006862:	9307      	str	r3, [sp, #28]
 8006864:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006868:	931a      	str	r3, [sp, #104]	; 0x68
 800686a:	4654      	mov	r4, sl
 800686c:	2205      	movs	r2, #5
 800686e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006872:	4858      	ldr	r0, [pc, #352]	; (80069d4 <_vfiprintf_r+0x24c>)
 8006874:	f7f9 fccc 	bl	8000210 <memchr>
 8006878:	9a04      	ldr	r2, [sp, #16]
 800687a:	b9d8      	cbnz	r0, 80068b4 <_vfiprintf_r+0x12c>
 800687c:	06d1      	lsls	r1, r2, #27
 800687e:	bf44      	itt	mi
 8006880:	2320      	movmi	r3, #32
 8006882:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006886:	0713      	lsls	r3, r2, #28
 8006888:	bf44      	itt	mi
 800688a:	232b      	movmi	r3, #43	; 0x2b
 800688c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006890:	f89a 3000 	ldrb.w	r3, [sl]
 8006894:	2b2a      	cmp	r3, #42	; 0x2a
 8006896:	d015      	beq.n	80068c4 <_vfiprintf_r+0x13c>
 8006898:	9a07      	ldr	r2, [sp, #28]
 800689a:	4654      	mov	r4, sl
 800689c:	2000      	movs	r0, #0
 800689e:	f04f 0c0a 	mov.w	ip, #10
 80068a2:	4621      	mov	r1, r4
 80068a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068a8:	3b30      	subs	r3, #48	; 0x30
 80068aa:	2b09      	cmp	r3, #9
 80068ac:	d94e      	bls.n	800694c <_vfiprintf_r+0x1c4>
 80068ae:	b1b0      	cbz	r0, 80068de <_vfiprintf_r+0x156>
 80068b0:	9207      	str	r2, [sp, #28]
 80068b2:	e014      	b.n	80068de <_vfiprintf_r+0x156>
 80068b4:	eba0 0308 	sub.w	r3, r0, r8
 80068b8:	fa09 f303 	lsl.w	r3, r9, r3
 80068bc:	4313      	orrs	r3, r2
 80068be:	9304      	str	r3, [sp, #16]
 80068c0:	46a2      	mov	sl, r4
 80068c2:	e7d2      	b.n	800686a <_vfiprintf_r+0xe2>
 80068c4:	9b03      	ldr	r3, [sp, #12]
 80068c6:	1d19      	adds	r1, r3, #4
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	9103      	str	r1, [sp, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	bfbb      	ittet	lt
 80068d0:	425b      	neglt	r3, r3
 80068d2:	f042 0202 	orrlt.w	r2, r2, #2
 80068d6:	9307      	strge	r3, [sp, #28]
 80068d8:	9307      	strlt	r3, [sp, #28]
 80068da:	bfb8      	it	lt
 80068dc:	9204      	strlt	r2, [sp, #16]
 80068de:	7823      	ldrb	r3, [r4, #0]
 80068e0:	2b2e      	cmp	r3, #46	; 0x2e
 80068e2:	d10c      	bne.n	80068fe <_vfiprintf_r+0x176>
 80068e4:	7863      	ldrb	r3, [r4, #1]
 80068e6:	2b2a      	cmp	r3, #42	; 0x2a
 80068e8:	d135      	bne.n	8006956 <_vfiprintf_r+0x1ce>
 80068ea:	9b03      	ldr	r3, [sp, #12]
 80068ec:	1d1a      	adds	r2, r3, #4
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	9203      	str	r2, [sp, #12]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	bfb8      	it	lt
 80068f6:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80068fa:	3402      	adds	r4, #2
 80068fc:	9305      	str	r3, [sp, #20]
 80068fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80069e4 <_vfiprintf_r+0x25c>
 8006902:	7821      	ldrb	r1, [r4, #0]
 8006904:	2203      	movs	r2, #3
 8006906:	4650      	mov	r0, sl
 8006908:	f7f9 fc82 	bl	8000210 <memchr>
 800690c:	b140      	cbz	r0, 8006920 <_vfiprintf_r+0x198>
 800690e:	2340      	movs	r3, #64	; 0x40
 8006910:	eba0 000a 	sub.w	r0, r0, sl
 8006914:	fa03 f000 	lsl.w	r0, r3, r0
 8006918:	9b04      	ldr	r3, [sp, #16]
 800691a:	4303      	orrs	r3, r0
 800691c:	3401      	adds	r4, #1
 800691e:	9304      	str	r3, [sp, #16]
 8006920:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006924:	482c      	ldr	r0, [pc, #176]	; (80069d8 <_vfiprintf_r+0x250>)
 8006926:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800692a:	2206      	movs	r2, #6
 800692c:	f7f9 fc70 	bl	8000210 <memchr>
 8006930:	2800      	cmp	r0, #0
 8006932:	d03f      	beq.n	80069b4 <_vfiprintf_r+0x22c>
 8006934:	4b29      	ldr	r3, [pc, #164]	; (80069dc <_vfiprintf_r+0x254>)
 8006936:	bb1b      	cbnz	r3, 8006980 <_vfiprintf_r+0x1f8>
 8006938:	9b03      	ldr	r3, [sp, #12]
 800693a:	3307      	adds	r3, #7
 800693c:	f023 0307 	bic.w	r3, r3, #7
 8006940:	3308      	adds	r3, #8
 8006942:	9303      	str	r3, [sp, #12]
 8006944:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006946:	443b      	add	r3, r7
 8006948:	9309      	str	r3, [sp, #36]	; 0x24
 800694a:	e767      	b.n	800681c <_vfiprintf_r+0x94>
 800694c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006950:	460c      	mov	r4, r1
 8006952:	2001      	movs	r0, #1
 8006954:	e7a5      	b.n	80068a2 <_vfiprintf_r+0x11a>
 8006956:	2300      	movs	r3, #0
 8006958:	3401      	adds	r4, #1
 800695a:	9305      	str	r3, [sp, #20]
 800695c:	4619      	mov	r1, r3
 800695e:	f04f 0c0a 	mov.w	ip, #10
 8006962:	4620      	mov	r0, r4
 8006964:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006968:	3a30      	subs	r2, #48	; 0x30
 800696a:	2a09      	cmp	r2, #9
 800696c:	d903      	bls.n	8006976 <_vfiprintf_r+0x1ee>
 800696e:	2b00      	cmp	r3, #0
 8006970:	d0c5      	beq.n	80068fe <_vfiprintf_r+0x176>
 8006972:	9105      	str	r1, [sp, #20]
 8006974:	e7c3      	b.n	80068fe <_vfiprintf_r+0x176>
 8006976:	fb0c 2101 	mla	r1, ip, r1, r2
 800697a:	4604      	mov	r4, r0
 800697c:	2301      	movs	r3, #1
 800697e:	e7f0      	b.n	8006962 <_vfiprintf_r+0x1da>
 8006980:	ab03      	add	r3, sp, #12
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	462a      	mov	r2, r5
 8006986:	4b16      	ldr	r3, [pc, #88]	; (80069e0 <_vfiprintf_r+0x258>)
 8006988:	a904      	add	r1, sp, #16
 800698a:	4630      	mov	r0, r6
 800698c:	f3af 8000 	nop.w
 8006990:	4607      	mov	r7, r0
 8006992:	1c78      	adds	r0, r7, #1
 8006994:	d1d6      	bne.n	8006944 <_vfiprintf_r+0x1bc>
 8006996:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006998:	07d9      	lsls	r1, r3, #31
 800699a:	d405      	bmi.n	80069a8 <_vfiprintf_r+0x220>
 800699c:	89ab      	ldrh	r3, [r5, #12]
 800699e:	059a      	lsls	r2, r3, #22
 80069a0:	d402      	bmi.n	80069a8 <_vfiprintf_r+0x220>
 80069a2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069a4:	f7ff fdb7 	bl	8006516 <__retarget_lock_release_recursive>
 80069a8:	89ab      	ldrh	r3, [r5, #12]
 80069aa:	065b      	lsls	r3, r3, #25
 80069ac:	f53f af12 	bmi.w	80067d4 <_vfiprintf_r+0x4c>
 80069b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069b2:	e711      	b.n	80067d8 <_vfiprintf_r+0x50>
 80069b4:	ab03      	add	r3, sp, #12
 80069b6:	9300      	str	r3, [sp, #0]
 80069b8:	462a      	mov	r2, r5
 80069ba:	4b09      	ldr	r3, [pc, #36]	; (80069e0 <_vfiprintf_r+0x258>)
 80069bc:	a904      	add	r1, sp, #16
 80069be:	4630      	mov	r0, r6
 80069c0:	f000 f880 	bl	8006ac4 <_printf_i>
 80069c4:	e7e4      	b.n	8006990 <_vfiprintf_r+0x208>
 80069c6:	bf00      	nop
 80069c8:	0800777c 	.word	0x0800777c
 80069cc:	0800779c 	.word	0x0800779c
 80069d0:	0800775c 	.word	0x0800775c
 80069d4:	080077bc 	.word	0x080077bc
 80069d8:	080077c6 	.word	0x080077c6
 80069dc:	00000000 	.word	0x00000000
 80069e0:	08006763 	.word	0x08006763
 80069e4:	080077c2 	.word	0x080077c2

080069e8 <_printf_common>:
 80069e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069ec:	4616      	mov	r6, r2
 80069ee:	4699      	mov	r9, r3
 80069f0:	688a      	ldr	r2, [r1, #8]
 80069f2:	690b      	ldr	r3, [r1, #16]
 80069f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80069f8:	4293      	cmp	r3, r2
 80069fa:	bfb8      	it	lt
 80069fc:	4613      	movlt	r3, r2
 80069fe:	6033      	str	r3, [r6, #0]
 8006a00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a04:	4607      	mov	r7, r0
 8006a06:	460c      	mov	r4, r1
 8006a08:	b10a      	cbz	r2, 8006a0e <_printf_common+0x26>
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	6033      	str	r3, [r6, #0]
 8006a0e:	6823      	ldr	r3, [r4, #0]
 8006a10:	0699      	lsls	r1, r3, #26
 8006a12:	bf42      	ittt	mi
 8006a14:	6833      	ldrmi	r3, [r6, #0]
 8006a16:	3302      	addmi	r3, #2
 8006a18:	6033      	strmi	r3, [r6, #0]
 8006a1a:	6825      	ldr	r5, [r4, #0]
 8006a1c:	f015 0506 	ands.w	r5, r5, #6
 8006a20:	d106      	bne.n	8006a30 <_printf_common+0x48>
 8006a22:	f104 0a19 	add.w	sl, r4, #25
 8006a26:	68e3      	ldr	r3, [r4, #12]
 8006a28:	6832      	ldr	r2, [r6, #0]
 8006a2a:	1a9b      	subs	r3, r3, r2
 8006a2c:	42ab      	cmp	r3, r5
 8006a2e:	dc26      	bgt.n	8006a7e <_printf_common+0x96>
 8006a30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a34:	1e13      	subs	r3, r2, #0
 8006a36:	6822      	ldr	r2, [r4, #0]
 8006a38:	bf18      	it	ne
 8006a3a:	2301      	movne	r3, #1
 8006a3c:	0692      	lsls	r2, r2, #26
 8006a3e:	d42b      	bmi.n	8006a98 <_printf_common+0xb0>
 8006a40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006a44:	4649      	mov	r1, r9
 8006a46:	4638      	mov	r0, r7
 8006a48:	47c0      	blx	r8
 8006a4a:	3001      	adds	r0, #1
 8006a4c:	d01e      	beq.n	8006a8c <_printf_common+0xa4>
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	68e5      	ldr	r5, [r4, #12]
 8006a52:	6832      	ldr	r2, [r6, #0]
 8006a54:	f003 0306 	and.w	r3, r3, #6
 8006a58:	2b04      	cmp	r3, #4
 8006a5a:	bf08      	it	eq
 8006a5c:	1aad      	subeq	r5, r5, r2
 8006a5e:	68a3      	ldr	r3, [r4, #8]
 8006a60:	6922      	ldr	r2, [r4, #16]
 8006a62:	bf0c      	ite	eq
 8006a64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a68:	2500      	movne	r5, #0
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	bfc4      	itt	gt
 8006a6e:	1a9b      	subgt	r3, r3, r2
 8006a70:	18ed      	addgt	r5, r5, r3
 8006a72:	2600      	movs	r6, #0
 8006a74:	341a      	adds	r4, #26
 8006a76:	42b5      	cmp	r5, r6
 8006a78:	d11a      	bne.n	8006ab0 <_printf_common+0xc8>
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	e008      	b.n	8006a90 <_printf_common+0xa8>
 8006a7e:	2301      	movs	r3, #1
 8006a80:	4652      	mov	r2, sl
 8006a82:	4649      	mov	r1, r9
 8006a84:	4638      	mov	r0, r7
 8006a86:	47c0      	blx	r8
 8006a88:	3001      	adds	r0, #1
 8006a8a:	d103      	bne.n	8006a94 <_printf_common+0xac>
 8006a8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a94:	3501      	adds	r5, #1
 8006a96:	e7c6      	b.n	8006a26 <_printf_common+0x3e>
 8006a98:	18e1      	adds	r1, r4, r3
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	2030      	movs	r0, #48	; 0x30
 8006a9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006aa2:	4422      	add	r2, r4
 8006aa4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006aa8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006aac:	3302      	adds	r3, #2
 8006aae:	e7c7      	b.n	8006a40 <_printf_common+0x58>
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	4622      	mov	r2, r4
 8006ab4:	4649      	mov	r1, r9
 8006ab6:	4638      	mov	r0, r7
 8006ab8:	47c0      	blx	r8
 8006aba:	3001      	adds	r0, #1
 8006abc:	d0e6      	beq.n	8006a8c <_printf_common+0xa4>
 8006abe:	3601      	adds	r6, #1
 8006ac0:	e7d9      	b.n	8006a76 <_printf_common+0x8e>
	...

08006ac4 <_printf_i>:
 8006ac4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac8:	460c      	mov	r4, r1
 8006aca:	4691      	mov	r9, r2
 8006acc:	7e27      	ldrb	r7, [r4, #24]
 8006ace:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ad0:	2f78      	cmp	r7, #120	; 0x78
 8006ad2:	4680      	mov	r8, r0
 8006ad4:	469a      	mov	sl, r3
 8006ad6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ada:	d807      	bhi.n	8006aec <_printf_i+0x28>
 8006adc:	2f62      	cmp	r7, #98	; 0x62
 8006ade:	d80a      	bhi.n	8006af6 <_printf_i+0x32>
 8006ae0:	2f00      	cmp	r7, #0
 8006ae2:	f000 80d8 	beq.w	8006c96 <_printf_i+0x1d2>
 8006ae6:	2f58      	cmp	r7, #88	; 0x58
 8006ae8:	f000 80a3 	beq.w	8006c32 <_printf_i+0x16e>
 8006aec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006af0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006af4:	e03a      	b.n	8006b6c <_printf_i+0xa8>
 8006af6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006afa:	2b15      	cmp	r3, #21
 8006afc:	d8f6      	bhi.n	8006aec <_printf_i+0x28>
 8006afe:	a001      	add	r0, pc, #4	; (adr r0, 8006b04 <_printf_i+0x40>)
 8006b00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006b04:	08006b5d 	.word	0x08006b5d
 8006b08:	08006b71 	.word	0x08006b71
 8006b0c:	08006aed 	.word	0x08006aed
 8006b10:	08006aed 	.word	0x08006aed
 8006b14:	08006aed 	.word	0x08006aed
 8006b18:	08006aed 	.word	0x08006aed
 8006b1c:	08006b71 	.word	0x08006b71
 8006b20:	08006aed 	.word	0x08006aed
 8006b24:	08006aed 	.word	0x08006aed
 8006b28:	08006aed 	.word	0x08006aed
 8006b2c:	08006aed 	.word	0x08006aed
 8006b30:	08006c7d 	.word	0x08006c7d
 8006b34:	08006ba1 	.word	0x08006ba1
 8006b38:	08006c5f 	.word	0x08006c5f
 8006b3c:	08006aed 	.word	0x08006aed
 8006b40:	08006aed 	.word	0x08006aed
 8006b44:	08006c9f 	.word	0x08006c9f
 8006b48:	08006aed 	.word	0x08006aed
 8006b4c:	08006ba1 	.word	0x08006ba1
 8006b50:	08006aed 	.word	0x08006aed
 8006b54:	08006aed 	.word	0x08006aed
 8006b58:	08006c67 	.word	0x08006c67
 8006b5c:	680b      	ldr	r3, [r1, #0]
 8006b5e:	1d1a      	adds	r2, r3, #4
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	600a      	str	r2, [r1, #0]
 8006b64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e0a3      	b.n	8006cb8 <_printf_i+0x1f4>
 8006b70:	6825      	ldr	r5, [r4, #0]
 8006b72:	6808      	ldr	r0, [r1, #0]
 8006b74:	062e      	lsls	r6, r5, #24
 8006b76:	f100 0304 	add.w	r3, r0, #4
 8006b7a:	d50a      	bpl.n	8006b92 <_printf_i+0xce>
 8006b7c:	6805      	ldr	r5, [r0, #0]
 8006b7e:	600b      	str	r3, [r1, #0]
 8006b80:	2d00      	cmp	r5, #0
 8006b82:	da03      	bge.n	8006b8c <_printf_i+0xc8>
 8006b84:	232d      	movs	r3, #45	; 0x2d
 8006b86:	426d      	negs	r5, r5
 8006b88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b8c:	485e      	ldr	r0, [pc, #376]	; (8006d08 <_printf_i+0x244>)
 8006b8e:	230a      	movs	r3, #10
 8006b90:	e019      	b.n	8006bc6 <_printf_i+0x102>
 8006b92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006b96:	6805      	ldr	r5, [r0, #0]
 8006b98:	600b      	str	r3, [r1, #0]
 8006b9a:	bf18      	it	ne
 8006b9c:	b22d      	sxthne	r5, r5
 8006b9e:	e7ef      	b.n	8006b80 <_printf_i+0xbc>
 8006ba0:	680b      	ldr	r3, [r1, #0]
 8006ba2:	6825      	ldr	r5, [r4, #0]
 8006ba4:	1d18      	adds	r0, r3, #4
 8006ba6:	6008      	str	r0, [r1, #0]
 8006ba8:	0628      	lsls	r0, r5, #24
 8006baa:	d501      	bpl.n	8006bb0 <_printf_i+0xec>
 8006bac:	681d      	ldr	r5, [r3, #0]
 8006bae:	e002      	b.n	8006bb6 <_printf_i+0xf2>
 8006bb0:	0669      	lsls	r1, r5, #25
 8006bb2:	d5fb      	bpl.n	8006bac <_printf_i+0xe8>
 8006bb4:	881d      	ldrh	r5, [r3, #0]
 8006bb6:	4854      	ldr	r0, [pc, #336]	; (8006d08 <_printf_i+0x244>)
 8006bb8:	2f6f      	cmp	r7, #111	; 0x6f
 8006bba:	bf0c      	ite	eq
 8006bbc:	2308      	moveq	r3, #8
 8006bbe:	230a      	movne	r3, #10
 8006bc0:	2100      	movs	r1, #0
 8006bc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006bc6:	6866      	ldr	r6, [r4, #4]
 8006bc8:	60a6      	str	r6, [r4, #8]
 8006bca:	2e00      	cmp	r6, #0
 8006bcc:	bfa2      	ittt	ge
 8006bce:	6821      	ldrge	r1, [r4, #0]
 8006bd0:	f021 0104 	bicge.w	r1, r1, #4
 8006bd4:	6021      	strge	r1, [r4, #0]
 8006bd6:	b90d      	cbnz	r5, 8006bdc <_printf_i+0x118>
 8006bd8:	2e00      	cmp	r6, #0
 8006bda:	d04d      	beq.n	8006c78 <_printf_i+0x1b4>
 8006bdc:	4616      	mov	r6, r2
 8006bde:	fbb5 f1f3 	udiv	r1, r5, r3
 8006be2:	fb03 5711 	mls	r7, r3, r1, r5
 8006be6:	5dc7      	ldrb	r7, [r0, r7]
 8006be8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bec:	462f      	mov	r7, r5
 8006bee:	42bb      	cmp	r3, r7
 8006bf0:	460d      	mov	r5, r1
 8006bf2:	d9f4      	bls.n	8006bde <_printf_i+0x11a>
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d10b      	bne.n	8006c10 <_printf_i+0x14c>
 8006bf8:	6823      	ldr	r3, [r4, #0]
 8006bfa:	07df      	lsls	r7, r3, #31
 8006bfc:	d508      	bpl.n	8006c10 <_printf_i+0x14c>
 8006bfe:	6923      	ldr	r3, [r4, #16]
 8006c00:	6861      	ldr	r1, [r4, #4]
 8006c02:	4299      	cmp	r1, r3
 8006c04:	bfde      	ittt	le
 8006c06:	2330      	movle	r3, #48	; 0x30
 8006c08:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c0c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8006c10:	1b92      	subs	r2, r2, r6
 8006c12:	6122      	str	r2, [r4, #16]
 8006c14:	f8cd a000 	str.w	sl, [sp]
 8006c18:	464b      	mov	r3, r9
 8006c1a:	aa03      	add	r2, sp, #12
 8006c1c:	4621      	mov	r1, r4
 8006c1e:	4640      	mov	r0, r8
 8006c20:	f7ff fee2 	bl	80069e8 <_printf_common>
 8006c24:	3001      	adds	r0, #1
 8006c26:	d14c      	bne.n	8006cc2 <_printf_i+0x1fe>
 8006c28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c2c:	b004      	add	sp, #16
 8006c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c32:	4835      	ldr	r0, [pc, #212]	; (8006d08 <_printf_i+0x244>)
 8006c34:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006c38:	6823      	ldr	r3, [r4, #0]
 8006c3a:	680e      	ldr	r6, [r1, #0]
 8006c3c:	061f      	lsls	r7, r3, #24
 8006c3e:	f856 5b04 	ldr.w	r5, [r6], #4
 8006c42:	600e      	str	r6, [r1, #0]
 8006c44:	d514      	bpl.n	8006c70 <_printf_i+0x1ac>
 8006c46:	07d9      	lsls	r1, r3, #31
 8006c48:	bf44      	itt	mi
 8006c4a:	f043 0320 	orrmi.w	r3, r3, #32
 8006c4e:	6023      	strmi	r3, [r4, #0]
 8006c50:	b91d      	cbnz	r5, 8006c5a <_printf_i+0x196>
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	f023 0320 	bic.w	r3, r3, #32
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	2310      	movs	r3, #16
 8006c5c:	e7b0      	b.n	8006bc0 <_printf_i+0xfc>
 8006c5e:	6823      	ldr	r3, [r4, #0]
 8006c60:	f043 0320 	orr.w	r3, r3, #32
 8006c64:	6023      	str	r3, [r4, #0]
 8006c66:	2378      	movs	r3, #120	; 0x78
 8006c68:	4828      	ldr	r0, [pc, #160]	; (8006d0c <_printf_i+0x248>)
 8006c6a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006c6e:	e7e3      	b.n	8006c38 <_printf_i+0x174>
 8006c70:	065e      	lsls	r6, r3, #25
 8006c72:	bf48      	it	mi
 8006c74:	b2ad      	uxthmi	r5, r5
 8006c76:	e7e6      	b.n	8006c46 <_printf_i+0x182>
 8006c78:	4616      	mov	r6, r2
 8006c7a:	e7bb      	b.n	8006bf4 <_printf_i+0x130>
 8006c7c:	680b      	ldr	r3, [r1, #0]
 8006c7e:	6826      	ldr	r6, [r4, #0]
 8006c80:	6960      	ldr	r0, [r4, #20]
 8006c82:	1d1d      	adds	r5, r3, #4
 8006c84:	600d      	str	r5, [r1, #0]
 8006c86:	0635      	lsls	r5, r6, #24
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	d501      	bpl.n	8006c90 <_printf_i+0x1cc>
 8006c8c:	6018      	str	r0, [r3, #0]
 8006c8e:	e002      	b.n	8006c96 <_printf_i+0x1d2>
 8006c90:	0671      	lsls	r1, r6, #25
 8006c92:	d5fb      	bpl.n	8006c8c <_printf_i+0x1c8>
 8006c94:	8018      	strh	r0, [r3, #0]
 8006c96:	2300      	movs	r3, #0
 8006c98:	6123      	str	r3, [r4, #16]
 8006c9a:	4616      	mov	r6, r2
 8006c9c:	e7ba      	b.n	8006c14 <_printf_i+0x150>
 8006c9e:	680b      	ldr	r3, [r1, #0]
 8006ca0:	1d1a      	adds	r2, r3, #4
 8006ca2:	600a      	str	r2, [r1, #0]
 8006ca4:	681e      	ldr	r6, [r3, #0]
 8006ca6:	6862      	ldr	r2, [r4, #4]
 8006ca8:	2100      	movs	r1, #0
 8006caa:	4630      	mov	r0, r6
 8006cac:	f7f9 fab0 	bl	8000210 <memchr>
 8006cb0:	b108      	cbz	r0, 8006cb6 <_printf_i+0x1f2>
 8006cb2:	1b80      	subs	r0, r0, r6
 8006cb4:	6060      	str	r0, [r4, #4]
 8006cb6:	6863      	ldr	r3, [r4, #4]
 8006cb8:	6123      	str	r3, [r4, #16]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cc0:	e7a8      	b.n	8006c14 <_printf_i+0x150>
 8006cc2:	6923      	ldr	r3, [r4, #16]
 8006cc4:	4632      	mov	r2, r6
 8006cc6:	4649      	mov	r1, r9
 8006cc8:	4640      	mov	r0, r8
 8006cca:	47d0      	blx	sl
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d0ab      	beq.n	8006c28 <_printf_i+0x164>
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	079b      	lsls	r3, r3, #30
 8006cd4:	d413      	bmi.n	8006cfe <_printf_i+0x23a>
 8006cd6:	68e0      	ldr	r0, [r4, #12]
 8006cd8:	9b03      	ldr	r3, [sp, #12]
 8006cda:	4298      	cmp	r0, r3
 8006cdc:	bfb8      	it	lt
 8006cde:	4618      	movlt	r0, r3
 8006ce0:	e7a4      	b.n	8006c2c <_printf_i+0x168>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	4632      	mov	r2, r6
 8006ce6:	4649      	mov	r1, r9
 8006ce8:	4640      	mov	r0, r8
 8006cea:	47d0      	blx	sl
 8006cec:	3001      	adds	r0, #1
 8006cee:	d09b      	beq.n	8006c28 <_printf_i+0x164>
 8006cf0:	3501      	adds	r5, #1
 8006cf2:	68e3      	ldr	r3, [r4, #12]
 8006cf4:	9903      	ldr	r1, [sp, #12]
 8006cf6:	1a5b      	subs	r3, r3, r1
 8006cf8:	42ab      	cmp	r3, r5
 8006cfa:	dcf2      	bgt.n	8006ce2 <_printf_i+0x21e>
 8006cfc:	e7eb      	b.n	8006cd6 <_printf_i+0x212>
 8006cfe:	2500      	movs	r5, #0
 8006d00:	f104 0619 	add.w	r6, r4, #25
 8006d04:	e7f5      	b.n	8006cf2 <_printf_i+0x22e>
 8006d06:	bf00      	nop
 8006d08:	080077cd 	.word	0x080077cd
 8006d0c:	080077de 	.word	0x080077de

08006d10 <_sbrk_r>:
 8006d10:	b538      	push	{r3, r4, r5, lr}
 8006d12:	4d06      	ldr	r5, [pc, #24]	; (8006d2c <_sbrk_r+0x1c>)
 8006d14:	2300      	movs	r3, #0
 8006d16:	4604      	mov	r4, r0
 8006d18:	4608      	mov	r0, r1
 8006d1a:	602b      	str	r3, [r5, #0]
 8006d1c:	f7fb fc94 	bl	8002648 <_sbrk>
 8006d20:	1c43      	adds	r3, r0, #1
 8006d22:	d102      	bne.n	8006d2a <_sbrk_r+0x1a>
 8006d24:	682b      	ldr	r3, [r5, #0]
 8006d26:	b103      	cbz	r3, 8006d2a <_sbrk_r+0x1a>
 8006d28:	6023      	str	r3, [r4, #0]
 8006d2a:	bd38      	pop	{r3, r4, r5, pc}
 8006d2c:	2000027c 	.word	0x2000027c

08006d30 <__sread>:
 8006d30:	b510      	push	{r4, lr}
 8006d32:	460c      	mov	r4, r1
 8006d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d38:	f000 f8a0 	bl	8006e7c <_read_r>
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	bfab      	itete	ge
 8006d40:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006d42:	89a3      	ldrhlt	r3, [r4, #12]
 8006d44:	181b      	addge	r3, r3, r0
 8006d46:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006d4a:	bfac      	ite	ge
 8006d4c:	6563      	strge	r3, [r4, #84]	; 0x54
 8006d4e:	81a3      	strhlt	r3, [r4, #12]
 8006d50:	bd10      	pop	{r4, pc}

08006d52 <__swrite>:
 8006d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d56:	461f      	mov	r7, r3
 8006d58:	898b      	ldrh	r3, [r1, #12]
 8006d5a:	05db      	lsls	r3, r3, #23
 8006d5c:	4605      	mov	r5, r0
 8006d5e:	460c      	mov	r4, r1
 8006d60:	4616      	mov	r6, r2
 8006d62:	d505      	bpl.n	8006d70 <__swrite+0x1e>
 8006d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d68:	2302      	movs	r3, #2
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f000 f868 	bl	8006e40 <_lseek_r>
 8006d70:	89a3      	ldrh	r3, [r4, #12]
 8006d72:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d76:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d7a:	81a3      	strh	r3, [r4, #12]
 8006d7c:	4632      	mov	r2, r6
 8006d7e:	463b      	mov	r3, r7
 8006d80:	4628      	mov	r0, r5
 8006d82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d86:	f000 b817 	b.w	8006db8 <_write_r>

08006d8a <__sseek>:
 8006d8a:	b510      	push	{r4, lr}
 8006d8c:	460c      	mov	r4, r1
 8006d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d92:	f000 f855 	bl	8006e40 <_lseek_r>
 8006d96:	1c43      	adds	r3, r0, #1
 8006d98:	89a3      	ldrh	r3, [r4, #12]
 8006d9a:	bf15      	itete	ne
 8006d9c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006d9e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006da2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006da6:	81a3      	strheq	r3, [r4, #12]
 8006da8:	bf18      	it	ne
 8006daa:	81a3      	strhne	r3, [r4, #12]
 8006dac:	bd10      	pop	{r4, pc}

08006dae <__sclose>:
 8006dae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db2:	f000 b813 	b.w	8006ddc <_close_r>
	...

08006db8 <_write_r>:
 8006db8:	b538      	push	{r3, r4, r5, lr}
 8006dba:	4d07      	ldr	r5, [pc, #28]	; (8006dd8 <_write_r+0x20>)
 8006dbc:	4604      	mov	r4, r0
 8006dbe:	4608      	mov	r0, r1
 8006dc0:	4611      	mov	r1, r2
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	602a      	str	r2, [r5, #0]
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f7fb fa22 	bl	8002210 <_write>
 8006dcc:	1c43      	adds	r3, r0, #1
 8006dce:	d102      	bne.n	8006dd6 <_write_r+0x1e>
 8006dd0:	682b      	ldr	r3, [r5, #0]
 8006dd2:	b103      	cbz	r3, 8006dd6 <_write_r+0x1e>
 8006dd4:	6023      	str	r3, [r4, #0]
 8006dd6:	bd38      	pop	{r3, r4, r5, pc}
 8006dd8:	2000027c 	.word	0x2000027c

08006ddc <_close_r>:
 8006ddc:	b538      	push	{r3, r4, r5, lr}
 8006dde:	4d06      	ldr	r5, [pc, #24]	; (8006df8 <_close_r+0x1c>)
 8006de0:	2300      	movs	r3, #0
 8006de2:	4604      	mov	r4, r0
 8006de4:	4608      	mov	r0, r1
 8006de6:	602b      	str	r3, [r5, #0]
 8006de8:	f7fb fbf9 	bl	80025de <_close>
 8006dec:	1c43      	adds	r3, r0, #1
 8006dee:	d102      	bne.n	8006df6 <_close_r+0x1a>
 8006df0:	682b      	ldr	r3, [r5, #0]
 8006df2:	b103      	cbz	r3, 8006df6 <_close_r+0x1a>
 8006df4:	6023      	str	r3, [r4, #0]
 8006df6:	bd38      	pop	{r3, r4, r5, pc}
 8006df8:	2000027c 	.word	0x2000027c

08006dfc <_fstat_r>:
 8006dfc:	b538      	push	{r3, r4, r5, lr}
 8006dfe:	4d07      	ldr	r5, [pc, #28]	; (8006e1c <_fstat_r+0x20>)
 8006e00:	2300      	movs	r3, #0
 8006e02:	4604      	mov	r4, r0
 8006e04:	4608      	mov	r0, r1
 8006e06:	4611      	mov	r1, r2
 8006e08:	602b      	str	r3, [r5, #0]
 8006e0a:	f7fb fbf4 	bl	80025f6 <_fstat>
 8006e0e:	1c43      	adds	r3, r0, #1
 8006e10:	d102      	bne.n	8006e18 <_fstat_r+0x1c>
 8006e12:	682b      	ldr	r3, [r5, #0]
 8006e14:	b103      	cbz	r3, 8006e18 <_fstat_r+0x1c>
 8006e16:	6023      	str	r3, [r4, #0]
 8006e18:	bd38      	pop	{r3, r4, r5, pc}
 8006e1a:	bf00      	nop
 8006e1c:	2000027c 	.word	0x2000027c

08006e20 <_isatty_r>:
 8006e20:	b538      	push	{r3, r4, r5, lr}
 8006e22:	4d06      	ldr	r5, [pc, #24]	; (8006e3c <_isatty_r+0x1c>)
 8006e24:	2300      	movs	r3, #0
 8006e26:	4604      	mov	r4, r0
 8006e28:	4608      	mov	r0, r1
 8006e2a:	602b      	str	r3, [r5, #0]
 8006e2c:	f7fb fbf3 	bl	8002616 <_isatty>
 8006e30:	1c43      	adds	r3, r0, #1
 8006e32:	d102      	bne.n	8006e3a <_isatty_r+0x1a>
 8006e34:	682b      	ldr	r3, [r5, #0]
 8006e36:	b103      	cbz	r3, 8006e3a <_isatty_r+0x1a>
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	bd38      	pop	{r3, r4, r5, pc}
 8006e3c:	2000027c 	.word	0x2000027c

08006e40 <_lseek_r>:
 8006e40:	b538      	push	{r3, r4, r5, lr}
 8006e42:	4d07      	ldr	r5, [pc, #28]	; (8006e60 <_lseek_r+0x20>)
 8006e44:	4604      	mov	r4, r0
 8006e46:	4608      	mov	r0, r1
 8006e48:	4611      	mov	r1, r2
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	602a      	str	r2, [r5, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	f7fb fbec 	bl	800262c <_lseek>
 8006e54:	1c43      	adds	r3, r0, #1
 8006e56:	d102      	bne.n	8006e5e <_lseek_r+0x1e>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	b103      	cbz	r3, 8006e5e <_lseek_r+0x1e>
 8006e5c:	6023      	str	r3, [r4, #0]
 8006e5e:	bd38      	pop	{r3, r4, r5, pc}
 8006e60:	2000027c 	.word	0x2000027c

08006e64 <__malloc_lock>:
 8006e64:	4801      	ldr	r0, [pc, #4]	; (8006e6c <__malloc_lock+0x8>)
 8006e66:	f7ff bb55 	b.w	8006514 <__retarget_lock_acquire_recursive>
 8006e6a:	bf00      	nop
 8006e6c:	20000274 	.word	0x20000274

08006e70 <__malloc_unlock>:
 8006e70:	4801      	ldr	r0, [pc, #4]	; (8006e78 <__malloc_unlock+0x8>)
 8006e72:	f7ff bb50 	b.w	8006516 <__retarget_lock_release_recursive>
 8006e76:	bf00      	nop
 8006e78:	20000274 	.word	0x20000274

08006e7c <_read_r>:
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	4d07      	ldr	r5, [pc, #28]	; (8006e9c <_read_r+0x20>)
 8006e80:	4604      	mov	r4, r0
 8006e82:	4608      	mov	r0, r1
 8006e84:	4611      	mov	r1, r2
 8006e86:	2200      	movs	r2, #0
 8006e88:	602a      	str	r2, [r5, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f7fb fb8a 	bl	80025a4 <_read>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	d102      	bne.n	8006e9a <_read_r+0x1e>
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	b103      	cbz	r3, 8006e9a <_read_r+0x1e>
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}
 8006e9c:	2000027c 	.word	0x2000027c

08006ea0 <atan2>:
 8006ea0:	f000 b85a 	b.w	8006f58 <__ieee754_atan2>

08006ea4 <sqrt>:
 8006ea4:	b538      	push	{r3, r4, r5, lr}
 8006ea6:	ed2d 8b02 	vpush	{d8}
 8006eaa:	ec55 4b10 	vmov	r4, r5, d0
 8006eae:	f000 f91d 	bl	80070ec <__ieee754_sqrt>
 8006eb2:	4b15      	ldr	r3, [pc, #84]	; (8006f08 <sqrt+0x64>)
 8006eb4:	eeb0 8a40 	vmov.f32	s16, s0
 8006eb8:	eef0 8a60 	vmov.f32	s17, s1
 8006ebc:	f993 3000 	ldrsb.w	r3, [r3]
 8006ec0:	3301      	adds	r3, #1
 8006ec2:	d019      	beq.n	8006ef8 <sqrt+0x54>
 8006ec4:	4622      	mov	r2, r4
 8006ec6:	462b      	mov	r3, r5
 8006ec8:	4620      	mov	r0, r4
 8006eca:	4629      	mov	r1, r5
 8006ecc:	f7f9 fe46 	bl	8000b5c <__aeabi_dcmpun>
 8006ed0:	b990      	cbnz	r0, 8006ef8 <sqrt+0x54>
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	4620      	mov	r0, r4
 8006ed8:	4629      	mov	r1, r5
 8006eda:	f7f9 fe17 	bl	8000b0c <__aeabi_dcmplt>
 8006ede:	b158      	cbz	r0, 8006ef8 <sqrt+0x54>
 8006ee0:	f7fe ffe0 	bl	8005ea4 <__errno>
 8006ee4:	2321      	movs	r3, #33	; 0x21
 8006ee6:	6003      	str	r3, [r0, #0]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	2300      	movs	r3, #0
 8006eec:	4610      	mov	r0, r2
 8006eee:	4619      	mov	r1, r3
 8006ef0:	f7f9 fcc4 	bl	800087c <__aeabi_ddiv>
 8006ef4:	ec41 0b18 	vmov	d8, r0, r1
 8006ef8:	eeb0 0a48 	vmov.f32	s0, s16
 8006efc:	eef0 0a68 	vmov.f32	s1, s17
 8006f00:	ecbd 8b02 	vpop	{d8}
 8006f04:	bd38      	pop	{r3, r4, r5, pc}
 8006f06:	bf00      	nop
 8006f08:	20000070 	.word	0x20000070

08006f0c <sqrtf>:
 8006f0c:	b508      	push	{r3, lr}
 8006f0e:	ed2d 8b02 	vpush	{d8}
 8006f12:	eeb0 8a40 	vmov.f32	s16, s0
 8006f16:	f000 f99d 	bl	8007254 <__ieee754_sqrtf>
 8006f1a:	4b0d      	ldr	r3, [pc, #52]	; (8006f50 <sqrtf+0x44>)
 8006f1c:	f993 3000 	ldrsb.w	r3, [r3]
 8006f20:	3301      	adds	r3, #1
 8006f22:	d011      	beq.n	8006f48 <sqrtf+0x3c>
 8006f24:	eeb4 8a48 	vcmp.f32	s16, s16
 8006f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f2c:	d60c      	bvs.n	8006f48 <sqrtf+0x3c>
 8006f2e:	eddf 8a09 	vldr	s17, [pc, #36]	; 8006f54 <sqrtf+0x48>
 8006f32:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006f36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f3a:	d505      	bpl.n	8006f48 <sqrtf+0x3c>
 8006f3c:	f7fe ffb2 	bl	8005ea4 <__errno>
 8006f40:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006f44:	2321      	movs	r3, #33	; 0x21
 8006f46:	6003      	str	r3, [r0, #0]
 8006f48:	ecbd 8b02 	vpop	{d8}
 8006f4c:	bd08      	pop	{r3, pc}
 8006f4e:	bf00      	nop
 8006f50:	20000070 	.word	0x20000070
 8006f54:	00000000 	.word	0x00000000

08006f58 <__ieee754_atan2>:
 8006f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f5c:	ec57 6b11 	vmov	r6, r7, d1
 8006f60:	4273      	negs	r3, r6
 8006f62:	f8df e184 	ldr.w	lr, [pc, #388]	; 80070e8 <__ieee754_atan2+0x190>
 8006f66:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8006f6a:	4333      	orrs	r3, r6
 8006f6c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8006f70:	4573      	cmp	r3, lr
 8006f72:	ec51 0b10 	vmov	r0, r1, d0
 8006f76:	ee11 8a10 	vmov	r8, s2
 8006f7a:	d80a      	bhi.n	8006f92 <__ieee754_atan2+0x3a>
 8006f7c:	4244      	negs	r4, r0
 8006f7e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006f82:	4304      	orrs	r4, r0
 8006f84:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8006f88:	4574      	cmp	r4, lr
 8006f8a:	ee10 9a10 	vmov	r9, s0
 8006f8e:	468c      	mov	ip, r1
 8006f90:	d907      	bls.n	8006fa2 <__ieee754_atan2+0x4a>
 8006f92:	4632      	mov	r2, r6
 8006f94:	463b      	mov	r3, r7
 8006f96:	f7f9 f991 	bl	80002bc <__adddf3>
 8006f9a:	ec41 0b10 	vmov	d0, r0, r1
 8006f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fa2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8006fa6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006faa:	4334      	orrs	r4, r6
 8006fac:	d103      	bne.n	8006fb6 <__ieee754_atan2+0x5e>
 8006fae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fb2:	f000 b955 	b.w	8007260 <atan>
 8006fb6:	17bc      	asrs	r4, r7, #30
 8006fb8:	f004 0402 	and.w	r4, r4, #2
 8006fbc:	ea53 0909 	orrs.w	r9, r3, r9
 8006fc0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8006fc4:	d107      	bne.n	8006fd6 <__ieee754_atan2+0x7e>
 8006fc6:	2c02      	cmp	r4, #2
 8006fc8:	d060      	beq.n	800708c <__ieee754_atan2+0x134>
 8006fca:	2c03      	cmp	r4, #3
 8006fcc:	d1e5      	bne.n	8006f9a <__ieee754_atan2+0x42>
 8006fce:	a142      	add	r1, pc, #264	; (adr r1, 80070d8 <__ieee754_atan2+0x180>)
 8006fd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fd4:	e7e1      	b.n	8006f9a <__ieee754_atan2+0x42>
 8006fd6:	ea52 0808 	orrs.w	r8, r2, r8
 8006fda:	d106      	bne.n	8006fea <__ieee754_atan2+0x92>
 8006fdc:	f1bc 0f00 	cmp.w	ip, #0
 8006fe0:	da5f      	bge.n	80070a2 <__ieee754_atan2+0x14a>
 8006fe2:	a13f      	add	r1, pc, #252	; (adr r1, 80070e0 <__ieee754_atan2+0x188>)
 8006fe4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fe8:	e7d7      	b.n	8006f9a <__ieee754_atan2+0x42>
 8006fea:	4572      	cmp	r2, lr
 8006fec:	d10f      	bne.n	800700e <__ieee754_atan2+0xb6>
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8006ff4:	d107      	bne.n	8007006 <__ieee754_atan2+0xae>
 8006ff6:	2c02      	cmp	r4, #2
 8006ff8:	d84c      	bhi.n	8007094 <__ieee754_atan2+0x13c>
 8006ffa:	4b35      	ldr	r3, [pc, #212]	; (80070d0 <__ieee754_atan2+0x178>)
 8006ffc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8007000:	e9d4 0100 	ldrd	r0, r1, [r4]
 8007004:	e7c9      	b.n	8006f9a <__ieee754_atan2+0x42>
 8007006:	2c02      	cmp	r4, #2
 8007008:	d848      	bhi.n	800709c <__ieee754_atan2+0x144>
 800700a:	4b32      	ldr	r3, [pc, #200]	; (80070d4 <__ieee754_atan2+0x17c>)
 800700c:	e7f6      	b.n	8006ffc <__ieee754_atan2+0xa4>
 800700e:	4573      	cmp	r3, lr
 8007010:	d0e4      	beq.n	8006fdc <__ieee754_atan2+0x84>
 8007012:	1a9b      	subs	r3, r3, r2
 8007014:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8007018:	ea4f 5223 	mov.w	r2, r3, asr #20
 800701c:	da1e      	bge.n	800705c <__ieee754_atan2+0x104>
 800701e:	2f00      	cmp	r7, #0
 8007020:	da01      	bge.n	8007026 <__ieee754_atan2+0xce>
 8007022:	323c      	adds	r2, #60	; 0x3c
 8007024:	db1e      	blt.n	8007064 <__ieee754_atan2+0x10c>
 8007026:	4632      	mov	r2, r6
 8007028:	463b      	mov	r3, r7
 800702a:	f7f9 fc27 	bl	800087c <__aeabi_ddiv>
 800702e:	ec41 0b10 	vmov	d0, r0, r1
 8007032:	f000 fab5 	bl	80075a0 <fabs>
 8007036:	f000 f913 	bl	8007260 <atan>
 800703a:	ec51 0b10 	vmov	r0, r1, d0
 800703e:	2c01      	cmp	r4, #1
 8007040:	d013      	beq.n	800706a <__ieee754_atan2+0x112>
 8007042:	2c02      	cmp	r4, #2
 8007044:	d015      	beq.n	8007072 <__ieee754_atan2+0x11a>
 8007046:	2c00      	cmp	r4, #0
 8007048:	d0a7      	beq.n	8006f9a <__ieee754_atan2+0x42>
 800704a:	a319      	add	r3, pc, #100	; (adr r3, 80070b0 <__ieee754_atan2+0x158>)
 800704c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007050:	f7f9 f932 	bl	80002b8 <__aeabi_dsub>
 8007054:	a318      	add	r3, pc, #96	; (adr r3, 80070b8 <__ieee754_atan2+0x160>)
 8007056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800705a:	e014      	b.n	8007086 <__ieee754_atan2+0x12e>
 800705c:	a118      	add	r1, pc, #96	; (adr r1, 80070c0 <__ieee754_atan2+0x168>)
 800705e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007062:	e7ec      	b.n	800703e <__ieee754_atan2+0xe6>
 8007064:	2000      	movs	r0, #0
 8007066:	2100      	movs	r1, #0
 8007068:	e7e9      	b.n	800703e <__ieee754_atan2+0xe6>
 800706a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800706e:	4619      	mov	r1, r3
 8007070:	e793      	b.n	8006f9a <__ieee754_atan2+0x42>
 8007072:	a30f      	add	r3, pc, #60	; (adr r3, 80070b0 <__ieee754_atan2+0x158>)
 8007074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007078:	f7f9 f91e 	bl	80002b8 <__aeabi_dsub>
 800707c:	4602      	mov	r2, r0
 800707e:	460b      	mov	r3, r1
 8007080:	a10d      	add	r1, pc, #52	; (adr r1, 80070b8 <__ieee754_atan2+0x160>)
 8007082:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007086:	f7f9 f917 	bl	80002b8 <__aeabi_dsub>
 800708a:	e786      	b.n	8006f9a <__ieee754_atan2+0x42>
 800708c:	a10a      	add	r1, pc, #40	; (adr r1, 80070b8 <__ieee754_atan2+0x160>)
 800708e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007092:	e782      	b.n	8006f9a <__ieee754_atan2+0x42>
 8007094:	a10c      	add	r1, pc, #48	; (adr r1, 80070c8 <__ieee754_atan2+0x170>)
 8007096:	e9d1 0100 	ldrd	r0, r1, [r1]
 800709a:	e77e      	b.n	8006f9a <__ieee754_atan2+0x42>
 800709c:	2000      	movs	r0, #0
 800709e:	2100      	movs	r1, #0
 80070a0:	e77b      	b.n	8006f9a <__ieee754_atan2+0x42>
 80070a2:	a107      	add	r1, pc, #28	; (adr r1, 80070c0 <__ieee754_atan2+0x168>)
 80070a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80070a8:	e777      	b.n	8006f9a <__ieee754_atan2+0x42>
 80070aa:	bf00      	nop
 80070ac:	f3af 8000 	nop.w
 80070b0:	33145c07 	.word	0x33145c07
 80070b4:	3ca1a626 	.word	0x3ca1a626
 80070b8:	54442d18 	.word	0x54442d18
 80070bc:	400921fb 	.word	0x400921fb
 80070c0:	54442d18 	.word	0x54442d18
 80070c4:	3ff921fb 	.word	0x3ff921fb
 80070c8:	54442d18 	.word	0x54442d18
 80070cc:	3fe921fb 	.word	0x3fe921fb
 80070d0:	080077f0 	.word	0x080077f0
 80070d4:	08007808 	.word	0x08007808
 80070d8:	54442d18 	.word	0x54442d18
 80070dc:	c00921fb 	.word	0xc00921fb
 80070e0:	54442d18 	.word	0x54442d18
 80070e4:	bff921fb 	.word	0xbff921fb
 80070e8:	7ff00000 	.word	0x7ff00000

080070ec <__ieee754_sqrt>:
 80070ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070f0:	ec55 4b10 	vmov	r4, r5, d0
 80070f4:	4e56      	ldr	r6, [pc, #344]	; (8007250 <__ieee754_sqrt+0x164>)
 80070f6:	43ae      	bics	r6, r5
 80070f8:	ee10 0a10 	vmov	r0, s0
 80070fc:	ee10 3a10 	vmov	r3, s0
 8007100:	4629      	mov	r1, r5
 8007102:	462a      	mov	r2, r5
 8007104:	d110      	bne.n	8007128 <__ieee754_sqrt+0x3c>
 8007106:	ee10 2a10 	vmov	r2, s0
 800710a:	462b      	mov	r3, r5
 800710c:	f7f9 fa8c 	bl	8000628 <__aeabi_dmul>
 8007110:	4602      	mov	r2, r0
 8007112:	460b      	mov	r3, r1
 8007114:	4620      	mov	r0, r4
 8007116:	4629      	mov	r1, r5
 8007118:	f7f9 f8d0 	bl	80002bc <__adddf3>
 800711c:	4604      	mov	r4, r0
 800711e:	460d      	mov	r5, r1
 8007120:	ec45 4b10 	vmov	d0, r4, r5
 8007124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007128:	2d00      	cmp	r5, #0
 800712a:	dc10      	bgt.n	800714e <__ieee754_sqrt+0x62>
 800712c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007130:	4330      	orrs	r0, r6
 8007132:	d0f5      	beq.n	8007120 <__ieee754_sqrt+0x34>
 8007134:	b15d      	cbz	r5, 800714e <__ieee754_sqrt+0x62>
 8007136:	ee10 2a10 	vmov	r2, s0
 800713a:	462b      	mov	r3, r5
 800713c:	ee10 0a10 	vmov	r0, s0
 8007140:	f7f9 f8ba 	bl	80002b8 <__aeabi_dsub>
 8007144:	4602      	mov	r2, r0
 8007146:	460b      	mov	r3, r1
 8007148:	f7f9 fb98 	bl	800087c <__aeabi_ddiv>
 800714c:	e7e6      	b.n	800711c <__ieee754_sqrt+0x30>
 800714e:	1509      	asrs	r1, r1, #20
 8007150:	d076      	beq.n	8007240 <__ieee754_sqrt+0x154>
 8007152:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007156:	07ce      	lsls	r6, r1, #31
 8007158:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800715c:	bf5e      	ittt	pl
 800715e:	0fda      	lsrpl	r2, r3, #31
 8007160:	005b      	lslpl	r3, r3, #1
 8007162:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007166:	0fda      	lsrs	r2, r3, #31
 8007168:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800716c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007170:	2000      	movs	r0, #0
 8007172:	106d      	asrs	r5, r5, #1
 8007174:	005b      	lsls	r3, r3, #1
 8007176:	f04f 0e16 	mov.w	lr, #22
 800717a:	4684      	mov	ip, r0
 800717c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007180:	eb0c 0401 	add.w	r4, ip, r1
 8007184:	4294      	cmp	r4, r2
 8007186:	bfde      	ittt	le
 8007188:	1b12      	suble	r2, r2, r4
 800718a:	eb04 0c01 	addle.w	ip, r4, r1
 800718e:	1840      	addle	r0, r0, r1
 8007190:	0052      	lsls	r2, r2, #1
 8007192:	f1be 0e01 	subs.w	lr, lr, #1
 8007196:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800719a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800719e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80071a2:	d1ed      	bne.n	8007180 <__ieee754_sqrt+0x94>
 80071a4:	4671      	mov	r1, lr
 80071a6:	2720      	movs	r7, #32
 80071a8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80071ac:	4562      	cmp	r2, ip
 80071ae:	eb04 060e 	add.w	r6, r4, lr
 80071b2:	dc02      	bgt.n	80071ba <__ieee754_sqrt+0xce>
 80071b4:	d113      	bne.n	80071de <__ieee754_sqrt+0xf2>
 80071b6:	429e      	cmp	r6, r3
 80071b8:	d811      	bhi.n	80071de <__ieee754_sqrt+0xf2>
 80071ba:	2e00      	cmp	r6, #0
 80071bc:	eb06 0e04 	add.w	lr, r6, r4
 80071c0:	da43      	bge.n	800724a <__ieee754_sqrt+0x15e>
 80071c2:	f1be 0f00 	cmp.w	lr, #0
 80071c6:	db40      	blt.n	800724a <__ieee754_sqrt+0x15e>
 80071c8:	f10c 0801 	add.w	r8, ip, #1
 80071cc:	eba2 020c 	sub.w	r2, r2, ip
 80071d0:	429e      	cmp	r6, r3
 80071d2:	bf88      	it	hi
 80071d4:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80071d8:	1b9b      	subs	r3, r3, r6
 80071da:	4421      	add	r1, r4
 80071dc:	46c4      	mov	ip, r8
 80071de:	0052      	lsls	r2, r2, #1
 80071e0:	3f01      	subs	r7, #1
 80071e2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80071e6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80071ea:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80071ee:	d1dd      	bne.n	80071ac <__ieee754_sqrt+0xc0>
 80071f0:	4313      	orrs	r3, r2
 80071f2:	d006      	beq.n	8007202 <__ieee754_sqrt+0x116>
 80071f4:	1c4c      	adds	r4, r1, #1
 80071f6:	bf13      	iteet	ne
 80071f8:	3101      	addne	r1, #1
 80071fa:	3001      	addeq	r0, #1
 80071fc:	4639      	moveq	r1, r7
 80071fe:	f021 0101 	bicne.w	r1, r1, #1
 8007202:	1043      	asrs	r3, r0, #1
 8007204:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007208:	0849      	lsrs	r1, r1, #1
 800720a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800720e:	07c2      	lsls	r2, r0, #31
 8007210:	bf48      	it	mi
 8007212:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007216:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800721a:	460c      	mov	r4, r1
 800721c:	463d      	mov	r5, r7
 800721e:	e77f      	b.n	8007120 <__ieee754_sqrt+0x34>
 8007220:	0ada      	lsrs	r2, r3, #11
 8007222:	3815      	subs	r0, #21
 8007224:	055b      	lsls	r3, r3, #21
 8007226:	2a00      	cmp	r2, #0
 8007228:	d0fa      	beq.n	8007220 <__ieee754_sqrt+0x134>
 800722a:	02d7      	lsls	r7, r2, #11
 800722c:	d50a      	bpl.n	8007244 <__ieee754_sqrt+0x158>
 800722e:	f1c1 0420 	rsb	r4, r1, #32
 8007232:	fa23 f404 	lsr.w	r4, r3, r4
 8007236:	1e4d      	subs	r5, r1, #1
 8007238:	408b      	lsls	r3, r1
 800723a:	4322      	orrs	r2, r4
 800723c:	1b41      	subs	r1, r0, r5
 800723e:	e788      	b.n	8007152 <__ieee754_sqrt+0x66>
 8007240:	4608      	mov	r0, r1
 8007242:	e7f0      	b.n	8007226 <__ieee754_sqrt+0x13a>
 8007244:	0052      	lsls	r2, r2, #1
 8007246:	3101      	adds	r1, #1
 8007248:	e7ef      	b.n	800722a <__ieee754_sqrt+0x13e>
 800724a:	46e0      	mov	r8, ip
 800724c:	e7be      	b.n	80071cc <__ieee754_sqrt+0xe0>
 800724e:	bf00      	nop
 8007250:	7ff00000 	.word	0x7ff00000

08007254 <__ieee754_sqrtf>:
 8007254:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007258:	4770      	bx	lr
 800725a:	0000      	movs	r0, r0
 800725c:	0000      	movs	r0, r0
	...

08007260 <atan>:
 8007260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007264:	ec55 4b10 	vmov	r4, r5, d0
 8007268:	4bc3      	ldr	r3, [pc, #780]	; (8007578 <atan+0x318>)
 800726a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800726e:	429e      	cmp	r6, r3
 8007270:	46ab      	mov	fp, r5
 8007272:	dd18      	ble.n	80072a6 <atan+0x46>
 8007274:	4bc1      	ldr	r3, [pc, #772]	; (800757c <atan+0x31c>)
 8007276:	429e      	cmp	r6, r3
 8007278:	dc01      	bgt.n	800727e <atan+0x1e>
 800727a:	d109      	bne.n	8007290 <atan+0x30>
 800727c:	b144      	cbz	r4, 8007290 <atan+0x30>
 800727e:	4622      	mov	r2, r4
 8007280:	462b      	mov	r3, r5
 8007282:	4620      	mov	r0, r4
 8007284:	4629      	mov	r1, r5
 8007286:	f7f9 f819 	bl	80002bc <__adddf3>
 800728a:	4604      	mov	r4, r0
 800728c:	460d      	mov	r5, r1
 800728e:	e006      	b.n	800729e <atan+0x3e>
 8007290:	f1bb 0f00 	cmp.w	fp, #0
 8007294:	f300 8131 	bgt.w	80074fa <atan+0x29a>
 8007298:	a59b      	add	r5, pc, #620	; (adr r5, 8007508 <atan+0x2a8>)
 800729a:	e9d5 4500 	ldrd	r4, r5, [r5]
 800729e:	ec45 4b10 	vmov	d0, r4, r5
 80072a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072a6:	4bb6      	ldr	r3, [pc, #728]	; (8007580 <atan+0x320>)
 80072a8:	429e      	cmp	r6, r3
 80072aa:	dc14      	bgt.n	80072d6 <atan+0x76>
 80072ac:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80072b0:	429e      	cmp	r6, r3
 80072b2:	dc0d      	bgt.n	80072d0 <atan+0x70>
 80072b4:	a396      	add	r3, pc, #600	; (adr r3, 8007510 <atan+0x2b0>)
 80072b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ba:	ee10 0a10 	vmov	r0, s0
 80072be:	4629      	mov	r1, r5
 80072c0:	f7f8 fffc 	bl	80002bc <__adddf3>
 80072c4:	4baf      	ldr	r3, [pc, #700]	; (8007584 <atan+0x324>)
 80072c6:	2200      	movs	r2, #0
 80072c8:	f7f9 fc3e 	bl	8000b48 <__aeabi_dcmpgt>
 80072cc:	2800      	cmp	r0, #0
 80072ce:	d1e6      	bne.n	800729e <atan+0x3e>
 80072d0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80072d4:	e02b      	b.n	800732e <atan+0xce>
 80072d6:	f000 f963 	bl	80075a0 <fabs>
 80072da:	4bab      	ldr	r3, [pc, #684]	; (8007588 <atan+0x328>)
 80072dc:	429e      	cmp	r6, r3
 80072de:	ec55 4b10 	vmov	r4, r5, d0
 80072e2:	f300 80bf 	bgt.w	8007464 <atan+0x204>
 80072e6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80072ea:	429e      	cmp	r6, r3
 80072ec:	f300 80a0 	bgt.w	8007430 <atan+0x1d0>
 80072f0:	ee10 2a10 	vmov	r2, s0
 80072f4:	ee10 0a10 	vmov	r0, s0
 80072f8:	462b      	mov	r3, r5
 80072fa:	4629      	mov	r1, r5
 80072fc:	f7f8 ffde 	bl	80002bc <__adddf3>
 8007300:	4ba0      	ldr	r3, [pc, #640]	; (8007584 <atan+0x324>)
 8007302:	2200      	movs	r2, #0
 8007304:	f7f8 ffd8 	bl	80002b8 <__aeabi_dsub>
 8007308:	2200      	movs	r2, #0
 800730a:	4606      	mov	r6, r0
 800730c:	460f      	mov	r7, r1
 800730e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007312:	4620      	mov	r0, r4
 8007314:	4629      	mov	r1, r5
 8007316:	f7f8 ffd1 	bl	80002bc <__adddf3>
 800731a:	4602      	mov	r2, r0
 800731c:	460b      	mov	r3, r1
 800731e:	4630      	mov	r0, r6
 8007320:	4639      	mov	r1, r7
 8007322:	f7f9 faab 	bl	800087c <__aeabi_ddiv>
 8007326:	f04f 0a00 	mov.w	sl, #0
 800732a:	4604      	mov	r4, r0
 800732c:	460d      	mov	r5, r1
 800732e:	4622      	mov	r2, r4
 8007330:	462b      	mov	r3, r5
 8007332:	4620      	mov	r0, r4
 8007334:	4629      	mov	r1, r5
 8007336:	f7f9 f977 	bl	8000628 <__aeabi_dmul>
 800733a:	4602      	mov	r2, r0
 800733c:	460b      	mov	r3, r1
 800733e:	4680      	mov	r8, r0
 8007340:	4689      	mov	r9, r1
 8007342:	f7f9 f971 	bl	8000628 <__aeabi_dmul>
 8007346:	a374      	add	r3, pc, #464	; (adr r3, 8007518 <atan+0x2b8>)
 8007348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800734c:	4606      	mov	r6, r0
 800734e:	460f      	mov	r7, r1
 8007350:	f7f9 f96a 	bl	8000628 <__aeabi_dmul>
 8007354:	a372      	add	r3, pc, #456	; (adr r3, 8007520 <atan+0x2c0>)
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	f7f8 ffaf 	bl	80002bc <__adddf3>
 800735e:	4632      	mov	r2, r6
 8007360:	463b      	mov	r3, r7
 8007362:	f7f9 f961 	bl	8000628 <__aeabi_dmul>
 8007366:	a370      	add	r3, pc, #448	; (adr r3, 8007528 <atan+0x2c8>)
 8007368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736c:	f7f8 ffa6 	bl	80002bc <__adddf3>
 8007370:	4632      	mov	r2, r6
 8007372:	463b      	mov	r3, r7
 8007374:	f7f9 f958 	bl	8000628 <__aeabi_dmul>
 8007378:	a36d      	add	r3, pc, #436	; (adr r3, 8007530 <atan+0x2d0>)
 800737a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800737e:	f7f8 ff9d 	bl	80002bc <__adddf3>
 8007382:	4632      	mov	r2, r6
 8007384:	463b      	mov	r3, r7
 8007386:	f7f9 f94f 	bl	8000628 <__aeabi_dmul>
 800738a:	a36b      	add	r3, pc, #428	; (adr r3, 8007538 <atan+0x2d8>)
 800738c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007390:	f7f8 ff94 	bl	80002bc <__adddf3>
 8007394:	4632      	mov	r2, r6
 8007396:	463b      	mov	r3, r7
 8007398:	f7f9 f946 	bl	8000628 <__aeabi_dmul>
 800739c:	a368      	add	r3, pc, #416	; (adr r3, 8007540 <atan+0x2e0>)
 800739e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a2:	f7f8 ff8b 	bl	80002bc <__adddf3>
 80073a6:	4642      	mov	r2, r8
 80073a8:	464b      	mov	r3, r9
 80073aa:	f7f9 f93d 	bl	8000628 <__aeabi_dmul>
 80073ae:	a366      	add	r3, pc, #408	; (adr r3, 8007548 <atan+0x2e8>)
 80073b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b4:	4680      	mov	r8, r0
 80073b6:	4689      	mov	r9, r1
 80073b8:	4630      	mov	r0, r6
 80073ba:	4639      	mov	r1, r7
 80073bc:	f7f9 f934 	bl	8000628 <__aeabi_dmul>
 80073c0:	a363      	add	r3, pc, #396	; (adr r3, 8007550 <atan+0x2f0>)
 80073c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c6:	f7f8 ff77 	bl	80002b8 <__aeabi_dsub>
 80073ca:	4632      	mov	r2, r6
 80073cc:	463b      	mov	r3, r7
 80073ce:	f7f9 f92b 	bl	8000628 <__aeabi_dmul>
 80073d2:	a361      	add	r3, pc, #388	; (adr r3, 8007558 <atan+0x2f8>)
 80073d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d8:	f7f8 ff6e 	bl	80002b8 <__aeabi_dsub>
 80073dc:	4632      	mov	r2, r6
 80073de:	463b      	mov	r3, r7
 80073e0:	f7f9 f922 	bl	8000628 <__aeabi_dmul>
 80073e4:	a35e      	add	r3, pc, #376	; (adr r3, 8007560 <atan+0x300>)
 80073e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ea:	f7f8 ff65 	bl	80002b8 <__aeabi_dsub>
 80073ee:	4632      	mov	r2, r6
 80073f0:	463b      	mov	r3, r7
 80073f2:	f7f9 f919 	bl	8000628 <__aeabi_dmul>
 80073f6:	a35c      	add	r3, pc, #368	; (adr r3, 8007568 <atan+0x308>)
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	f7f8 ff5c 	bl	80002b8 <__aeabi_dsub>
 8007400:	4632      	mov	r2, r6
 8007402:	463b      	mov	r3, r7
 8007404:	f7f9 f910 	bl	8000628 <__aeabi_dmul>
 8007408:	4602      	mov	r2, r0
 800740a:	460b      	mov	r3, r1
 800740c:	4640      	mov	r0, r8
 800740e:	4649      	mov	r1, r9
 8007410:	f7f8 ff54 	bl	80002bc <__adddf3>
 8007414:	4622      	mov	r2, r4
 8007416:	462b      	mov	r3, r5
 8007418:	f7f9 f906 	bl	8000628 <__aeabi_dmul>
 800741c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8007420:	4602      	mov	r2, r0
 8007422:	460b      	mov	r3, r1
 8007424:	d14b      	bne.n	80074be <atan+0x25e>
 8007426:	4620      	mov	r0, r4
 8007428:	4629      	mov	r1, r5
 800742a:	f7f8 ff45 	bl	80002b8 <__aeabi_dsub>
 800742e:	e72c      	b.n	800728a <atan+0x2a>
 8007430:	ee10 0a10 	vmov	r0, s0
 8007434:	4b53      	ldr	r3, [pc, #332]	; (8007584 <atan+0x324>)
 8007436:	2200      	movs	r2, #0
 8007438:	4629      	mov	r1, r5
 800743a:	f7f8 ff3d 	bl	80002b8 <__aeabi_dsub>
 800743e:	4b51      	ldr	r3, [pc, #324]	; (8007584 <atan+0x324>)
 8007440:	4606      	mov	r6, r0
 8007442:	460f      	mov	r7, r1
 8007444:	2200      	movs	r2, #0
 8007446:	4620      	mov	r0, r4
 8007448:	4629      	mov	r1, r5
 800744a:	f7f8 ff37 	bl	80002bc <__adddf3>
 800744e:	4602      	mov	r2, r0
 8007450:	460b      	mov	r3, r1
 8007452:	4630      	mov	r0, r6
 8007454:	4639      	mov	r1, r7
 8007456:	f7f9 fa11 	bl	800087c <__aeabi_ddiv>
 800745a:	f04f 0a01 	mov.w	sl, #1
 800745e:	4604      	mov	r4, r0
 8007460:	460d      	mov	r5, r1
 8007462:	e764      	b.n	800732e <atan+0xce>
 8007464:	4b49      	ldr	r3, [pc, #292]	; (800758c <atan+0x32c>)
 8007466:	429e      	cmp	r6, r3
 8007468:	da1d      	bge.n	80074a6 <atan+0x246>
 800746a:	ee10 0a10 	vmov	r0, s0
 800746e:	4b48      	ldr	r3, [pc, #288]	; (8007590 <atan+0x330>)
 8007470:	2200      	movs	r2, #0
 8007472:	4629      	mov	r1, r5
 8007474:	f7f8 ff20 	bl	80002b8 <__aeabi_dsub>
 8007478:	4b45      	ldr	r3, [pc, #276]	; (8007590 <atan+0x330>)
 800747a:	4606      	mov	r6, r0
 800747c:	460f      	mov	r7, r1
 800747e:	2200      	movs	r2, #0
 8007480:	4620      	mov	r0, r4
 8007482:	4629      	mov	r1, r5
 8007484:	f7f9 f8d0 	bl	8000628 <__aeabi_dmul>
 8007488:	4b3e      	ldr	r3, [pc, #248]	; (8007584 <atan+0x324>)
 800748a:	2200      	movs	r2, #0
 800748c:	f7f8 ff16 	bl	80002bc <__adddf3>
 8007490:	4602      	mov	r2, r0
 8007492:	460b      	mov	r3, r1
 8007494:	4630      	mov	r0, r6
 8007496:	4639      	mov	r1, r7
 8007498:	f7f9 f9f0 	bl	800087c <__aeabi_ddiv>
 800749c:	f04f 0a02 	mov.w	sl, #2
 80074a0:	4604      	mov	r4, r0
 80074a2:	460d      	mov	r5, r1
 80074a4:	e743      	b.n	800732e <atan+0xce>
 80074a6:	462b      	mov	r3, r5
 80074a8:	ee10 2a10 	vmov	r2, s0
 80074ac:	4939      	ldr	r1, [pc, #228]	; (8007594 <atan+0x334>)
 80074ae:	2000      	movs	r0, #0
 80074b0:	f7f9 f9e4 	bl	800087c <__aeabi_ddiv>
 80074b4:	f04f 0a03 	mov.w	sl, #3
 80074b8:	4604      	mov	r4, r0
 80074ba:	460d      	mov	r5, r1
 80074bc:	e737      	b.n	800732e <atan+0xce>
 80074be:	4b36      	ldr	r3, [pc, #216]	; (8007598 <atan+0x338>)
 80074c0:	4e36      	ldr	r6, [pc, #216]	; (800759c <atan+0x33c>)
 80074c2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80074c6:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 80074ca:	e9da 2300 	ldrd	r2, r3, [sl]
 80074ce:	f7f8 fef3 	bl	80002b8 <__aeabi_dsub>
 80074d2:	4622      	mov	r2, r4
 80074d4:	462b      	mov	r3, r5
 80074d6:	f7f8 feef 	bl	80002b8 <__aeabi_dsub>
 80074da:	4602      	mov	r2, r0
 80074dc:	460b      	mov	r3, r1
 80074de:	e9d6 0100 	ldrd	r0, r1, [r6]
 80074e2:	f7f8 fee9 	bl	80002b8 <__aeabi_dsub>
 80074e6:	f1bb 0f00 	cmp.w	fp, #0
 80074ea:	4604      	mov	r4, r0
 80074ec:	460d      	mov	r5, r1
 80074ee:	f6bf aed6 	bge.w	800729e <atan+0x3e>
 80074f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074f6:	461d      	mov	r5, r3
 80074f8:	e6d1      	b.n	800729e <atan+0x3e>
 80074fa:	a51d      	add	r5, pc, #116	; (adr r5, 8007570 <atan+0x310>)
 80074fc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007500:	e6cd      	b.n	800729e <atan+0x3e>
 8007502:	bf00      	nop
 8007504:	f3af 8000 	nop.w
 8007508:	54442d18 	.word	0x54442d18
 800750c:	bff921fb 	.word	0xbff921fb
 8007510:	8800759c 	.word	0x8800759c
 8007514:	7e37e43c 	.word	0x7e37e43c
 8007518:	e322da11 	.word	0xe322da11
 800751c:	3f90ad3a 	.word	0x3f90ad3a
 8007520:	24760deb 	.word	0x24760deb
 8007524:	3fa97b4b 	.word	0x3fa97b4b
 8007528:	a0d03d51 	.word	0xa0d03d51
 800752c:	3fb10d66 	.word	0x3fb10d66
 8007530:	c54c206e 	.word	0xc54c206e
 8007534:	3fb745cd 	.word	0x3fb745cd
 8007538:	920083ff 	.word	0x920083ff
 800753c:	3fc24924 	.word	0x3fc24924
 8007540:	5555550d 	.word	0x5555550d
 8007544:	3fd55555 	.word	0x3fd55555
 8007548:	2c6a6c2f 	.word	0x2c6a6c2f
 800754c:	bfa2b444 	.word	0xbfa2b444
 8007550:	52defd9a 	.word	0x52defd9a
 8007554:	3fadde2d 	.word	0x3fadde2d
 8007558:	af749a6d 	.word	0xaf749a6d
 800755c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007560:	fe231671 	.word	0xfe231671
 8007564:	3fbc71c6 	.word	0x3fbc71c6
 8007568:	9998ebc4 	.word	0x9998ebc4
 800756c:	3fc99999 	.word	0x3fc99999
 8007570:	54442d18 	.word	0x54442d18
 8007574:	3ff921fb 	.word	0x3ff921fb
 8007578:	440fffff 	.word	0x440fffff
 800757c:	7ff00000 	.word	0x7ff00000
 8007580:	3fdbffff 	.word	0x3fdbffff
 8007584:	3ff00000 	.word	0x3ff00000
 8007588:	3ff2ffff 	.word	0x3ff2ffff
 800758c:	40038000 	.word	0x40038000
 8007590:	3ff80000 	.word	0x3ff80000
 8007594:	bff00000 	.word	0xbff00000
 8007598:	08007840 	.word	0x08007840
 800759c:	08007820 	.word	0x08007820

080075a0 <fabs>:
 80075a0:	ec51 0b10 	vmov	r0, r1, d0
 80075a4:	ee10 2a10 	vmov	r2, s0
 80075a8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80075ac:	ec43 2b10 	vmov	d0, r2, r3
 80075b0:	4770      	bx	lr
	...

080075b4 <_init>:
 80075b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b6:	bf00      	nop
 80075b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ba:	bc08      	pop	{r3}
 80075bc:	469e      	mov	lr, r3
 80075be:	4770      	bx	lr

080075c0 <_fini>:
 80075c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c2:	bf00      	nop
 80075c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075c6:	bc08      	pop	{r3}
 80075c8:	469e      	mov	lr, r3
 80075ca:	4770      	bx	lr
