
Body-Synthesizer_STM32_F746ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f6c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08008138  08008138  00018138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008558  08008558  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008558  08008558  00018558  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008560  08008560  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008560  08008560  00018560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008564  08008564  00018564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08008568  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00038620  200001e8  0800874c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20038808  0800874c  00028808  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d05  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a7f  00000000  00000000  00033f19  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ee8  00000000  00000000  00036998  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000da0  00000000  00000000  00037880  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027dae  00000000  00000000  00038620  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d8c5  00000000  00000000  000603ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f0813  00000000  00000000  0006dc93  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015e4a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004840  00000000  00000000  0015e524  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	200001e8 	.word	0x200001e8
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800811c 	.word	0x0800811c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	200001ec 	.word	0x200001ec
 8000204:	0800811c 	.word	0x0800811c

08000208 <strlen>:
 8000208:	4603      	mov	r3, r0
 800020a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020e:	2a00      	cmp	r2, #0
 8000210:	d1fb      	bne.n	800020a <strlen+0x2>
 8000212:	1a18      	subs	r0, r3, r0
 8000214:	3801      	subs	r0, #1
 8000216:	4770      	bx	lr

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	; 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000356:	f1a4 0401 	sub.w	r4, r4, #1
 800035a:	d1e9      	bne.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpun>:
 8000ac4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x10>
 8000ace:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad2:	d10a      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ad4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	d102      	bne.n	8000ae4 <__aeabi_dcmpun+0x20>
 8000ade:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_dcmpun+0x26>
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0001 	mov.w	r0, #1
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2iz>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d215      	bcs.n	8000b26 <__aeabi_d2iz+0x36>
 8000afa:	d511      	bpl.n	8000b20 <__aeabi_d2iz+0x30>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d912      	bls.n	8000b2c <__aeabi_d2iz+0x3c>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b16:	fa23 f002 	lsr.w	r0, r3, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	4240      	negne	r0, r0
 8000b1e:	4770      	bx	lr
 8000b20:	f04f 0000 	mov.w	r0, #0
 8000b24:	4770      	bx	lr
 8000b26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b2a:	d105      	bne.n	8000b38 <__aeabi_d2iz+0x48>
 8000b2c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	bf08      	it	eq
 8000b32:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <__aeabi_d2f>:
 8000b80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b88:	bf24      	itt	cs
 8000b8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b92:	d90d      	bls.n	8000bb0 <__aeabi_d2f+0x30>
 8000b94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba8:	bf08      	it	eq
 8000baa:	f020 0001 	biceq.w	r0, r0, #1
 8000bae:	4770      	bx	lr
 8000bb0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb4:	d121      	bne.n	8000bfa <__aeabi_d2f+0x7a>
 8000bb6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bba:	bfbc      	itt	lt
 8000bbc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	4770      	bxlt	lr
 8000bc2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bca:	f1c2 0218 	rsb	r2, r2, #24
 8000bce:	f1c2 0c20 	rsb	ip, r2, #32
 8000bd2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd6:	fa20 f002 	lsr.w	r0, r0, r2
 8000bda:	bf18      	it	ne
 8000bdc:	f040 0001 	orrne.w	r0, r0, #1
 8000be0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bec:	ea40 000c 	orr.w	r0, r0, ip
 8000bf0:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf8:	e7cc      	b.n	8000b94 <__aeabi_d2f+0x14>
 8000bfa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfe:	d107      	bne.n	8000c10 <__aeabi_d2f+0x90>
 8000c00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c04:	bf1e      	ittt	ne
 8000c06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0e:	4770      	bxne	lr
 8000c10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop

08000c20 <__aeabi_uldivmod>:
 8000c20:	b953      	cbnz	r3, 8000c38 <__aeabi_uldivmod+0x18>
 8000c22:	b94a      	cbnz	r2, 8000c38 <__aeabi_uldivmod+0x18>
 8000c24:	2900      	cmp	r1, #0
 8000c26:	bf08      	it	eq
 8000c28:	2800      	cmpeq	r0, #0
 8000c2a:	bf1c      	itt	ne
 8000c2c:	f04f 31ff 	movne.w	r1, #4294967295
 8000c30:	f04f 30ff 	movne.w	r0, #4294967295
 8000c34:	f000 b972 	b.w	8000f1c <__aeabi_idiv0>
 8000c38:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c3c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c40:	f000 f806 	bl	8000c50 <__udivmoddi4>
 8000c44:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c4c:	b004      	add	sp, #16
 8000c4e:	4770      	bx	lr

08000c50 <__udivmoddi4>:
 8000c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c54:	9e08      	ldr	r6, [sp, #32]
 8000c56:	4604      	mov	r4, r0
 8000c58:	4688      	mov	r8, r1
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d14b      	bne.n	8000cf6 <__udivmoddi4+0xa6>
 8000c5e:	428a      	cmp	r2, r1
 8000c60:	4615      	mov	r5, r2
 8000c62:	d967      	bls.n	8000d34 <__udivmoddi4+0xe4>
 8000c64:	fab2 f282 	clz	r2, r2
 8000c68:	b14a      	cbz	r2, 8000c7e <__udivmoddi4+0x2e>
 8000c6a:	f1c2 0720 	rsb	r7, r2, #32
 8000c6e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c72:	fa20 f707 	lsr.w	r7, r0, r7
 8000c76:	4095      	lsls	r5, r2
 8000c78:	ea47 0803 	orr.w	r8, r7, r3
 8000c7c:	4094      	lsls	r4, r2
 8000c7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c82:	0c23      	lsrs	r3, r4, #16
 8000c84:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c88:	fa1f fc85 	uxth.w	ip, r5
 8000c8c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c90:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c94:	fb07 f10c 	mul.w	r1, r7, ip
 8000c98:	4299      	cmp	r1, r3
 8000c9a:	d909      	bls.n	8000cb0 <__udivmoddi4+0x60>
 8000c9c:	18eb      	adds	r3, r5, r3
 8000c9e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ca2:	f080 811b 	bcs.w	8000edc <__udivmoddi4+0x28c>
 8000ca6:	4299      	cmp	r1, r3
 8000ca8:	f240 8118 	bls.w	8000edc <__udivmoddi4+0x28c>
 8000cac:	3f02      	subs	r7, #2
 8000cae:	442b      	add	r3, r5
 8000cb0:	1a5b      	subs	r3, r3, r1
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cb8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cc4:	45a4      	cmp	ip, r4
 8000cc6:	d909      	bls.n	8000cdc <__udivmoddi4+0x8c>
 8000cc8:	192c      	adds	r4, r5, r4
 8000cca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cce:	f080 8107 	bcs.w	8000ee0 <__udivmoddi4+0x290>
 8000cd2:	45a4      	cmp	ip, r4
 8000cd4:	f240 8104 	bls.w	8000ee0 <__udivmoddi4+0x290>
 8000cd8:	3802      	subs	r0, #2
 8000cda:	442c      	add	r4, r5
 8000cdc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ce0:	eba4 040c 	sub.w	r4, r4, ip
 8000ce4:	2700      	movs	r7, #0
 8000ce6:	b11e      	cbz	r6, 8000cf0 <__udivmoddi4+0xa0>
 8000ce8:	40d4      	lsrs	r4, r2
 8000cea:	2300      	movs	r3, #0
 8000cec:	e9c6 4300 	strd	r4, r3, [r6]
 8000cf0:	4639      	mov	r1, r7
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d909      	bls.n	8000d0e <__udivmoddi4+0xbe>
 8000cfa:	2e00      	cmp	r6, #0
 8000cfc:	f000 80eb 	beq.w	8000ed6 <__udivmoddi4+0x286>
 8000d00:	2700      	movs	r7, #0
 8000d02:	e9c6 0100 	strd	r0, r1, [r6]
 8000d06:	4638      	mov	r0, r7
 8000d08:	4639      	mov	r1, r7
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	fab3 f783 	clz	r7, r3
 8000d12:	2f00      	cmp	r7, #0
 8000d14:	d147      	bne.n	8000da6 <__udivmoddi4+0x156>
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xd0>
 8000d1a:	4282      	cmp	r2, r0
 8000d1c:	f200 80fa 	bhi.w	8000f14 <__udivmoddi4+0x2c4>
 8000d20:	1a84      	subs	r4, r0, r2
 8000d22:	eb61 0303 	sbc.w	r3, r1, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	4698      	mov	r8, r3
 8000d2a:	2e00      	cmp	r6, #0
 8000d2c:	d0e0      	beq.n	8000cf0 <__udivmoddi4+0xa0>
 8000d2e:	e9c6 4800 	strd	r4, r8, [r6]
 8000d32:	e7dd      	b.n	8000cf0 <__udivmoddi4+0xa0>
 8000d34:	b902      	cbnz	r2, 8000d38 <__udivmoddi4+0xe8>
 8000d36:	deff      	udf	#255	; 0xff
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	f040 808f 	bne.w	8000e60 <__udivmoddi4+0x210>
 8000d42:	1b49      	subs	r1, r1, r5
 8000d44:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d48:	fa1f f885 	uxth.w	r8, r5
 8000d4c:	2701      	movs	r7, #1
 8000d4e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d52:	0c23      	lsrs	r3, r4, #16
 8000d54:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d58:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5c:	fb08 f10c 	mul.w	r1, r8, ip
 8000d60:	4299      	cmp	r1, r3
 8000d62:	d907      	bls.n	8000d74 <__udivmoddi4+0x124>
 8000d64:	18eb      	adds	r3, r5, r3
 8000d66:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x122>
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	f200 80cd 	bhi.w	8000f0c <__udivmoddi4+0x2bc>
 8000d72:	4684      	mov	ip, r0
 8000d74:	1a59      	subs	r1, r3, r1
 8000d76:	b2a3      	uxth	r3, r4
 8000d78:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d7c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d80:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d84:	fb08 f800 	mul.w	r8, r8, r0
 8000d88:	45a0      	cmp	r8, r4
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0x14c>
 8000d8c:	192c      	adds	r4, r5, r4
 8000d8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x14a>
 8000d94:	45a0      	cmp	r8, r4
 8000d96:	f200 80b6 	bhi.w	8000f06 <__udivmoddi4+0x2b6>
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	eba4 0408 	sub.w	r4, r4, r8
 8000da0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000da4:	e79f      	b.n	8000ce6 <__udivmoddi4+0x96>
 8000da6:	f1c7 0c20 	rsb	ip, r7, #32
 8000daa:	40bb      	lsls	r3, r7
 8000dac:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000db0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000db4:	fa01 f407 	lsl.w	r4, r1, r7
 8000db8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000dbc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dc0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dc4:	4325      	orrs	r5, r4
 8000dc6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000dca:	0c2c      	lsrs	r4, r5, #16
 8000dcc:	fb08 3319 	mls	r3, r8, r9, r3
 8000dd0:	fa1f fa8e 	uxth.w	sl, lr
 8000dd4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000dd8:	fb09 f40a 	mul.w	r4, r9, sl
 8000ddc:	429c      	cmp	r4, r3
 8000dde:	fa02 f207 	lsl.w	r2, r2, r7
 8000de2:	fa00 f107 	lsl.w	r1, r0, r7
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b0>
 8000de8:	eb1e 0303 	adds.w	r3, lr, r3
 8000dec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000df0:	f080 8087 	bcs.w	8000f02 <__udivmoddi4+0x2b2>
 8000df4:	429c      	cmp	r4, r3
 8000df6:	f240 8084 	bls.w	8000f02 <__udivmoddi4+0x2b2>
 8000dfa:	f1a9 0902 	sub.w	r9, r9, #2
 8000dfe:	4473      	add	r3, lr
 8000e00:	1b1b      	subs	r3, r3, r4
 8000e02:	b2ad      	uxth	r5, r5
 8000e04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e08:	fb08 3310 	mls	r3, r8, r0, r3
 8000e0c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e10:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e14:	45a2      	cmp	sl, r4
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1da>
 8000e18:	eb1e 0404 	adds.w	r4, lr, r4
 8000e1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e20:	d26b      	bcs.n	8000efa <__udivmoddi4+0x2aa>
 8000e22:	45a2      	cmp	sl, r4
 8000e24:	d969      	bls.n	8000efa <__udivmoddi4+0x2aa>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4474      	add	r4, lr
 8000e2a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000e32:	eba4 040a 	sub.w	r4, r4, sl
 8000e36:	454c      	cmp	r4, r9
 8000e38:	46c2      	mov	sl, r8
 8000e3a:	464b      	mov	r3, r9
 8000e3c:	d354      	bcc.n	8000ee8 <__udivmoddi4+0x298>
 8000e3e:	d051      	beq.n	8000ee4 <__udivmoddi4+0x294>
 8000e40:	2e00      	cmp	r6, #0
 8000e42:	d069      	beq.n	8000f18 <__udivmoddi4+0x2c8>
 8000e44:	ebb1 050a 	subs.w	r5, r1, sl
 8000e48:	eb64 0403 	sbc.w	r4, r4, r3
 8000e4c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e50:	40fd      	lsrs	r5, r7
 8000e52:	40fc      	lsrs	r4, r7
 8000e54:	ea4c 0505 	orr.w	r5, ip, r5
 8000e58:	e9c6 5400 	strd	r5, r4, [r6]
 8000e5c:	2700      	movs	r7, #0
 8000e5e:	e747      	b.n	8000cf0 <__udivmoddi4+0xa0>
 8000e60:	f1c2 0320 	rsb	r3, r2, #32
 8000e64:	fa20 f703 	lsr.w	r7, r0, r3
 8000e68:	4095      	lsls	r5, r2
 8000e6a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e6e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e76:	4338      	orrs	r0, r7
 8000e78:	0c01      	lsrs	r1, r0, #16
 8000e7a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e7e:	fa1f f885 	uxth.w	r8, r5
 8000e82:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e86:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e8a:	fb07 f308 	mul.w	r3, r7, r8
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	fa04 f402 	lsl.w	r4, r4, r2
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x256>
 8000e96:	1869      	adds	r1, r5, r1
 8000e98:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e9c:	d22f      	bcs.n	8000efe <__udivmoddi4+0x2ae>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d92d      	bls.n	8000efe <__udivmoddi4+0x2ae>
 8000ea2:	3f02      	subs	r7, #2
 8000ea4:	4429      	add	r1, r5
 8000ea6:	1acb      	subs	r3, r1, r3
 8000ea8:	b281      	uxth	r1, r0
 8000eaa:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eae:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb6:	fb00 f308 	mul.w	r3, r0, r8
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d907      	bls.n	8000ece <__udivmoddi4+0x27e>
 8000ebe:	1869      	adds	r1, r5, r1
 8000ec0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ec4:	d217      	bcs.n	8000ef6 <__udivmoddi4+0x2a6>
 8000ec6:	428b      	cmp	r3, r1
 8000ec8:	d915      	bls.n	8000ef6 <__udivmoddi4+0x2a6>
 8000eca:	3802      	subs	r0, #2
 8000ecc:	4429      	add	r1, r5
 8000ece:	1ac9      	subs	r1, r1, r3
 8000ed0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ed4:	e73b      	b.n	8000d4e <__udivmoddi4+0xfe>
 8000ed6:	4637      	mov	r7, r6
 8000ed8:	4630      	mov	r0, r6
 8000eda:	e709      	b.n	8000cf0 <__udivmoddi4+0xa0>
 8000edc:	4607      	mov	r7, r0
 8000ede:	e6e7      	b.n	8000cb0 <__udivmoddi4+0x60>
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	e6fb      	b.n	8000cdc <__udivmoddi4+0x8c>
 8000ee4:	4541      	cmp	r1, r8
 8000ee6:	d2ab      	bcs.n	8000e40 <__udivmoddi4+0x1f0>
 8000ee8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eec:	eb69 020e 	sbc.w	r2, r9, lr
 8000ef0:	3801      	subs	r0, #1
 8000ef2:	4613      	mov	r3, r2
 8000ef4:	e7a4      	b.n	8000e40 <__udivmoddi4+0x1f0>
 8000ef6:	4660      	mov	r0, ip
 8000ef8:	e7e9      	b.n	8000ece <__udivmoddi4+0x27e>
 8000efa:	4618      	mov	r0, r3
 8000efc:	e795      	b.n	8000e2a <__udivmoddi4+0x1da>
 8000efe:	4667      	mov	r7, ip
 8000f00:	e7d1      	b.n	8000ea6 <__udivmoddi4+0x256>
 8000f02:	4681      	mov	r9, r0
 8000f04:	e77c      	b.n	8000e00 <__udivmoddi4+0x1b0>
 8000f06:	3802      	subs	r0, #2
 8000f08:	442c      	add	r4, r5
 8000f0a:	e747      	b.n	8000d9c <__udivmoddi4+0x14c>
 8000f0c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f10:	442b      	add	r3, r5
 8000f12:	e72f      	b.n	8000d74 <__udivmoddi4+0x124>
 8000f14:	4638      	mov	r0, r7
 8000f16:	e708      	b.n	8000d2a <__udivmoddi4+0xda>
 8000f18:	4637      	mov	r7, r6
 8000f1a:	e6e9      	b.n	8000cf0 <__udivmoddi4+0xa0>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <Tremolo_Process>:
		calculate_vector[i] = tanh(distortion_gain * calculate_vector[i]);
	}
}


void Tremolo_Process(double fsignal, double LFO_Depth, double LFO_Rate, uint32_t end,  UART_HandleTypeDef huart) {
 8000f20:	b084      	sub	sp, #16
 8000f22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f24:	b09b      	sub	sp, #108	; 0x6c
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	ed87 0b06 	vstr	d0, [r7, #24]
 8000f2c:	ed87 1b04 	vstr	d1, [r7, #16]
 8000f30:	ed87 2b02 	vstr	d2, [r7, #8]
 8000f34:	6078      	str	r0, [r7, #4]
 8000f36:	f107 0084 	add.w	r0, r7, #132	; 0x84
 8000f3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8000f3e:	466b      	mov	r3, sp
 8000f40:	461e      	mov	r6, r3

	char uart_buffer[32];
	float tremolo_out[end];
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	4603      	mov	r3, r0
 8000f46:	3b01      	subs	r3, #1
 8000f48:	667b      	str	r3, [r7, #100]	; 0x64
 8000f4a:	4601      	mov	r1, r0
 8000f4c:	f04f 0200 	mov.w	r2, #0
 8000f50:	f04f 0300 	mov.w	r3, #0
 8000f54:	f04f 0400 	mov.w	r4, #0
 8000f58:	0154      	lsls	r4, r2, #5
 8000f5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f5e:	014b      	lsls	r3, r1, #5
 8000f60:	4601      	mov	r1, r0
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	f04f 0400 	mov.w	r4, #0
 8000f6e:	0154      	lsls	r4, r2, #5
 8000f70:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f74:	014b      	lsls	r3, r1, #5
 8000f76:	0083      	lsls	r3, r0, #2
 8000f78:	3303      	adds	r3, #3
 8000f7a:	3307      	adds	r3, #7
 8000f7c:	08db      	lsrs	r3, r3, #3
 8000f7e:	00db      	lsls	r3, r3, #3
 8000f80:	ebad 0d03 	sub.w	sp, sp, r3
 8000f84:	466b      	mov	r3, sp
 8000f86:	3303      	adds	r3, #3
 8000f88:	089b      	lsrs	r3, r3, #2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
	float lfo_out[end];
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	4603      	mov	r3, r0
 8000f92:	3b01      	subs	r3, #1
 8000f94:	65bb      	str	r3, [r7, #88]	; 0x58
 8000f96:	4601      	mov	r1, r0
 8000f98:	f04f 0200 	mov.w	r2, #0
 8000f9c:	f04f 0300 	mov.w	r3, #0
 8000fa0:	f04f 0400 	mov.w	r4, #0
 8000fa4:	0154      	lsls	r4, r2, #5
 8000fa6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000faa:	014b      	lsls	r3, r1, #5
 8000fac:	4601      	mov	r1, r0
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	f04f 0300 	mov.w	r3, #0
 8000fb6:	f04f 0400 	mov.w	r4, #0
 8000fba:	0154      	lsls	r4, r2, #5
 8000fbc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000fc0:	014b      	lsls	r3, r1, #5
 8000fc2:	0083      	lsls	r3, r0, #2
 8000fc4:	3303      	adds	r3, #3
 8000fc6:	3307      	adds	r3, #7
 8000fc8:	08db      	lsrs	r3, r3, #3
 8000fca:	00db      	lsls	r3, r3, #3
 8000fcc:	ebad 0d03 	sub.w	sp, sp, r3
 8000fd0:	466b      	mov	r3, sp
 8000fd2:	3303      	adds	r3, #3
 8000fd4:	089b      	lsrs	r3, r3, #2
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	657b      	str	r3, [r7, #84]	; 0x54

	float i_lfo = 0.0;
 8000fda:	f04f 0300 	mov.w	r3, #0
 8000fde:	653b      	str	r3, [r7, #80]	; 0x50
	float angle_step = 2*M_PI/( (108000000)/(COUNTER_PERIOD*LFO_Rate) );
 8000fe0:	a348      	add	r3, pc, #288	; (adr r3, 8001104 <Tremolo_Process+0x1e4>)
 8000fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000fea:	f7ff fad1 	bl	8000590 <__aeabi_dmul>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	460c      	mov	r4, r1
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4623      	mov	r3, r4
 8000ff6:	a145      	add	r1, pc, #276	; (adr r1, 800110c <Tremolo_Process+0x1ec>)
 8000ff8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ffc:	f7ff fbf2 	bl	80007e4 <__aeabi_ddiv>
 8001000:	4603      	mov	r3, r0
 8001002:	460c      	mov	r4, r1
 8001004:	461a      	mov	r2, r3
 8001006:	4623      	mov	r3, r4
 8001008:	a142      	add	r1, pc, #264	; (adr r1, 8001114 <Tremolo_Process+0x1f4>)
 800100a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800100e:	f7ff fbe9 	bl	80007e4 <__aeabi_ddiv>
 8001012:	4603      	mov	r3, r0
 8001014:	460c      	mov	r4, r1
 8001016:	4618      	mov	r0, r3
 8001018:	4621      	mov	r1, r4
 800101a:	f7ff fdb1 	bl	8000b80 <__aeabi_d2f>
 800101e:	4603      	mov	r3, r0
 8001020:	64fb      	str	r3, [r7, #76]	; 0x4c

	float phase = 0.0;
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	64bb      	str	r3, [r7, #72]	; 0x48

	for(int i=0; i<end; i++) {
 8001028:	2300      	movs	r3, #0
 800102a:	663b      	str	r3, [r7, #96]	; 0x60
 800102c:	e054      	b.n	80010d8 <Tremolo_Process+0x1b8>
		if(i_lfo>=2*M_PI){
			i_lfo-=2*M_PI;
		}
		calculate_vector[i] = calculate_vector[i] * tremolo_out[i];*/

		calculate_vector[i] = (1 + LFO_Depth*sin( i * 2*M_PI*LFO_Rate/96000 )) * calculate_vector[i];
 800102e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001030:	005b      	lsls	r3, r3, #1
 8001032:	4618      	mov	r0, r3
 8001034:	f7ff fa42 	bl	80004bc <__aeabi_i2d>
 8001038:	a338      	add	r3, pc, #224	; (adr r3, 800111c <Tremolo_Process+0x1fc>)
 800103a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103e:	f7ff faa7 	bl	8000590 <__aeabi_dmul>
 8001042:	4603      	mov	r3, r0
 8001044:	460c      	mov	r4, r1
 8001046:	4618      	mov	r0, r3
 8001048:	4621      	mov	r1, r4
 800104a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800104e:	f7ff fa9f 	bl	8000590 <__aeabi_dmul>
 8001052:	4603      	mov	r3, r0
 8001054:	460c      	mov	r4, r1
 8001056:	4618      	mov	r0, r3
 8001058:	4621      	mov	r1, r4
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <Tremolo_Process+0x1d8>)
 8001060:	f7ff fbc0 	bl	80007e4 <__aeabi_ddiv>
 8001064:	4603      	mov	r3, r0
 8001066:	460c      	mov	r4, r1
 8001068:	ec44 3b17 	vmov	d7, r3, r4
 800106c:	eeb0 0a47 	vmov.f32	s0, s14
 8001070:	eef0 0a67 	vmov.f32	s1, s15
 8001074:	f006 f8c4 	bl	8007200 <sin>
 8001078:	ec51 0b10 	vmov	r0, r1, d0
 800107c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001080:	f7ff fa86 	bl	8000590 <__aeabi_dmul>
 8001084:	4603      	mov	r3, r0
 8001086:	460c      	mov	r4, r1
 8001088:	4618      	mov	r0, r3
 800108a:	4621      	mov	r1, r4
 800108c:	f04f 0200 	mov.w	r2, #0
 8001090:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <Tremolo_Process+0x1dc>)
 8001092:	f7ff f8c7 	bl	8000224 <__adddf3>
 8001096:	4603      	mov	r3, r0
 8001098:	460c      	mov	r4, r1
 800109a:	4625      	mov	r5, r4
 800109c:	461c      	mov	r4, r3
 800109e:	4a18      	ldr	r2, [pc, #96]	; (8001100 <Tremolo_Process+0x1e0>)
 80010a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	4413      	add	r3, r2
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fa19 	bl	80004e0 <__aeabi_f2d>
 80010ae:	4602      	mov	r2, r0
 80010b0:	460b      	mov	r3, r1
 80010b2:	4620      	mov	r0, r4
 80010b4:	4629      	mov	r1, r5
 80010b6:	f7ff fa6b 	bl	8000590 <__aeabi_dmul>
 80010ba:	4603      	mov	r3, r0
 80010bc:	460c      	mov	r4, r1
 80010be:	4618      	mov	r0, r3
 80010c0:	4621      	mov	r1, r4
 80010c2:	f7ff fd5d 	bl	8000b80 <__aeabi_d2f>
 80010c6:	4601      	mov	r1, r0
 80010c8:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <Tremolo_Process+0x1e0>)
 80010ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010cc:	009b      	lsls	r3, r3, #2
 80010ce:	4413      	add	r3, r2
 80010d0:	6019      	str	r1, [r3, #0]
	for(int i=0; i<end; i++) {
 80010d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010d4:	3301      	adds	r3, #1
 80010d6:	663b      	str	r3, [r7, #96]	; 0x60
 80010d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80010da:	687a      	ldr	r2, [r7, #4]
 80010dc:	429a      	cmp	r2, r3
 80010de:	d8a6      	bhi.n	800102e <Tremolo_Process+0x10e>
		phase = phase + 2*M_PI*(LFO_Rate/96000);*/

		//calculate_vector[i] = (LFO_Depth * sin( i * 2*M_PI * (float)(LFO_Rate/96000) )) * calculate_vector[i];
	}

	int test=1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	647b      	str	r3, [r7, #68]	; 0x44
 80010e4:	46b5      	mov	sp, r6
	/*for(int i=0; i<end; i++) {	// UART Debugging
		sprintf(uart_buffer, "%f\n\r", calculate_vector[i]);
		HAL_UART_Transmit(&huart, (uint8_t*) uart_buffer, sizeof(uart_buffer), HAL_MAX_DELAY);
	}*/
}
 80010e6:	bf00      	nop
 80010e8:	376c      	adds	r7, #108	; 0x6c
 80010ea:	46bd      	mov	sp, r7
 80010ec:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80010f0:	b004      	add	sp, #16
 80010f2:	4770      	bx	lr
 80010f4:	f3af 8000 	nop.w
 80010f8:	40f77000 	.word	0x40f77000
 80010fc:	3ff00000 	.word	0x3ff00000
 8001100:	20012e24 	.word	0x20012e24
 8001104:	00000000 	.word	0x00000000
 8001108:	40919400 	.word	0x40919400
 800110c:	00000000 	.word	0x00000000
 8001110:	4199bfcc 	.word	0x4199bfcc
 8001114:	54442d18 	.word	0x54442d18
 8001118:	401921fb 	.word	0x401921fb
 800111c:	54442d18 	.word	0x54442d18
 8001120:	400921fb 	.word	0x400921fb

08001124 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int index=0;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM8) {
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a0e      	ldr	r2, [pc, #56]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d114      	bne.n	8001160 <HAL_TIM_PeriodElapsedCallback+0x3c>

		tremolo_out = calculate_vector[index];
 8001136:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a0d      	ldr	r2, [pc, #52]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001144:	6013      	str	r3, [r2, #0]

		index++;
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	3301      	adds	r3, #1
 800114c:	4a08      	ldr	r2, [pc, #32]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800114e:	6013      	str	r3, [r2, #0]

		if(index == BLOCKSIZE){
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8001158:	d102      	bne.n	8001160 <HAL_TIM_PeriodElapsedCallback+0x3c>
			index = 0;
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001160:	bf00      	nop
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr
 800116c:	40010400 	.word	0x40010400
 8001170:	20000204 	.word	0x20000204
 8001174:	20012e24 	.word	0x20012e24
 8001178:	200387bc 	.word	0x200387bc

0800117c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800117c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800117e:	ed2d 8b04 	vpush	{d8-d9}
 8001182:	b0a1      	sub	sp, #132	; 0x84
 8001184:	af1e      	add	r7, sp, #120	; 0x78
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001186:	f001 f888 	bl	800229a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800118a:	f000 f87f 	bl	800128c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800118e:	f000 fa75 	bl	800167c <MX_GPIO_Init>
  MX_TIM8_Init();
 8001192:	f000 f9d1 	bl	8001538 <MX_TIM8_Init>
  MX_DMA_Init();
 8001196:	f000 fa53 	bl	8001640 <MX_DMA_Init>
  MX_DAC_Init();
 800119a:	f000 f909 	bl	80013b0 <MX_DAC_Init>
  MX_TIM6_Init();
 800119e:	f000 f995 	bl	80014cc <MX_TIM6_Init>
  MX_USART3_UART_Init();
 80011a2:	f000 fa1d 	bl	80015e0 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80011a6:	f000 f945 	bl	8001434 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	Signal_Synthesis_Init(htim8, hdac);
 80011aa:	4e2e      	ldr	r6, [pc, #184]	; (8001264 <main+0xe8>)
 80011ac:	4b2e      	ldr	r3, [pc, #184]	; (8001268 <main+0xec>)
 80011ae:	ac0c      	add	r4, sp, #48	; 0x30
 80011b0:	461d      	mov	r5, r3
 80011b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80011b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80011b6:	682b      	ldr	r3, [r5, #0]
 80011b8:	6023      	str	r3, [r4, #0]
 80011ba:	466d      	mov	r5, sp
 80011bc:	f106 0410 	add.w	r4, r6, #16
 80011c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011c8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011cc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80011d0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80011d4:	f000 fab4 	bl	8001740 <Signal_Synthesis_Init>
	double fsignal = 200;
 80011d8:	f04f 0300 	mov.w	r3, #0
 80011dc:	4c23      	ldr	r4, [pc, #140]	; (800126c <main+0xf0>)
 80011de:	e9c7 3400 	strd	r3, r4, [r7]
	Signal_Synthesis(1, SIN, fsignal);
 80011e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011e6:	2100      	movs	r1, #0
 80011e8:	2001      	movs	r0, #1
 80011ea:	f000 fb2d 	bl	8001848 <Signal_Synthesis>
	distortion_gain = 5.0;
 80011ee:	4a20      	ldr	r2, [pc, #128]	; (8001270 <main+0xf4>)
 80011f0:	f04f 0300 	mov.w	r3, #0
 80011f4:	4c1f      	ldr	r4, [pc, #124]	; (8001274 <main+0xf8>)
 80011f6:	e9c2 3400 	strd	r3, r4, [r2]
	//tanh_Distortion_Process(distortion_gain, lastIndex);
	LFO_Depth = 0.75;
 80011fa:	4a1f      	ldr	r2, [pc, #124]	; (8001278 <main+0xfc>)
 80011fc:	f04f 0300 	mov.w	r3, #0
 8001200:	4c1e      	ldr	r4, [pc, #120]	; (800127c <main+0x100>)
 8001202:	e9c2 3400 	strd	r3, r4, [r2]
	LFO_Rate = 5.00;
 8001206:	4a1e      	ldr	r2, [pc, #120]	; (8001280 <main+0x104>)
 8001208:	f04f 0300 	mov.w	r3, #0
 800120c:	4c19      	ldr	r4, [pc, #100]	; (8001274 <main+0xf8>)
 800120e:	e9c2 3400 	strd	r3, r4, [r2]
	Tremolo_Process(fsignal, LFO_Depth, LFO_Rate, lastIndex, huart3);
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <main+0xfc>)
 8001214:	ed93 8b00 	vldr	d8, [r3]
 8001218:	4b19      	ldr	r3, [pc, #100]	; (8001280 <main+0x104>)
 800121a:	ed93 9b00 	vldr	d9, [r3]
 800121e:	4b19      	ldr	r3, [pc, #100]	; (8001284 <main+0x108>)
 8001220:	681d      	ldr	r5, [r3, #0]
 8001222:	4c19      	ldr	r4, [pc, #100]	; (8001288 <main+0x10c>)
 8001224:	4668      	mov	r0, sp
 8001226:	f104 030c 	add.w	r3, r4, #12
 800122a:	2274      	movs	r2, #116	; 0x74
 800122c:	4619      	mov	r1, r3
 800122e:	f004 fa35 	bl	800569c <memcpy>
 8001232:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8001236:	4628      	mov	r0, r5
 8001238:	eeb0 2a49 	vmov.f32	s4, s18
 800123c:	eef0 2a69 	vmov.f32	s5, s19
 8001240:	eeb0 1a48 	vmov.f32	s2, s16
 8001244:	eef0 1a68 	vmov.f32	s3, s17
 8001248:	ed97 0b00 	vldr	d0, [r7]
 800124c:	f7ff fe68 	bl	8000f20 <Tremolo_Process>
	HAL_TIM_Base_Start_IT(&htim8);
 8001250:	4804      	ldr	r0, [pc, #16]	; (8001264 <main+0xe8>)
 8001252:	f003 f9a3 	bl	800459c <HAL_TIM_Base_Start_IT>
	Output_Signal(hdac);
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <main+0xec>)
 8001258:	691a      	ldr	r2, [r3, #16]
 800125a:	9200      	str	r2, [sp, #0]
 800125c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800125e:	f000 fd8b 	bl	8001d78 <Output_Signal>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001262:	e7fe      	b.n	8001262 <main+0xe6>
 8001264:	20038640 	.word	0x20038640
 8001268:	20038764 	.word	0x20038764
 800126c:	40690000 	.word	0x40690000
 8001270:	20038638 	.word	0x20038638
 8001274:	40140000 	.word	0x40140000
 8001278:	20025a30 	.word	0x20025a30
 800127c:	3fe80000 	.word	0x3fe80000
 8001280:	20025a28 	.word	0x20025a28
 8001284:	20012e20 	.word	0x20012e20
 8001288:	20038680 	.word	0x20038680

0800128c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b0b4      	sub	sp, #208	; 0xd0
 8001290:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001292:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001296:	2230      	movs	r2, #48	; 0x30
 8001298:	2100      	movs	r1, #0
 800129a:	4618      	mov	r0, r3
 800129c:	f004 fa09 	bl	80056b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b0:	f107 0308 	add.w	r3, r7, #8
 80012b4:	2284      	movs	r2, #132	; 0x84
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f004 f9fa 	bl	80056b2 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012be:	4b3a      	ldr	r3, [pc, #232]	; (80013a8 <SystemClock_Config+0x11c>)
 80012c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012c2:	4a39      	ldr	r2, [pc, #228]	; (80013a8 <SystemClock_Config+0x11c>)
 80012c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c8:	6413      	str	r3, [r2, #64]	; 0x40
 80012ca:	4b37      	ldr	r3, [pc, #220]	; (80013a8 <SystemClock_Config+0x11c>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80012d6:	4b35      	ldr	r3, [pc, #212]	; (80013ac <SystemClock_Config+0x120>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80012de:	4a33      	ldr	r2, [pc, #204]	; (80013ac <SystemClock_Config+0x120>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e4:	6013      	str	r3, [r2, #0]
 80012e6:	4b31      	ldr	r3, [pc, #196]	; (80013ac <SystemClock_Config+0x120>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012ee:	603b      	str	r3, [r7, #0]
 80012f0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f2:	2302      	movs	r3, #2
 80012f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012f8:	2301      	movs	r3, #1
 80012fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012fe:	2310      	movs	r3, #16
 8001300:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001304:	2302      	movs	r3, #2
 8001306:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800130a:	2300      	movs	r3, #0
 800130c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001310:	2308      	movs	r3, #8
 8001312:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 108;
 8001316:	236c      	movs	r3, #108	; 0x6c
 8001318:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800131c:	2302      	movs	r3, #2
 800131e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001322:	2302      	movs	r3, #2
 8001324:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001328:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800132c:	4618      	mov	r0, r3
 800132e:	f002 f8a5 	bl	800347c <HAL_RCC_OscConfig>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001338:	f000 f9f8 	bl	800172c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800133c:	f002 f84e 	bl	80033dc <HAL_PWREx_EnableOverDrive>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001346:	f000 f9f1 	bl	800172c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800134a:	230f      	movs	r3, #15
 800134c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001350:	2302      	movs	r3, #2
 8001352:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800135c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001360:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001368:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800136c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001370:	2103      	movs	r1, #3
 8001372:	4618      	mov	r0, r3
 8001374:	f002 fb26 	bl	80039c4 <HAL_RCC_ClockConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0xf6>
  {
    Error_Handler();
 800137e:	f000 f9d5 	bl	800172c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001382:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001386:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001388:	2300      	movs	r3, #0
 800138a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800138c:	f107 0308 	add.w	r3, r7, #8
 8001390:	4618      	mov	r0, r3
 8001392:	f002 fce9 	bl	8003d68 <HAL_RCCEx_PeriphCLKConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SystemClock_Config+0x114>
  {
    Error_Handler();
 800139c:	f000 f9c6 	bl	800172c <Error_Handler>
  }
}
 80013a0:	bf00      	nop
 80013a2:	37d0      	adds	r7, #208	; 0xd0
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40007000 	.word	0x40007000

080013b0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80013b6:	463b      	mov	r3, r7
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization 
  */
  hdac.Instance = DAC;
 80013be:	4b1b      	ldr	r3, [pc, #108]	; (800142c <MX_DAC_Init+0x7c>)
 80013c0:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <MX_DAC_Init+0x80>)
 80013c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80013c4:	4819      	ldr	r0, [pc, #100]	; (800142c <MX_DAC_Init+0x7c>)
 80013c6:	f001 f8d6 	bl	8002576 <HAL_DAC_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80013d0:	f000 f9ac 	bl	800172c <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80013d4:	230c      	movs	r3, #12
 80013d6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80013dc:	463b      	mov	r3, r7
 80013de:	2200      	movs	r2, #0
 80013e0:	4619      	mov	r1, r3
 80013e2:	4812      	ldr	r0, [pc, #72]	; (800142c <MX_DAC_Init+0x7c>)
 80013e4:	f001 f9b6 	bl	8002754 <HAL_DAC_ConfigChannel>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80013ee:	f000 f99d 	bl	800172c <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80013f2:	2304      	movs	r3, #4
 80013f4:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80013f6:	463b      	mov	r3, r7
 80013f8:	2210      	movs	r2, #16
 80013fa:	4619      	mov	r1, r3
 80013fc:	480b      	ldr	r0, [pc, #44]	; (800142c <MX_DAC_Init+0x7c>)
 80013fe:	f001 f9a9 	bl	8002754 <HAL_DAC_ConfigChannel>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8001408:	f000 f990 	bl	800172c <Error_Handler>
  }
  /** Configure Triangle wave generation on DAC OUT2 
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac, DAC_CHANNEL_2, DAC_TRIANGLEAMPLITUDE_2047) != HAL_OK)
 800140c:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001410:	2110      	movs	r1, #16
 8001412:	4806      	ldr	r0, [pc, #24]	; (800142c <MX_DAC_Init+0x7c>)
 8001414:	f001 fa21 	bl	800285a <HAL_DACEx_TriangleWaveGenerate>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_DAC_Init+0x72>
  {
    Error_Handler();
 800141e:	f000 f985 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20038764 	.word	0x20038764
 8001430:	40007400 	.word	0x40007400

08001434 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <MX_TIM2_Init+0x94>)
 8001454:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001458:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <MX_TIM2_Init+0x94>)
 800145c:	2200      	movs	r2, #0
 800145e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001460:	4b19      	ldr	r3, [pc, #100]	; (80014c8 <MX_TIM2_Init+0x94>)
 8001462:	2200      	movs	r2, #0
 8001464:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_TIM2_Init+0x94>)
 8001468:	2200      	movs	r2, #0
 800146a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <MX_TIM2_Init+0x94>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001472:	4b15      	ldr	r3, [pc, #84]	; (80014c8 <MX_TIM2_Init+0x94>)
 8001474:	2200      	movs	r2, #0
 8001476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001478:	4813      	ldr	r0, [pc, #76]	; (80014c8 <MX_TIM2_Init+0x94>)
 800147a:	f003 f863 	bl	8004544 <HAL_TIM_Base_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001484:	f000 f952 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800148c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800148e:	f107 0310 	add.w	r3, r7, #16
 8001492:	4619      	mov	r1, r3
 8001494:	480c      	ldr	r0, [pc, #48]	; (80014c8 <MX_TIM2_Init+0x94>)
 8001496:	f003 f9cb 	bl	8004830 <HAL_TIM_ConfigClockSource>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80014a0:	f000 f944 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	4619      	mov	r1, r3
 80014b0:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_TIM2_Init+0x94>)
 80014b2:	f003 fbd9 	bl	8004c68 <HAL_TIMEx_MasterConfigSynchronization>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80014bc:	f000 f936 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014c0:	bf00      	nop
 80014c2:	3720      	adds	r7, #32
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	200387c0 	.word	0x200387c0

080014cc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80014dc:	4b14      	ldr	r3, [pc, #80]	; (8001530 <MX_TIM6_Init+0x64>)
 80014de:	4a15      	ldr	r2, [pc, #84]	; (8001534 <MX_TIM6_Init+0x68>)
 80014e0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80014e2:	4b13      	ldr	r3, [pc, #76]	; (8001530 <MX_TIM6_Init+0x64>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <MX_TIM6_Init+0x64>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 5400;
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <MX_TIM6_Init+0x64>)
 80014f0:	f241 5218 	movw	r2, #5400	; 0x1518
 80014f4:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014f6:	4b0e      	ldr	r3, [pc, #56]	; (8001530 <MX_TIM6_Init+0x64>)
 80014f8:	2280      	movs	r2, #128	; 0x80
 80014fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <MX_TIM6_Init+0x64>)
 80014fe:	f003 f821 	bl	8004544 <HAL_TIM_Base_Init>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001508:	f000 f910 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800150c:	2320      	movs	r3, #32
 800150e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	4619      	mov	r1, r3
 8001518:	4805      	ldr	r0, [pc, #20]	; (8001530 <MX_TIM6_Init+0x64>)
 800151a:	f003 fba5 	bl	8004c68 <HAL_TIMEx_MasterConfigSynchronization>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001524:	f000 f902 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	2003877c 	.word	0x2003877c
 8001534:	40001000 	.word	0x40001000

08001538 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b088      	sub	sp, #32
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800153e:	f107 0310 	add.w	r3, r7, #16
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]
 8001548:	609a      	str	r2, [r3, #8]
 800154a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001556:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <MX_TIM8_Init+0xa0>)
 8001558:	4a20      	ldr	r2, [pc, #128]	; (80015dc <MX_TIM8_Init+0xa4>)
 800155a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <MX_TIM8_Init+0xa0>)
 800155e:	2200      	movs	r2, #0
 8001560:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <MX_TIM8_Init+0xa0>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10800;
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <MX_TIM8_Init+0xa0>)
 800156a:	f642 2230 	movw	r2, #10800	; 0x2a30
 800156e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <MX_TIM8_Init+0xa0>)
 8001572:	2200      	movs	r2, #0
 8001574:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001576:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <MX_TIM8_Init+0xa0>)
 8001578:	2200      	movs	r2, #0
 800157a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <MX_TIM8_Init+0xa0>)
 800157e:	2280      	movs	r2, #128	; 0x80
 8001580:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001582:	4815      	ldr	r0, [pc, #84]	; (80015d8 <MX_TIM8_Init+0xa0>)
 8001584:	f002 ffde 	bl	8004544 <HAL_TIM_Base_Init>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 800158e:	f000 f8cd 	bl	800172c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001592:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001596:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001598:	f107 0310 	add.w	r3, r7, #16
 800159c:	4619      	mov	r1, r3
 800159e:	480e      	ldr	r0, [pc, #56]	; (80015d8 <MX_TIM8_Init+0xa0>)
 80015a0:	f003 f946 	bl	8004830 <HAL_TIM_ConfigClockSource>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 80015aa:	f000 f8bf 	bl	800172c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80015ae:	2320      	movs	r3, #32
 80015b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80015ba:	1d3b      	adds	r3, r7, #4
 80015bc:	4619      	mov	r1, r3
 80015be:	4806      	ldr	r0, [pc, #24]	; (80015d8 <MX_TIM8_Init+0xa0>)
 80015c0:	f003 fb52 	bl	8004c68 <HAL_TIMEx_MasterConfigSynchronization>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80015ca:	f000 f8af 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	3720      	adds	r7, #32
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20038640 	.word	0x20038640
 80015dc:	40010400 	.word	0x40010400

080015e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015e4:	4b14      	ldr	r3, [pc, #80]	; (8001638 <MX_USART3_UART_Init+0x58>)
 80015e6:	4a15      	ldr	r2, [pc, #84]	; (800163c <MX_USART3_UART_Init+0x5c>)
 80015e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015ea:	4b13      	ldr	r3, [pc, #76]	; (8001638 <MX_USART3_UART_Init+0x58>)
 80015ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015f2:	4b11      	ldr	r3, [pc, #68]	; (8001638 <MX_USART3_UART_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	; (8001638 <MX_USART3_UART_Init+0x58>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015fe:	4b0e      	ldr	r3, [pc, #56]	; (8001638 <MX_USART3_UART_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX;
 8001604:	4b0c      	ldr	r3, [pc, #48]	; (8001638 <MX_USART3_UART_Init+0x58>)
 8001606:	2208      	movs	r2, #8
 8001608:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800160a:	4b0b      	ldr	r3, [pc, #44]	; (8001638 <MX_USART3_UART_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001610:	4b09      	ldr	r3, [pc, #36]	; (8001638 <MX_USART3_UART_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001616:	4b08      	ldr	r3, [pc, #32]	; (8001638 <MX_USART3_UART_Init+0x58>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800161c:	4b06      	ldr	r3, [pc, #24]	; (8001638 <MX_USART3_UART_Init+0x58>)
 800161e:	2200      	movs	r2, #0
 8001620:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <MX_USART3_UART_Init+0x58>)
 8001624:	f003 fbcc 	bl	8004dc0 <HAL_UART_Init>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800162e:	f000 f87d 	bl	800172c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20038680 	.word	0x20038680
 800163c:	40004800 	.word	0x40004800

08001640 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001646:	4b0c      	ldr	r3, [pc, #48]	; (8001678 <MX_DMA_Init+0x38>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <MX_DMA_Init+0x38>)
 800164c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b09      	ldr	r3, [pc, #36]	; (8001678 <MX_DMA_Init+0x38>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800165a:	607b      	str	r3, [r7, #4]
 800165c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 800165e:	2200      	movs	r2, #0
 8001660:	2101      	movs	r1, #1
 8001662:	2010      	movs	r0, #16
 8001664:	f000 ff51 	bl	800250a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001668:	2010      	movs	r0, #16
 800166a:	f000 ff6a 	bl	8002542 <HAL_NVIC_EnableIRQ>

}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	40023800 	.word	0x40023800

0800167c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b088      	sub	sp, #32
 8001680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	2200      	movs	r2, #0
 8001688:	601a      	str	r2, [r3, #0]
 800168a:	605a      	str	r2, [r3, #4]
 800168c:	609a      	str	r2, [r3, #8]
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001692:	4b24      	ldr	r3, [pc, #144]	; (8001724 <MX_GPIO_Init+0xa8>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a23      	ldr	r2, [pc, #140]	; (8001724 <MX_GPIO_Init+0xa8>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b21      	ldr	r3, [pc, #132]	; (8001724 <MX_GPIO_Init+0xa8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	60bb      	str	r3, [r7, #8]
 80016a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016aa:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <MX_GPIO_Init+0xa8>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	4a1d      	ldr	r2, [pc, #116]	; (8001724 <MX_GPIO_Init+0xa8>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	6313      	str	r3, [r2, #48]	; 0x30
 80016b6:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <MX_GPIO_Init+0xa8>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	607b      	str	r3, [r7, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016c2:	4b18      	ldr	r3, [pc, #96]	; (8001724 <MX_GPIO_Init+0xa8>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a17      	ldr	r2, [pc, #92]	; (8001724 <MX_GPIO_Init+0xa8>)
 80016c8:	f043 0308 	orr.w	r3, r3, #8
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <MX_GPIO_Init+0xa8>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0308 	and.w	r3, r3, #8
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 80016da:	2200      	movs	r2, #0
 80016dc:	2181      	movs	r1, #129	; 0x81
 80016de:	4812      	ldr	r0, [pc, #72]	; (8001728 <MX_GPIO_Init+0xac>)
 80016e0:	f001 fe62 	bl	80033a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016e4:	2301      	movs	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f0:	2303      	movs	r3, #3
 80016f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4619      	mov	r1, r3
 80016fa:	480b      	ldr	r0, [pc, #44]	; (8001728 <MX_GPIO_Init+0xac>)
 80016fc:	f001 fcaa 	bl	8003054 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001700:	2380      	movs	r3, #128	; 0x80
 8001702:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001704:	2301      	movs	r3, #1
 8001706:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	2300      	movs	r3, #0
 800170a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170c:	2300      	movs	r3, #0
 800170e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001710:	f107 030c 	add.w	r3, r7, #12
 8001714:	4619      	mov	r1, r3
 8001716:	4804      	ldr	r0, [pc, #16]	; (8001728 <MX_GPIO_Init+0xac>)
 8001718:	f001 fc9c 	bl	8003054 <HAL_GPIO_Init>

}
 800171c:	bf00      	nop
 800171e:	3720      	adds	r7, #32
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40023800 	.word	0x40023800
 8001728:	40020400 	.word	0x40020400

0800172c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	0000      	movs	r0, r0
 800173c:	0000      	movs	r0, r0
	...

08001740 <Signal_Synthesis_Init>:
/**@brief starts the timer
 * @param htim: timer-handler which controls the DAC, timer have to be connected with DAC
 * @param hdac: is the DAC handler
 *@return gives HAL-Status of startet timer back
 */
HAL_StatusTypeDef Signal_Synthesis_Init(TIM_HandleTypeDef htim, DAC_HandleTypeDef hdac){
 8001740:	b084      	sub	sp, #16
 8001742:	b590      	push	{r4, r7, lr}
 8001744:	b085      	sub	sp, #20
 8001746:	af00      	add	r7, sp, #0
 8001748:	f107 0420 	add.w	r4, r7, #32
 800174c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Berechnung der DAC Werte abhängig von der gewünschten Amplitude

	maximalwert_DAC = (double)DAC_MAXVALUE_TO_AMPLITUDE_RATIO * (double)AMPLITUDE;
 8001750:	4a37      	ldr	r2, [pc, #220]	; (8001830 <Signal_Synthesis_Init+0xf0>)
 8001752:	a433      	add	r4, pc, #204	; (adr r4, 8001820 <Signal_Synthesis_Init+0xe0>)
 8001754:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001758:	e9c2 3400 	strd	r3, r4, [r2]
	// Create Sin Table
	float wt;
	for(int i = 0; i<BLOCKSIZE;i++){
 800175c:	2300      	movs	r3, #0
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	e033      	b.n	80017ca <Signal_Synthesis_Init+0x8a>
		wt = i/(float)BLOCKSIZE* 2*M_PI;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	ee07 3a90 	vmov	s15, r3
 8001768:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800176c:	eddf 6a31 	vldr	s13, [pc, #196]	; 8001834 <Signal_Synthesis_Init+0xf4>
 8001770:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001774:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001778:	ee17 0a90 	vmov	r0, s15
 800177c:	f7fe feb0 	bl	80004e0 <__aeabi_f2d>
 8001780:	a329      	add	r3, pc, #164	; (adr r3, 8001828 <Signal_Synthesis_Init+0xe8>)
 8001782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001786:	f7fe ff03 	bl	8000590 <__aeabi_dmul>
 800178a:	4603      	mov	r3, r0
 800178c:	460c      	mov	r4, r1
 800178e:	4618      	mov	r0, r3
 8001790:	4621      	mov	r1, r4
 8001792:	f7ff f9f5 	bl	8000b80 <__aeabi_d2f>
 8001796:	4603      	mov	r3, r0
 8001798:	607b      	str	r3, [r7, #4]
		sinTable[i] = sin(wt);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7fe fea0 	bl	80004e0 <__aeabi_f2d>
 80017a0:	4603      	mov	r3, r0
 80017a2:	460c      	mov	r4, r1
 80017a4:	ec44 3b10 	vmov	d0, r3, r4
 80017a8:	f005 fd2a 	bl	8007200 <sin>
 80017ac:	ec54 3b10 	vmov	r3, r4, d0
 80017b0:	4618      	mov	r0, r3
 80017b2:	4621      	mov	r1, r4
 80017b4:	f7ff f9e4 	bl	8000b80 <__aeabi_d2f>
 80017b8:	4601      	mov	r1, r0
 80017ba:	4a1f      	ldr	r2, [pc, #124]	; (8001838 <Signal_Synthesis_Init+0xf8>)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	4413      	add	r3, r2
 80017c2:	6019      	str	r1, [r3, #0]
	for(int i = 0; i<BLOCKSIZE;i++){
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3301      	adds	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 80017d0:	dbc7      	blt.n	8001762 <Signal_Synthesis_Init+0x22>
	}
	sinTable[BLOCKSIZE+1] = 0;
 80017d2:	4a19      	ldr	r2, [pc, #100]	; (8001838 <Signal_Synthesis_Init+0xf8>)
 80017d4:	4b19      	ldr	r3, [pc, #100]	; (800183c <Signal_Synthesis_Init+0xfc>)
 80017d6:	4413      	add	r3, r2
 80017d8:	f04f 0200 	mov.w	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
	// init calculate Vector with 0
	for(int i = 0; i<BLOCKSIZE;i++){
 80017de:	2300      	movs	r3, #0
 80017e0:	60bb      	str	r3, [r7, #8]
 80017e2:	e009      	b.n	80017f8 <Signal_Synthesis_Init+0xb8>
		calculate_vector[i] = 0;
 80017e4:	4a16      	ldr	r2, [pc, #88]	; (8001840 <Signal_Synthesis_Init+0x100>)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	4413      	add	r3, r2
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<BLOCKSIZE;i++){
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	3301      	adds	r3, #1
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 80017fe:	dbf1      	blt.n	80017e4 <Signal_Synthesis_Init+0xa4>
	}
	//Starte Timer 8, ist verbunden mit DAC
	__HAL_TIM_SET_AUTORELOAD(&htim,COUNTER_PERIOD);
 8001800:	6a3b      	ldr	r3, [r7, #32]
 8001802:	f240 4265 	movw	r2, #1125	; 0x465
 8001806:	62da      	str	r2, [r3, #44]	; 0x2c
 8001808:	f240 4365 	movw	r3, #1125	; 0x465
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c
	//return HAL_TIM_Base_Start(&htim);
	return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 800181a:	b004      	add	sp, #16
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	364d9360 	.word	0x364d9360
 8001824:	40a364d9 	.word	0x40a364d9
 8001828:	54442d18 	.word	0x54442d18
 800182c:	400921fb 	.word	0x400921fb
 8001830:	20000000 	.word	0x20000000
 8001834:	46960000 	.word	0x46960000
 8001838:	20000218 	.word	0x20000218
 800183c:	00012c04 	.word	0x00012c04
 8001840:	20012e24 	.word	0x20012e24
 8001844:	00000000 	.word	0x00000000

08001848 <Signal_Synthesis>:
 * 		  			 @li PWM, standard ist alpha = 0.5. Wenn alpha etwas anderes betragen soll, muss zuerst ChangePWMArray(float alpha) ausgeführt werden
 * @param frequenz: Frequency of the Signal, have to be a double type
 *@return Die Funktion gibt den HAL Status des gestarteten DAC zurück

 */
float Signal_Synthesis(uint8_t count, ...){
 8001848:	b40f      	push	{r0, r1, r2, r3}
 800184a:	b5b0      	push	{r4, r5, r7, lr}
 800184c:	b0b2      	sub	sp, #200	; 0xc8
 800184e:	af00      	add	r7, sp, #0


	// init calculate Vector with 0
	lastIndex = 0;
 8001850:	4bcb      	ldr	r3, [pc, #812]	; (8001b80 <Signal_Synthesis+0x338>)
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<BLOCKSIZE+1;i++){
 8001856:	2300      	movs	r3, #0
 8001858:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800185c:	e00c      	b.n	8001878 <Signal_Synthesis+0x30>
		calculate_vector[i] = 0;
 800185e:	4ac9      	ldr	r2, [pc, #804]	; (8001b84 <Signal_Synthesis+0x33c>)
 8001860:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001864:	009b      	lsls	r3, r3, #2
 8001866:	4413      	add	r3, r2
 8001868:	f04f 0200 	mov.w	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i<BLOCKSIZE+1;i++){
 800186e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001872:	3301      	adds	r3, #1
 8001874:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001878:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800187c:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8001880:	dded      	ble.n	800185e <Signal_Synthesis+0x16>
	}

	float freqMin = 8000;
 8001882:	4bc1      	ldr	r3, [pc, #772]	; (8001b88 <Signal_Synthesis+0x340>)
 8001884:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	struct signal signals;
	va_list argumentlist;
	va_start(argumentlist, count);
 8001888:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800188c:	607b      	str	r3, [r7, #4]
	uint8_t indexMin;
	//used to save the minimum and maximum of the caculate array
	float min=0;
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	float max=0;
 8001896:	f04f 0300 	mov.w	r3, #0
 800189a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

	//Bestimmt die kleinste Frequenz und speichert alle Signale im Struct
	uint8_t tmpCount = count;
 800189e:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 80018a2:	f887 30b3 	strb.w	r3, [r7, #179]	; 0xb3
	while(tmpCount--){ //first frequency is stored in signals[count]
 80018a6:	e06b      	b.n	8001980 <Signal_Synthesis+0x138>
		signals.kind[tmpCount] = va_arg(argumentlist, unsigned int);
 80018a8:	f897 10b3 	ldrb.w	r1, [r7, #179]	; 0xb3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	1d1a      	adds	r2, r3, #4
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	008b      	lsls	r3, r1, #2
 80018b6:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80018ba:	440b      	add	r3, r1
 80018bc:	f843 2cc0 	str.w	r2, [r3, #-192]
		signals.freq[tmpCount] = va_arg(argumentlist, double);
 80018c0:	f897 20b3 	ldrb.w	r2, [r7, #179]	; 0xb3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3307      	adds	r3, #7
 80018c8:	f023 0307 	bic.w	r3, r3, #7
 80018cc:	f103 0108 	add.w	r1, r3, #8
 80018d0:	6079      	str	r1, [r7, #4]
 80018d2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018d6:	3205      	adds	r2, #5
 80018d8:	00d2      	lsls	r2, r2, #3
 80018da:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80018de:	440a      	add	r2, r1
 80018e0:	3ac0      	subs	r2, #192	; 0xc0
 80018e2:	e9c2 3400 	strd	r3, r4, [r2]

		if (signals.freq[tmpCount] > F_MAX)
 80018e6:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 80018ea:	3305      	adds	r3, #5
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80018f2:	4413      	add	r3, r2
 80018f4:	3bc0      	subs	r3, #192	; 0xc0
 80018f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018fa:	f04f 0200 	mov.w	r2, #0
 80018fe:	4ba3      	ldr	r3, [pc, #652]	; (8001b8c <Signal_Synthesis+0x344>)
 8001900:	f7ff f8d6 	bl	8000ab0 <__aeabi_dcmpgt>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d00d      	beq.n	8001926 <Signal_Synthesis+0xde>
			signals.freq[tmpCount] = F_MAX;
 800190a:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800190e:	3305      	adds	r3, #5
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001916:	4413      	add	r3, r2
 8001918:	f1a3 02c0 	sub.w	r2, r3, #192	; 0xc0
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	4c9a      	ldr	r4, [pc, #616]	; (8001b8c <Signal_Synthesis+0x344>)
 8001922:	e9c2 3400 	strd	r3, r4, [r2]

		if(signals.freq[tmpCount] < freqMin){
 8001926:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800192a:	3305      	adds	r3, #5
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001932:	4413      	add	r3, r2
 8001934:	3bc0      	subs	r3, #192	; 0xc0
 8001936:	e9d3 4500 	ldrd	r4, r5, [r3]
 800193a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800193e:	f7fe fdcf 	bl	80004e0 <__aeabi_f2d>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4620      	mov	r0, r4
 8001948:	4629      	mov	r1, r5
 800194a:	f7ff f893 	bl	8000a74 <__aeabi_dcmplt>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d100      	bne.n	8001956 <Signal_Synthesis+0x10e>
 8001954:	e014      	b.n	8001980 <Signal_Synthesis+0x138>
			freqMin = signals.freq[tmpCount];
 8001956:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800195a:	3305      	adds	r3, #5
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001962:	4413      	add	r3, r2
 8001964:	3bc0      	subs	r3, #192	; 0xc0
 8001966:	e9d3 3400 	ldrd	r3, r4, [r3]
 800196a:	4618      	mov	r0, r3
 800196c:	4621      	mov	r1, r4
 800196e:	f7ff f907 	bl	8000b80 <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			indexMin = tmpCount;
 8001978:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 800197c:	f887 30c3 	strb.w	r3, [r7, #195]	; 0xc3
	while(tmpCount--){ //first frequency is stored in signals[count]
 8001980:	f897 30b3 	ldrb.w	r3, [r7, #179]	; 0xb3
 8001984:	1e5a      	subs	r2, r3, #1
 8001986:	f887 20b3 	strb.w	r2, [r7, #179]	; 0xb3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d18c      	bne.n	80018a8 <Signal_Synthesis+0x60>
	}

	//
	float wt, sinf0,addValue,tmp, tmp1, tmp2,tmp3,tmp4;//DEBUG
	//	tmp1 = (float)SAMPLE_FREQ; //DEBUG
	uint16_t wt_max[count];
 800198e:	f897 00d8 	ldrb.w	r0, [r7, #216]	; 0xd8
 8001992:	466b      	mov	r3, sp
 8001994:	461d      	mov	r5, r3
 8001996:	4603      	mov	r3, r0
 8001998:	3b01      	subs	r3, #1
 800199a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800199e:	b2c1      	uxtb	r1, r0
 80019a0:	f04f 0200 	mov.w	r2, #0
 80019a4:	f04f 0300 	mov.w	r3, #0
 80019a8:	f04f 0400 	mov.w	r4, #0
 80019ac:	0114      	lsls	r4, r2, #4
 80019ae:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80019b2:	010b      	lsls	r3, r1, #4
 80019b4:	b2c1      	uxtb	r1, r0
 80019b6:	f04f 0200 	mov.w	r2, #0
 80019ba:	f04f 0300 	mov.w	r3, #0
 80019be:	f04f 0400 	mov.w	r4, #0
 80019c2:	0114      	lsls	r4, r2, #4
 80019c4:	ea44 7411 	orr.w	r4, r4, r1, lsr #28
 80019c8:	010b      	lsls	r3, r1, #4
 80019ca:	4603      	mov	r3, r0
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	3301      	adds	r3, #1
 80019d0:	3307      	adds	r3, #7
 80019d2:	08db      	lsrs	r3, r3, #3
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	ebad 0d03 	sub.w	sp, sp, r3
 80019da:	466b      	mov	r3, sp
 80019dc:	3301      	adds	r3, #1
 80019de:	085b      	lsrs	r3, r3, #1
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	//Loop to reach all Signals
	for (int j = 0; j < count;j++){
 80019e6:	2300      	movs	r3, #0
 80019e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80019ec:	e124      	b.n	8001c38 <Signal_Synthesis+0x3f0>


		//		sigFreq_sampleFreq_ratio = signals.freq[j]/tmp1;

		//metode 2
		wt_max[j] = floor(BLOCKSIZE/(signals.freq[j]/ F_MIN));
 80019ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80019f2:	3305      	adds	r3, #5
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80019fa:	4413      	add	r3, r2
 80019fc:	3bc0      	subs	r3, #192	; 0xc0
 80019fe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a02:	f04f 0200 	mov.w	r2, #0
 8001a06:	4b62      	ldr	r3, [pc, #392]	; (8001b90 <Signal_Synthesis+0x348>)
 8001a08:	f7fe feec 	bl	80007e4 <__aeabi_ddiv>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	460c      	mov	r4, r1
 8001a10:	461a      	mov	r2, r3
 8001a12:	4623      	mov	r3, r4
 8001a14:	f04f 0000 	mov.w	r0, #0
 8001a18:	495e      	ldr	r1, [pc, #376]	; (8001b94 <Signal_Synthesis+0x34c>)
 8001a1a:	f7fe fee3 	bl	80007e4 <__aeabi_ddiv>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	460c      	mov	r4, r1
 8001a22:	ec44 3b17 	vmov	d7, r3, r4
 8001a26:	eeb0 0a47 	vmov.f32	s0, s14
 8001a2a:	eef0 0a67 	vmov.f32	s1, s15
 8001a2e:	f005 fb63 	bl	80070f8 <floor>
 8001a32:	ec54 3b10 	vmov	r3, r4, d0
 8001a36:	4618      	mov	r0, r3
 8001a38:	4621      	mov	r1, r4
 8001a3a:	f7ff f881 	bl	8000b40 <__aeabi_d2uiz>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	b299      	uxth	r1, r3
 8001a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001a4a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		//lastIndex = BLOCKSIZE-(BLOCKSIZE % wt_max);
		//Loop for the Array
		for (int i = 0; i < BLOCKSIZE+1;i++){
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001a54:	e0e5      	b.n	8001c22 <Signal_Synthesis+0x3da>

			switch (signals.kind[j]) {
 8001a56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001a60:	4413      	add	r3, r2
 8001a62:	f853 3cc0 	ldr.w	r3, [r3, #-192]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d002      	beq.n	8001a70 <Signal_Synthesis+0x228>
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d04e      	beq.n	8001b0c <Signal_Synthesis+0x2c4>
 8001a6e:	e077      	b.n	8001b60 <Signal_Synthesis+0x318>
				// methode 1
				//				wt = (int)(signals.freq[j]/ F_MIN*i) % (BLOCKSIZE);
				//				addValue = sinTable[(int)(wt)];

				//metode 2
				tmp = (i % wt_max[j]);
 8001a70:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a74:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001a78:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a82:	fb93 f1f2 	sdiv	r1, r3, r2
 8001a86:	fb02 f201 	mul.w	r2, r2, r1
 8001a8a:	1a9b      	subs	r3, r3, r2
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a94:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
				wt = (tmp/wt_max[j]) * 2*M_PI;
 8001a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a9c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001aa0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001aa4:	ee07 3a90 	vmov	s15, r3
 8001aa8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aac:	edd7 6a22 	vldr	s13, [r7, #136]	; 0x88
 8001ab0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ab4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001ab8:	ee17 0a90 	vmov	r0, s15
 8001abc:	f7fe fd10 	bl	80004e0 <__aeabi_f2d>
 8001ac0:	a329      	add	r3, pc, #164	; (adr r3, 8001b68 <Signal_Synthesis+0x320>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fd63 	bl	8000590 <__aeabi_dmul>
 8001aca:	4603      	mov	r3, r0
 8001acc:	460c      	mov	r4, r1
 8001ace:	4618      	mov	r0, r3
 8001ad0:	4621      	mov	r1, r4
 8001ad2:	f7ff f855 	bl	8000b80 <__aeabi_d2f>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
				sinf0 = sin(wt); // Erzeugung des Sinus-Wertes abhängig von der kleinsten Frequenz
 8001adc:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001ae0:	f7fe fcfe 	bl	80004e0 <__aeabi_f2d>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	460c      	mov	r4, r1
 8001ae8:	ec44 3b10 	vmov	d0, r3, r4
 8001aec:	f005 fb88 	bl	8007200 <sin>
 8001af0:	ec54 3b10 	vmov	r3, r4, d0
 8001af4:	4618      	mov	r0, r3
 8001af6:	4621      	mov	r1, r4
 8001af8:	f7ff f842 	bl	8000b80 <__aeabi_d2f>
 8001afc:	4603      	mov	r3, r0
 8001afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
				addValue = sinf0;
 8001b02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001b06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

				break;
 8001b0a:	e047      	b.n	8001b9c <Signal_Synthesis+0x354>
			case SAWTOOTH:
				tmp = (int)(signals.freq[j]/SAMPLE_FREQ)*i; //Sägezahnwert durch beschleunigen des Counters abhängig von Frequenz bestimmen
 8001b0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001b10:	3305      	adds	r3, #5
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8001b18:	4413      	add	r3, r2
 8001b1a:	3bc0      	subs	r3, #192	; 0xc0
 8001b1c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b20:	a313      	add	r3, pc, #76	; (adr r3, 8001b70 <Signal_Synthesis+0x328>)
 8001b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b26:	f7fe fe5d 	bl	80007e4 <__aeabi_ddiv>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	460c      	mov	r4, r1
 8001b2e:	4618      	mov	r0, r3
 8001b30:	4621      	mov	r1, r4
 8001b32:	a311      	add	r3, pc, #68	; (adr r3, 8001b78 <Signal_Synthesis+0x330>)
 8001b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b38:	f7fe fe54 	bl	80007e4 <__aeabi_ddiv>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	460c      	mov	r4, r1
 8001b40:	4618      	mov	r0, r3
 8001b42:	4621      	mov	r1, r4
 8001b44:	f7fe ffd4 	bl	8000af0 <__aeabi_d2iz>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001b4e:	fb03 f302 	mul.w	r3, r3, r2
 8001b52:	ee07 3a90 	vmov	s15, r3
 8001b56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b5a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
				//									//	wird im gegensatz zu den anderen Signalen nur einmal addiert da es entweder Maximale Amplitude oder null ist
				//									double tmp = PWMTable[i*(int)(Signale.frequenz[j]/Signale.frequenz[indexMin]]);
				//									if (tmp){
				//									addValuePWM = PWMTable[i*(int)(Signale.frequenz[j]/Signale.frequenz[indexMin])];//bereits erzeugtes PWM-Stützstellen-Array frequenzabängig durchgehen
				//									}
				break;
 8001b5e:	e01d      	b.n	8001b9c <Signal_Synthesis+0x354>
			default:
				return -1;
 8001b60:	4b0d      	ldr	r3, [pc, #52]	; (8001b98 <Signal_Synthesis+0x350>)
 8001b62:	e0fb      	b.n	8001d5c <Signal_Synthesis+0x514>
 8001b64:	f3af 8000 	nop.w
 8001b68:	54442d18 	.word	0x54442d18
 8001b6c:	400921fb 	.word	0x400921fb
 8001b70:	00000000 	.word	0x00000000
 8001b74:	4199bfcc 	.word	0x4199bfcc
 8001b78:	00000000 	.word	0x00000000
 8001b7c:	40919400 	.word	0x40919400
 8001b80:	20012e20 	.word	0x20012e20
 8001b84:	20012e24 	.word	0x20012e24
 8001b88:	45fa0000 	.word	0x45fa0000
 8001b8c:	40b2c000 	.word	0x40b2c000
 8001b90:	40140000 	.word	0x40140000
 8001b94:	40d2c000 	.word	0x40d2c000
 8001b98:	bf800000 	.word	0xbf800000
				break;


			}
			calculate_vector[i] = (calculate_vector[i]+ addValue);// max min auf infinity und -infinity
 8001b9c:	4a73      	ldr	r2, [pc, #460]	; (8001d6c <Signal_Synthesis+0x524>)
 8001b9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	ed93 7a00 	vldr	s14, [r3]
 8001baa:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8001bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bb2:	4a6e      	ldr	r2, [pc, #440]	; (8001d6c <Signal_Synthesis+0x524>)
 8001bb4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	edc3 7a00 	vstr	s15, [r3]
			//maximum
			if (max < calculate_vector[i])
 8001bc0:	4a6a      	ldr	r2, [pc, #424]	; (8001d6c <Signal_Synthesis+0x524>)
 8001bc2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	edd3 7a00 	vldr	s15, [r3]
 8001bce:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8001bd2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bda:	d507      	bpl.n	8001bec <Signal_Synthesis+0x3a4>
				max = calculate_vector[i];
 8001bdc:	4a63      	ldr	r2, [pc, #396]	; (8001d6c <Signal_Synthesis+0x524>)
 8001bde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			//minimum
			if (min > calculate_vector[i])
 8001bec:	4a5f      	ldr	r2, [pc, #380]	; (8001d6c <Signal_Synthesis+0x524>)
 8001bee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	4413      	add	r3, r2
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	ed97 7a31 	vldr	s14, [r7, #196]	; 0xc4
 8001bfe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c06:	dd07      	ble.n	8001c18 <Signal_Synthesis+0x3d0>
				min = calculate_vector[i];
 8001c08:	4a58      	ldr	r2, [pc, #352]	; (8001d6c <Signal_Synthesis+0x524>)
 8001c0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4413      	add	r3, r2
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
		for (int i = 0; i < BLOCKSIZE+1;i++){
 8001c18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8001c22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c26:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8001c2a:	f77f af14 	ble.w	8001a56 <Signal_Synthesis+0x20e>
	for (int j = 0; j < count;j++){
 8001c2e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c32:	3301      	adds	r3, #1
 8001c34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001c38:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8001c3c:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8001c40:	429a      	cmp	r2, r3
 8001c42:	f6ff aed4 	blt.w	80019ee <Signal_Synthesis+0x1a6>
		//addValue =(addValueDreieck + addValuePWM + addValueSIN + addValueSaegezahn)/count; // auf Eins normieren


	}
	//norm the signal to -1...1
	for (int i = 0; i< BLOCKSIZE;i++){
 8001c46:	2300      	movs	r3, #0
 8001c48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001c4c:	e01e      	b.n	8001c8c <Signal_Synthesis+0x444>
		calculate_vector[i] = calculate_vector[i]*(2/(max-min));
 8001c4e:	4a47      	ldr	r2, [pc, #284]	; (8001d6c <Signal_Synthesis+0x524>)
 8001c50:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	ed93 7a00 	vldr	s14, [r3]
 8001c5c:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 8001c60:	edd7 7a31 	vldr	s15, [r7, #196]	; 0xc4
 8001c64:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001c68:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8001c6c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c74:	4a3d      	ldr	r2, [pc, #244]	; (8001d6c <Signal_Synthesis+0x524>)
 8001c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4413      	add	r3, r2
 8001c7e:	edc3 7a00 	vstr	s15, [r3]
	for (int i = 0; i< BLOCKSIZE;i++){
 8001c82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c86:	3301      	adds	r3, #1
 8001c88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001c8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c90:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8001c94:	dbdb      	blt.n	8001c4e <Signal_Synthesis+0x406>
		//		calculate_vector[i] = calculate_vector[i]*1/count;
	}


	//calculate the end of one periode of the combined signal by finding the least common multiplier(LCM)
	uint16_t LCM = wt_max[indexMin];
 8001c96:	f897 20c3 	ldrb.w	r2, [r7, #195]	; 0xc3
 8001c9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c9e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ca2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
	uint8_t isLCM = 0;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
	for (int i = LCM; i < BLOCKSIZE;i++){
 8001cac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001cb0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001cb4:	e036      	b.n	8001d24 <Signal_Synthesis+0x4dc>
		isLCM = 0;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d

		for (int j = 0; j < count ;j++){
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001cc2:	e019      	b.n	8001cf8 <Signal_Synthesis+0x4b0>
			if ((i % wt_max[j])==0){
 8001cc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001cc8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001ccc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cd6:	fb93 f1f2 	sdiv	r1, r3, r2
 8001cda:	fb02 f201 	mul.w	r2, r2, r1
 8001cde:	1a9b      	subs	r3, r3, r2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d104      	bne.n	8001cee <Signal_Synthesis+0x4a6>
				isLCM = isLCM + 1;
 8001ce4:	f897 309d 	ldrb.w	r3, [r7, #157]	; 0x9d
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f887 309d 	strb.w	r3, [r7, #157]	; 0x9d
		for (int j = 0; j < count ;j++){
 8001cee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001cf8:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8001cfc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001d00:	429a      	cmp	r2, r3
 8001d02:	dbdf      	blt.n	8001cc4 <Signal_Synthesis+0x47c>
			}
		}

		// check if i is a LCM
		if (isLCM==count){
 8001d04:	f897 209d 	ldrb.w	r2, [r7, #157]	; 0x9d
 8001d08:	f897 30d8 	ldrb.w	r3, [r7, #216]	; 0xd8
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d104      	bne.n	8001d1a <Signal_Synthesis+0x4d2>
			LCM = i;
 8001d10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d14:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
			break;
 8001d18:	e009      	b.n	8001d2e <Signal_Synthesis+0x4e6>
	for (int i = LCM; i < BLOCKSIZE;i++){
 8001d1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d1e:	3301      	adds	r3, #1
 8001d20:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001d24:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d28:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8001d2c:	dbc3      	blt.n	8001cb6 <Signal_Synthesis+0x46e>
		}
	}

	if (LCM > BLOCKSIZE){
 8001d2e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001d32:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8001d36:	d901      	bls.n	8001d3c <Signal_Synthesis+0x4f4>
		return -1;
 8001d38:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <Signal_Synthesis+0x528>)
 8001d3a:	e00f      	b.n	8001d5c <Signal_Synthesis+0x514>
	}

	//set lastIndex for the OutputSignal function
	lastIndex = BLOCKSIZE - (BLOCKSIZE % LCM);
 8001d3c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8001d40:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001d44:	fb92 f1f3 	sdiv	r1, r2, r3
 8001d48:	fb03 f301 	mul.w	r3, r3, r1
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	f5c3 4396 	rsb	r3, r3, #19200	; 0x4b00
 8001d52:	461a      	mov	r2, r3
 8001d54:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <Signal_Synthesis+0x52c>)
 8001d56:	601a      	str	r2, [r3, #0]
	va_end(argumentlist);
	return freqMin;
 8001d58:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001d5c:	46ad      	mov	sp, r5
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	37c8      	adds	r7, #200	; 0xc8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8001d68:	b004      	add	sp, #16
 8001d6a:	4770      	bx	lr
 8001d6c:	20012e24 	.word	0x20012e24
 8001d70:	bf800000 	.word	0xbf800000
 8001d74:	20012e20 	.word	0x20012e20

08001d78 <Output_Signal>:
 * 		  			 @li DREIECK
 * 		  			 @li PWM, standard ist alpha = 0.5. Wenn alpha etwas anderes betragen soll, muss zuerst ChangePWMArray(float alpha) ausgeführt werden
 *@return Die Funktion gibt den HAL Status des gestarteten DAC zurück

 */
HAL_StatusTypeDef Output_Signal(DAC_HandleTypeDef hdac){
 8001d78:	b084      	sub	sp, #16
 8001d7a:	b590      	push	{r4, r7, lr}
 8001d7c:	b089      	sub	sp, #36	; 0x24
 8001d7e:	af02      	add	r7, sp, #8
 8001d80:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001d84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	//uint32_t output_vector[BLOCKSIZE+39];
	uint32_t length = lastIndex;
 8001d88:	4b43      	ldr	r3, [pc, #268]	; (8001e98 <Output_Signal+0x120>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	613b      	str	r3, [r7, #16]
	//	HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
	float tmp, tmp2;
	uint32_t tmp3 ;
	for (int i = 0; i < BLOCKSIZE; i++){
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
 8001d92:	e068      	b.n	8001e66 <Output_Signal+0xee>

		tmp = calculate_vector[i]+1;
 8001d94:	4a41      	ldr	r2, [pc, #260]	; (8001e9c <Output_Signal+0x124>)
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	4413      	add	r3, r2
 8001d9c:	edd3 7a00 	vldr	s15, [r3]
 8001da0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001da4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001da8:	edc7 7a03 	vstr	s15, [r7, #12]
		tmp2 = tmp * maximalwert_DAC/2 ;
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f7fe fb97 	bl	80004e0 <__aeabi_f2d>
 8001db2:	4b3b      	ldr	r3, [pc, #236]	; (8001ea0 <Output_Signal+0x128>)
 8001db4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001db8:	461a      	mov	r2, r3
 8001dba:	4623      	mov	r3, r4
 8001dbc:	f7fe fbe8 	bl	8000590 <__aeabi_dmul>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	460c      	mov	r4, r1
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	4621      	mov	r1, r4
 8001dc8:	f04f 0200 	mov.w	r2, #0
 8001dcc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001dd0:	f7fe fd08 	bl	80007e4 <__aeabi_ddiv>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	460c      	mov	r4, r1
 8001dd8:	4618      	mov	r0, r3
 8001dda:	4621      	mov	r1, r4
 8001ddc:	f7fe fed0 	bl	8000b80 <__aeabi_d2f>
 8001de0:	4603      	mov	r3, r0
 8001de2:	60bb      	str	r3, [r7, #8]
		tmp3 = tmp2 +OFFSET;
 8001de4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001de8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001ea4 <Output_Signal+0x12c>
 8001dec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001df0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001df4:	ee17 3a90 	vmov	r3, s15
 8001df8:	607b      	str	r3, [r7, #4]
		output_vector[i] = (calculate_vector[i]+1) * maximalwert_DAC/2 + OFFSET ;
 8001dfa:	4a28      	ldr	r2, [pc, #160]	; (8001e9c <Output_Signal+0x124>)
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	edd3 7a00 	vldr	s15, [r3]
 8001e06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001e0a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001e0e:	ee17 0a90 	vmov	r0, s15
 8001e12:	f7fe fb65 	bl	80004e0 <__aeabi_f2d>
 8001e16:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <Output_Signal+0x128>)
 8001e18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4623      	mov	r3, r4
 8001e20:	f7fe fbb6 	bl	8000590 <__aeabi_dmul>
 8001e24:	4603      	mov	r3, r0
 8001e26:	460c      	mov	r4, r1
 8001e28:	4618      	mov	r0, r3
 8001e2a:	4621      	mov	r1, r4
 8001e2c:	f04f 0200 	mov.w	r2, #0
 8001e30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001e34:	f7fe fcd6 	bl	80007e4 <__aeabi_ddiv>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	460c      	mov	r4, r1
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	4621      	mov	r1, r4
 8001e40:	a313      	add	r3, pc, #76	; (adr r3, 8001e90 <Output_Signal+0x118>)
 8001e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e46:	f7fe f9ed 	bl	8000224 <__adddf3>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	460c      	mov	r4, r1
 8001e4e:	4618      	mov	r0, r3
 8001e50:	4621      	mov	r1, r4
 8001e52:	f7fe fe75 	bl	8000b40 <__aeabi_d2uiz>
 8001e56:	4601      	mov	r1, r0
 8001e58:	4a13      	ldr	r2, [pc, #76]	; (8001ea8 <Output_Signal+0x130>)
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int i = 0; i < BLOCKSIZE; i++){
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	3301      	adds	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
 8001e6c:	db92      	blt.n	8001d94 <Output_Signal+0x1c>
	}
	//HAL_DAC_Stop_DMA(&hdac, DAC_CHANNEL_1);
	return HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, output_vector,length, DAC_ALIGN_12B_R);
 8001e6e:	2300      	movs	r3, #0
 8001e70:	9300      	str	r3, [sp, #0]
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	4a0c      	ldr	r2, [pc, #48]	; (8001ea8 <Output_Signal+0x130>)
 8001e76:	2100      	movs	r1, #0
 8001e78:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001e7c:	f000 fb9e 	bl	80025bc <HAL_DAC_Start_DMA>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	371c      	adds	r7, #28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001e8c:	b004      	add	sp, #16
 8001e8e:	4770      	bx	lr
 8001e90:	00000000 	.word	0x00000000
 8001e94:	40622000 	.word	0x40622000
 8001e98:	20012e20 	.word	0x20012e20
 8001e9c:	20012e24 	.word	0x20012e24
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	43110000 	.word	0x43110000
 8001ea8:	20025a38 	.word	0x20025a38

08001eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b083      	sub	sp, #12
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <HAL_MspInit+0x44>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	4a0e      	ldr	r2, [pc, #56]	; (8001ef0 <HAL_MspInit+0x44>)
 8001eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <HAL_MspInit+0x44>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec6:	607b      	str	r3, [r7, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <HAL_MspInit+0x44>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	4a08      	ldr	r2, [pc, #32]	; (8001ef0 <HAL_MspInit+0x44>)
 8001ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_MspInit+0x44>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08a      	sub	sp, #40	; 0x28
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 0314 	add.w	r3, r7, #20
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a2e      	ldr	r2, [pc, #184]	; (8001fcc <HAL_DAC_MspInit+0xd8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d155      	bne.n	8001fc2 <HAL_DAC_MspInit+0xce>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001f16:	4b2e      	ldr	r3, [pc, #184]	; (8001fd0 <HAL_DAC_MspInit+0xdc>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	4a2d      	ldr	r2, [pc, #180]	; (8001fd0 <HAL_DAC_MspInit+0xdc>)
 8001f1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001f20:	6413      	str	r3, [r2, #64]	; 0x40
 8001f22:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <HAL_DAC_MspInit+0xdc>)
 8001f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f26:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f2a:	613b      	str	r3, [r7, #16]
 8001f2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	4b28      	ldr	r3, [pc, #160]	; (8001fd0 <HAL_DAC_MspInit+0xdc>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	4a27      	ldr	r2, [pc, #156]	; (8001fd0 <HAL_DAC_MspInit+0xdc>)
 8001f34:	f043 0301 	orr.w	r3, r3, #1
 8001f38:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3a:	4b25      	ldr	r3, [pc, #148]	; (8001fd0 <HAL_DAC_MspInit+0xdc>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f46:	2330      	movs	r3, #48	; 0x30
 8001f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	4619      	mov	r1, r3
 8001f58:	481e      	ldr	r0, [pc, #120]	; (8001fd4 <HAL_DAC_MspInit+0xe0>)
 8001f5a:	f001 f87b 	bl	8003054 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001f5e:	4b1e      	ldr	r3, [pc, #120]	; (8001fd8 <HAL_DAC_MspInit+0xe4>)
 8001f60:	4a1e      	ldr	r2, [pc, #120]	; (8001fdc <HAL_DAC_MspInit+0xe8>)
 8001f62:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001f64:	4b1c      	ldr	r3, [pc, #112]	; (8001fd8 <HAL_DAC_MspInit+0xe4>)
 8001f66:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001f6a:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f6c:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <HAL_DAC_MspInit+0xe4>)
 8001f6e:	2240      	movs	r2, #64	; 0x40
 8001f70:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f72:	4b19      	ldr	r3, [pc, #100]	; (8001fd8 <HAL_DAC_MspInit+0xe4>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001f78:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <HAL_DAC_MspInit+0xe4>)
 8001f7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f7e:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001f80:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_DAC_MspInit+0xe4>)
 8001f82:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f86:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001f88:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <HAL_DAC_MspInit+0xe4>)
 8001f8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f8e:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001f90:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <HAL_DAC_MspInit+0xe4>)
 8001f92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f96:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <HAL_DAC_MspInit+0xe4>)
 8001f9a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f9e:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001fa0:	4b0d      	ldr	r3, [pc, #52]	; (8001fd8 <HAL_DAC_MspInit+0xe4>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001fa6:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <HAL_DAC_MspInit+0xe4>)
 8001fa8:	f000 fcde 	bl	8002968 <HAL_DMA_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_DAC_MspInit+0xc2>
    {
      Error_Handler();
 8001fb2:	f7ff fbbb 	bl	800172c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a07      	ldr	r2, [pc, #28]	; (8001fd8 <HAL_DAC_MspInit+0xe4>)
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	4a06      	ldr	r2, [pc, #24]	; (8001fd8 <HAL_DAC_MspInit+0xe4>)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001fc2:	bf00      	nop
 8001fc4:	3728      	adds	r7, #40	; 0x28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40007400 	.word	0x40007400
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	20038704 	.word	0x20038704
 8001fdc:	40026088 	.word	0x40026088

08001fe0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff0:	d10c      	bne.n	800200c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <HAL_TIM_Base_MspInit+0x8c>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	4a1d      	ldr	r2, [pc, #116]	; (800206c <HAL_TIM_Base_MspInit+0x8c>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	; (800206c <HAL_TIM_Base_MspInit+0x8c>)
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	617b      	str	r3, [r7, #20]
 8002008:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800200a:	e02a      	b.n	8002062 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a17      	ldr	r2, [pc, #92]	; (8002070 <HAL_TIM_Base_MspInit+0x90>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d10c      	bne.n	8002030 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002016:	4b15      	ldr	r3, [pc, #84]	; (800206c <HAL_TIM_Base_MspInit+0x8c>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a14      	ldr	r2, [pc, #80]	; (800206c <HAL_TIM_Base_MspInit+0x8c>)
 800201c:	f043 0310 	orr.w	r3, r3, #16
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_TIM_Base_MspInit+0x8c>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
}
 800202e:	e018      	b.n	8002062 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM8)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a0f      	ldr	r2, [pc, #60]	; (8002074 <HAL_TIM_Base_MspInit+0x94>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d113      	bne.n	8002062 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800203a:	4b0c      	ldr	r3, [pc, #48]	; (800206c <HAL_TIM_Base_MspInit+0x8c>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4a0b      	ldr	r2, [pc, #44]	; (800206c <HAL_TIM_Base_MspInit+0x8c>)
 8002040:	f043 0302 	orr.w	r3, r3, #2
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	4b09      	ldr	r3, [pc, #36]	; (800206c <HAL_TIM_Base_MspInit+0x8c>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	60fb      	str	r3, [r7, #12]
 8002050:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2100      	movs	r1, #0
 8002056:	202c      	movs	r0, #44	; 0x2c
 8002058:	f000 fa57 	bl	800250a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800205c:	202c      	movs	r0, #44	; 0x2c
 800205e:	f000 fa70 	bl	8002542 <HAL_NVIC_EnableIRQ>
}
 8002062:	bf00      	nop
 8002064:	3718      	adds	r7, #24
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800
 8002070:	40001000 	.word	0x40001000
 8002074:	40010400 	.word	0x40010400

08002078 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b08a      	sub	sp, #40	; 0x28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002080:	f107 0314 	add.w	r3, r7, #20
 8002084:	2200      	movs	r2, #0
 8002086:	601a      	str	r2, [r3, #0]
 8002088:	605a      	str	r2, [r3, #4]
 800208a:	609a      	str	r2, [r3, #8]
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a17      	ldr	r2, [pc, #92]	; (80020f4 <HAL_UART_MspInit+0x7c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d128      	bne.n	80020ec <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800209a:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <HAL_UART_MspInit+0x80>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	4a16      	ldr	r2, [pc, #88]	; (80020f8 <HAL_UART_MspInit+0x80>)
 80020a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020a4:	6413      	str	r3, [r2, #64]	; 0x40
 80020a6:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <HAL_UART_MspInit+0x80>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <HAL_UART_MspInit+0x80>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	4a10      	ldr	r2, [pc, #64]	; (80020f8 <HAL_UART_MspInit+0x80>)
 80020b8:	f043 0308 	orr.w	r3, r3, #8
 80020bc:	6313      	str	r3, [r2, #48]	; 0x30
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <HAL_UART_MspInit+0x80>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80020ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d0:	2302      	movs	r3, #2
 80020d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020d8:	2303      	movs	r3, #3
 80020da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020dc:	2307      	movs	r3, #7
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020e0:	f107 0314 	add.w	r3, r7, #20
 80020e4:	4619      	mov	r1, r3
 80020e6:	4805      	ldr	r0, [pc, #20]	; (80020fc <HAL_UART_MspInit+0x84>)
 80020e8:	f000 ffb4 	bl	8003054 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020ec:	bf00      	nop
 80020ee:	3728      	adds	r7, #40	; 0x28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	40004800 	.word	0x40004800
 80020f8:	40023800 	.word	0x40023800
 80020fc:	40020c00 	.word	0x40020c00

08002100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002104:	bf00      	nop
 8002106:	46bd      	mov	sp, r7
 8002108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210c:	4770      	bx	lr

0800210e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002112:	e7fe      	b.n	8002112 <HardFault_Handler+0x4>

08002114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002118:	e7fe      	b.n	8002118 <MemManage_Handler+0x4>

0800211a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800211a:	b480      	push	{r7}
 800211c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800211e:	e7fe      	b.n	800211e <BusFault_Handler+0x4>

08002120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002120:	b480      	push	{r7}
 8002122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002124:	e7fe      	b.n	8002124 <UsageFault_Handler+0x4>

08002126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002126:	b480      	push	{r7}
 8002128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800212a:	bf00      	nop
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002142:	b480      	push	{r7}
 8002144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002154:	f000 f8de 	bl	8002314 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002158:	bf00      	nop
 800215a:	bd80      	pop	{r7, pc}

0800215c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002160:	4802      	ldr	r0, [pc, #8]	; (800216c <DMA1_Stream5_IRQHandler+0x10>)
 8002162:	f000 fd0f 	bl	8002b84 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002166:	bf00      	nop
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	20038704 	.word	0x20038704

08002170 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8002174:	4802      	ldr	r0, [pc, #8]	; (8002180 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002176:	f002 fa3b 	bl	80045f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	20038640 	.word	0x20038640

08002184 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800218c:	4b11      	ldr	r3, [pc, #68]	; (80021d4 <_sbrk+0x50>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d102      	bne.n	800219a <_sbrk+0x16>
		heap_end = &end;
 8002194:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <_sbrk+0x50>)
 8002196:	4a10      	ldr	r2, [pc, #64]	; (80021d8 <_sbrk+0x54>)
 8002198:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <_sbrk+0x50>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <_sbrk+0x50>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	4413      	add	r3, r2
 80021a8:	466a      	mov	r2, sp
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d907      	bls.n	80021be <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80021ae:	f003 fa4b 	bl	8005648 <__errno>
 80021b2:	4602      	mov	r2, r0
 80021b4:	230c      	movs	r3, #12
 80021b6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80021b8:	f04f 33ff 	mov.w	r3, #4294967295
 80021bc:	e006      	b.n	80021cc <_sbrk+0x48>
	}

	heap_end += incr;
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <_sbrk+0x50>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4413      	add	r3, r2
 80021c6:	4a03      	ldr	r2, [pc, #12]	; (80021d4 <_sbrk+0x50>)
 80021c8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80021ca:	68fb      	ldr	r3, [r7, #12]
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000208 	.word	0x20000208
 80021d8:	20038808 	.word	0x20038808

080021dc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021e0:	4b15      	ldr	r3, [pc, #84]	; (8002238 <SystemInit+0x5c>)
 80021e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e6:	4a14      	ldr	r2, [pc, #80]	; (8002238 <SystemInit+0x5c>)
 80021e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80021f0:	4b12      	ldr	r3, [pc, #72]	; (800223c <SystemInit+0x60>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a11      	ldr	r2, [pc, #68]	; (800223c <SystemInit+0x60>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021fc:	4b0f      	ldr	r3, [pc, #60]	; (800223c <SystemInit+0x60>)
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002202:	4b0e      	ldr	r3, [pc, #56]	; (800223c <SystemInit+0x60>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	490d      	ldr	r1, [pc, #52]	; (800223c <SystemInit+0x60>)
 8002208:	4b0d      	ldr	r3, [pc, #52]	; (8002240 <SystemInit+0x64>)
 800220a:	4013      	ands	r3, r2
 800220c:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800220e:	4b0b      	ldr	r3, [pc, #44]	; (800223c <SystemInit+0x60>)
 8002210:	4a0c      	ldr	r2, [pc, #48]	; (8002244 <SystemInit+0x68>)
 8002212:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002214:	4b09      	ldr	r3, [pc, #36]	; (800223c <SystemInit+0x60>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a08      	ldr	r2, [pc, #32]	; (800223c <SystemInit+0x60>)
 800221a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800221e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <SystemInit+0x60>)
 8002222:	2200      	movs	r2, #0
 8002224:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002226:	4b04      	ldr	r3, [pc, #16]	; (8002238 <SystemInit+0x5c>)
 8002228:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800222c:	609a      	str	r2, [r3, #8]
#endif
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	e000ed00 	.word	0xe000ed00
 800223c:	40023800 	.word	0x40023800
 8002240:	fef6ffff 	.word	0xfef6ffff
 8002244:	24003010 	.word	0x24003010

08002248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002248:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002280 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800224c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800224e:	e003      	b.n	8002258 <LoopCopyDataInit>

08002250 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002250:	4b0c      	ldr	r3, [pc, #48]	; (8002284 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002252:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002254:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002256:	3104      	adds	r1, #4

08002258 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002258:	480b      	ldr	r0, [pc, #44]	; (8002288 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800225c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800225e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002260:	d3f6      	bcc.n	8002250 <CopyDataInit>
  ldr  r2, =_sbss
 8002262:	4a0b      	ldr	r2, [pc, #44]	; (8002290 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002264:	e002      	b.n	800226c <LoopFillZerobss>

08002266 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002266:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002268:	f842 3b04 	str.w	r3, [r2], #4

0800226c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800226e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002270:	d3f9      	bcc.n	8002266 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002272:	f7ff ffb3 	bl	80021dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002276:	f003 f9ed 	bl	8005654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800227a:	f7fe ff7f 	bl	800117c <main>
  bx  lr    
 800227e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002280:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8002284:	08008568 	.word	0x08008568
  ldr  r0, =_sdata
 8002288:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800228c:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8002290:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8002294:	20038808 	.word	0x20038808

08002298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002298:	e7fe      	b.n	8002298 <ADC_IRQHandler>

0800229a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800229e:	2003      	movs	r0, #3
 80022a0:	f000 f928 	bl	80024f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022a4:	2000      	movs	r0, #0
 80022a6:	f000 f805 	bl	80022b4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80022aa:	f7ff fdff 	bl	8001eac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022bc:	4b12      	ldr	r3, [pc, #72]	; (8002308 <HAL_InitTick+0x54>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <HAL_InitTick+0x58>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	4619      	mov	r1, r3
 80022c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80022ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d2:	4618      	mov	r0, r3
 80022d4:	f000 f943 	bl	800255e <HAL_SYSTICK_Config>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e00e      	b.n	8002300 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b0f      	cmp	r3, #15
 80022e6:	d80a      	bhi.n	80022fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022e8:	2200      	movs	r2, #0
 80022ea:	6879      	ldr	r1, [r7, #4]
 80022ec:	f04f 30ff 	mov.w	r0, #4294967295
 80022f0:	f000 f90b 	bl	800250a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80022f4:	4a06      	ldr	r2, [pc, #24]	; (8002310 <HAL_InitTick+0x5c>)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
 80022fc:	e000      	b.n	8002300 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	20000008 	.word	0x20000008
 800230c:	20000010 	.word	0x20000010
 8002310:	2000000c 	.word	0x2000000c

08002314 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002314:	b480      	push	{r7}
 8002316:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002318:	4b06      	ldr	r3, [pc, #24]	; (8002334 <HAL_IncTick+0x20>)
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	461a      	mov	r2, r3
 800231e:	4b06      	ldr	r3, [pc, #24]	; (8002338 <HAL_IncTick+0x24>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4413      	add	r3, r2
 8002324:	4a04      	ldr	r2, [pc, #16]	; (8002338 <HAL_IncTick+0x24>)
 8002326:	6013      	str	r3, [r2, #0]
}
 8002328:	bf00      	nop
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr
 8002332:	bf00      	nop
 8002334:	20000010 	.word	0x20000010
 8002338:	20038800 	.word	0x20038800

0800233c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  return uwTick;
 8002340:	4b03      	ldr	r3, [pc, #12]	; (8002350 <HAL_GetTick+0x14>)
 8002342:	681b      	ldr	r3, [r3, #0]
}
 8002344:	4618      	mov	r0, r3
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	20038800 	.word	0x20038800

08002354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <__NVIC_SetPriorityGrouping+0x40>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800236a:	68ba      	ldr	r2, [r7, #8]
 800236c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002370:	4013      	ands	r3, r2
 8002372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800237c:	4b06      	ldr	r3, [pc, #24]	; (8002398 <__NVIC_SetPriorityGrouping+0x44>)
 800237e:	4313      	orrs	r3, r2
 8002380:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002382:	4a04      	ldr	r2, [pc, #16]	; (8002394 <__NVIC_SetPriorityGrouping+0x40>)
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	60d3      	str	r3, [r2, #12]
}
 8002388:	bf00      	nop
 800238a:	3714      	adds	r7, #20
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr
 8002394:	e000ed00 	.word	0xe000ed00
 8002398:	05fa0000 	.word	0x05fa0000

0800239c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <__NVIC_GetPriorityGrouping+0x18>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	0a1b      	lsrs	r3, r3, #8
 80023a6:	f003 0307 	and.w	r3, r3, #7
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	4603      	mov	r3, r0
 80023c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	db0b      	blt.n	80023e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ca:	79fb      	ldrb	r3, [r7, #7]
 80023cc:	f003 021f 	and.w	r2, r3, #31
 80023d0:	4907      	ldr	r1, [pc, #28]	; (80023f0 <__NVIC_EnableIRQ+0x38>)
 80023d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d6:	095b      	lsrs	r3, r3, #5
 80023d8:	2001      	movs	r0, #1
 80023da:	fa00 f202 	lsl.w	r2, r0, r2
 80023de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000e100 	.word	0xe000e100

080023f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	6039      	str	r1, [r7, #0]
 80023fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	2b00      	cmp	r3, #0
 8002406:	db0a      	blt.n	800241e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	b2da      	uxtb	r2, r3
 800240c:	490c      	ldr	r1, [pc, #48]	; (8002440 <__NVIC_SetPriority+0x4c>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	0112      	lsls	r2, r2, #4
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	440b      	add	r3, r1
 8002418:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800241c:	e00a      	b.n	8002434 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	b2da      	uxtb	r2, r3
 8002422:	4908      	ldr	r1, [pc, #32]	; (8002444 <__NVIC_SetPriority+0x50>)
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	f003 030f 	and.w	r3, r3, #15
 800242a:	3b04      	subs	r3, #4
 800242c:	0112      	lsls	r2, r2, #4
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	440b      	add	r3, r1
 8002432:	761a      	strb	r2, [r3, #24]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr
 8002440:	e000e100 	.word	0xe000e100
 8002444:	e000ed00 	.word	0xe000ed00

08002448 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f1c3 0307 	rsb	r3, r3, #7
 8002462:	2b04      	cmp	r3, #4
 8002464:	bf28      	it	cs
 8002466:	2304      	movcs	r3, #4
 8002468:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	3304      	adds	r3, #4
 800246e:	2b06      	cmp	r3, #6
 8002470:	d902      	bls.n	8002478 <NVIC_EncodePriority+0x30>
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	3b03      	subs	r3, #3
 8002476:	e000      	b.n	800247a <NVIC_EncodePriority+0x32>
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800247c:	f04f 32ff 	mov.w	r2, #4294967295
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	fa02 f303 	lsl.w	r3, r2, r3
 8002486:	43da      	mvns	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	401a      	ands	r2, r3
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002490:	f04f 31ff 	mov.w	r1, #4294967295
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	fa01 f303 	lsl.w	r3, r1, r3
 800249a:	43d9      	mvns	r1, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	4313      	orrs	r3, r2
         );
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3724      	adds	r7, #36	; 0x24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ac:	4770      	bx	lr
	...

080024b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024c0:	d301      	bcc.n	80024c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024c2:	2301      	movs	r3, #1
 80024c4:	e00f      	b.n	80024e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024c6:	4a0a      	ldr	r2, [pc, #40]	; (80024f0 <SysTick_Config+0x40>)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024ce:	210f      	movs	r1, #15
 80024d0:	f04f 30ff 	mov.w	r0, #4294967295
 80024d4:	f7ff ff8e 	bl	80023f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024d8:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <SysTick_Config+0x40>)
 80024da:	2200      	movs	r2, #0
 80024dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024de:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <SysTick_Config+0x40>)
 80024e0:	2207      	movs	r2, #7
 80024e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	e000e010 	.word	0xe000e010

080024f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff ff29 	bl	8002354 <__NVIC_SetPriorityGrouping>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800250a:	b580      	push	{r7, lr}
 800250c:	b086      	sub	sp, #24
 800250e:	af00      	add	r7, sp, #0
 8002510:	4603      	mov	r3, r0
 8002512:	60b9      	str	r1, [r7, #8]
 8002514:	607a      	str	r2, [r7, #4]
 8002516:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800251c:	f7ff ff3e 	bl	800239c <__NVIC_GetPriorityGrouping>
 8002520:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002522:	687a      	ldr	r2, [r7, #4]
 8002524:	68b9      	ldr	r1, [r7, #8]
 8002526:	6978      	ldr	r0, [r7, #20]
 8002528:	f7ff ff8e 	bl	8002448 <NVIC_EncodePriority>
 800252c:	4602      	mov	r2, r0
 800252e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff ff5d 	bl	80023f4 <__NVIC_SetPriority>
}
 800253a:	bf00      	nop
 800253c:	3718      	adds	r7, #24
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002542:	b580      	push	{r7, lr}
 8002544:	b082      	sub	sp, #8
 8002546:	af00      	add	r7, sp, #0
 8002548:	4603      	mov	r3, r0
 800254a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800254c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002550:	4618      	mov	r0, r3
 8002552:	f7ff ff31 	bl	80023b8 <__NVIC_EnableIRQ>
}
 8002556:	bf00      	nop
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}

0800255e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800255e:	b580      	push	{r7, lr}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f7ff ffa2 	bl	80024b0 <SysTick_Config>
 800256c:	4603      	mov	r3, r0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e014      	b.n	80025b2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	791b      	ldrb	r3, [r3, #4]
 800258c:	b2db      	uxtb	r3, r3
 800258e:	2b00      	cmp	r3, #0
 8002590:	d105      	bne.n	800259e <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f7ff fcab 	bl	8001ef4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2202      	movs	r2, #2
 80025a2:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2201      	movs	r2, #1
 80025ae:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
	...

080025bc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
 80025c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	795b      	ldrb	r3, [r3, #5]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d101      	bne.n	80025da <HAL_DAC_Start_DMA+0x1e>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e08e      	b.n	80026f8 <HAL_DAC_Start_DMA+0x13c>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2201      	movs	r2, #1
 80025de:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2202      	movs	r2, #2
 80025e4:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d12a      	bne.n	8002642 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	4a43      	ldr	r2, [pc, #268]	; (8002700 <HAL_DAC_Start_DMA+0x144>)
 80025f2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	4a42      	ldr	r2, [pc, #264]	; (8002704 <HAL_DAC_Start_DMA+0x148>)
 80025fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	4a41      	ldr	r2, [pc, #260]	; (8002708 <HAL_DAC_Start_DMA+0x14c>)
 8002602:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002612:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	2b04      	cmp	r3, #4
 8002618:	d009      	beq.n	800262e <HAL_DAC_Start_DMA+0x72>
 800261a:	2b08      	cmp	r3, #8
 800261c:	d00c      	beq.n	8002638 <HAL_DAC_Start_DMA+0x7c>
 800261e:	2b00      	cmp	r3, #0
 8002620:	d000      	beq.n	8002624 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002622:	e039      	b.n	8002698 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	3308      	adds	r3, #8
 800262a:	617b      	str	r3, [r7, #20]
        break;
 800262c:	e034      	b.n	8002698 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	330c      	adds	r3, #12
 8002634:	617b      	str	r3, [r7, #20]
        break;
 8002636:	e02f      	b.n	8002698 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	3310      	adds	r3, #16
 800263e:	617b      	str	r3, [r7, #20]
        break;
 8002640:	e02a      	b.n	8002698 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	4a31      	ldr	r2, [pc, #196]	; (800270c <HAL_DAC_Start_DMA+0x150>)
 8002648:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	4a30      	ldr	r2, [pc, #192]	; (8002710 <HAL_DAC_Start_DMA+0x154>)
 8002650:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	4a2f      	ldr	r2, [pc, #188]	; (8002714 <HAL_DAC_Start_DMA+0x158>)
 8002658:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002668:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	2b04      	cmp	r3, #4
 800266e:	d009      	beq.n	8002684 <HAL_DAC_Start_DMA+0xc8>
 8002670:	2b08      	cmp	r3, #8
 8002672:	d00c      	beq.n	800268e <HAL_DAC_Start_DMA+0xd2>
 8002674:	2b00      	cmp	r3, #0
 8002676:	d000      	beq.n	800267a <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002678:	e00e      	b.n	8002698 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	3314      	adds	r3, #20
 8002680:	617b      	str	r3, [r7, #20]
        break;
 8002682:	e009      	b.n	8002698 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	3318      	adds	r3, #24
 800268a:	617b      	str	r3, [r7, #20]
        break;
 800268c:	e004      	b.n	8002698 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	331c      	adds	r3, #28
 8002694:	617b      	str	r3, [r7, #20]
        break;
 8002696:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10f      	bne.n	80026be <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026ac:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6898      	ldr	r0, [r3, #8]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	697a      	ldr	r2, [r7, #20]
 80026b8:	f000 fa04 	bl	8002ac4 <HAL_DMA_Start_IT>
 80026bc:	e00e      	b.n	80026dc <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80026cc:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	68d8      	ldr	r0, [r3, #12]
 80026d2:	6879      	ldr	r1, [r7, #4]
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	f000 f9f4 	bl	8002ac4 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6819      	ldr	r1, [r3, #0]
 80026e2:	2201      	movs	r2, #1
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	409a      	lsls	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80026f6:	2300      	movs	r3, #0
}
 80026f8:	4618      	mov	r0, r3
 80026fa:	3718      	adds	r7, #24
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	080027ef 	.word	0x080027ef
 8002704:	08002811 	.word	0x08002811
 8002708:	0800282d 	.word	0x0800282d
 800270c:	080028fd 	.word	0x080028fd
 8002710:	0800291f 	.word	0x0800291f
 8002714:	0800293b 	.word	0x0800293b

08002718 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
   
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]
 8002764:	2300      	movs	r3, #0
 8002766:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	795b      	ldrb	r3, [r3, #5]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d101      	bne.n	8002774 <HAL_DAC_ConfigChannel+0x20>
 8002770:	2302      	movs	r3, #2
 8002772:	e036      	b.n	80027e2 <HAL_DAC_ConfigChannel+0x8e>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	2201      	movs	r2, #1
 8002778:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2202      	movs	r2, #2
 800277e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002788:	f640 72fe 	movw	r2, #4094	; 0xffe
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	fa02 f303 	lsl.w	r3, r2, r3
 8002792:	43db      	mvns	r3, r3
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	4013      	ands	r3, r2
 8002798:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80027a6:	693a      	ldr	r2, [r7, #16]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	697a      	ldr	r2, [r7, #20]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6819      	ldr	r1, [r3, #0]
 80027c2:	22c0      	movs	r2, #192	; 0xc0
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43da      	mvns	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	400a      	ands	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2201      	movs	r2, #1
 80027d8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	371c      	adds	r7, #28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <DAC_DMAConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027fa:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f7ff ff8b 	bl	8002718 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	2201      	movs	r2, #1
 8002806:	711a      	strb	r2, [r3, #4]
}
 8002808:	bf00      	nop
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281c:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f7ff ff84 	bl	800272c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002824:	bf00      	nop
 8002826:	3710      	adds	r7, #16
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <DAC_DMAErrorCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b084      	sub	sp, #16
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002838:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f043 0204 	orr.w	r2, r3, #4
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f7ff ff7a 	bl	8002740 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2201      	movs	r2, #1
 8002850:	711a      	strb	r2, [r3, #4]
}
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}

0800285a <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095                               
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Amplitude)
{  
 800285a:	b480      	push	{r7}
 800285c:	b085      	sub	sp, #20
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
 8002862:	60b9      	str	r1, [r7, #8]
 8002864:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	795b      	ldrb	r3, [r3, #5]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_DACEx_TriangleWaveGenerate+0x18>
 800286e:	2302      	movs	r3, #2
 8002870:	e020      	b.n	80028b4 <HAL_DACEx_TriangleWaveGenerate+0x5a>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2201      	movs	r2, #1
 8002876:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2202      	movs	r2, #2
 800287c:	711a      	strb	r2, [r3, #4]
  
  /* Enable the selected wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, (DAC_CR_WAVE1 | DAC_CR_MAMP1) << Channel, (DAC_CR_WAVE1_1 | Amplitude) << Channel);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	fa01 f303 	lsl.w	r3, r1, r3
 800288e:	43db      	mvns	r3, r3
 8002890:	ea02 0103 	and.w	r1, r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	409a      	lsls	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2201      	movs	r2, #1
 80028aa:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2200      	movs	r2, #0
 80028b0:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr

080028c0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b083      	sub	sp, #12
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80028c8:	bf00      	nop
 80028ca:	370c      	adds	r7, #12
 80028cc:	46bd      	mov	sp, r7
 80028ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d2:	4770      	bx	lr

080028d4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80028dc:	bf00      	nop
 80028de:	370c      	adds	r7, #12
 80028e0:	46bd      	mov	sp, r7
 80028e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e6:	4770      	bx	lr

080028e8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80028f0:	bf00      	nop
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr

080028fc <DAC_DMAConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002908:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f7ff ffd8 	bl	80028c0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	2201      	movs	r2, #1
 8002914:	711a      	strb	r2, [r3, #4]
}
 8002916:	bf00      	nop
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800291e:	b580      	push	{r7, lr}
 8002920:	b084      	sub	sp, #16
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800292a:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 800292c:	68f8      	ldr	r0, [r7, #12]
 800292e:	f7ff ffd1 	bl	80028d4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <DAC_DMAErrorCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002946:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	f043 0204 	orr.w	r2, r3, #4
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8002954:	68f8      	ldr	r0, [r7, #12]
 8002956:	f7ff ffc7 	bl	80028e8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	2201      	movs	r2, #1
 800295e:	711a      	strb	r2, [r3, #4]
}
 8002960:	bf00      	nop
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b086      	sub	sp, #24
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002970:	2300      	movs	r3, #0
 8002972:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002974:	f7ff fce2 	bl	800233c <HAL_GetTick>
 8002978:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e099      	b.n	8002ab8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2202      	movs	r2, #2
 8002990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f022 0201 	bic.w	r2, r2, #1
 80029a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029a4:	e00f      	b.n	80029c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029a6:	f7ff fcc9 	bl	800233c <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	2b05      	cmp	r3, #5
 80029b2:	d908      	bls.n	80029c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2220      	movs	r2, #32
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2203      	movs	r2, #3
 80029be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e078      	b.n	8002ab8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1e8      	bne.n	80029a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80029dc:	697a      	ldr	r2, [r7, #20]
 80029de:	4b38      	ldr	r3, [pc, #224]	; (8002ac0 <HAL_DMA_Init+0x158>)
 80029e0:	4013      	ands	r3, r2
 80029e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80029f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	2b04      	cmp	r3, #4
 8002a1e:	d107      	bne.n	8002a30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	697a      	ldr	r2, [r7, #20]
 8002a36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	695b      	ldr	r3, [r3, #20]
 8002a3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	f023 0307 	bic.w	r3, r3, #7
 8002a46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d117      	bne.n	8002a8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	697a      	ldr	r2, [r7, #20]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d00e      	beq.n	8002a8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 fa77 	bl	8002f60 <DMA_CheckFifoParam>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d008      	beq.n	8002a8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2240      	movs	r2, #64	; 0x40
 8002a7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002a86:	2301      	movs	r3, #1
 8002a88:	e016      	b.n	8002ab8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002a92:	6878      	ldr	r0, [r7, #4]
 8002a94:	f000 fa2e 	bl	8002ef4 <DMA_CalcBaseAndBitshift>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa0:	223f      	movs	r2, #63	; 0x3f
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2200      	movs	r2, #0
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	f010803f 	.word	0xf010803f

08002ac4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
 8002ad0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ada:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_DMA_Start_IT+0x26>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e048      	b.n	8002b7c <HAL_DMA_Start_IT+0xb8>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d137      	bne.n	8002b6e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2202      	movs	r2, #2
 8002b02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 f9c0 	bl	8002e98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1c:	223f      	movs	r2, #63	; 0x3f
 8002b1e:	409a      	lsls	r2, r3
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	681a      	ldr	r2, [r3, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f042 0216 	orr.w	r2, r2, #22
 8002b32:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	695a      	ldr	r2, [r3, #20]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b42:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d007      	beq.n	8002b5c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0208 	orr.w	r2, r2, #8
 8002b5a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f042 0201 	orr.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	e005      	b.n	8002b7a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002b76:	2302      	movs	r3, #2
 8002b78:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002b7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3718      	adds	r7, #24
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002b90:	4b92      	ldr	r3, [pc, #584]	; (8002ddc <HAL_DMA_IRQHandler+0x258>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a92      	ldr	r2, [pc, #584]	; (8002de0 <HAL_DMA_IRQHandler+0x25c>)
 8002b96:	fba2 2303 	umull	r2, r3, r2, r3
 8002b9a:	0a9b      	lsrs	r3, r3, #10
 8002b9c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ba2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bae:	2208      	movs	r2, #8
 8002bb0:	409a      	lsls	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d01a      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d013      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0204 	bic.w	r2, r2, #4
 8002bd6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bdc:	2208      	movs	r2, #8
 8002bde:	409a      	lsls	r2, r3
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be8:	f043 0201 	orr.w	r2, r3, #1
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d012      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00b      	beq.n	8002c26 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c12:	2201      	movs	r2, #1
 8002c14:	409a      	lsls	r2, r3
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c1e:	f043 0202 	orr.w	r2, r3, #2
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2a:	2204      	movs	r2, #4
 8002c2c:	409a      	lsls	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d012      	beq.n	8002c5c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d00b      	beq.n	8002c5c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c48:	2204      	movs	r2, #4
 8002c4a:	409a      	lsls	r2, r3
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c54:	f043 0204 	orr.w	r2, r3, #4
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	2210      	movs	r2, #16
 8002c62:	409a      	lsls	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d043      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d03c      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c7e:	2210      	movs	r2, #16
 8002c80:	409a      	lsls	r2, r3
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d018      	beq.n	8002cc6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d108      	bne.n	8002cb4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d024      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	4798      	blx	r3
 8002cb2:	e01f      	b.n	8002cf4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01b      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4798      	blx	r3
 8002cc4:	e016      	b.n	8002cf4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d107      	bne.n	8002ce4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f022 0208 	bic.w	r2, r2, #8
 8002ce2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	409a      	lsls	r2, r3
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 808e 	beq.w	8002e22 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 8086 	beq.w	8002e22 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1a:	2220      	movs	r2, #32
 8002d1c:	409a      	lsls	r2, r3
 8002d1e:	693b      	ldr	r3, [r7, #16]
 8002d20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b05      	cmp	r3, #5
 8002d2c:	d136      	bne.n	8002d9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 0216 	bic.w	r2, r2, #22
 8002d3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	695a      	ldr	r2, [r3, #20]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d103      	bne.n	8002d5e <HAL_DMA_IRQHandler+0x1da>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d007      	beq.n	8002d6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	681a      	ldr	r2, [r3, #0]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f022 0208 	bic.w	r2, r2, #8
 8002d6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d72:	223f      	movs	r2, #63	; 0x3f
 8002d74:	409a      	lsls	r2, r3
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2201      	movs	r2, #1
 8002d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d07d      	beq.n	8002e8e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	4798      	blx	r3
        }
        return;
 8002d9a:	e078      	b.n	8002e8e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d01c      	beq.n	8002de4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d108      	bne.n	8002dca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d030      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4798      	blx	r3
 8002dc8:	e02b      	b.n	8002e22 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d027      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	4798      	blx	r3
 8002dda:	e022      	b.n	8002e22 <HAL_DMA_IRQHandler+0x29e>
 8002ddc:	20000008 	.word	0x20000008
 8002de0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d10f      	bne.n	8002e12 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0210 	bic.w	r2, r2, #16
 8002e00:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d003      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e1e:	6878      	ldr	r0, [r7, #4]
 8002e20:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d032      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d022      	beq.n	8002e7c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2205      	movs	r2, #5
 8002e3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 0201 	bic.w	r2, r2, #1
 8002e4c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	3301      	adds	r3, #1
 8002e52:	60bb      	str	r3, [r7, #8]
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d307      	bcc.n	8002e6a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1f2      	bne.n	8002e4e <HAL_DMA_IRQHandler+0x2ca>
 8002e68:	e000      	b.n	8002e6c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002e6a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d005      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	4798      	blx	r3
 8002e8c:	e000      	b.n	8002e90 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002e8e:	bf00      	nop
    }
  }
}
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop

08002e98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002eb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	683a      	ldr	r2, [r7, #0]
 8002ebc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	2b40      	cmp	r3, #64	; 0x40
 8002ec4:	d108      	bne.n	8002ed8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68ba      	ldr	r2, [r7, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ed6:	e007      	b.n	8002ee8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	687a      	ldr	r2, [r7, #4]
 8002ee6:	60da      	str	r2, [r3, #12]
}
 8002ee8:	bf00      	nop
 8002eea:	3714      	adds	r7, #20
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	3b10      	subs	r3, #16
 8002f04:	4a13      	ldr	r2, [pc, #76]	; (8002f54 <DMA_CalcBaseAndBitshift+0x60>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	091b      	lsrs	r3, r3, #4
 8002f0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f0e:	4a12      	ldr	r2, [pc, #72]	; (8002f58 <DMA_CalcBaseAndBitshift+0x64>)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4413      	add	r3, r2
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b03      	cmp	r3, #3
 8002f20:	d908      	bls.n	8002f34 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <DMA_CalcBaseAndBitshift+0x68>)
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	1d1a      	adds	r2, r3, #4
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	659a      	str	r2, [r3, #88]	; 0x58
 8002f32:	e006      	b.n	8002f42 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <DMA_CalcBaseAndBitshift+0x68>)
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	aaaaaaab 	.word	0xaaaaaaab
 8002f58:	08008150 	.word	0x08008150
 8002f5c:	fffffc00 	.word	0xfffffc00

08002f60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d11f      	bne.n	8002fba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	2b03      	cmp	r3, #3
 8002f7e:	d855      	bhi.n	800302c <DMA_CheckFifoParam+0xcc>
 8002f80:	a201      	add	r2, pc, #4	; (adr r2, 8002f88 <DMA_CheckFifoParam+0x28>)
 8002f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f86:	bf00      	nop
 8002f88:	08002f99 	.word	0x08002f99
 8002f8c:	08002fab 	.word	0x08002fab
 8002f90:	08002f99 	.word	0x08002f99
 8002f94:	0800302d 	.word	0x0800302d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d045      	beq.n	8003030 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fa8:	e042      	b.n	8003030 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fb2:	d13f      	bne.n	8003034 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fb8:	e03c      	b.n	8003034 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fc2:	d121      	bne.n	8003008 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d836      	bhi.n	8003038 <DMA_CheckFifoParam+0xd8>
 8002fca:	a201      	add	r2, pc, #4	; (adr r2, 8002fd0 <DMA_CheckFifoParam+0x70>)
 8002fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fd0:	08002fe1 	.word	0x08002fe1
 8002fd4:	08002fe7 	.word	0x08002fe7
 8002fd8:	08002fe1 	.word	0x08002fe1
 8002fdc:	08002ff9 	.word	0x08002ff9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8002fe4:	e02f      	b.n	8003046 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d024      	beq.n	800303c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff6:	e021      	b.n	800303c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003000:	d11e      	bne.n	8003040 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003006:	e01b      	b.n	8003040 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d902      	bls.n	8003014 <DMA_CheckFifoParam+0xb4>
 800300e:	2b03      	cmp	r3, #3
 8003010:	d003      	beq.n	800301a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003012:	e018      	b.n	8003046 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	73fb      	strb	r3, [r7, #15]
      break;
 8003018:	e015      	b.n	8003046 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800301e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00e      	beq.n	8003044 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
      break;
 800302a:	e00b      	b.n	8003044 <DMA_CheckFifoParam+0xe4>
      break;
 800302c:	bf00      	nop
 800302e:	e00a      	b.n	8003046 <DMA_CheckFifoParam+0xe6>
      break;
 8003030:	bf00      	nop
 8003032:	e008      	b.n	8003046 <DMA_CheckFifoParam+0xe6>
      break;
 8003034:	bf00      	nop
 8003036:	e006      	b.n	8003046 <DMA_CheckFifoParam+0xe6>
      break;
 8003038:	bf00      	nop
 800303a:	e004      	b.n	8003046 <DMA_CheckFifoParam+0xe6>
      break;
 800303c:	bf00      	nop
 800303e:	e002      	b.n	8003046 <DMA_CheckFifoParam+0xe6>
      break;   
 8003040:	bf00      	nop
 8003042:	e000      	b.n	8003046 <DMA_CheckFifoParam+0xe6>
      break;
 8003044:	bf00      	nop
    }
  } 
  
  return status; 
 8003046:	7bfb      	ldrb	r3, [r7, #15]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003054:	b480      	push	{r7}
 8003056:	b089      	sub	sp, #36	; 0x24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800305e:	2300      	movs	r3, #0
 8003060:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003062:	2300      	movs	r3, #0
 8003064:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800306a:	2300      	movs	r3, #0
 800306c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800306e:	2300      	movs	r3, #0
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	e175      	b.n	8003360 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003074:	2201      	movs	r2, #1
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4013      	ands	r3, r2
 8003086:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	429a      	cmp	r2, r3
 800308e:	f040 8164 	bne.w	800335a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d00b      	beq.n	80030b2 <HAL_GPIO_Init+0x5e>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d007      	beq.n	80030b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80030a6:	2b11      	cmp	r3, #17
 80030a8:	d003      	beq.n	80030b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	2b12      	cmp	r3, #18
 80030b0:	d130      	bne.n	8003114 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	2203      	movs	r2, #3
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4013      	ands	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4313      	orrs	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030e8:	2201      	movs	r2, #1
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	fa02 f303 	lsl.w	r3, r2, r3
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	091b      	lsrs	r3, r3, #4
 80030fe:	f003 0201 	and.w	r2, r3, #1
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	fa02 f303 	lsl.w	r3, r2, r3
 8003108:	69ba      	ldr	r2, [r7, #24]
 800310a:	4313      	orrs	r3, r2
 800310c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	005b      	lsls	r3, r3, #1
 800311e:	2203      	movs	r2, #3
 8003120:	fa02 f303 	lsl.w	r3, r2, r3
 8003124:	43db      	mvns	r3, r3
 8003126:	69ba      	ldr	r2, [r7, #24]
 8003128:	4013      	ands	r3, r2
 800312a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d003      	beq.n	8003154 <HAL_GPIO_Init+0x100>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	2b12      	cmp	r3, #18
 8003152:	d123      	bne.n	800319c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	08da      	lsrs	r2, r3, #3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3208      	adds	r2, #8
 800315c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	009b      	lsls	r3, r3, #2
 800316a:	220f      	movs	r2, #15
 800316c:	fa02 f303 	lsl.w	r3, r2, r3
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	691a      	ldr	r2, [r3, #16]
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	f003 0307 	and.w	r3, r3, #7
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4313      	orrs	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	08da      	lsrs	r2, r3, #3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	3208      	adds	r2, #8
 8003196:	69b9      	ldr	r1, [r7, #24]
 8003198:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	2203      	movs	r2, #3
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4013      	ands	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 0203 	and.w	r2, r3, #3
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	fa02 f303 	lsl.w	r3, r2, r3
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	4313      	orrs	r3, r2
 80031c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 80be 	beq.w	800335a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031de:	4b65      	ldr	r3, [pc, #404]	; (8003374 <HAL_GPIO_Init+0x320>)
 80031e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e2:	4a64      	ldr	r2, [pc, #400]	; (8003374 <HAL_GPIO_Init+0x320>)
 80031e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031e8:	6453      	str	r3, [r2, #68]	; 0x44
 80031ea:	4b62      	ldr	r3, [pc, #392]	; (8003374 <HAL_GPIO_Init+0x320>)
 80031ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80031f6:	4a60      	ldr	r2, [pc, #384]	; (8003378 <HAL_GPIO_Init+0x324>)
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	089b      	lsrs	r3, r3, #2
 80031fc:	3302      	adds	r3, #2
 80031fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003202:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f003 0303 	and.w	r3, r3, #3
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	220f      	movs	r2, #15
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a57      	ldr	r2, [pc, #348]	; (800337c <HAL_GPIO_Init+0x328>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d037      	beq.n	8003292 <HAL_GPIO_Init+0x23e>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a56      	ldr	r2, [pc, #344]	; (8003380 <HAL_GPIO_Init+0x32c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d031      	beq.n	800328e <HAL_GPIO_Init+0x23a>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a55      	ldr	r2, [pc, #340]	; (8003384 <HAL_GPIO_Init+0x330>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d02b      	beq.n	800328a <HAL_GPIO_Init+0x236>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a54      	ldr	r2, [pc, #336]	; (8003388 <HAL_GPIO_Init+0x334>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d025      	beq.n	8003286 <HAL_GPIO_Init+0x232>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a53      	ldr	r2, [pc, #332]	; (800338c <HAL_GPIO_Init+0x338>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d01f      	beq.n	8003282 <HAL_GPIO_Init+0x22e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a52      	ldr	r2, [pc, #328]	; (8003390 <HAL_GPIO_Init+0x33c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d019      	beq.n	800327e <HAL_GPIO_Init+0x22a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a51      	ldr	r2, [pc, #324]	; (8003394 <HAL_GPIO_Init+0x340>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d013      	beq.n	800327a <HAL_GPIO_Init+0x226>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4a50      	ldr	r2, [pc, #320]	; (8003398 <HAL_GPIO_Init+0x344>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d00d      	beq.n	8003276 <HAL_GPIO_Init+0x222>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a4f      	ldr	r2, [pc, #316]	; (800339c <HAL_GPIO_Init+0x348>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d007      	beq.n	8003272 <HAL_GPIO_Init+0x21e>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a4e      	ldr	r2, [pc, #312]	; (80033a0 <HAL_GPIO_Init+0x34c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d101      	bne.n	800326e <HAL_GPIO_Init+0x21a>
 800326a:	2309      	movs	r3, #9
 800326c:	e012      	b.n	8003294 <HAL_GPIO_Init+0x240>
 800326e:	230a      	movs	r3, #10
 8003270:	e010      	b.n	8003294 <HAL_GPIO_Init+0x240>
 8003272:	2308      	movs	r3, #8
 8003274:	e00e      	b.n	8003294 <HAL_GPIO_Init+0x240>
 8003276:	2307      	movs	r3, #7
 8003278:	e00c      	b.n	8003294 <HAL_GPIO_Init+0x240>
 800327a:	2306      	movs	r3, #6
 800327c:	e00a      	b.n	8003294 <HAL_GPIO_Init+0x240>
 800327e:	2305      	movs	r3, #5
 8003280:	e008      	b.n	8003294 <HAL_GPIO_Init+0x240>
 8003282:	2304      	movs	r3, #4
 8003284:	e006      	b.n	8003294 <HAL_GPIO_Init+0x240>
 8003286:	2303      	movs	r3, #3
 8003288:	e004      	b.n	8003294 <HAL_GPIO_Init+0x240>
 800328a:	2302      	movs	r3, #2
 800328c:	e002      	b.n	8003294 <HAL_GPIO_Init+0x240>
 800328e:	2301      	movs	r3, #1
 8003290:	e000      	b.n	8003294 <HAL_GPIO_Init+0x240>
 8003292:	2300      	movs	r3, #0
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	f002 0203 	and.w	r2, r2, #3
 800329a:	0092      	lsls	r2, r2, #2
 800329c:	4093      	lsls	r3, r2
 800329e:	69ba      	ldr	r2, [r7, #24]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80032a4:	4934      	ldr	r1, [pc, #208]	; (8003378 <HAL_GPIO_Init+0x324>)
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	089b      	lsrs	r3, r3, #2
 80032aa:	3302      	adds	r3, #2
 80032ac:	69ba      	ldr	r2, [r7, #24]
 80032ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032b2:	4b3c      	ldr	r3, [pc, #240]	; (80033a4 <HAL_GPIO_Init+0x350>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	43db      	mvns	r3, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4013      	ands	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d003      	beq.n	80032d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032d6:	4a33      	ldr	r2, [pc, #204]	; (80033a4 <HAL_GPIO_Init+0x350>)
 80032d8:	69bb      	ldr	r3, [r7, #24]
 80032da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80032dc:	4b31      	ldr	r3, [pc, #196]	; (80033a4 <HAL_GPIO_Init+0x350>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032e2:	693b      	ldr	r3, [r7, #16]
 80032e4:	43db      	mvns	r3, r3
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4013      	ands	r3, r2
 80032ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d003      	beq.n	8003300 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003300:	4a28      	ldr	r2, [pc, #160]	; (80033a4 <HAL_GPIO_Init+0x350>)
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003306:	4b27      	ldr	r3, [pc, #156]	; (80033a4 <HAL_GPIO_Init+0x350>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	43db      	mvns	r3, r3
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4013      	ands	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d003      	beq.n	800332a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800332a:	4a1e      	ldr	r2, [pc, #120]	; (80033a4 <HAL_GPIO_Init+0x350>)
 800332c:	69bb      	ldr	r3, [r7, #24]
 800332e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003330:	4b1c      	ldr	r3, [pc, #112]	; (80033a4 <HAL_GPIO_Init+0x350>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d003      	beq.n	8003354 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4313      	orrs	r3, r2
 8003352:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003354:	4a13      	ldr	r2, [pc, #76]	; (80033a4 <HAL_GPIO_Init+0x350>)
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3301      	adds	r3, #1
 800335e:	61fb      	str	r3, [r7, #28]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2b0f      	cmp	r3, #15
 8003364:	f67f ae86 	bls.w	8003074 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003368:	bf00      	nop
 800336a:	3724      	adds	r7, #36	; 0x24
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40023800 	.word	0x40023800
 8003378:	40013800 	.word	0x40013800
 800337c:	40020000 	.word	0x40020000
 8003380:	40020400 	.word	0x40020400
 8003384:	40020800 	.word	0x40020800
 8003388:	40020c00 	.word	0x40020c00
 800338c:	40021000 	.word	0x40021000
 8003390:	40021400 	.word	0x40021400
 8003394:	40021800 	.word	0x40021800
 8003398:	40021c00 	.word	0x40021c00
 800339c:	40022000 	.word	0x40022000
 80033a0:	40022400 	.word	0x40022400
 80033a4:	40013c00 	.word	0x40013c00

080033a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	460b      	mov	r3, r1
 80033b2:	807b      	strh	r3, [r7, #2]
 80033b4:	4613      	mov	r3, r2
 80033b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80033b8:	787b      	ldrb	r3, [r7, #1]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d003      	beq.n	80033c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80033be:	887a      	ldrh	r2, [r7, #2]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80033c4:	e003      	b.n	80033ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80033c6:	887b      	ldrh	r3, [r7, #2]
 80033c8:	041a      	lsls	r2, r3, #16
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	619a      	str	r2, [r3, #24]
}
 80033ce:	bf00      	nop
 80033d0:	370c      	adds	r7, #12
 80033d2:	46bd      	mov	sp, r7
 80033d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d8:	4770      	bx	lr
	...

080033dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b082      	sub	sp, #8
 80033e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80033e6:	4b23      	ldr	r3, [pc, #140]	; (8003474 <HAL_PWREx_EnableOverDrive+0x98>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	4a22      	ldr	r2, [pc, #136]	; (8003474 <HAL_PWREx_EnableOverDrive+0x98>)
 80033ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033f0:	6413      	str	r3, [r2, #64]	; 0x40
 80033f2:	4b20      	ldr	r3, [pc, #128]	; (8003474 <HAL_PWREx_EnableOverDrive+0x98>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fa:	603b      	str	r3, [r7, #0]
 80033fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033fe:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a1d      	ldr	r2, [pc, #116]	; (8003478 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800340a:	f7fe ff97 	bl	800233c <HAL_GetTick>
 800340e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003410:	e009      	b.n	8003426 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003412:	f7fe ff93 	bl	800233c <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003420:	d901      	bls.n	8003426 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e022      	b.n	800346c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003426:	4b14      	ldr	r3, [pc, #80]	; (8003478 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800342e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003432:	d1ee      	bne.n	8003412 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003434:	4b10      	ldr	r3, [pc, #64]	; (8003478 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a0f      	ldr	r2, [pc, #60]	; (8003478 <HAL_PWREx_EnableOverDrive+0x9c>)
 800343a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800343e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003440:	f7fe ff7c 	bl	800233c <HAL_GetTick>
 8003444:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003446:	e009      	b.n	800345c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003448:	f7fe ff78 	bl	800233c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	1ad3      	subs	r3, r2, r3
 8003452:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003456:	d901      	bls.n	800345c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e007      	b.n	800346c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800345c:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_PWREx_EnableOverDrive+0x9c>)
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003464:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003468:	d1ee      	bne.n	8003448 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800346a:	2300      	movs	r3, #0
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40023800 	.word	0x40023800
 8003478:	40007000 	.word	0x40007000

0800347c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003484:	2300      	movs	r3, #0
 8003486:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e291      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	f000 8087 	beq.w	80035ae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034a0:	4b96      	ldr	r3, [pc, #600]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 030c 	and.w	r3, r3, #12
 80034a8:	2b04      	cmp	r3, #4
 80034aa:	d00c      	beq.n	80034c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ac:	4b93      	ldr	r3, [pc, #588]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f003 030c 	and.w	r3, r3, #12
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d112      	bne.n	80034de <HAL_RCC_OscConfig+0x62>
 80034b8:	4b90      	ldr	r3, [pc, #576]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034c4:	d10b      	bne.n	80034de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c6:	4b8d      	ldr	r3, [pc, #564]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d06c      	beq.n	80035ac <HAL_RCC_OscConfig+0x130>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d168      	bne.n	80035ac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e26b      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e6:	d106      	bne.n	80034f6 <HAL_RCC_OscConfig+0x7a>
 80034e8:	4b84      	ldr	r3, [pc, #528]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a83      	ldr	r2, [pc, #524]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 80034ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034f2:	6013      	str	r3, [r2, #0]
 80034f4:	e02e      	b.n	8003554 <HAL_RCC_OscConfig+0xd8>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10c      	bne.n	8003518 <HAL_RCC_OscConfig+0x9c>
 80034fe:	4b7f      	ldr	r3, [pc, #508]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a7e      	ldr	r2, [pc, #504]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 8003504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003508:	6013      	str	r3, [r2, #0]
 800350a:	4b7c      	ldr	r3, [pc, #496]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a7b      	ldr	r2, [pc, #492]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 8003510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003514:	6013      	str	r3, [r2, #0]
 8003516:	e01d      	b.n	8003554 <HAL_RCC_OscConfig+0xd8>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003520:	d10c      	bne.n	800353c <HAL_RCC_OscConfig+0xc0>
 8003522:	4b76      	ldr	r3, [pc, #472]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4a75      	ldr	r2, [pc, #468]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 8003528:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800352c:	6013      	str	r3, [r2, #0]
 800352e:	4b73      	ldr	r3, [pc, #460]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a72      	ldr	r2, [pc, #456]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 8003534:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003538:	6013      	str	r3, [r2, #0]
 800353a:	e00b      	b.n	8003554 <HAL_RCC_OscConfig+0xd8>
 800353c:	4b6f      	ldr	r3, [pc, #444]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a6e      	ldr	r2, [pc, #440]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 8003542:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	4b6c      	ldr	r3, [pc, #432]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a6b      	ldr	r2, [pc, #428]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 800354e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003552:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d013      	beq.n	8003584 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355c:	f7fe feee 	bl	800233c <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003564:	f7fe feea 	bl	800233c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	; 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e21f      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003576:	4b61      	ldr	r3, [pc, #388]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0xe8>
 8003582:	e014      	b.n	80035ae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003584:	f7fe feda 	bl	800233c <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358a:	e008      	b.n	800359e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800358c:	f7fe fed6 	bl	800233c <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	2b64      	cmp	r3, #100	; 0x64
 8003598:	d901      	bls.n	800359e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800359a:	2303      	movs	r3, #3
 800359c:	e20b      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800359e:	4b57      	ldr	r3, [pc, #348]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1f0      	bne.n	800358c <HAL_RCC_OscConfig+0x110>
 80035aa:	e000      	b.n	80035ae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d069      	beq.n	800368e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035ba:	4b50      	ldr	r3, [pc, #320]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	f003 030c 	and.w	r3, r3, #12
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00b      	beq.n	80035de <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035c6:	4b4d      	ldr	r3, [pc, #308]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	f003 030c 	and.w	r3, r3, #12
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d11c      	bne.n	800360c <HAL_RCC_OscConfig+0x190>
 80035d2:	4b4a      	ldr	r3, [pc, #296]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d116      	bne.n	800360c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035de:	4b47      	ldr	r3, [pc, #284]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0302 	and.w	r3, r3, #2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d005      	beq.n	80035f6 <HAL_RCC_OscConfig+0x17a>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	68db      	ldr	r3, [r3, #12]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d001      	beq.n	80035f6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e1df      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035f6:	4b41      	ldr	r3, [pc, #260]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	493d      	ldr	r1, [pc, #244]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 8003606:	4313      	orrs	r3, r2
 8003608:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360a:	e040      	b.n	800368e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d023      	beq.n	800365c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003614:	4b39      	ldr	r3, [pc, #228]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a38      	ldr	r2, [pc, #224]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003620:	f7fe fe8c 	bl	800233c <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003626:	e008      	b.n	800363a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003628:	f7fe fe88 	bl	800233c <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d901      	bls.n	800363a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e1bd      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363a:	4b30      	ldr	r3, [pc, #192]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b00      	cmp	r3, #0
 8003644:	d0f0      	beq.n	8003628 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003646:	4b2d      	ldr	r3, [pc, #180]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4929      	ldr	r1, [pc, #164]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]
 800365a:	e018      	b.n	800368e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800365c:	4b27      	ldr	r3, [pc, #156]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a26      	ldr	r2, [pc, #152]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 8003662:	f023 0301 	bic.w	r3, r3, #1
 8003666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003668:	f7fe fe68 	bl	800233c <HAL_GetTick>
 800366c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800366e:	e008      	b.n	8003682 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003670:	f7fe fe64 	bl	800233c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	2b02      	cmp	r3, #2
 800367c:	d901      	bls.n	8003682 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e199      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003682:	4b1e      	ldr	r3, [pc, #120]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f0      	bne.n	8003670 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 0308 	and.w	r3, r3, #8
 8003696:	2b00      	cmp	r3, #0
 8003698:	d038      	beq.n	800370c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d019      	beq.n	80036d6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036a2:	4b16      	ldr	r3, [pc, #88]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 80036a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a6:	4a15      	ldr	r2, [pc, #84]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 80036a8:	f043 0301 	orr.w	r3, r3, #1
 80036ac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ae:	f7fe fe45 	bl	800233c <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036b6:	f7fe fe41 	bl	800233c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e176      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036c8:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 80036ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036cc:	f003 0302 	and.w	r3, r3, #2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x23a>
 80036d4:	e01a      	b.n	800370c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036d6:	4b09      	ldr	r3, [pc, #36]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 80036d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036da:	4a08      	ldr	r2, [pc, #32]	; (80036fc <HAL_RCC_OscConfig+0x280>)
 80036dc:	f023 0301 	bic.w	r3, r3, #1
 80036e0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e2:	f7fe fe2b 	bl	800233c <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e8:	e00a      	b.n	8003700 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ea:	f7fe fe27 	bl	800233c <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d903      	bls.n	8003700 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e15c      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
 80036fc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003700:	4b91      	ldr	r3, [pc, #580]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 8003702:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1ee      	bne.n	80036ea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 80a4 	beq.w	8003862 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800371a:	4b8b      	ldr	r3, [pc, #556]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d10d      	bne.n	8003742 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003726:	4b88      	ldr	r3, [pc, #544]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 8003728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372a:	4a87      	ldr	r2, [pc, #540]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 800372c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003730:	6413      	str	r3, [r2, #64]	; 0x40
 8003732:	4b85      	ldr	r3, [pc, #532]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373a:	60bb      	str	r3, [r7, #8]
 800373c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800373e:	2301      	movs	r3, #1
 8003740:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003742:	4b82      	ldr	r3, [pc, #520]	; (800394c <HAL_RCC_OscConfig+0x4d0>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800374a:	2b00      	cmp	r3, #0
 800374c:	d118      	bne.n	8003780 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800374e:	4b7f      	ldr	r3, [pc, #508]	; (800394c <HAL_RCC_OscConfig+0x4d0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a7e      	ldr	r2, [pc, #504]	; (800394c <HAL_RCC_OscConfig+0x4d0>)
 8003754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800375a:	f7fe fdef 	bl	800233c <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003762:	f7fe fdeb 	bl	800233c <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b64      	cmp	r3, #100	; 0x64
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e120      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003774:	4b75      	ldr	r3, [pc, #468]	; (800394c <HAL_RCC_OscConfig+0x4d0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d106      	bne.n	8003796 <HAL_RCC_OscConfig+0x31a>
 8003788:	4b6f      	ldr	r3, [pc, #444]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 800378a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378c:	4a6e      	ldr	r2, [pc, #440]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	6713      	str	r3, [r2, #112]	; 0x70
 8003794:	e02d      	b.n	80037f2 <HAL_RCC_OscConfig+0x376>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10c      	bne.n	80037b8 <HAL_RCC_OscConfig+0x33c>
 800379e:	4b6a      	ldr	r3, [pc, #424]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a2:	4a69      	ldr	r2, [pc, #420]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037a4:	f023 0301 	bic.w	r3, r3, #1
 80037a8:	6713      	str	r3, [r2, #112]	; 0x70
 80037aa:	4b67      	ldr	r3, [pc, #412]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ae:	4a66      	ldr	r2, [pc, #408]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037b0:	f023 0304 	bic.w	r3, r3, #4
 80037b4:	6713      	str	r3, [r2, #112]	; 0x70
 80037b6:	e01c      	b.n	80037f2 <HAL_RCC_OscConfig+0x376>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b05      	cmp	r3, #5
 80037be:	d10c      	bne.n	80037da <HAL_RCC_OscConfig+0x35e>
 80037c0:	4b61      	ldr	r3, [pc, #388]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c4:	4a60      	ldr	r2, [pc, #384]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037c6:	f043 0304 	orr.w	r3, r3, #4
 80037ca:	6713      	str	r3, [r2, #112]	; 0x70
 80037cc:	4b5e      	ldr	r3, [pc, #376]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d0:	4a5d      	ldr	r2, [pc, #372]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	6713      	str	r3, [r2, #112]	; 0x70
 80037d8:	e00b      	b.n	80037f2 <HAL_RCC_OscConfig+0x376>
 80037da:	4b5b      	ldr	r3, [pc, #364]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037de:	4a5a      	ldr	r2, [pc, #360]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037e0:	f023 0301 	bic.w	r3, r3, #1
 80037e4:	6713      	str	r3, [r2, #112]	; 0x70
 80037e6:	4b58      	ldr	r3, [pc, #352]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ea:	4a57      	ldr	r2, [pc, #348]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80037ec:	f023 0304 	bic.w	r3, r3, #4
 80037f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d015      	beq.n	8003826 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fa:	f7fe fd9f 	bl	800233c <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003800:	e00a      	b.n	8003818 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003802:	f7fe fd9b 	bl	800233c <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003810:	4293      	cmp	r3, r2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e0ce      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003818:	4b4b      	ldr	r3, [pc, #300]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 800381a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0ee      	beq.n	8003802 <HAL_RCC_OscConfig+0x386>
 8003824:	e014      	b.n	8003850 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003826:	f7fe fd89 	bl	800233c <HAL_GetTick>
 800382a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800382c:	e00a      	b.n	8003844 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800382e:	f7fe fd85 	bl	800233c <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	f241 3288 	movw	r2, #5000	; 0x1388
 800383c:	4293      	cmp	r3, r2
 800383e:	d901      	bls.n	8003844 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e0b8      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003844:	4b40      	ldr	r3, [pc, #256]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003848:	f003 0302 	and.w	r3, r3, #2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d1ee      	bne.n	800382e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003850:	7dfb      	ldrb	r3, [r7, #23]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d105      	bne.n	8003862 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003856:	4b3c      	ldr	r3, [pc, #240]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	4a3b      	ldr	r2, [pc, #236]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 800385c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003860:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b00      	cmp	r3, #0
 8003868:	f000 80a4 	beq.w	80039b4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800386c:	4b36      	ldr	r3, [pc, #216]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	f003 030c 	and.w	r3, r3, #12
 8003874:	2b08      	cmp	r3, #8
 8003876:	d06b      	beq.n	8003950 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	2b02      	cmp	r3, #2
 800387e:	d149      	bne.n	8003914 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003880:	4b31      	ldr	r3, [pc, #196]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a30      	ldr	r2, [pc, #192]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 8003886:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800388a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fe fd56 	bl	800233c <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003894:	f7fe fd52 	bl	800233c <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e087      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038a6:	4b28      	ldr	r3, [pc, #160]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69da      	ldr	r2, [r3, #28]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c0:	019b      	lsls	r3, r3, #6
 80038c2:	431a      	orrs	r2, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038c8:	085b      	lsrs	r3, r3, #1
 80038ca:	3b01      	subs	r3, #1
 80038cc:	041b      	lsls	r3, r3, #16
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d4:	061b      	lsls	r3, r3, #24
 80038d6:	4313      	orrs	r3, r2
 80038d8:	4a1b      	ldr	r2, [pc, #108]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80038da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038de:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038e0:	4b19      	ldr	r3, [pc, #100]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a18      	ldr	r2, [pc, #96]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 80038e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fe fd26 	bl	800233c <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f4:	f7fe fd22 	bl	800233c <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e057      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003906:	4b10      	ldr	r3, [pc, #64]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0x478>
 8003912:	e04f      	b.n	80039b4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a0b      	ldr	r2, [pc, #44]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 800391a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800391e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003920:	f7fe fd0c 	bl	800233c <HAL_GetTick>
 8003924:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003926:	e008      	b.n	800393a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003928:	f7fe fd08 	bl	800233c <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b02      	cmp	r3, #2
 8003934:	d901      	bls.n	800393a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e03d      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393a:	4b03      	ldr	r3, [pc, #12]	; (8003948 <HAL_RCC_OscConfig+0x4cc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1f0      	bne.n	8003928 <HAL_RCC_OscConfig+0x4ac>
 8003946:	e035      	b.n	80039b4 <HAL_RCC_OscConfig+0x538>
 8003948:	40023800 	.word	0x40023800
 800394c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003950:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <HAL_RCC_OscConfig+0x544>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699b      	ldr	r3, [r3, #24]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d028      	beq.n	80039b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003968:	429a      	cmp	r2, r3
 800396a:	d121      	bne.n	80039b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d11a      	bne.n	80039b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800397a:	68fa      	ldr	r2, [r7, #12]
 800397c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003980:	4013      	ands	r3, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003986:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003988:	4293      	cmp	r3, r2
 800398a:	d111      	bne.n	80039b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003996:	085b      	lsrs	r3, r3, #1
 8003998:	3b01      	subs	r3, #1
 800399a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800399c:	429a      	cmp	r2, r3
 800399e:	d107      	bne.n	80039b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d001      	beq.n	80039b4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80039b0:	2301      	movs	r3, #1
 80039b2:	e000      	b.n	80039b6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40023800 	.word	0x40023800

080039c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039ce:	2300      	movs	r3, #0
 80039d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d101      	bne.n	80039dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e0d0      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039dc:	4b6a      	ldr	r3, [pc, #424]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 030f 	and.w	r3, r3, #15
 80039e4:	683a      	ldr	r2, [r7, #0]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d910      	bls.n	8003a0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ea:	4b67      	ldr	r3, [pc, #412]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f023 020f 	bic.w	r2, r3, #15
 80039f2:	4965      	ldr	r1, [pc, #404]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fa:	4b63      	ldr	r3, [pc, #396]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	683a      	ldr	r2, [r7, #0]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e0b8      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 0302 	and.w	r3, r3, #2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d020      	beq.n	8003a5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0304 	and.w	r3, r3, #4
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a24:	4b59      	ldr	r3, [pc, #356]	; (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	4a58      	ldr	r2, [pc, #352]	; (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d005      	beq.n	8003a48 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a3c:	4b53      	ldr	r3, [pc, #332]	; (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a3e:	689b      	ldr	r3, [r3, #8]
 8003a40:	4a52      	ldr	r2, [pc, #328]	; (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a48:	4b50      	ldr	r3, [pc, #320]	; (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	494d      	ldr	r1, [pc, #308]	; (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a56:	4313      	orrs	r3, r2
 8003a58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d040      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a6e:	4b47      	ldr	r3, [pc, #284]	; (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d115      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e07f      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d107      	bne.n	8003a96 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a86:	4b41      	ldr	r3, [pc, #260]	; (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d109      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e073      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a96:	4b3d      	ldr	r3, [pc, #244]	; (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d101      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e06b      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aa6:	4b39      	ldr	r3, [pc, #228]	; (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f023 0203 	bic.w	r2, r3, #3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	4936      	ldr	r1, [pc, #216]	; (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003ab4:	4313      	orrs	r3, r2
 8003ab6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab8:	f7fe fc40 	bl	800233c <HAL_GetTick>
 8003abc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abe:	e00a      	b.n	8003ad6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac0:	f7fe fc3c 	bl	800233c <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e053      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	4b2d      	ldr	r3, [pc, #180]	; (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 020c 	and.w	r2, r3, #12
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d1eb      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ae8:	4b27      	ldr	r3, [pc, #156]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d210      	bcs.n	8003b18 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af6:	4b24      	ldr	r3, [pc, #144]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f023 020f 	bic.w	r2, r3, #15
 8003afe:	4922      	ldr	r1, [pc, #136]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b06:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <HAL_RCC_ClockConfig+0x1c4>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 030f 	and.w	r3, r3, #15
 8003b0e:	683a      	ldr	r2, [r7, #0]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d001      	beq.n	8003b18 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e032      	b.n	8003b7e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d008      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b24:	4b19      	ldr	r3, [pc, #100]	; (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4916      	ldr	r1, [pc, #88]	; (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0308 	and.w	r3, r3, #8
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d009      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b42:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	490e      	ldr	r1, [pc, #56]	; (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b56:	f000 f821 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 8003b5a:	4601      	mov	r1, r0
 8003b5c:	4b0b      	ldr	r3, [pc, #44]	; (8003b8c <HAL_RCC_ClockConfig+0x1c8>)
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 030f 	and.w	r3, r3, #15
 8003b66:	4a0a      	ldr	r2, [pc, #40]	; (8003b90 <HAL_RCC_ClockConfig+0x1cc>)
 8003b68:	5cd3      	ldrb	r3, [r2, r3]
 8003b6a:	fa21 f303 	lsr.w	r3, r1, r3
 8003b6e:	4a09      	ldr	r2, [pc, #36]	; (8003b94 <HAL_RCC_ClockConfig+0x1d0>)
 8003b70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b72:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <HAL_RCC_ClockConfig+0x1d4>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4618      	mov	r0, r3
 8003b78:	f7fe fb9c 	bl	80022b4 <HAL_InitTick>

  return HAL_OK;
 8003b7c:	2300      	movs	r3, #0
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40023c00 	.word	0x40023c00
 8003b8c:	40023800 	.word	0x40023800
 8003b90:	08008138 	.word	0x08008138
 8003b94:	20000008 	.word	0x20000008
 8003b98:	2000000c 	.word	0x2000000c

08003b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	2300      	movs	r3, #0
 8003bac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb2:	4b50      	ldr	r3, [pc, #320]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f003 030c 	and.w	r3, r3, #12
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d007      	beq.n	8003bce <HAL_RCC_GetSysClockFreq+0x32>
 8003bbe:	2b08      	cmp	r3, #8
 8003bc0:	d008      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x38>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	f040 808d 	bne.w	8003ce2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bc8:	4b4b      	ldr	r3, [pc, #300]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003bca:	60bb      	str	r3, [r7, #8]
      break;
 8003bcc:	e08c      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bce:	4b4b      	ldr	r3, [pc, #300]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8003bd0:	60bb      	str	r3, [r7, #8]
      break;
 8003bd2:	e089      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bd4:	4b47      	ldr	r3, [pc, #284]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bdc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003bde:	4b45      	ldr	r3, [pc, #276]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d023      	beq.n	8003c32 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bea:	4b42      	ldr	r3, [pc, #264]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	099b      	lsrs	r3, r3, #6
 8003bf0:	f04f 0400 	mov.w	r4, #0
 8003bf4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003bf8:	f04f 0200 	mov.w	r2, #0
 8003bfc:	ea03 0501 	and.w	r5, r3, r1
 8003c00:	ea04 0602 	and.w	r6, r4, r2
 8003c04:	4a3d      	ldr	r2, [pc, #244]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8003c06:	fb02 f106 	mul.w	r1, r2, r6
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	fb02 f205 	mul.w	r2, r2, r5
 8003c10:	440a      	add	r2, r1
 8003c12:	493a      	ldr	r1, [pc, #232]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x160>)
 8003c14:	fba5 0101 	umull	r0, r1, r5, r1
 8003c18:	1853      	adds	r3, r2, r1
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f04f 0400 	mov.w	r4, #0
 8003c22:	461a      	mov	r2, r3
 8003c24:	4623      	mov	r3, r4
 8003c26:	f7fc fffb 	bl	8000c20 <__aeabi_uldivmod>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	460c      	mov	r4, r1
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	e049      	b.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c32:	4b30      	ldr	r3, [pc, #192]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	099b      	lsrs	r3, r3, #6
 8003c38:	f04f 0400 	mov.w	r4, #0
 8003c3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003c40:	f04f 0200 	mov.w	r2, #0
 8003c44:	ea03 0501 	and.w	r5, r3, r1
 8003c48:	ea04 0602 	and.w	r6, r4, r2
 8003c4c:	4629      	mov	r1, r5
 8003c4e:	4632      	mov	r2, r6
 8003c50:	f04f 0300 	mov.w	r3, #0
 8003c54:	f04f 0400 	mov.w	r4, #0
 8003c58:	0154      	lsls	r4, r2, #5
 8003c5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003c5e:	014b      	lsls	r3, r1, #5
 8003c60:	4619      	mov	r1, r3
 8003c62:	4622      	mov	r2, r4
 8003c64:	1b49      	subs	r1, r1, r5
 8003c66:	eb62 0206 	sbc.w	r2, r2, r6
 8003c6a:	f04f 0300 	mov.w	r3, #0
 8003c6e:	f04f 0400 	mov.w	r4, #0
 8003c72:	0194      	lsls	r4, r2, #6
 8003c74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003c78:	018b      	lsls	r3, r1, #6
 8003c7a:	1a5b      	subs	r3, r3, r1
 8003c7c:	eb64 0402 	sbc.w	r4, r4, r2
 8003c80:	f04f 0100 	mov.w	r1, #0
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	00e2      	lsls	r2, r4, #3
 8003c8a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003c8e:	00d9      	lsls	r1, r3, #3
 8003c90:	460b      	mov	r3, r1
 8003c92:	4614      	mov	r4, r2
 8003c94:	195b      	adds	r3, r3, r5
 8003c96:	eb44 0406 	adc.w	r4, r4, r6
 8003c9a:	f04f 0100 	mov.w	r1, #0
 8003c9e:	f04f 0200 	mov.w	r2, #0
 8003ca2:	02a2      	lsls	r2, r4, #10
 8003ca4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003ca8:	0299      	lsls	r1, r3, #10
 8003caa:	460b      	mov	r3, r1
 8003cac:	4614      	mov	r4, r2
 8003cae:	4618      	mov	r0, r3
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f04f 0400 	mov.w	r4, #0
 8003cb8:	461a      	mov	r2, r3
 8003cba:	4623      	mov	r3, r4
 8003cbc:	f7fc ffb0 	bl	8000c20 <__aeabi_uldivmod>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	460c      	mov	r4, r1
 8003cc4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003cc6:	4b0b      	ldr	r3, [pc, #44]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x158>)
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	0c1b      	lsrs	r3, r3, #16
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	005b      	lsls	r3, r3, #1
 8003cd4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cde:	60bb      	str	r3, [r7, #8]
      break;
 8003ce0:	e002      	b.n	8003ce8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ce2:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003ce4:	60bb      	str	r3, [r7, #8]
      break;
 8003ce6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ce8:	68bb      	ldr	r3, [r7, #8]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3714      	adds	r7, #20
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	00f42400 	.word	0x00f42400
 8003cfc:	017d7840 	.word	0x017d7840

08003d00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d00:	b480      	push	{r7}
 8003d02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d04:	4b03      	ldr	r3, [pc, #12]	; (8003d14 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d06:	681b      	ldr	r3, [r3, #0]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr
 8003d12:	bf00      	nop
 8003d14:	20000008 	.word	0x20000008

08003d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d1c:	f7ff fff0 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 8003d20:	4601      	mov	r1, r0
 8003d22:	4b05      	ldr	r3, [pc, #20]	; (8003d38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	0a9b      	lsrs	r3, r3, #10
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	4a03      	ldr	r2, [pc, #12]	; (8003d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d2e:	5cd3      	ldrb	r3, [r2, r3]
 8003d30:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40023800 	.word	0x40023800
 8003d3c:	08008148 	.word	0x08008148

08003d40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d44:	f7ff ffdc 	bl	8003d00 <HAL_RCC_GetHCLKFreq>
 8003d48:	4601      	mov	r1, r0
 8003d4a:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	0b5b      	lsrs	r3, r3, #13
 8003d50:	f003 0307 	and.w	r3, r3, #7
 8003d54:	4a03      	ldr	r2, [pc, #12]	; (8003d64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d56:	5cd3      	ldrb	r3, [r2, r3]
 8003d58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40023800 	.word	0x40023800
 8003d64:	08008148 	.word	0x08008148

08003d68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b088      	sub	sp, #32
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d012      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d90:	4b69      	ldr	r3, [pc, #420]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	4a68      	ldr	r2, [pc, #416]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003d9a:	6093      	str	r3, [r2, #8]
 8003d9c:	4b66      	ldr	r3, [pc, #408]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003da4:	4964      	ldr	r1, [pc, #400]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003db2:	2301      	movs	r3, #1
 8003db4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d017      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dc2:	4b5d      	ldr	r3, [pc, #372]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003dc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd0:	4959      	ldr	r1, [pc, #356]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de0:	d101      	bne.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003de2:	2301      	movs	r3, #1
 8003de4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d101      	bne.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003dee:	2301      	movs	r3, #1
 8003df0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d017      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dfe:	4b4e      	ldr	r3, [pc, #312]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	494a      	ldr	r1, [pc, #296]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e1c:	d101      	bne.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d101      	bne.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d001      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0320 	and.w	r3, r3, #32
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 808b 	beq.w	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e4c:	4b3a      	ldr	r3, [pc, #232]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e50:	4a39      	ldr	r2, [pc, #228]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e56:	6413      	str	r3, [r2, #64]	; 0x40
 8003e58:	4b37      	ldr	r3, [pc, #220]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e64:	4b35      	ldr	r3, [pc, #212]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a34      	ldr	r2, [pc, #208]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e70:	f7fe fa64 	bl	800233c <HAL_GetTick>
 8003e74:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e76:	e008      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e78:	f7fe fa60 	bl	800233c <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b64      	cmp	r3, #100	; 0x64
 8003e84:	d901      	bls.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e355      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e8a:	4b2c      	ldr	r3, [pc, #176]	; (8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f0      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e96:	4b28      	ldr	r3, [pc, #160]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e9e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d035      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d02e      	beq.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eb4:	4b20      	ldr	r3, [pc, #128]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ebc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ebe:	4b1e      	ldr	r3, [pc, #120]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ec2:	4a1d      	ldr	r2, [pc, #116]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eca:	4b1b      	ldr	r3, [pc, #108]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ece:	4a1a      	ldr	r2, [pc, #104]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ed4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ed6:	4a18      	ldr	r2, [pc, #96]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003edc:	4b16      	ldr	r3, [pc, #88]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d114      	bne.n	8003f12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee8:	f7fe fa28 	bl	800233c <HAL_GetTick>
 8003eec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eee:	e00a      	b.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef0:	f7fe fa24 	bl	800233c <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e317      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f06:	4b0c      	ldr	r3, [pc, #48]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d0ee      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f1e:	d111      	bne.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f20:	4b05      	ldr	r3, [pc, #20]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f22:	689b      	ldr	r3, [r3, #8]
 8003f24:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003f2c:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f2e:	400b      	ands	r3, r1
 8003f30:	4901      	ldr	r1, [pc, #4]	; (8003f38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f32:	4313      	orrs	r3, r2
 8003f34:	608b      	str	r3, [r1, #8]
 8003f36:	e00b      	b.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f38:	40023800 	.word	0x40023800
 8003f3c:	40007000 	.word	0x40007000
 8003f40:	0ffffcff 	.word	0x0ffffcff
 8003f44:	4bb0      	ldr	r3, [pc, #704]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	4aaf      	ldr	r2, [pc, #700]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003f4e:	6093      	str	r3, [r2, #8]
 8003f50:	4bad      	ldr	r3, [pc, #692]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f5c:	49aa      	ldr	r1, [pc, #680]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0310 	and.w	r3, r3, #16
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d010      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f6e:	4ba6      	ldr	r3, [pc, #664]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f74:	4aa4      	ldr	r2, [pc, #656]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003f7e:	4ba2      	ldr	r3, [pc, #648]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f80:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	499f      	ldr	r1, [pc, #636]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d00a      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f9c:	4b9a      	ldr	r3, [pc, #616]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003faa:	4997      	ldr	r1, [pc, #604]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00a      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003fbe:	4b92      	ldr	r3, [pc, #584]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fcc:	498e      	ldr	r1, [pc, #568]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00a      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fe0:	4b89      	ldr	r3, [pc, #548]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fee:	4986      	ldr	r1, [pc, #536]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d00a      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004002:	4b81      	ldr	r3, [pc, #516]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004008:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004010:	497d      	ldr	r1, [pc, #500]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004012:	4313      	orrs	r3, r2
 8004014:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d00a      	beq.n	800403a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004024:	4b78      	ldr	r3, [pc, #480]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800402a:	f023 0203 	bic.w	r2, r3, #3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	4975      	ldr	r1, [pc, #468]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004034:	4313      	orrs	r3, r2
 8004036:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004046:	4b70      	ldr	r3, [pc, #448]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404c:	f023 020c 	bic.w	r2, r3, #12
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004054:	496c      	ldr	r1, [pc, #432]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004056:	4313      	orrs	r3, r2
 8004058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00a      	beq.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004068:	4b67      	ldr	r3, [pc, #412]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800406a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800406e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004076:	4964      	ldr	r1, [pc, #400]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00a      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800408a:	4b5f      	ldr	r3, [pc, #380]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800408c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004090:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004098:	495b      	ldr	r1, [pc, #364]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80040ac:	4b56      	ldr	r3, [pc, #344]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ba:	4953      	ldr	r1, [pc, #332]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040ce:	4b4e      	ldr	r3, [pc, #312]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040dc:	494a      	ldr	r1, [pc, #296]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040f0:	4b45      	ldr	r3, [pc, #276]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fe:	4942      	ldr	r1, [pc, #264]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004112:	4b3d      	ldr	r3, [pc, #244]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004118:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004120:	4939      	ldr	r1, [pc, #228]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004134:	4b34      	ldr	r3, [pc, #208]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004142:	4931      	ldr	r1, [pc, #196]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d011      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004156:	4b2c      	ldr	r3, [pc, #176]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004164:	4928      	ldr	r1, [pc, #160]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004170:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004174:	d101      	bne.n	800417a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004176:	2301      	movs	r3, #1
 8004178:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0308 	and.w	r3, r3, #8
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004186:	2301      	movs	r3, #1
 8004188:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004196:	4b1c      	ldr	r3, [pc, #112]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a4:	4918      	ldr	r1, [pc, #96]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00b      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041b8:	4b13      	ldr	r3, [pc, #76]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041c8:	490f      	ldr	r1, [pc, #60]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041ca:	4313      	orrs	r3, r2
 80041cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d005      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041de:	f040 80d8 	bne.w	8004392 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041e2:	4b09      	ldr	r3, [pc, #36]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a08      	ldr	r2, [pc, #32]	; (8004208 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80041e8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041ee:	f7fe f8a5 	bl	800233c <HAL_GetTick>
 80041f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041f4:	e00a      	b.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041f6:	f7fe f8a1 	bl	800233c <HAL_GetTick>
 80041fa:	4602      	mov	r2, r0
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	1ad3      	subs	r3, r2, r3
 8004200:	2b64      	cmp	r3, #100	; 0x64
 8004202:	d903      	bls.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e196      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004208:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800420c:	4b6c      	ldr	r3, [pc, #432]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1ee      	bne.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0301 	and.w	r3, r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	d021      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004228:	2b00      	cmp	r3, #0
 800422a:	d11d      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800422c:	4b64      	ldr	r3, [pc, #400]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800422e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004232:	0c1b      	lsrs	r3, r3, #16
 8004234:	f003 0303 	and.w	r3, r3, #3
 8004238:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800423a:	4b61      	ldr	r3, [pc, #388]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800423c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004240:	0e1b      	lsrs	r3, r3, #24
 8004242:	f003 030f 	and.w	r3, r3, #15
 8004246:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	019a      	lsls	r2, r3, #6
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	041b      	lsls	r3, r3, #16
 8004252:	431a      	orrs	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	061b      	lsls	r3, r3, #24
 8004258:	431a      	orrs	r2, r3
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	071b      	lsls	r3, r3, #28
 8004260:	4957      	ldr	r1, [pc, #348]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004262:	4313      	orrs	r3, r2
 8004264:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d004      	beq.n	800427e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004278:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800427c:	d00a      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004286:	2b00      	cmp	r3, #0
 8004288:	d02e      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004292:	d129      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004294:	4b4a      	ldr	r3, [pc, #296]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004296:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800429a:	0c1b      	lsrs	r3, r3, #16
 800429c:	f003 0303 	and.w	r3, r3, #3
 80042a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042a2:	4b47      	ldr	r3, [pc, #284]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80042a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042a8:	0f1b      	lsrs	r3, r3, #28
 80042aa:	f003 0307 	and.w	r3, r3, #7
 80042ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	019a      	lsls	r2, r3, #6
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	041b      	lsls	r3, r3, #16
 80042ba:	431a      	orrs	r2, r3
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	061b      	lsls	r3, r3, #24
 80042c2:	431a      	orrs	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	071b      	lsls	r3, r3, #28
 80042c8:	493d      	ldr	r1, [pc, #244]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80042d0:	4b3b      	ldr	r3, [pc, #236]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80042d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042d6:	f023 021f 	bic.w	r2, r3, #31
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042de:	3b01      	subs	r3, #1
 80042e0:	4937      	ldr	r1, [pc, #220]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01d      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042f4:	4b32      	ldr	r3, [pc, #200]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80042f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042fa:	0e1b      	lsrs	r3, r3, #24
 80042fc:	f003 030f 	and.w	r3, r3, #15
 8004300:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004302:	4b2f      	ldr	r3, [pc, #188]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004304:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004308:	0f1b      	lsrs	r3, r3, #28
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	019a      	lsls	r2, r3, #6
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	041b      	lsls	r3, r3, #16
 800431c:	431a      	orrs	r2, r3
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	061b      	lsls	r3, r3, #24
 8004322:	431a      	orrs	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	071b      	lsls	r3, r3, #28
 8004328:	4925      	ldr	r1, [pc, #148]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d011      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	685b      	ldr	r3, [r3, #4]
 8004340:	019a      	lsls	r2, r3, #6
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	691b      	ldr	r3, [r3, #16]
 8004346:	041b      	lsls	r3, r3, #16
 8004348:	431a      	orrs	r2, r3
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	061b      	lsls	r3, r3, #24
 8004350:	431a      	orrs	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	071b      	lsls	r3, r3, #28
 8004358:	4919      	ldr	r1, [pc, #100]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800435a:	4313      	orrs	r3, r2
 800435c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004360:	4b17      	ldr	r3, [pc, #92]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a16      	ldr	r2, [pc, #88]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004366:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800436a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800436c:	f7fd ffe6 	bl	800233c <HAL_GetTick>
 8004370:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004372:	e008      	b.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004374:	f7fd ffe2 	bl	800233c <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	2b64      	cmp	r3, #100	; 0x64
 8004380:	d901      	bls.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e0d7      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004386:	4b0e      	ldr	r3, [pc, #56]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0f0      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	2b01      	cmp	r3, #1
 8004396:	f040 80cd 	bne.w	8004534 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800439a:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a08      	ldr	r2, [pc, #32]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80043a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043a6:	f7fd ffc9 	bl	800233c <HAL_GetTick>
 80043aa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043ac:	e00a      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80043ae:	f7fd ffc5 	bl	800233c <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b64      	cmp	r3, #100	; 0x64
 80043ba:	d903      	bls.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e0ba      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80043c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80043c4:	4b5e      	ldr	r3, [pc, #376]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80043cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043d0:	d0ed      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d003      	beq.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d009      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d02e      	beq.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d12a      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043fa:	4b51      	ldr	r3, [pc, #324]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80043fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004400:	0c1b      	lsrs	r3, r3, #16
 8004402:	f003 0303 	and.w	r3, r3, #3
 8004406:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004408:	4b4d      	ldr	r3, [pc, #308]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800440a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440e:	0f1b      	lsrs	r3, r3, #28
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	695b      	ldr	r3, [r3, #20]
 800441a:	019a      	lsls	r2, r3, #6
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	041b      	lsls	r3, r3, #16
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	061b      	lsls	r3, r3, #24
 8004428:	431a      	orrs	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	071b      	lsls	r3, r3, #28
 800442e:	4944      	ldr	r1, [pc, #272]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004436:	4b42      	ldr	r3, [pc, #264]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800443c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004444:	3b01      	subs	r3, #1
 8004446:	021b      	lsls	r3, r3, #8
 8004448:	493d      	ldr	r1, [pc, #244]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800444a:	4313      	orrs	r3, r2
 800444c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004458:	2b00      	cmp	r3, #0
 800445a:	d022      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004464:	d11d      	bne.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004466:	4b36      	ldr	r3, [pc, #216]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800446c:	0e1b      	lsrs	r3, r3, #24
 800446e:	f003 030f 	and.w	r3, r3, #15
 8004472:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004474:	4b32      	ldr	r3, [pc, #200]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800447a:	0f1b      	lsrs	r3, r3, #28
 800447c:	f003 0307 	and.w	r3, r3, #7
 8004480:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	019a      	lsls	r2, r3, #6
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	041b      	lsls	r3, r3, #16
 800448e:	431a      	orrs	r2, r3
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	061b      	lsls	r3, r3, #24
 8004494:	431a      	orrs	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	071b      	lsls	r3, r3, #28
 800449a:	4929      	ldr	r1, [pc, #164]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800449c:	4313      	orrs	r3, r2
 800449e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d028      	beq.n	8004500 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044ae:	4b24      	ldr	r3, [pc, #144]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b4:	0e1b      	lsrs	r3, r3, #24
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80044bc:	4b20      	ldr	r3, [pc, #128]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044c2:	0c1b      	lsrs	r3, r3, #16
 80044c4:	f003 0303 	and.w	r3, r3, #3
 80044c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	019a      	lsls	r2, r3, #6
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	041b      	lsls	r3, r3, #16
 80044d4:	431a      	orrs	r2, r3
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	061b      	lsls	r3, r3, #24
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	071b      	lsls	r3, r3, #28
 80044e2:	4917      	ldr	r1, [pc, #92]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044ea:	4b15      	ldr	r3, [pc, #84]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f8:	4911      	ldr	r1, [pc, #68]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004500:	4b0f      	ldr	r3, [pc, #60]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a0e      	ldr	r2, [pc, #56]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004506:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800450a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800450c:	f7fd ff16 	bl	800233c <HAL_GetTick>
 8004510:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004512:	e008      	b.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004514:	f7fd ff12 	bl	800233c <HAL_GetTick>
 8004518:	4602      	mov	r2, r0
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	2b64      	cmp	r3, #100	; 0x64
 8004520:	d901      	bls.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e007      	b.n	8004536 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004526:	4b06      	ldr	r3, [pc, #24]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800452e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004532:	d1ef      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3720      	adds	r7, #32
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	40023800 	.word	0x40023800

08004544 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b082      	sub	sp, #8
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d101      	bne.n	8004556 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e01d      	b.n	8004592 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800455c:	b2db      	uxtb	r3, r3
 800455e:	2b00      	cmp	r3, #0
 8004560:	d106      	bne.n	8004570 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fd fd38 	bl	8001fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2202      	movs	r2, #2
 8004574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	3304      	adds	r3, #4
 8004580:	4619      	mov	r1, r3
 8004582:	4610      	mov	r0, r2
 8004584:	f000 fa36 	bl	80049f4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f042 0201 	orr.w	r2, r2, #1
 80045b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <HAL_TIM_Base_Start_IT+0x50>)
 80045bc:	4013      	ands	r3, r2
 80045be:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b06      	cmp	r3, #6
 80045c4:	d00b      	beq.n	80045de <HAL_TIM_Base_Start_IT+0x42>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045cc:	d007      	beq.n	80045de <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f042 0201 	orr.w	r2, r2, #1
 80045dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3714      	adds	r7, #20
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	00010007 	.word	0x00010007

080045f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	691b      	ldr	r3, [r3, #16]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b02      	cmp	r3, #2
 8004604:	d122      	bne.n	800464c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b02      	cmp	r3, #2
 8004612:	d11b      	bne.n	800464c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0202 	mvn.w	r2, #2
 800461c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	f003 0303 	and.w	r3, r3, #3
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f9c0 	bl	80049b8 <HAL_TIM_IC_CaptureCallback>
 8004638:	e005      	b.n	8004646 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f9b2 	bl	80049a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f9c3 	bl	80049cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b04      	cmp	r3, #4
 8004658:	d122      	bne.n	80046a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	2b04      	cmp	r3, #4
 8004666:	d11b      	bne.n	80046a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f06f 0204 	mvn.w	r2, #4
 8004670:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2202      	movs	r2, #2
 8004676:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 f996 	bl	80049b8 <HAL_TIM_IC_CaptureCallback>
 800468c:	e005      	b.n	800469a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 f988 	bl	80049a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f999 	bl	80049cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	691b      	ldr	r3, [r3, #16]
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	2b08      	cmp	r3, #8
 80046ac:	d122      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68db      	ldr	r3, [r3, #12]
 80046b4:	f003 0308 	and.w	r3, r3, #8
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d11b      	bne.n	80046f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f06f 0208 	mvn.w	r2, #8
 80046c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2204      	movs	r2, #4
 80046ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 f96c 	bl	80049b8 <HAL_TIM_IC_CaptureCallback>
 80046e0:	e005      	b.n	80046ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f000 f95e 	bl	80049a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f000 f96f 	bl	80049cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	f003 0310 	and.w	r3, r3, #16
 80046fe:	2b10      	cmp	r3, #16
 8004700:	d122      	bne.n	8004748 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	2b10      	cmp	r3, #16
 800470e:	d11b      	bne.n	8004748 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f06f 0210 	mvn.w	r2, #16
 8004718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2208      	movs	r2, #8
 800471e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69db      	ldr	r3, [r3, #28]
 8004726:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f942 	bl	80049b8 <HAL_TIM_IC_CaptureCallback>
 8004734:	e005      	b.n	8004742 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f000 f934 	bl	80049a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f945 	bl	80049cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	f003 0301 	and.w	r3, r3, #1
 8004752:	2b01      	cmp	r3, #1
 8004754:	d10e      	bne.n	8004774 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f003 0301 	and.w	r3, r3, #1
 8004760:	2b01      	cmp	r3, #1
 8004762:	d107      	bne.n	8004774 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f06f 0201 	mvn.w	r2, #1
 800476c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7fc fcd8 	bl	8001124 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	691b      	ldr	r3, [r3, #16]
 800477a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477e:	2b80      	cmp	r3, #128	; 0x80
 8004780:	d10e      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478c:	2b80      	cmp	r3, #128	; 0x80
 800478e:	d107      	bne.n	80047a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 fafc 	bl	8004d98 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ae:	d10e      	bne.n	80047ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047ba:	2b80      	cmp	r3, #128	; 0x80
 80047bc:	d107      	bne.n	80047ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80047c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f000 faef 	bl	8004dac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d8:	2b40      	cmp	r3, #64	; 0x40
 80047da:	d10e      	bne.n	80047fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68db      	ldr	r3, [r3, #12]
 80047e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047e6:	2b40      	cmp	r3, #64	; 0x40
 80047e8:	d107      	bne.n	80047fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f000 f8f3 	bl	80049e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	f003 0320 	and.w	r3, r3, #32
 8004804:	2b20      	cmp	r3, #32
 8004806:	d10e      	bne.n	8004826 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b20      	cmp	r3, #32
 8004814:	d107      	bne.n	8004826 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f06f 0220 	mvn.w	r2, #32
 800481e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 faaf 	bl	8004d84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004826:	bf00      	nop
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b084      	sub	sp, #16
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_TIM_ConfigClockSource+0x18>
 8004844:	2302      	movs	r3, #2
 8004846:	e0a6      	b.n	8004996 <HAL_TIM_ConfigClockSource+0x166>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	4b4f      	ldr	r3, [pc, #316]	; (80049a0 <HAL_TIM_ConfigClockSource+0x170>)
 8004864:	4013      	ands	r3, r2
 8004866:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800486e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b40      	cmp	r3, #64	; 0x40
 800487e:	d067      	beq.n	8004950 <HAL_TIM_ConfigClockSource+0x120>
 8004880:	2b40      	cmp	r3, #64	; 0x40
 8004882:	d80b      	bhi.n	800489c <HAL_TIM_ConfigClockSource+0x6c>
 8004884:	2b10      	cmp	r3, #16
 8004886:	d073      	beq.n	8004970 <HAL_TIM_ConfigClockSource+0x140>
 8004888:	2b10      	cmp	r3, #16
 800488a:	d802      	bhi.n	8004892 <HAL_TIM_ConfigClockSource+0x62>
 800488c:	2b00      	cmp	r3, #0
 800488e:	d06f      	beq.n	8004970 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004890:	e078      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004892:	2b20      	cmp	r3, #32
 8004894:	d06c      	beq.n	8004970 <HAL_TIM_ConfigClockSource+0x140>
 8004896:	2b30      	cmp	r3, #48	; 0x30
 8004898:	d06a      	beq.n	8004970 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800489a:	e073      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800489c:	2b70      	cmp	r3, #112	; 0x70
 800489e:	d00d      	beq.n	80048bc <HAL_TIM_ConfigClockSource+0x8c>
 80048a0:	2b70      	cmp	r3, #112	; 0x70
 80048a2:	d804      	bhi.n	80048ae <HAL_TIM_ConfigClockSource+0x7e>
 80048a4:	2b50      	cmp	r3, #80	; 0x50
 80048a6:	d033      	beq.n	8004910 <HAL_TIM_ConfigClockSource+0xe0>
 80048a8:	2b60      	cmp	r3, #96	; 0x60
 80048aa:	d041      	beq.n	8004930 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80048ac:	e06a      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80048ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048b2:	d066      	beq.n	8004982 <HAL_TIM_ConfigClockSource+0x152>
 80048b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b8:	d017      	beq.n	80048ea <HAL_TIM_ConfigClockSource+0xba>
      break;
 80048ba:	e063      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6818      	ldr	r0, [r3, #0]
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	6899      	ldr	r1, [r3, #8]
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	68db      	ldr	r3, [r3, #12]
 80048cc:	f000 f9ac 	bl	8004c28 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048de:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68fa      	ldr	r2, [r7, #12]
 80048e6:	609a      	str	r2, [r3, #8]
      break;
 80048e8:	e04c      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	6899      	ldr	r1, [r3, #8]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f000 f995 	bl	8004c28 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	689a      	ldr	r2, [r3, #8]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800490c:	609a      	str	r2, [r3, #8]
      break;
 800490e:	e039      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6818      	ldr	r0, [r3, #0]
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	6859      	ldr	r1, [r3, #4]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	68db      	ldr	r3, [r3, #12]
 800491c:	461a      	mov	r2, r3
 800491e:	f000 f909 	bl	8004b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2150      	movs	r1, #80	; 0x50
 8004928:	4618      	mov	r0, r3
 800492a:	f000 f962 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 800492e:	e029      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6818      	ldr	r0, [r3, #0]
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	6859      	ldr	r1, [r3, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	461a      	mov	r2, r3
 800493e:	f000 f928 	bl	8004b92 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	2160      	movs	r1, #96	; 0x60
 8004948:	4618      	mov	r0, r3
 800494a:	f000 f952 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 800494e:	e019      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	6859      	ldr	r1, [r3, #4]
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	461a      	mov	r2, r3
 800495e:	f000 f8e9 	bl	8004b34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2140      	movs	r1, #64	; 0x40
 8004968:	4618      	mov	r0, r3
 800496a:	f000 f942 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 800496e:	e009      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681a      	ldr	r2, [r3, #0]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4619      	mov	r1, r3
 800497a:	4610      	mov	r0, r2
 800497c:	f000 f939 	bl	8004bf2 <TIM_ITRx_SetConfig>
      break;
 8004980:	e000      	b.n	8004984 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004982:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	fffeff88 	.word	0xfffeff88

080049a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b083      	sub	sp, #12
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr

080049b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049c0:	bf00      	nop
 80049c2:	370c      	adds	r7, #12
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049d4:	bf00      	nop
 80049d6:	370c      	adds	r7, #12
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049e8:	bf00      	nop
 80049ea:	370c      	adds	r7, #12
 80049ec:	46bd      	mov	sp, r7
 80049ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f2:	4770      	bx	lr

080049f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80049f4:	b480      	push	{r7}
 80049f6:	b085      	sub	sp, #20
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
 80049fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4a40      	ldr	r2, [pc, #256]	; (8004b08 <TIM_Base_SetConfig+0x114>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d013      	beq.n	8004a34 <TIM_Base_SetConfig+0x40>
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a12:	d00f      	beq.n	8004a34 <TIM_Base_SetConfig+0x40>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	4a3d      	ldr	r2, [pc, #244]	; (8004b0c <TIM_Base_SetConfig+0x118>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d00b      	beq.n	8004a34 <TIM_Base_SetConfig+0x40>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	4a3c      	ldr	r2, [pc, #240]	; (8004b10 <TIM_Base_SetConfig+0x11c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d007      	beq.n	8004a34 <TIM_Base_SetConfig+0x40>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	4a3b      	ldr	r2, [pc, #236]	; (8004b14 <TIM_Base_SetConfig+0x120>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d003      	beq.n	8004a34 <TIM_Base_SetConfig+0x40>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	4a3a      	ldr	r2, [pc, #232]	; (8004b18 <TIM_Base_SetConfig+0x124>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d108      	bne.n	8004a46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	4a2f      	ldr	r2, [pc, #188]	; (8004b08 <TIM_Base_SetConfig+0x114>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d02b      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a54:	d027      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	4a2c      	ldr	r2, [pc, #176]	; (8004b0c <TIM_Base_SetConfig+0x118>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d023      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	4a2b      	ldr	r2, [pc, #172]	; (8004b10 <TIM_Base_SetConfig+0x11c>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d01f      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	4a2a      	ldr	r2, [pc, #168]	; (8004b14 <TIM_Base_SetConfig+0x120>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d01b      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	4a29      	ldr	r2, [pc, #164]	; (8004b18 <TIM_Base_SetConfig+0x124>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d017      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a28      	ldr	r2, [pc, #160]	; (8004b1c <TIM_Base_SetConfig+0x128>)
 8004a7a:	4293      	cmp	r3, r2
 8004a7c:	d013      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	4a27      	ldr	r2, [pc, #156]	; (8004b20 <TIM_Base_SetConfig+0x12c>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d00f      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a26      	ldr	r2, [pc, #152]	; (8004b24 <TIM_Base_SetConfig+0x130>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d00b      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a25      	ldr	r2, [pc, #148]	; (8004b28 <TIM_Base_SetConfig+0x134>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d007      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a24      	ldr	r2, [pc, #144]	; (8004b2c <TIM_Base_SetConfig+0x138>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d003      	beq.n	8004aa6 <TIM_Base_SetConfig+0xb2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a23      	ldr	r2, [pc, #140]	; (8004b30 <TIM_Base_SetConfig+0x13c>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d108      	bne.n	8004ab8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	68fa      	ldr	r2, [r7, #12]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a0a      	ldr	r2, [pc, #40]	; (8004b08 <TIM_Base_SetConfig+0x114>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d003      	beq.n	8004aec <TIM_Base_SetConfig+0xf8>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a0c      	ldr	r2, [pc, #48]	; (8004b18 <TIM_Base_SetConfig+0x124>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d103      	bne.n	8004af4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	615a      	str	r2, [r3, #20]
}
 8004afa:	bf00      	nop
 8004afc:	3714      	adds	r7, #20
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	40010000 	.word	0x40010000
 8004b0c:	40000400 	.word	0x40000400
 8004b10:	40000800 	.word	0x40000800
 8004b14:	40000c00 	.word	0x40000c00
 8004b18:	40010400 	.word	0x40010400
 8004b1c:	40014000 	.word	0x40014000
 8004b20:	40014400 	.word	0x40014400
 8004b24:	40014800 	.word	0x40014800
 8004b28:	40001800 	.word	0x40001800
 8004b2c:	40001c00 	.word	0x40001c00
 8004b30:	40002000 	.word	0x40002000

08004b34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b087      	sub	sp, #28
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	60f8      	str	r0, [r7, #12]
 8004b3c:	60b9      	str	r1, [r7, #8]
 8004b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a1b      	ldr	r3, [r3, #32]
 8004b44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	f023 0201 	bic.w	r2, r3, #1
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	011b      	lsls	r3, r3, #4
 8004b64:	693a      	ldr	r2, [r7, #16]
 8004b66:	4313      	orrs	r3, r2
 8004b68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f023 030a 	bic.w	r3, r3, #10
 8004b70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	693a      	ldr	r2, [r7, #16]
 8004b7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	697a      	ldr	r2, [r7, #20]
 8004b84:	621a      	str	r2, [r3, #32]
}
 8004b86:	bf00      	nop
 8004b88:	371c      	adds	r7, #28
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b087      	sub	sp, #28
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6a1b      	ldr	r3, [r3, #32]
 8004ba2:	f023 0210 	bic.w	r2, r3, #16
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6a1b      	ldr	r3, [r3, #32]
 8004bb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004bbc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	031b      	lsls	r3, r3, #12
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004bce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004bd0:	68bb      	ldr	r3, [r7, #8]
 8004bd2:	011b      	lsls	r3, r3, #4
 8004bd4:	693a      	ldr	r2, [r7, #16]
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	697a      	ldr	r2, [r7, #20]
 8004bde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	621a      	str	r2, [r3, #32]
}
 8004be6:	bf00      	nop
 8004be8:	371c      	adds	r7, #28
 8004bea:	46bd      	mov	sp, r7
 8004bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf0:	4770      	bx	lr

08004bf2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b085      	sub	sp, #20
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
 8004bfa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c08:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f043 0307 	orr.w	r3, r3, #7
 8004c14:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	609a      	str	r2, [r3, #8]
}
 8004c1c:	bf00      	nop
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c42:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	021a      	lsls	r2, r3, #8
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	609a      	str	r2, [r3, #8]
}
 8004c5c:	bf00      	nop
 8004c5e:	371c      	adds	r7, #28
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d101      	bne.n	8004c80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	e06d      	b.n	8004d5c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2201      	movs	r2, #1
 8004c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685b      	ldr	r3, [r3, #4]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	689b      	ldr	r3, [r3, #8]
 8004c9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a30      	ldr	r2, [pc, #192]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d004      	beq.n	8004cb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a2f      	ldr	r2, [pc, #188]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d108      	bne.n	8004cc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004cba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ccc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a20      	ldr	r2, [pc, #128]	; (8004d68 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d022      	beq.n	8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf2:	d01d      	beq.n	8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a1d      	ldr	r2, [pc, #116]	; (8004d70 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d018      	beq.n	8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a1c      	ldr	r2, [pc, #112]	; (8004d74 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d013      	beq.n	8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a1a      	ldr	r2, [pc, #104]	; (8004d78 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d00e      	beq.n	8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	4a15      	ldr	r2, [pc, #84]	; (8004d6c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d009      	beq.n	8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a16      	ldr	r2, [pc, #88]	; (8004d7c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d004      	beq.n	8004d30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a15      	ldr	r2, [pc, #84]	; (8004d80 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d10c      	bne.n	8004d4a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d36:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	68ba      	ldr	r2, [r7, #8]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d5a:	2300      	movs	r3, #0
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3714      	adds	r7, #20
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr
 8004d68:	40010000 	.word	0x40010000
 8004d6c:	40010400 	.word	0x40010400
 8004d70:	40000400 	.word	0x40000400
 8004d74:	40000800 	.word	0x40000800
 8004d78:	40000c00 	.word	0x40000c00
 8004d7c:	40014000 	.word	0x40014000
 8004d80:	40001800 	.word	0x40001800

08004d84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e040      	b.n	8004e54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d106      	bne.n	8004de8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f7fd f948 	bl	8002078 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2224      	movs	r2, #36	; 0x24
 8004dec:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0201 	bic.w	r2, r2, #1
 8004dfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f000 f82c 	bl	8004e5c <UART_SetConfig>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e022      	b.n	8004e54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d002      	beq.n	8004e1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 faca 	bl	80053b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685a      	ldr	r2, [r3, #4]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f042 0201 	orr.w	r2, r2, #1
 8004e4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 fb51 	bl	80054f4 <UART_CheckIdleState>
 8004e52:	4603      	mov	r3, r0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3708      	adds	r7, #8
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b088      	sub	sp, #32
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004e64:	2300      	movs	r3, #0
 8004e66:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e68:	2300      	movs	r3, #0
 8004e6a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689a      	ldr	r2, [r3, #8]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	691b      	ldr	r3, [r3, #16]
 8004e74:	431a      	orrs	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	431a      	orrs	r2, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	69db      	ldr	r3, [r3, #28]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	4bb1      	ldr	r3, [pc, #708]	; (8005150 <UART_SetConfig+0x2f4>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6812      	ldr	r2, [r2, #0]
 8004e92:	6939      	ldr	r1, [r7, #16]
 8004e94:	430b      	orrs	r3, r1
 8004e96:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	430a      	orrs	r2, r1
 8004eac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a1b      	ldr	r3, [r3, #32]
 8004eb8:	693a      	ldr	r2, [r7, #16]
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	430a      	orrs	r2, r1
 8004ed0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a9f      	ldr	r2, [pc, #636]	; (8005154 <UART_SetConfig+0x2f8>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d121      	bne.n	8004f20 <UART_SetConfig+0xc4>
 8004edc:	4b9e      	ldr	r3, [pc, #632]	; (8005158 <UART_SetConfig+0x2fc>)
 8004ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ee2:	f003 0303 	and.w	r3, r3, #3
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d816      	bhi.n	8004f18 <UART_SetConfig+0xbc>
 8004eea:	a201      	add	r2, pc, #4	; (adr r2, 8004ef0 <UART_SetConfig+0x94>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f01 	.word	0x08004f01
 8004ef4:	08004f0d 	.word	0x08004f0d
 8004ef8:	08004f07 	.word	0x08004f07
 8004efc:	08004f13 	.word	0x08004f13
 8004f00:	2301      	movs	r3, #1
 8004f02:	77fb      	strb	r3, [r7, #31]
 8004f04:	e151      	b.n	80051aa <UART_SetConfig+0x34e>
 8004f06:	2302      	movs	r3, #2
 8004f08:	77fb      	strb	r3, [r7, #31]
 8004f0a:	e14e      	b.n	80051aa <UART_SetConfig+0x34e>
 8004f0c:	2304      	movs	r3, #4
 8004f0e:	77fb      	strb	r3, [r7, #31]
 8004f10:	e14b      	b.n	80051aa <UART_SetConfig+0x34e>
 8004f12:	2308      	movs	r3, #8
 8004f14:	77fb      	strb	r3, [r7, #31]
 8004f16:	e148      	b.n	80051aa <UART_SetConfig+0x34e>
 8004f18:	2310      	movs	r3, #16
 8004f1a:	77fb      	strb	r3, [r7, #31]
 8004f1c:	bf00      	nop
 8004f1e:	e144      	b.n	80051aa <UART_SetConfig+0x34e>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a8d      	ldr	r2, [pc, #564]	; (800515c <UART_SetConfig+0x300>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d134      	bne.n	8004f94 <UART_SetConfig+0x138>
 8004f2a:	4b8b      	ldr	r3, [pc, #556]	; (8005158 <UART_SetConfig+0x2fc>)
 8004f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f30:	f003 030c 	and.w	r3, r3, #12
 8004f34:	2b0c      	cmp	r3, #12
 8004f36:	d829      	bhi.n	8004f8c <UART_SetConfig+0x130>
 8004f38:	a201      	add	r2, pc, #4	; (adr r2, 8004f40 <UART_SetConfig+0xe4>)
 8004f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f3e:	bf00      	nop
 8004f40:	08004f75 	.word	0x08004f75
 8004f44:	08004f8d 	.word	0x08004f8d
 8004f48:	08004f8d 	.word	0x08004f8d
 8004f4c:	08004f8d 	.word	0x08004f8d
 8004f50:	08004f81 	.word	0x08004f81
 8004f54:	08004f8d 	.word	0x08004f8d
 8004f58:	08004f8d 	.word	0x08004f8d
 8004f5c:	08004f8d 	.word	0x08004f8d
 8004f60:	08004f7b 	.word	0x08004f7b
 8004f64:	08004f8d 	.word	0x08004f8d
 8004f68:	08004f8d 	.word	0x08004f8d
 8004f6c:	08004f8d 	.word	0x08004f8d
 8004f70:	08004f87 	.word	0x08004f87
 8004f74:	2300      	movs	r3, #0
 8004f76:	77fb      	strb	r3, [r7, #31]
 8004f78:	e117      	b.n	80051aa <UART_SetConfig+0x34e>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	77fb      	strb	r3, [r7, #31]
 8004f7e:	e114      	b.n	80051aa <UART_SetConfig+0x34e>
 8004f80:	2304      	movs	r3, #4
 8004f82:	77fb      	strb	r3, [r7, #31]
 8004f84:	e111      	b.n	80051aa <UART_SetConfig+0x34e>
 8004f86:	2308      	movs	r3, #8
 8004f88:	77fb      	strb	r3, [r7, #31]
 8004f8a:	e10e      	b.n	80051aa <UART_SetConfig+0x34e>
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	77fb      	strb	r3, [r7, #31]
 8004f90:	bf00      	nop
 8004f92:	e10a      	b.n	80051aa <UART_SetConfig+0x34e>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a71      	ldr	r2, [pc, #452]	; (8005160 <UART_SetConfig+0x304>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d120      	bne.n	8004fe0 <UART_SetConfig+0x184>
 8004f9e:	4b6e      	ldr	r3, [pc, #440]	; (8005158 <UART_SetConfig+0x2fc>)
 8004fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fa8:	2b10      	cmp	r3, #16
 8004faa:	d00f      	beq.n	8004fcc <UART_SetConfig+0x170>
 8004fac:	2b10      	cmp	r3, #16
 8004fae:	d802      	bhi.n	8004fb6 <UART_SetConfig+0x15a>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d005      	beq.n	8004fc0 <UART_SetConfig+0x164>
 8004fb4:	e010      	b.n	8004fd8 <UART_SetConfig+0x17c>
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	d005      	beq.n	8004fc6 <UART_SetConfig+0x16a>
 8004fba:	2b30      	cmp	r3, #48	; 0x30
 8004fbc:	d009      	beq.n	8004fd2 <UART_SetConfig+0x176>
 8004fbe:	e00b      	b.n	8004fd8 <UART_SetConfig+0x17c>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	77fb      	strb	r3, [r7, #31]
 8004fc4:	e0f1      	b.n	80051aa <UART_SetConfig+0x34e>
 8004fc6:	2302      	movs	r3, #2
 8004fc8:	77fb      	strb	r3, [r7, #31]
 8004fca:	e0ee      	b.n	80051aa <UART_SetConfig+0x34e>
 8004fcc:	2304      	movs	r3, #4
 8004fce:	77fb      	strb	r3, [r7, #31]
 8004fd0:	e0eb      	b.n	80051aa <UART_SetConfig+0x34e>
 8004fd2:	2308      	movs	r3, #8
 8004fd4:	77fb      	strb	r3, [r7, #31]
 8004fd6:	e0e8      	b.n	80051aa <UART_SetConfig+0x34e>
 8004fd8:	2310      	movs	r3, #16
 8004fda:	77fb      	strb	r3, [r7, #31]
 8004fdc:	bf00      	nop
 8004fde:	e0e4      	b.n	80051aa <UART_SetConfig+0x34e>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a5f      	ldr	r2, [pc, #380]	; (8005164 <UART_SetConfig+0x308>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d120      	bne.n	800502c <UART_SetConfig+0x1d0>
 8004fea:	4b5b      	ldr	r3, [pc, #364]	; (8005158 <UART_SetConfig+0x2fc>)
 8004fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004ff4:	2b40      	cmp	r3, #64	; 0x40
 8004ff6:	d00f      	beq.n	8005018 <UART_SetConfig+0x1bc>
 8004ff8:	2b40      	cmp	r3, #64	; 0x40
 8004ffa:	d802      	bhi.n	8005002 <UART_SetConfig+0x1a6>
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d005      	beq.n	800500c <UART_SetConfig+0x1b0>
 8005000:	e010      	b.n	8005024 <UART_SetConfig+0x1c8>
 8005002:	2b80      	cmp	r3, #128	; 0x80
 8005004:	d005      	beq.n	8005012 <UART_SetConfig+0x1b6>
 8005006:	2bc0      	cmp	r3, #192	; 0xc0
 8005008:	d009      	beq.n	800501e <UART_SetConfig+0x1c2>
 800500a:	e00b      	b.n	8005024 <UART_SetConfig+0x1c8>
 800500c:	2300      	movs	r3, #0
 800500e:	77fb      	strb	r3, [r7, #31]
 8005010:	e0cb      	b.n	80051aa <UART_SetConfig+0x34e>
 8005012:	2302      	movs	r3, #2
 8005014:	77fb      	strb	r3, [r7, #31]
 8005016:	e0c8      	b.n	80051aa <UART_SetConfig+0x34e>
 8005018:	2304      	movs	r3, #4
 800501a:	77fb      	strb	r3, [r7, #31]
 800501c:	e0c5      	b.n	80051aa <UART_SetConfig+0x34e>
 800501e:	2308      	movs	r3, #8
 8005020:	77fb      	strb	r3, [r7, #31]
 8005022:	e0c2      	b.n	80051aa <UART_SetConfig+0x34e>
 8005024:	2310      	movs	r3, #16
 8005026:	77fb      	strb	r3, [r7, #31]
 8005028:	bf00      	nop
 800502a:	e0be      	b.n	80051aa <UART_SetConfig+0x34e>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a4d      	ldr	r2, [pc, #308]	; (8005168 <UART_SetConfig+0x30c>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d124      	bne.n	8005080 <UART_SetConfig+0x224>
 8005036:	4b48      	ldr	r3, [pc, #288]	; (8005158 <UART_SetConfig+0x2fc>)
 8005038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005040:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005044:	d012      	beq.n	800506c <UART_SetConfig+0x210>
 8005046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800504a:	d802      	bhi.n	8005052 <UART_SetConfig+0x1f6>
 800504c:	2b00      	cmp	r3, #0
 800504e:	d007      	beq.n	8005060 <UART_SetConfig+0x204>
 8005050:	e012      	b.n	8005078 <UART_SetConfig+0x21c>
 8005052:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005056:	d006      	beq.n	8005066 <UART_SetConfig+0x20a>
 8005058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800505c:	d009      	beq.n	8005072 <UART_SetConfig+0x216>
 800505e:	e00b      	b.n	8005078 <UART_SetConfig+0x21c>
 8005060:	2300      	movs	r3, #0
 8005062:	77fb      	strb	r3, [r7, #31]
 8005064:	e0a1      	b.n	80051aa <UART_SetConfig+0x34e>
 8005066:	2302      	movs	r3, #2
 8005068:	77fb      	strb	r3, [r7, #31]
 800506a:	e09e      	b.n	80051aa <UART_SetConfig+0x34e>
 800506c:	2304      	movs	r3, #4
 800506e:	77fb      	strb	r3, [r7, #31]
 8005070:	e09b      	b.n	80051aa <UART_SetConfig+0x34e>
 8005072:	2308      	movs	r3, #8
 8005074:	77fb      	strb	r3, [r7, #31]
 8005076:	e098      	b.n	80051aa <UART_SetConfig+0x34e>
 8005078:	2310      	movs	r3, #16
 800507a:	77fb      	strb	r3, [r7, #31]
 800507c:	bf00      	nop
 800507e:	e094      	b.n	80051aa <UART_SetConfig+0x34e>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a39      	ldr	r2, [pc, #228]	; (800516c <UART_SetConfig+0x310>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d124      	bne.n	80050d4 <UART_SetConfig+0x278>
 800508a:	4b33      	ldr	r3, [pc, #204]	; (8005158 <UART_SetConfig+0x2fc>)
 800508c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005090:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005098:	d012      	beq.n	80050c0 <UART_SetConfig+0x264>
 800509a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800509e:	d802      	bhi.n	80050a6 <UART_SetConfig+0x24a>
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d007      	beq.n	80050b4 <UART_SetConfig+0x258>
 80050a4:	e012      	b.n	80050cc <UART_SetConfig+0x270>
 80050a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050aa:	d006      	beq.n	80050ba <UART_SetConfig+0x25e>
 80050ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050b0:	d009      	beq.n	80050c6 <UART_SetConfig+0x26a>
 80050b2:	e00b      	b.n	80050cc <UART_SetConfig+0x270>
 80050b4:	2301      	movs	r3, #1
 80050b6:	77fb      	strb	r3, [r7, #31]
 80050b8:	e077      	b.n	80051aa <UART_SetConfig+0x34e>
 80050ba:	2302      	movs	r3, #2
 80050bc:	77fb      	strb	r3, [r7, #31]
 80050be:	e074      	b.n	80051aa <UART_SetConfig+0x34e>
 80050c0:	2304      	movs	r3, #4
 80050c2:	77fb      	strb	r3, [r7, #31]
 80050c4:	e071      	b.n	80051aa <UART_SetConfig+0x34e>
 80050c6:	2308      	movs	r3, #8
 80050c8:	77fb      	strb	r3, [r7, #31]
 80050ca:	e06e      	b.n	80051aa <UART_SetConfig+0x34e>
 80050cc:	2310      	movs	r3, #16
 80050ce:	77fb      	strb	r3, [r7, #31]
 80050d0:	bf00      	nop
 80050d2:	e06a      	b.n	80051aa <UART_SetConfig+0x34e>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a25      	ldr	r2, [pc, #148]	; (8005170 <UART_SetConfig+0x314>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d124      	bne.n	8005128 <UART_SetConfig+0x2cc>
 80050de:	4b1e      	ldr	r3, [pc, #120]	; (8005158 <UART_SetConfig+0x2fc>)
 80050e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050e4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80050e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ec:	d012      	beq.n	8005114 <UART_SetConfig+0x2b8>
 80050ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f2:	d802      	bhi.n	80050fa <UART_SetConfig+0x29e>
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d007      	beq.n	8005108 <UART_SetConfig+0x2ac>
 80050f8:	e012      	b.n	8005120 <UART_SetConfig+0x2c4>
 80050fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050fe:	d006      	beq.n	800510e <UART_SetConfig+0x2b2>
 8005100:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005104:	d009      	beq.n	800511a <UART_SetConfig+0x2be>
 8005106:	e00b      	b.n	8005120 <UART_SetConfig+0x2c4>
 8005108:	2300      	movs	r3, #0
 800510a:	77fb      	strb	r3, [r7, #31]
 800510c:	e04d      	b.n	80051aa <UART_SetConfig+0x34e>
 800510e:	2302      	movs	r3, #2
 8005110:	77fb      	strb	r3, [r7, #31]
 8005112:	e04a      	b.n	80051aa <UART_SetConfig+0x34e>
 8005114:	2304      	movs	r3, #4
 8005116:	77fb      	strb	r3, [r7, #31]
 8005118:	e047      	b.n	80051aa <UART_SetConfig+0x34e>
 800511a:	2308      	movs	r3, #8
 800511c:	77fb      	strb	r3, [r7, #31]
 800511e:	e044      	b.n	80051aa <UART_SetConfig+0x34e>
 8005120:	2310      	movs	r3, #16
 8005122:	77fb      	strb	r3, [r7, #31]
 8005124:	bf00      	nop
 8005126:	e040      	b.n	80051aa <UART_SetConfig+0x34e>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a11      	ldr	r2, [pc, #68]	; (8005174 <UART_SetConfig+0x318>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d139      	bne.n	80051a6 <UART_SetConfig+0x34a>
 8005132:	4b09      	ldr	r3, [pc, #36]	; (8005158 <UART_SetConfig+0x2fc>)
 8005134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005138:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800513c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005140:	d027      	beq.n	8005192 <UART_SetConfig+0x336>
 8005142:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005146:	d817      	bhi.n	8005178 <UART_SetConfig+0x31c>
 8005148:	2b00      	cmp	r3, #0
 800514a:	d01c      	beq.n	8005186 <UART_SetConfig+0x32a>
 800514c:	e027      	b.n	800519e <UART_SetConfig+0x342>
 800514e:	bf00      	nop
 8005150:	efff69f3 	.word	0xefff69f3
 8005154:	40011000 	.word	0x40011000
 8005158:	40023800 	.word	0x40023800
 800515c:	40004400 	.word	0x40004400
 8005160:	40004800 	.word	0x40004800
 8005164:	40004c00 	.word	0x40004c00
 8005168:	40005000 	.word	0x40005000
 800516c:	40011400 	.word	0x40011400
 8005170:	40007800 	.word	0x40007800
 8005174:	40007c00 	.word	0x40007c00
 8005178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800517c:	d006      	beq.n	800518c <UART_SetConfig+0x330>
 800517e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005182:	d009      	beq.n	8005198 <UART_SetConfig+0x33c>
 8005184:	e00b      	b.n	800519e <UART_SetConfig+0x342>
 8005186:	2300      	movs	r3, #0
 8005188:	77fb      	strb	r3, [r7, #31]
 800518a:	e00e      	b.n	80051aa <UART_SetConfig+0x34e>
 800518c:	2302      	movs	r3, #2
 800518e:	77fb      	strb	r3, [r7, #31]
 8005190:	e00b      	b.n	80051aa <UART_SetConfig+0x34e>
 8005192:	2304      	movs	r3, #4
 8005194:	77fb      	strb	r3, [r7, #31]
 8005196:	e008      	b.n	80051aa <UART_SetConfig+0x34e>
 8005198:	2308      	movs	r3, #8
 800519a:	77fb      	strb	r3, [r7, #31]
 800519c:	e005      	b.n	80051aa <UART_SetConfig+0x34e>
 800519e:	2310      	movs	r3, #16
 80051a0:	77fb      	strb	r3, [r7, #31]
 80051a2:	bf00      	nop
 80051a4:	e001      	b.n	80051aa <UART_SetConfig+0x34e>
 80051a6:	2310      	movs	r3, #16
 80051a8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051b2:	d17f      	bne.n	80052b4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80051b4:	7ffb      	ldrb	r3, [r7, #31]
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d85c      	bhi.n	8005274 <UART_SetConfig+0x418>
 80051ba:	a201      	add	r2, pc, #4	; (adr r2, 80051c0 <UART_SetConfig+0x364>)
 80051bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051c0:	080051e5 	.word	0x080051e5
 80051c4:	08005205 	.word	0x08005205
 80051c8:	08005225 	.word	0x08005225
 80051cc:	08005275 	.word	0x08005275
 80051d0:	0800523d 	.word	0x0800523d
 80051d4:	08005275 	.word	0x08005275
 80051d8:	08005275 	.word	0x08005275
 80051dc:	08005275 	.word	0x08005275
 80051e0:	0800525d 	.word	0x0800525d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051e4:	f7fe fd98 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 80051e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	005a      	lsls	r2, r3, #1
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	085b      	lsrs	r3, r3, #1
 80051f4:	441a      	add	r2, r3
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80051fe:	b29b      	uxth	r3, r3
 8005200:	61bb      	str	r3, [r7, #24]
        break;
 8005202:	e03a      	b.n	800527a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005204:	f7fe fd9c 	bl	8003d40 <HAL_RCC_GetPCLK2Freq>
 8005208:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	005a      	lsls	r2, r3, #1
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	085b      	lsrs	r3, r3, #1
 8005214:	441a      	add	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	fbb2 f3f3 	udiv	r3, r2, r3
 800521e:	b29b      	uxth	r3, r3
 8005220:	61bb      	str	r3, [r7, #24]
        break;
 8005222:	e02a      	b.n	800527a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	085a      	lsrs	r2, r3, #1
 800522a:	4b5f      	ldr	r3, [pc, #380]	; (80053a8 <UART_SetConfig+0x54c>)
 800522c:	4413      	add	r3, r2
 800522e:	687a      	ldr	r2, [r7, #4]
 8005230:	6852      	ldr	r2, [r2, #4]
 8005232:	fbb3 f3f2 	udiv	r3, r3, r2
 8005236:	b29b      	uxth	r3, r3
 8005238:	61bb      	str	r3, [r7, #24]
        break;
 800523a:	e01e      	b.n	800527a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800523c:	f7fe fcae 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 8005240:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	005a      	lsls	r2, r3, #1
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	685b      	ldr	r3, [r3, #4]
 800524a:	085b      	lsrs	r3, r3, #1
 800524c:	441a      	add	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	fbb2 f3f3 	udiv	r3, r2, r3
 8005256:	b29b      	uxth	r3, r3
 8005258:	61bb      	str	r3, [r7, #24]
        break;
 800525a:	e00e      	b.n	800527a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	085b      	lsrs	r3, r3, #1
 8005262:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	fbb2 f3f3 	udiv	r3, r2, r3
 800526e:	b29b      	uxth	r3, r3
 8005270:	61bb      	str	r3, [r7, #24]
        break;
 8005272:	e002      	b.n	800527a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	75fb      	strb	r3, [r7, #23]
        break;
 8005278:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	2b0f      	cmp	r3, #15
 800527e:	d916      	bls.n	80052ae <UART_SetConfig+0x452>
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005286:	d212      	bcs.n	80052ae <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	b29b      	uxth	r3, r3
 800528c:	f023 030f 	bic.w	r3, r3, #15
 8005290:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005292:	69bb      	ldr	r3, [r7, #24]
 8005294:	085b      	lsrs	r3, r3, #1
 8005296:	b29b      	uxth	r3, r3
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	b29a      	uxth	r2, r3
 800529e:	897b      	ldrh	r3, [r7, #10]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	897a      	ldrh	r2, [r7, #10]
 80052aa:	60da      	str	r2, [r3, #12]
 80052ac:	e070      	b.n	8005390 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	75fb      	strb	r3, [r7, #23]
 80052b2:	e06d      	b.n	8005390 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80052b4:	7ffb      	ldrb	r3, [r7, #31]
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d859      	bhi.n	800536e <UART_SetConfig+0x512>
 80052ba:	a201      	add	r2, pc, #4	; (adr r2, 80052c0 <UART_SetConfig+0x464>)
 80052bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c0:	080052e5 	.word	0x080052e5
 80052c4:	08005303 	.word	0x08005303
 80052c8:	08005321 	.word	0x08005321
 80052cc:	0800536f 	.word	0x0800536f
 80052d0:	08005339 	.word	0x08005339
 80052d4:	0800536f 	.word	0x0800536f
 80052d8:	0800536f 	.word	0x0800536f
 80052dc:	0800536f 	.word	0x0800536f
 80052e0:	08005357 	.word	0x08005357
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052e4:	f7fe fd18 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 80052e8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	085a      	lsrs	r2, r3, #1
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	441a      	add	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	61bb      	str	r3, [r7, #24]
        break;
 8005300:	e038      	b.n	8005374 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005302:	f7fe fd1d 	bl	8003d40 <HAL_RCC_GetPCLK2Freq>
 8005306:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	085a      	lsrs	r2, r3, #1
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	441a      	add	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	685b      	ldr	r3, [r3, #4]
 8005316:	fbb2 f3f3 	udiv	r3, r2, r3
 800531a:	b29b      	uxth	r3, r3
 800531c:	61bb      	str	r3, [r7, #24]
        break;
 800531e:	e029      	b.n	8005374 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	085a      	lsrs	r2, r3, #1
 8005326:	4b21      	ldr	r3, [pc, #132]	; (80053ac <UART_SetConfig+0x550>)
 8005328:	4413      	add	r3, r2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6852      	ldr	r2, [r2, #4]
 800532e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005332:	b29b      	uxth	r3, r3
 8005334:	61bb      	str	r3, [r7, #24]
        break;
 8005336:	e01d      	b.n	8005374 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005338:	f7fe fc30 	bl	8003b9c <HAL_RCC_GetSysClockFreq>
 800533c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	085a      	lsrs	r2, r3, #1
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	441a      	add	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005350:	b29b      	uxth	r3, r3
 8005352:	61bb      	str	r3, [r7, #24]
        break;
 8005354:	e00e      	b.n	8005374 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	085b      	lsrs	r3, r3, #1
 800535c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	fbb2 f3f3 	udiv	r3, r2, r3
 8005368:	b29b      	uxth	r3, r3
 800536a:	61bb      	str	r3, [r7, #24]
        break;
 800536c:	e002      	b.n	8005374 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	75fb      	strb	r3, [r7, #23]
        break;
 8005372:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	2b0f      	cmp	r3, #15
 8005378:	d908      	bls.n	800538c <UART_SetConfig+0x530>
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005380:	d204      	bcs.n	800538c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	69ba      	ldr	r2, [r7, #24]
 8005388:	60da      	str	r2, [r3, #12]
 800538a:	e001      	b.n	8005390 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800539c:	7dfb      	ldrb	r3, [r7, #23]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3720      	adds	r7, #32
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	01e84800 	.word	0x01e84800
 80053ac:	00f42400 	.word	0x00f42400

080053b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	f003 0304 	and.w	r3, r3, #4
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005422:	f003 0308 	and.w	r3, r3, #8
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005444:	f003 0310 	and.w	r3, r3, #16
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005466:	f003 0320 	and.w	r3, r3, #32
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01a      	beq.n	80054c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ae:	d10a      	bne.n	80054c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	605a      	str	r2, [r3, #4]
  }
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af02      	add	r7, sp, #8
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005502:	f7fc ff1b 	bl	800233c <HAL_GetTick>
 8005506:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0308 	and.w	r3, r3, #8
 8005512:	2b08      	cmp	r3, #8
 8005514:	d10e      	bne.n	8005534 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005516:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800551a:	9300      	str	r3, [sp, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f814 	bl	8005552 <UART_WaitOnFlagUntilTimeout>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d001      	beq.n	8005534 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005530:	2303      	movs	r3, #3
 8005532:	e00a      	b.n	800554a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2220      	movs	r2, #32
 8005538:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2220      	movs	r2, #32
 800553e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3710      	adds	r7, #16
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}

08005552 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b084      	sub	sp, #16
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	603b      	str	r3, [r7, #0]
 800555e:	4613      	mov	r3, r2
 8005560:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005562:	e05d      	b.n	8005620 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800556a:	d059      	beq.n	8005620 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800556c:	f7fc fee6 	bl	800233c <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	69ba      	ldr	r2, [r7, #24]
 8005578:	429a      	cmp	r2, r3
 800557a:	d302      	bcc.n	8005582 <UART_WaitOnFlagUntilTimeout+0x30>
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d11b      	bne.n	80055ba <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005590:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	689a      	ldr	r2, [r3, #8]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f022 0201 	bic.w	r2, r2, #1
 80055a0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2220      	movs	r2, #32
 80055a6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2220      	movs	r2, #32
 80055ac:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e042      	b.n	8005640 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d02b      	beq.n	8005620 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055d6:	d123      	bne.n	8005620 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055e0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80055f0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	689a      	ldr	r2, [r3, #8]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f022 0201 	bic.w	r2, r2, #1
 8005600:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2220      	movs	r2, #32
 8005606:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	2220      	movs	r2, #32
 8005612:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e00f      	b.n	8005640 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	69da      	ldr	r2, [r3, #28]
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	4013      	ands	r3, r2
 800562a:	68ba      	ldr	r2, [r7, #8]
 800562c:	429a      	cmp	r2, r3
 800562e:	bf0c      	ite	eq
 8005630:	2301      	moveq	r3, #1
 8005632:	2300      	movne	r3, #0
 8005634:	b2db      	uxtb	r3, r3
 8005636:	461a      	mov	r2, r3
 8005638:	79fb      	ldrb	r3, [r7, #7]
 800563a:	429a      	cmp	r2, r3
 800563c:	d092      	beq.n	8005564 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800563e:	2300      	movs	r3, #0
}
 8005640:	4618      	mov	r0, r3
 8005642:	3710      	adds	r7, #16
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <__errno>:
 8005648:	4b01      	ldr	r3, [pc, #4]	; (8005650 <__errno+0x8>)
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	20000014 	.word	0x20000014

08005654 <__libc_init_array>:
 8005654:	b570      	push	{r4, r5, r6, lr}
 8005656:	4e0d      	ldr	r6, [pc, #52]	; (800568c <__libc_init_array+0x38>)
 8005658:	4c0d      	ldr	r4, [pc, #52]	; (8005690 <__libc_init_array+0x3c>)
 800565a:	1ba4      	subs	r4, r4, r6
 800565c:	10a4      	asrs	r4, r4, #2
 800565e:	2500      	movs	r5, #0
 8005660:	42a5      	cmp	r5, r4
 8005662:	d109      	bne.n	8005678 <__libc_init_array+0x24>
 8005664:	4e0b      	ldr	r6, [pc, #44]	; (8005694 <__libc_init_array+0x40>)
 8005666:	4c0c      	ldr	r4, [pc, #48]	; (8005698 <__libc_init_array+0x44>)
 8005668:	f002 fd58 	bl	800811c <_init>
 800566c:	1ba4      	subs	r4, r4, r6
 800566e:	10a4      	asrs	r4, r4, #2
 8005670:	2500      	movs	r5, #0
 8005672:	42a5      	cmp	r5, r4
 8005674:	d105      	bne.n	8005682 <__libc_init_array+0x2e>
 8005676:	bd70      	pop	{r4, r5, r6, pc}
 8005678:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800567c:	4798      	blx	r3
 800567e:	3501      	adds	r5, #1
 8005680:	e7ee      	b.n	8005660 <__libc_init_array+0xc>
 8005682:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005686:	4798      	blx	r3
 8005688:	3501      	adds	r5, #1
 800568a:	e7f2      	b.n	8005672 <__libc_init_array+0x1e>
 800568c:	08008560 	.word	0x08008560
 8005690:	08008560 	.word	0x08008560
 8005694:	08008560 	.word	0x08008560
 8005698:	08008564 	.word	0x08008564

0800569c <memcpy>:
 800569c:	b510      	push	{r4, lr}
 800569e:	1e43      	subs	r3, r0, #1
 80056a0:	440a      	add	r2, r1
 80056a2:	4291      	cmp	r1, r2
 80056a4:	d100      	bne.n	80056a8 <memcpy+0xc>
 80056a6:	bd10      	pop	{r4, pc}
 80056a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056b0:	e7f7      	b.n	80056a2 <memcpy+0x6>

080056b2 <memset>:
 80056b2:	4402      	add	r2, r0
 80056b4:	4603      	mov	r3, r0
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d100      	bne.n	80056bc <memset+0xa>
 80056ba:	4770      	bx	lr
 80056bc:	f803 1b01 	strb.w	r1, [r3], #1
 80056c0:	e7f9      	b.n	80056b6 <memset+0x4>

080056c2 <__cvt>:
 80056c2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80056c6:	ec55 4b10 	vmov	r4, r5, d0
 80056ca:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80056cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80056d0:	2d00      	cmp	r5, #0
 80056d2:	460e      	mov	r6, r1
 80056d4:	4691      	mov	r9, r2
 80056d6:	4619      	mov	r1, r3
 80056d8:	bfb8      	it	lt
 80056da:	4622      	movlt	r2, r4
 80056dc:	462b      	mov	r3, r5
 80056de:	f027 0720 	bic.w	r7, r7, #32
 80056e2:	bfbb      	ittet	lt
 80056e4:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80056e8:	461d      	movlt	r5, r3
 80056ea:	2300      	movge	r3, #0
 80056ec:	232d      	movlt	r3, #45	; 0x2d
 80056ee:	bfb8      	it	lt
 80056f0:	4614      	movlt	r4, r2
 80056f2:	2f46      	cmp	r7, #70	; 0x46
 80056f4:	700b      	strb	r3, [r1, #0]
 80056f6:	d004      	beq.n	8005702 <__cvt+0x40>
 80056f8:	2f45      	cmp	r7, #69	; 0x45
 80056fa:	d100      	bne.n	80056fe <__cvt+0x3c>
 80056fc:	3601      	adds	r6, #1
 80056fe:	2102      	movs	r1, #2
 8005700:	e000      	b.n	8005704 <__cvt+0x42>
 8005702:	2103      	movs	r1, #3
 8005704:	ab03      	add	r3, sp, #12
 8005706:	9301      	str	r3, [sp, #4]
 8005708:	ab02      	add	r3, sp, #8
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	4632      	mov	r2, r6
 800570e:	4653      	mov	r3, sl
 8005710:	ec45 4b10 	vmov	d0, r4, r5
 8005714:	f000 fbac 	bl	8005e70 <_dtoa_r>
 8005718:	2f47      	cmp	r7, #71	; 0x47
 800571a:	4680      	mov	r8, r0
 800571c:	d102      	bne.n	8005724 <__cvt+0x62>
 800571e:	f019 0f01 	tst.w	r9, #1
 8005722:	d026      	beq.n	8005772 <__cvt+0xb0>
 8005724:	2f46      	cmp	r7, #70	; 0x46
 8005726:	eb08 0906 	add.w	r9, r8, r6
 800572a:	d111      	bne.n	8005750 <__cvt+0x8e>
 800572c:	f898 3000 	ldrb.w	r3, [r8]
 8005730:	2b30      	cmp	r3, #48	; 0x30
 8005732:	d10a      	bne.n	800574a <__cvt+0x88>
 8005734:	2200      	movs	r2, #0
 8005736:	2300      	movs	r3, #0
 8005738:	4620      	mov	r0, r4
 800573a:	4629      	mov	r1, r5
 800573c:	f7fb f990 	bl	8000a60 <__aeabi_dcmpeq>
 8005740:	b918      	cbnz	r0, 800574a <__cvt+0x88>
 8005742:	f1c6 0601 	rsb	r6, r6, #1
 8005746:	f8ca 6000 	str.w	r6, [sl]
 800574a:	f8da 3000 	ldr.w	r3, [sl]
 800574e:	4499      	add	r9, r3
 8005750:	2200      	movs	r2, #0
 8005752:	2300      	movs	r3, #0
 8005754:	4620      	mov	r0, r4
 8005756:	4629      	mov	r1, r5
 8005758:	f7fb f982 	bl	8000a60 <__aeabi_dcmpeq>
 800575c:	b938      	cbnz	r0, 800576e <__cvt+0xac>
 800575e:	2230      	movs	r2, #48	; 0x30
 8005760:	9b03      	ldr	r3, [sp, #12]
 8005762:	454b      	cmp	r3, r9
 8005764:	d205      	bcs.n	8005772 <__cvt+0xb0>
 8005766:	1c59      	adds	r1, r3, #1
 8005768:	9103      	str	r1, [sp, #12]
 800576a:	701a      	strb	r2, [r3, #0]
 800576c:	e7f8      	b.n	8005760 <__cvt+0x9e>
 800576e:	f8cd 900c 	str.w	r9, [sp, #12]
 8005772:	9b03      	ldr	r3, [sp, #12]
 8005774:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005776:	eba3 0308 	sub.w	r3, r3, r8
 800577a:	4640      	mov	r0, r8
 800577c:	6013      	str	r3, [r2, #0]
 800577e:	b004      	add	sp, #16
 8005780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08005784 <__exponent>:
 8005784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005786:	2900      	cmp	r1, #0
 8005788:	4604      	mov	r4, r0
 800578a:	bfba      	itte	lt
 800578c:	4249      	neglt	r1, r1
 800578e:	232d      	movlt	r3, #45	; 0x2d
 8005790:	232b      	movge	r3, #43	; 0x2b
 8005792:	2909      	cmp	r1, #9
 8005794:	f804 2b02 	strb.w	r2, [r4], #2
 8005798:	7043      	strb	r3, [r0, #1]
 800579a:	dd20      	ble.n	80057de <__exponent+0x5a>
 800579c:	f10d 0307 	add.w	r3, sp, #7
 80057a0:	461f      	mov	r7, r3
 80057a2:	260a      	movs	r6, #10
 80057a4:	fb91 f5f6 	sdiv	r5, r1, r6
 80057a8:	fb06 1115 	mls	r1, r6, r5, r1
 80057ac:	3130      	adds	r1, #48	; 0x30
 80057ae:	2d09      	cmp	r5, #9
 80057b0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80057b4:	f103 32ff 	add.w	r2, r3, #4294967295
 80057b8:	4629      	mov	r1, r5
 80057ba:	dc09      	bgt.n	80057d0 <__exponent+0x4c>
 80057bc:	3130      	adds	r1, #48	; 0x30
 80057be:	3b02      	subs	r3, #2
 80057c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80057c4:	42bb      	cmp	r3, r7
 80057c6:	4622      	mov	r2, r4
 80057c8:	d304      	bcc.n	80057d4 <__exponent+0x50>
 80057ca:	1a10      	subs	r0, r2, r0
 80057cc:	b003      	add	sp, #12
 80057ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057d0:	4613      	mov	r3, r2
 80057d2:	e7e7      	b.n	80057a4 <__exponent+0x20>
 80057d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057d8:	f804 2b01 	strb.w	r2, [r4], #1
 80057dc:	e7f2      	b.n	80057c4 <__exponent+0x40>
 80057de:	2330      	movs	r3, #48	; 0x30
 80057e0:	4419      	add	r1, r3
 80057e2:	7083      	strb	r3, [r0, #2]
 80057e4:	1d02      	adds	r2, r0, #4
 80057e6:	70c1      	strb	r1, [r0, #3]
 80057e8:	e7ef      	b.n	80057ca <__exponent+0x46>
	...

080057ec <_printf_float>:
 80057ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f0:	b08d      	sub	sp, #52	; 0x34
 80057f2:	460c      	mov	r4, r1
 80057f4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80057f8:	4616      	mov	r6, r2
 80057fa:	461f      	mov	r7, r3
 80057fc:	4605      	mov	r5, r0
 80057fe:	f001 f8ef 	bl	80069e0 <_localeconv_r>
 8005802:	6803      	ldr	r3, [r0, #0]
 8005804:	9304      	str	r3, [sp, #16]
 8005806:	4618      	mov	r0, r3
 8005808:	f7fa fcfe 	bl	8000208 <strlen>
 800580c:	2300      	movs	r3, #0
 800580e:	930a      	str	r3, [sp, #40]	; 0x28
 8005810:	f8d8 3000 	ldr.w	r3, [r8]
 8005814:	9005      	str	r0, [sp, #20]
 8005816:	3307      	adds	r3, #7
 8005818:	f023 0307 	bic.w	r3, r3, #7
 800581c:	f103 0208 	add.w	r2, r3, #8
 8005820:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005824:	f8d4 b000 	ldr.w	fp, [r4]
 8005828:	f8c8 2000 	str.w	r2, [r8]
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005834:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005838:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800583c:	9307      	str	r3, [sp, #28]
 800583e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005842:	f04f 32ff 	mov.w	r2, #4294967295
 8005846:	4ba7      	ldr	r3, [pc, #668]	; (8005ae4 <_printf_float+0x2f8>)
 8005848:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800584c:	f7fb f93a 	bl	8000ac4 <__aeabi_dcmpun>
 8005850:	bb70      	cbnz	r0, 80058b0 <_printf_float+0xc4>
 8005852:	f04f 32ff 	mov.w	r2, #4294967295
 8005856:	4ba3      	ldr	r3, [pc, #652]	; (8005ae4 <_printf_float+0x2f8>)
 8005858:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800585c:	f7fb f914 	bl	8000a88 <__aeabi_dcmple>
 8005860:	bb30      	cbnz	r0, 80058b0 <_printf_float+0xc4>
 8005862:	2200      	movs	r2, #0
 8005864:	2300      	movs	r3, #0
 8005866:	4640      	mov	r0, r8
 8005868:	4649      	mov	r1, r9
 800586a:	f7fb f903 	bl	8000a74 <__aeabi_dcmplt>
 800586e:	b110      	cbz	r0, 8005876 <_printf_float+0x8a>
 8005870:	232d      	movs	r3, #45	; 0x2d
 8005872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005876:	4a9c      	ldr	r2, [pc, #624]	; (8005ae8 <_printf_float+0x2fc>)
 8005878:	4b9c      	ldr	r3, [pc, #624]	; (8005aec <_printf_float+0x300>)
 800587a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800587e:	bf8c      	ite	hi
 8005880:	4690      	movhi	r8, r2
 8005882:	4698      	movls	r8, r3
 8005884:	2303      	movs	r3, #3
 8005886:	f02b 0204 	bic.w	r2, fp, #4
 800588a:	6123      	str	r3, [r4, #16]
 800588c:	6022      	str	r2, [r4, #0]
 800588e:	f04f 0900 	mov.w	r9, #0
 8005892:	9700      	str	r7, [sp, #0]
 8005894:	4633      	mov	r3, r6
 8005896:	aa0b      	add	r2, sp, #44	; 0x2c
 8005898:	4621      	mov	r1, r4
 800589a:	4628      	mov	r0, r5
 800589c:	f000 f9e6 	bl	8005c6c <_printf_common>
 80058a0:	3001      	adds	r0, #1
 80058a2:	f040 808d 	bne.w	80059c0 <_printf_float+0x1d4>
 80058a6:	f04f 30ff 	mov.w	r0, #4294967295
 80058aa:	b00d      	add	sp, #52	; 0x34
 80058ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b0:	4642      	mov	r2, r8
 80058b2:	464b      	mov	r3, r9
 80058b4:	4640      	mov	r0, r8
 80058b6:	4649      	mov	r1, r9
 80058b8:	f7fb f904 	bl	8000ac4 <__aeabi_dcmpun>
 80058bc:	b110      	cbz	r0, 80058c4 <_printf_float+0xd8>
 80058be:	4a8c      	ldr	r2, [pc, #560]	; (8005af0 <_printf_float+0x304>)
 80058c0:	4b8c      	ldr	r3, [pc, #560]	; (8005af4 <_printf_float+0x308>)
 80058c2:	e7da      	b.n	800587a <_printf_float+0x8e>
 80058c4:	6861      	ldr	r1, [r4, #4]
 80058c6:	1c4b      	adds	r3, r1, #1
 80058c8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80058cc:	a80a      	add	r0, sp, #40	; 0x28
 80058ce:	d13e      	bne.n	800594e <_printf_float+0x162>
 80058d0:	2306      	movs	r3, #6
 80058d2:	6063      	str	r3, [r4, #4]
 80058d4:	2300      	movs	r3, #0
 80058d6:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80058da:	ab09      	add	r3, sp, #36	; 0x24
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	ec49 8b10 	vmov	d0, r8, r9
 80058e2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80058e6:	6022      	str	r2, [r4, #0]
 80058e8:	f8cd a004 	str.w	sl, [sp, #4]
 80058ec:	6861      	ldr	r1, [r4, #4]
 80058ee:	4628      	mov	r0, r5
 80058f0:	f7ff fee7 	bl	80056c2 <__cvt>
 80058f4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80058f8:	2b47      	cmp	r3, #71	; 0x47
 80058fa:	4680      	mov	r8, r0
 80058fc:	d109      	bne.n	8005912 <_printf_float+0x126>
 80058fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005900:	1cd8      	adds	r0, r3, #3
 8005902:	db02      	blt.n	800590a <_printf_float+0x11e>
 8005904:	6862      	ldr	r2, [r4, #4]
 8005906:	4293      	cmp	r3, r2
 8005908:	dd47      	ble.n	800599a <_printf_float+0x1ae>
 800590a:	f1aa 0a02 	sub.w	sl, sl, #2
 800590e:	fa5f fa8a 	uxtb.w	sl, sl
 8005912:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8005916:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005918:	d824      	bhi.n	8005964 <_printf_float+0x178>
 800591a:	3901      	subs	r1, #1
 800591c:	4652      	mov	r2, sl
 800591e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005922:	9109      	str	r1, [sp, #36]	; 0x24
 8005924:	f7ff ff2e 	bl	8005784 <__exponent>
 8005928:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800592a:	1813      	adds	r3, r2, r0
 800592c:	2a01      	cmp	r2, #1
 800592e:	4681      	mov	r9, r0
 8005930:	6123      	str	r3, [r4, #16]
 8005932:	dc02      	bgt.n	800593a <_printf_float+0x14e>
 8005934:	6822      	ldr	r2, [r4, #0]
 8005936:	07d1      	lsls	r1, r2, #31
 8005938:	d501      	bpl.n	800593e <_printf_float+0x152>
 800593a:	3301      	adds	r3, #1
 800593c:	6123      	str	r3, [r4, #16]
 800593e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005942:	2b00      	cmp	r3, #0
 8005944:	d0a5      	beq.n	8005892 <_printf_float+0xa6>
 8005946:	232d      	movs	r3, #45	; 0x2d
 8005948:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800594c:	e7a1      	b.n	8005892 <_printf_float+0xa6>
 800594e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8005952:	f000 8177 	beq.w	8005c44 <_printf_float+0x458>
 8005956:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800595a:	d1bb      	bne.n	80058d4 <_printf_float+0xe8>
 800595c:	2900      	cmp	r1, #0
 800595e:	d1b9      	bne.n	80058d4 <_printf_float+0xe8>
 8005960:	2301      	movs	r3, #1
 8005962:	e7b6      	b.n	80058d2 <_printf_float+0xe6>
 8005964:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8005968:	d119      	bne.n	800599e <_printf_float+0x1b2>
 800596a:	2900      	cmp	r1, #0
 800596c:	6863      	ldr	r3, [r4, #4]
 800596e:	dd0c      	ble.n	800598a <_printf_float+0x19e>
 8005970:	6121      	str	r1, [r4, #16]
 8005972:	b913      	cbnz	r3, 800597a <_printf_float+0x18e>
 8005974:	6822      	ldr	r2, [r4, #0]
 8005976:	07d2      	lsls	r2, r2, #31
 8005978:	d502      	bpl.n	8005980 <_printf_float+0x194>
 800597a:	3301      	adds	r3, #1
 800597c:	440b      	add	r3, r1
 800597e:	6123      	str	r3, [r4, #16]
 8005980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005982:	65a3      	str	r3, [r4, #88]	; 0x58
 8005984:	f04f 0900 	mov.w	r9, #0
 8005988:	e7d9      	b.n	800593e <_printf_float+0x152>
 800598a:	b913      	cbnz	r3, 8005992 <_printf_float+0x1a6>
 800598c:	6822      	ldr	r2, [r4, #0]
 800598e:	07d0      	lsls	r0, r2, #31
 8005990:	d501      	bpl.n	8005996 <_printf_float+0x1aa>
 8005992:	3302      	adds	r3, #2
 8005994:	e7f3      	b.n	800597e <_printf_float+0x192>
 8005996:	2301      	movs	r3, #1
 8005998:	e7f1      	b.n	800597e <_printf_float+0x192>
 800599a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800599e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80059a2:	4293      	cmp	r3, r2
 80059a4:	db05      	blt.n	80059b2 <_printf_float+0x1c6>
 80059a6:	6822      	ldr	r2, [r4, #0]
 80059a8:	6123      	str	r3, [r4, #16]
 80059aa:	07d1      	lsls	r1, r2, #31
 80059ac:	d5e8      	bpl.n	8005980 <_printf_float+0x194>
 80059ae:	3301      	adds	r3, #1
 80059b0:	e7e5      	b.n	800597e <_printf_float+0x192>
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	bfd4      	ite	le
 80059b6:	f1c3 0302 	rsble	r3, r3, #2
 80059ba:	2301      	movgt	r3, #1
 80059bc:	4413      	add	r3, r2
 80059be:	e7de      	b.n	800597e <_printf_float+0x192>
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	055a      	lsls	r2, r3, #21
 80059c4:	d407      	bmi.n	80059d6 <_printf_float+0x1ea>
 80059c6:	6923      	ldr	r3, [r4, #16]
 80059c8:	4642      	mov	r2, r8
 80059ca:	4631      	mov	r1, r6
 80059cc:	4628      	mov	r0, r5
 80059ce:	47b8      	blx	r7
 80059d0:	3001      	adds	r0, #1
 80059d2:	d12b      	bne.n	8005a2c <_printf_float+0x240>
 80059d4:	e767      	b.n	80058a6 <_printf_float+0xba>
 80059d6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80059da:	f240 80dc 	bls.w	8005b96 <_printf_float+0x3aa>
 80059de:	2200      	movs	r2, #0
 80059e0:	2300      	movs	r3, #0
 80059e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059e6:	f7fb f83b 	bl	8000a60 <__aeabi_dcmpeq>
 80059ea:	2800      	cmp	r0, #0
 80059ec:	d033      	beq.n	8005a56 <_printf_float+0x26a>
 80059ee:	2301      	movs	r3, #1
 80059f0:	4a41      	ldr	r2, [pc, #260]	; (8005af8 <_printf_float+0x30c>)
 80059f2:	4631      	mov	r1, r6
 80059f4:	4628      	mov	r0, r5
 80059f6:	47b8      	blx	r7
 80059f8:	3001      	adds	r0, #1
 80059fa:	f43f af54 	beq.w	80058a6 <_printf_float+0xba>
 80059fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005a02:	429a      	cmp	r2, r3
 8005a04:	db02      	blt.n	8005a0c <_printf_float+0x220>
 8005a06:	6823      	ldr	r3, [r4, #0]
 8005a08:	07d8      	lsls	r0, r3, #31
 8005a0a:	d50f      	bpl.n	8005a2c <_printf_float+0x240>
 8005a0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a10:	4631      	mov	r1, r6
 8005a12:	4628      	mov	r0, r5
 8005a14:	47b8      	blx	r7
 8005a16:	3001      	adds	r0, #1
 8005a18:	f43f af45 	beq.w	80058a6 <_printf_float+0xba>
 8005a1c:	f04f 0800 	mov.w	r8, #0
 8005a20:	f104 091a 	add.w	r9, r4, #26
 8005a24:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a26:	3b01      	subs	r3, #1
 8005a28:	4543      	cmp	r3, r8
 8005a2a:	dc09      	bgt.n	8005a40 <_printf_float+0x254>
 8005a2c:	6823      	ldr	r3, [r4, #0]
 8005a2e:	079b      	lsls	r3, r3, #30
 8005a30:	f100 8103 	bmi.w	8005c3a <_printf_float+0x44e>
 8005a34:	68e0      	ldr	r0, [r4, #12]
 8005a36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a38:	4298      	cmp	r0, r3
 8005a3a:	bfb8      	it	lt
 8005a3c:	4618      	movlt	r0, r3
 8005a3e:	e734      	b.n	80058aa <_printf_float+0xbe>
 8005a40:	2301      	movs	r3, #1
 8005a42:	464a      	mov	r2, r9
 8005a44:	4631      	mov	r1, r6
 8005a46:	4628      	mov	r0, r5
 8005a48:	47b8      	blx	r7
 8005a4a:	3001      	adds	r0, #1
 8005a4c:	f43f af2b 	beq.w	80058a6 <_printf_float+0xba>
 8005a50:	f108 0801 	add.w	r8, r8, #1
 8005a54:	e7e6      	b.n	8005a24 <_printf_float+0x238>
 8005a56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	dc2b      	bgt.n	8005ab4 <_printf_float+0x2c8>
 8005a5c:	2301      	movs	r3, #1
 8005a5e:	4a26      	ldr	r2, [pc, #152]	; (8005af8 <_printf_float+0x30c>)
 8005a60:	4631      	mov	r1, r6
 8005a62:	4628      	mov	r0, r5
 8005a64:	47b8      	blx	r7
 8005a66:	3001      	adds	r0, #1
 8005a68:	f43f af1d 	beq.w	80058a6 <_printf_float+0xba>
 8005a6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a6e:	b923      	cbnz	r3, 8005a7a <_printf_float+0x28e>
 8005a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a72:	b913      	cbnz	r3, 8005a7a <_printf_float+0x28e>
 8005a74:	6823      	ldr	r3, [r4, #0]
 8005a76:	07d9      	lsls	r1, r3, #31
 8005a78:	d5d8      	bpl.n	8005a2c <_printf_float+0x240>
 8005a7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a7e:	4631      	mov	r1, r6
 8005a80:	4628      	mov	r0, r5
 8005a82:	47b8      	blx	r7
 8005a84:	3001      	adds	r0, #1
 8005a86:	f43f af0e 	beq.w	80058a6 <_printf_float+0xba>
 8005a8a:	f04f 0900 	mov.w	r9, #0
 8005a8e:	f104 0a1a 	add.w	sl, r4, #26
 8005a92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a94:	425b      	negs	r3, r3
 8005a96:	454b      	cmp	r3, r9
 8005a98:	dc01      	bgt.n	8005a9e <_printf_float+0x2b2>
 8005a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a9c:	e794      	b.n	80059c8 <_printf_float+0x1dc>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	4652      	mov	r2, sl
 8005aa2:	4631      	mov	r1, r6
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	47b8      	blx	r7
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	f43f aefc 	beq.w	80058a6 <_printf_float+0xba>
 8005aae:	f109 0901 	add.w	r9, r9, #1
 8005ab2:	e7ee      	b.n	8005a92 <_printf_float+0x2a6>
 8005ab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ab6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	bfa8      	it	ge
 8005abc:	461a      	movge	r2, r3
 8005abe:	2a00      	cmp	r2, #0
 8005ac0:	4691      	mov	r9, r2
 8005ac2:	dd07      	ble.n	8005ad4 <_printf_float+0x2e8>
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	4631      	mov	r1, r6
 8005ac8:	4642      	mov	r2, r8
 8005aca:	4628      	mov	r0, r5
 8005acc:	47b8      	blx	r7
 8005ace:	3001      	adds	r0, #1
 8005ad0:	f43f aee9 	beq.w	80058a6 <_printf_float+0xba>
 8005ad4:	f104 031a 	add.w	r3, r4, #26
 8005ad8:	f04f 0b00 	mov.w	fp, #0
 8005adc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005ae0:	9306      	str	r3, [sp, #24]
 8005ae2:	e015      	b.n	8005b10 <_printf_float+0x324>
 8005ae4:	7fefffff 	.word	0x7fefffff
 8005ae8:	0800815c 	.word	0x0800815c
 8005aec:	08008158 	.word	0x08008158
 8005af0:	08008164 	.word	0x08008164
 8005af4:	08008160 	.word	0x08008160
 8005af8:	08008168 	.word	0x08008168
 8005afc:	2301      	movs	r3, #1
 8005afe:	9a06      	ldr	r2, [sp, #24]
 8005b00:	4631      	mov	r1, r6
 8005b02:	4628      	mov	r0, r5
 8005b04:	47b8      	blx	r7
 8005b06:	3001      	adds	r0, #1
 8005b08:	f43f aecd 	beq.w	80058a6 <_printf_float+0xba>
 8005b0c:	f10b 0b01 	add.w	fp, fp, #1
 8005b10:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8005b14:	ebaa 0309 	sub.w	r3, sl, r9
 8005b18:	455b      	cmp	r3, fp
 8005b1a:	dcef      	bgt.n	8005afc <_printf_float+0x310>
 8005b1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b20:	429a      	cmp	r2, r3
 8005b22:	44d0      	add	r8, sl
 8005b24:	db15      	blt.n	8005b52 <_printf_float+0x366>
 8005b26:	6823      	ldr	r3, [r4, #0]
 8005b28:	07da      	lsls	r2, r3, #31
 8005b2a:	d412      	bmi.n	8005b52 <_printf_float+0x366>
 8005b2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b30:	eba3 020a 	sub.w	r2, r3, sl
 8005b34:	eba3 0a01 	sub.w	sl, r3, r1
 8005b38:	4592      	cmp	sl, r2
 8005b3a:	bfa8      	it	ge
 8005b3c:	4692      	movge	sl, r2
 8005b3e:	f1ba 0f00 	cmp.w	sl, #0
 8005b42:	dc0e      	bgt.n	8005b62 <_printf_float+0x376>
 8005b44:	f04f 0800 	mov.w	r8, #0
 8005b48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005b4c:	f104 091a 	add.w	r9, r4, #26
 8005b50:	e019      	b.n	8005b86 <_printf_float+0x39a>
 8005b52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b56:	4631      	mov	r1, r6
 8005b58:	4628      	mov	r0, r5
 8005b5a:	47b8      	blx	r7
 8005b5c:	3001      	adds	r0, #1
 8005b5e:	d1e5      	bne.n	8005b2c <_printf_float+0x340>
 8005b60:	e6a1      	b.n	80058a6 <_printf_float+0xba>
 8005b62:	4653      	mov	r3, sl
 8005b64:	4642      	mov	r2, r8
 8005b66:	4631      	mov	r1, r6
 8005b68:	4628      	mov	r0, r5
 8005b6a:	47b8      	blx	r7
 8005b6c:	3001      	adds	r0, #1
 8005b6e:	d1e9      	bne.n	8005b44 <_printf_float+0x358>
 8005b70:	e699      	b.n	80058a6 <_printf_float+0xba>
 8005b72:	2301      	movs	r3, #1
 8005b74:	464a      	mov	r2, r9
 8005b76:	4631      	mov	r1, r6
 8005b78:	4628      	mov	r0, r5
 8005b7a:	47b8      	blx	r7
 8005b7c:	3001      	adds	r0, #1
 8005b7e:	f43f ae92 	beq.w	80058a6 <_printf_float+0xba>
 8005b82:	f108 0801 	add.w	r8, r8, #1
 8005b86:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005b8a:	1a9b      	subs	r3, r3, r2
 8005b8c:	eba3 030a 	sub.w	r3, r3, sl
 8005b90:	4543      	cmp	r3, r8
 8005b92:	dcee      	bgt.n	8005b72 <_printf_float+0x386>
 8005b94:	e74a      	b.n	8005a2c <_printf_float+0x240>
 8005b96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b98:	2a01      	cmp	r2, #1
 8005b9a:	dc01      	bgt.n	8005ba0 <_printf_float+0x3b4>
 8005b9c:	07db      	lsls	r3, r3, #31
 8005b9e:	d53a      	bpl.n	8005c16 <_printf_float+0x42a>
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	4642      	mov	r2, r8
 8005ba4:	4631      	mov	r1, r6
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	47b8      	blx	r7
 8005baa:	3001      	adds	r0, #1
 8005bac:	f43f ae7b 	beq.w	80058a6 <_printf_float+0xba>
 8005bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bb4:	4631      	mov	r1, r6
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	47b8      	blx	r7
 8005bba:	3001      	adds	r0, #1
 8005bbc:	f108 0801 	add.w	r8, r8, #1
 8005bc0:	f43f ae71 	beq.w	80058a6 <_printf_float+0xba>
 8005bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f103 3aff 	add.w	sl, r3, #4294967295
 8005bcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f7fa ff45 	bl	8000a60 <__aeabi_dcmpeq>
 8005bd6:	b9c8      	cbnz	r0, 8005c0c <_printf_float+0x420>
 8005bd8:	4653      	mov	r3, sl
 8005bda:	4642      	mov	r2, r8
 8005bdc:	4631      	mov	r1, r6
 8005bde:	4628      	mov	r0, r5
 8005be0:	47b8      	blx	r7
 8005be2:	3001      	adds	r0, #1
 8005be4:	d10e      	bne.n	8005c04 <_printf_float+0x418>
 8005be6:	e65e      	b.n	80058a6 <_printf_float+0xba>
 8005be8:	2301      	movs	r3, #1
 8005bea:	4652      	mov	r2, sl
 8005bec:	4631      	mov	r1, r6
 8005bee:	4628      	mov	r0, r5
 8005bf0:	47b8      	blx	r7
 8005bf2:	3001      	adds	r0, #1
 8005bf4:	f43f ae57 	beq.w	80058a6 <_printf_float+0xba>
 8005bf8:	f108 0801 	add.w	r8, r8, #1
 8005bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	4543      	cmp	r3, r8
 8005c02:	dcf1      	bgt.n	8005be8 <_printf_float+0x3fc>
 8005c04:	464b      	mov	r3, r9
 8005c06:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005c0a:	e6de      	b.n	80059ca <_printf_float+0x1de>
 8005c0c:	f04f 0800 	mov.w	r8, #0
 8005c10:	f104 0a1a 	add.w	sl, r4, #26
 8005c14:	e7f2      	b.n	8005bfc <_printf_float+0x410>
 8005c16:	2301      	movs	r3, #1
 8005c18:	e7df      	b.n	8005bda <_printf_float+0x3ee>
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	464a      	mov	r2, r9
 8005c1e:	4631      	mov	r1, r6
 8005c20:	4628      	mov	r0, r5
 8005c22:	47b8      	blx	r7
 8005c24:	3001      	adds	r0, #1
 8005c26:	f43f ae3e 	beq.w	80058a6 <_printf_float+0xba>
 8005c2a:	f108 0801 	add.w	r8, r8, #1
 8005c2e:	68e3      	ldr	r3, [r4, #12]
 8005c30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005c32:	1a9b      	subs	r3, r3, r2
 8005c34:	4543      	cmp	r3, r8
 8005c36:	dcf0      	bgt.n	8005c1a <_printf_float+0x42e>
 8005c38:	e6fc      	b.n	8005a34 <_printf_float+0x248>
 8005c3a:	f04f 0800 	mov.w	r8, #0
 8005c3e:	f104 0919 	add.w	r9, r4, #25
 8005c42:	e7f4      	b.n	8005c2e <_printf_float+0x442>
 8005c44:	2900      	cmp	r1, #0
 8005c46:	f43f ae8b 	beq.w	8005960 <_printf_float+0x174>
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8005c50:	ab09      	add	r3, sp, #36	; 0x24
 8005c52:	9300      	str	r3, [sp, #0]
 8005c54:	ec49 8b10 	vmov	d0, r8, r9
 8005c58:	6022      	str	r2, [r4, #0]
 8005c5a:	f8cd a004 	str.w	sl, [sp, #4]
 8005c5e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005c62:	4628      	mov	r0, r5
 8005c64:	f7ff fd2d 	bl	80056c2 <__cvt>
 8005c68:	4680      	mov	r8, r0
 8005c6a:	e648      	b.n	80058fe <_printf_float+0x112>

08005c6c <_printf_common>:
 8005c6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005c70:	4691      	mov	r9, r2
 8005c72:	461f      	mov	r7, r3
 8005c74:	688a      	ldr	r2, [r1, #8]
 8005c76:	690b      	ldr	r3, [r1, #16]
 8005c78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	bfb8      	it	lt
 8005c80:	4613      	movlt	r3, r2
 8005c82:	f8c9 3000 	str.w	r3, [r9]
 8005c86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005c8a:	4606      	mov	r6, r0
 8005c8c:	460c      	mov	r4, r1
 8005c8e:	b112      	cbz	r2, 8005c96 <_printf_common+0x2a>
 8005c90:	3301      	adds	r3, #1
 8005c92:	f8c9 3000 	str.w	r3, [r9]
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	0699      	lsls	r1, r3, #26
 8005c9a:	bf42      	ittt	mi
 8005c9c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005ca0:	3302      	addmi	r3, #2
 8005ca2:	f8c9 3000 	strmi.w	r3, [r9]
 8005ca6:	6825      	ldr	r5, [r4, #0]
 8005ca8:	f015 0506 	ands.w	r5, r5, #6
 8005cac:	d107      	bne.n	8005cbe <_printf_common+0x52>
 8005cae:	f104 0a19 	add.w	sl, r4, #25
 8005cb2:	68e3      	ldr	r3, [r4, #12]
 8005cb4:	f8d9 2000 	ldr.w	r2, [r9]
 8005cb8:	1a9b      	subs	r3, r3, r2
 8005cba:	42ab      	cmp	r3, r5
 8005cbc:	dc28      	bgt.n	8005d10 <_printf_common+0xa4>
 8005cbe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005cc2:	6822      	ldr	r2, [r4, #0]
 8005cc4:	3300      	adds	r3, #0
 8005cc6:	bf18      	it	ne
 8005cc8:	2301      	movne	r3, #1
 8005cca:	0692      	lsls	r2, r2, #26
 8005ccc:	d42d      	bmi.n	8005d2a <_printf_common+0xbe>
 8005cce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005cd2:	4639      	mov	r1, r7
 8005cd4:	4630      	mov	r0, r6
 8005cd6:	47c0      	blx	r8
 8005cd8:	3001      	adds	r0, #1
 8005cda:	d020      	beq.n	8005d1e <_printf_common+0xb2>
 8005cdc:	6823      	ldr	r3, [r4, #0]
 8005cde:	68e5      	ldr	r5, [r4, #12]
 8005ce0:	f8d9 2000 	ldr.w	r2, [r9]
 8005ce4:	f003 0306 	and.w	r3, r3, #6
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	bf08      	it	eq
 8005cec:	1aad      	subeq	r5, r5, r2
 8005cee:	68a3      	ldr	r3, [r4, #8]
 8005cf0:	6922      	ldr	r2, [r4, #16]
 8005cf2:	bf0c      	ite	eq
 8005cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005cf8:	2500      	movne	r5, #0
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	bfc4      	itt	gt
 8005cfe:	1a9b      	subgt	r3, r3, r2
 8005d00:	18ed      	addgt	r5, r5, r3
 8005d02:	f04f 0900 	mov.w	r9, #0
 8005d06:	341a      	adds	r4, #26
 8005d08:	454d      	cmp	r5, r9
 8005d0a:	d11a      	bne.n	8005d42 <_printf_common+0xd6>
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	e008      	b.n	8005d22 <_printf_common+0xb6>
 8005d10:	2301      	movs	r3, #1
 8005d12:	4652      	mov	r2, sl
 8005d14:	4639      	mov	r1, r7
 8005d16:	4630      	mov	r0, r6
 8005d18:	47c0      	blx	r8
 8005d1a:	3001      	adds	r0, #1
 8005d1c:	d103      	bne.n	8005d26 <_printf_common+0xba>
 8005d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d26:	3501      	adds	r5, #1
 8005d28:	e7c3      	b.n	8005cb2 <_printf_common+0x46>
 8005d2a:	18e1      	adds	r1, r4, r3
 8005d2c:	1c5a      	adds	r2, r3, #1
 8005d2e:	2030      	movs	r0, #48	; 0x30
 8005d30:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d34:	4422      	add	r2, r4
 8005d36:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d3a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d3e:	3302      	adds	r3, #2
 8005d40:	e7c5      	b.n	8005cce <_printf_common+0x62>
 8005d42:	2301      	movs	r3, #1
 8005d44:	4622      	mov	r2, r4
 8005d46:	4639      	mov	r1, r7
 8005d48:	4630      	mov	r0, r6
 8005d4a:	47c0      	blx	r8
 8005d4c:	3001      	adds	r0, #1
 8005d4e:	d0e6      	beq.n	8005d1e <_printf_common+0xb2>
 8005d50:	f109 0901 	add.w	r9, r9, #1
 8005d54:	e7d8      	b.n	8005d08 <_printf_common+0x9c>

08005d56 <quorem>:
 8005d56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5a:	6903      	ldr	r3, [r0, #16]
 8005d5c:	690c      	ldr	r4, [r1, #16]
 8005d5e:	42a3      	cmp	r3, r4
 8005d60:	4680      	mov	r8, r0
 8005d62:	f2c0 8082 	blt.w	8005e6a <quorem+0x114>
 8005d66:	3c01      	subs	r4, #1
 8005d68:	f101 0714 	add.w	r7, r1, #20
 8005d6c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8005d70:	f100 0614 	add.w	r6, r0, #20
 8005d74:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8005d78:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8005d7c:	eb06 030c 	add.w	r3, r6, ip
 8005d80:	3501      	adds	r5, #1
 8005d82:	eb07 090c 	add.w	r9, r7, ip
 8005d86:	9301      	str	r3, [sp, #4]
 8005d88:	fbb0 f5f5 	udiv	r5, r0, r5
 8005d8c:	b395      	cbz	r5, 8005df4 <quorem+0x9e>
 8005d8e:	f04f 0a00 	mov.w	sl, #0
 8005d92:	4638      	mov	r0, r7
 8005d94:	46b6      	mov	lr, r6
 8005d96:	46d3      	mov	fp, sl
 8005d98:	f850 2b04 	ldr.w	r2, [r0], #4
 8005d9c:	b293      	uxth	r3, r2
 8005d9e:	fb05 a303 	mla	r3, r5, r3, sl
 8005da2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	ebab 0303 	sub.w	r3, fp, r3
 8005dac:	0c12      	lsrs	r2, r2, #16
 8005dae:	f8de b000 	ldr.w	fp, [lr]
 8005db2:	fb05 a202 	mla	r2, r5, r2, sl
 8005db6:	fa13 f38b 	uxtah	r3, r3, fp
 8005dba:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005dbe:	fa1f fb82 	uxth.w	fp, r2
 8005dc2:	f8de 2000 	ldr.w	r2, [lr]
 8005dc6:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005dca:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005dd4:	4581      	cmp	r9, r0
 8005dd6:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8005dda:	f84e 3b04 	str.w	r3, [lr], #4
 8005dde:	d2db      	bcs.n	8005d98 <quorem+0x42>
 8005de0:	f856 300c 	ldr.w	r3, [r6, ip]
 8005de4:	b933      	cbnz	r3, 8005df4 <quorem+0x9e>
 8005de6:	9b01      	ldr	r3, [sp, #4]
 8005de8:	3b04      	subs	r3, #4
 8005dea:	429e      	cmp	r6, r3
 8005dec:	461a      	mov	r2, r3
 8005dee:	d330      	bcc.n	8005e52 <quorem+0xfc>
 8005df0:	f8c8 4010 	str.w	r4, [r8, #16]
 8005df4:	4640      	mov	r0, r8
 8005df6:	f001 f81f 	bl	8006e38 <__mcmp>
 8005dfa:	2800      	cmp	r0, #0
 8005dfc:	db25      	blt.n	8005e4a <quorem+0xf4>
 8005dfe:	3501      	adds	r5, #1
 8005e00:	4630      	mov	r0, r6
 8005e02:	f04f 0c00 	mov.w	ip, #0
 8005e06:	f857 2b04 	ldr.w	r2, [r7], #4
 8005e0a:	f8d0 e000 	ldr.w	lr, [r0]
 8005e0e:	b293      	uxth	r3, r2
 8005e10:	ebac 0303 	sub.w	r3, ip, r3
 8005e14:	0c12      	lsrs	r2, r2, #16
 8005e16:	fa13 f38e 	uxtah	r3, r3, lr
 8005e1a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005e1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005e28:	45b9      	cmp	r9, r7
 8005e2a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005e2e:	f840 3b04 	str.w	r3, [r0], #4
 8005e32:	d2e8      	bcs.n	8005e06 <quorem+0xb0>
 8005e34:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8005e38:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8005e3c:	b92a      	cbnz	r2, 8005e4a <quorem+0xf4>
 8005e3e:	3b04      	subs	r3, #4
 8005e40:	429e      	cmp	r6, r3
 8005e42:	461a      	mov	r2, r3
 8005e44:	d30b      	bcc.n	8005e5e <quorem+0x108>
 8005e46:	f8c8 4010 	str.w	r4, [r8, #16]
 8005e4a:	4628      	mov	r0, r5
 8005e4c:	b003      	add	sp, #12
 8005e4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e52:	6812      	ldr	r2, [r2, #0]
 8005e54:	3b04      	subs	r3, #4
 8005e56:	2a00      	cmp	r2, #0
 8005e58:	d1ca      	bne.n	8005df0 <quorem+0x9a>
 8005e5a:	3c01      	subs	r4, #1
 8005e5c:	e7c5      	b.n	8005dea <quorem+0x94>
 8005e5e:	6812      	ldr	r2, [r2, #0]
 8005e60:	3b04      	subs	r3, #4
 8005e62:	2a00      	cmp	r2, #0
 8005e64:	d1ef      	bne.n	8005e46 <quorem+0xf0>
 8005e66:	3c01      	subs	r4, #1
 8005e68:	e7ea      	b.n	8005e40 <quorem+0xea>
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	e7ee      	b.n	8005e4c <quorem+0xf6>
	...

08005e70 <_dtoa_r>:
 8005e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e74:	ec57 6b10 	vmov	r6, r7, d0
 8005e78:	b097      	sub	sp, #92	; 0x5c
 8005e7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005e7c:	9106      	str	r1, [sp, #24]
 8005e7e:	4604      	mov	r4, r0
 8005e80:	920b      	str	r2, [sp, #44]	; 0x2c
 8005e82:	9312      	str	r3, [sp, #72]	; 0x48
 8005e84:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005e88:	e9cd 6700 	strd	r6, r7, [sp]
 8005e8c:	b93d      	cbnz	r5, 8005e9e <_dtoa_r+0x2e>
 8005e8e:	2010      	movs	r0, #16
 8005e90:	f000 fdb4 	bl	80069fc <malloc>
 8005e94:	6260      	str	r0, [r4, #36]	; 0x24
 8005e96:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005e9a:	6005      	str	r5, [r0, #0]
 8005e9c:	60c5      	str	r5, [r0, #12]
 8005e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ea0:	6819      	ldr	r1, [r3, #0]
 8005ea2:	b151      	cbz	r1, 8005eba <_dtoa_r+0x4a>
 8005ea4:	685a      	ldr	r2, [r3, #4]
 8005ea6:	604a      	str	r2, [r1, #4]
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	4093      	lsls	r3, r2
 8005eac:	608b      	str	r3, [r1, #8]
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f000 fde0 	bl	8006a74 <_Bfree>
 8005eb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	1e3b      	subs	r3, r7, #0
 8005ebc:	bfbb      	ittet	lt
 8005ebe:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005ec2:	9301      	strlt	r3, [sp, #4]
 8005ec4:	2300      	movge	r3, #0
 8005ec6:	2201      	movlt	r2, #1
 8005ec8:	bfac      	ite	ge
 8005eca:	f8c8 3000 	strge.w	r3, [r8]
 8005ece:	f8c8 2000 	strlt.w	r2, [r8]
 8005ed2:	4baf      	ldr	r3, [pc, #700]	; (8006190 <_dtoa_r+0x320>)
 8005ed4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005ed8:	ea33 0308 	bics.w	r3, r3, r8
 8005edc:	d114      	bne.n	8005f08 <_dtoa_r+0x98>
 8005ede:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005ee0:	f242 730f 	movw	r3, #9999	; 0x270f
 8005ee4:	6013      	str	r3, [r2, #0]
 8005ee6:	9b00      	ldr	r3, [sp, #0]
 8005ee8:	b923      	cbnz	r3, 8005ef4 <_dtoa_r+0x84>
 8005eea:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	f000 8542 	beq.w	8006978 <_dtoa_r+0xb08>
 8005ef4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ef6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80061a4 <_dtoa_r+0x334>
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f000 8544 	beq.w	8006988 <_dtoa_r+0xb18>
 8005f00:	f10b 0303 	add.w	r3, fp, #3
 8005f04:	f000 bd3e 	b.w	8006984 <_dtoa_r+0xb14>
 8005f08:	e9dd 6700 	ldrd	r6, r7, [sp]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	2300      	movs	r3, #0
 8005f10:	4630      	mov	r0, r6
 8005f12:	4639      	mov	r1, r7
 8005f14:	f7fa fda4 	bl	8000a60 <__aeabi_dcmpeq>
 8005f18:	4681      	mov	r9, r0
 8005f1a:	b168      	cbz	r0, 8005f38 <_dtoa_r+0xc8>
 8005f1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005f1e:	2301      	movs	r3, #1
 8005f20:	6013      	str	r3, [r2, #0]
 8005f22:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	f000 8524 	beq.w	8006972 <_dtoa_r+0xb02>
 8005f2a:	4b9a      	ldr	r3, [pc, #616]	; (8006194 <_dtoa_r+0x324>)
 8005f2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005f2e:	f103 3bff 	add.w	fp, r3, #4294967295
 8005f32:	6013      	str	r3, [r2, #0]
 8005f34:	f000 bd28 	b.w	8006988 <_dtoa_r+0xb18>
 8005f38:	aa14      	add	r2, sp, #80	; 0x50
 8005f3a:	a915      	add	r1, sp, #84	; 0x54
 8005f3c:	ec47 6b10 	vmov	d0, r6, r7
 8005f40:	4620      	mov	r0, r4
 8005f42:	f000 fff0 	bl	8006f26 <__d2b>
 8005f46:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005f4a:	9004      	str	r0, [sp, #16]
 8005f4c:	2d00      	cmp	r5, #0
 8005f4e:	d07c      	beq.n	800604a <_dtoa_r+0x1da>
 8005f50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005f54:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8005f58:	46b2      	mov	sl, r6
 8005f5a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8005f5e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005f62:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8005f66:	2200      	movs	r2, #0
 8005f68:	4b8b      	ldr	r3, [pc, #556]	; (8006198 <_dtoa_r+0x328>)
 8005f6a:	4650      	mov	r0, sl
 8005f6c:	4659      	mov	r1, fp
 8005f6e:	f7fa f957 	bl	8000220 <__aeabi_dsub>
 8005f72:	a381      	add	r3, pc, #516	; (adr r3, 8006178 <_dtoa_r+0x308>)
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f7fa fb0a 	bl	8000590 <__aeabi_dmul>
 8005f7c:	a380      	add	r3, pc, #512	; (adr r3, 8006180 <_dtoa_r+0x310>)
 8005f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f82:	f7fa f94f 	bl	8000224 <__adddf3>
 8005f86:	4606      	mov	r6, r0
 8005f88:	4628      	mov	r0, r5
 8005f8a:	460f      	mov	r7, r1
 8005f8c:	f7fa fa96 	bl	80004bc <__aeabi_i2d>
 8005f90:	a37d      	add	r3, pc, #500	; (adr r3, 8006188 <_dtoa_r+0x318>)
 8005f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f96:	f7fa fafb 	bl	8000590 <__aeabi_dmul>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	4630      	mov	r0, r6
 8005fa0:	4639      	mov	r1, r7
 8005fa2:	f7fa f93f 	bl	8000224 <__adddf3>
 8005fa6:	4606      	mov	r6, r0
 8005fa8:	460f      	mov	r7, r1
 8005faa:	f7fa fda1 	bl	8000af0 <__aeabi_d2iz>
 8005fae:	2200      	movs	r2, #0
 8005fb0:	4682      	mov	sl, r0
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	4639      	mov	r1, r7
 8005fb8:	f7fa fd5c 	bl	8000a74 <__aeabi_dcmplt>
 8005fbc:	b148      	cbz	r0, 8005fd2 <_dtoa_r+0x162>
 8005fbe:	4650      	mov	r0, sl
 8005fc0:	f7fa fa7c 	bl	80004bc <__aeabi_i2d>
 8005fc4:	4632      	mov	r2, r6
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	f7fa fd4a 	bl	8000a60 <__aeabi_dcmpeq>
 8005fcc:	b908      	cbnz	r0, 8005fd2 <_dtoa_r+0x162>
 8005fce:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005fd2:	f1ba 0f16 	cmp.w	sl, #22
 8005fd6:	d859      	bhi.n	800608c <_dtoa_r+0x21c>
 8005fd8:	4970      	ldr	r1, [pc, #448]	; (800619c <_dtoa_r+0x32c>)
 8005fda:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8005fde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fe2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fe6:	f7fa fd63 	bl	8000ab0 <__aeabi_dcmpgt>
 8005fea:	2800      	cmp	r0, #0
 8005fec:	d050      	beq.n	8006090 <_dtoa_r+0x220>
 8005fee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ff6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005ff8:	1b5d      	subs	r5, r3, r5
 8005ffa:	f1b5 0801 	subs.w	r8, r5, #1
 8005ffe:	bf49      	itett	mi
 8006000:	f1c5 0301 	rsbmi	r3, r5, #1
 8006004:	2300      	movpl	r3, #0
 8006006:	9305      	strmi	r3, [sp, #20]
 8006008:	f04f 0800 	movmi.w	r8, #0
 800600c:	bf58      	it	pl
 800600e:	9305      	strpl	r3, [sp, #20]
 8006010:	f1ba 0f00 	cmp.w	sl, #0
 8006014:	db3e      	blt.n	8006094 <_dtoa_r+0x224>
 8006016:	2300      	movs	r3, #0
 8006018:	44d0      	add	r8, sl
 800601a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800601e:	9307      	str	r3, [sp, #28]
 8006020:	9b06      	ldr	r3, [sp, #24]
 8006022:	2b09      	cmp	r3, #9
 8006024:	f200 8090 	bhi.w	8006148 <_dtoa_r+0x2d8>
 8006028:	2b05      	cmp	r3, #5
 800602a:	bfc4      	itt	gt
 800602c:	3b04      	subgt	r3, #4
 800602e:	9306      	strgt	r3, [sp, #24]
 8006030:	9b06      	ldr	r3, [sp, #24]
 8006032:	f1a3 0302 	sub.w	r3, r3, #2
 8006036:	bfcc      	ite	gt
 8006038:	2500      	movgt	r5, #0
 800603a:	2501      	movle	r5, #1
 800603c:	2b03      	cmp	r3, #3
 800603e:	f200 808f 	bhi.w	8006160 <_dtoa_r+0x2f0>
 8006042:	e8df f003 	tbb	[pc, r3]
 8006046:	7f7d      	.short	0x7f7d
 8006048:	7131      	.short	0x7131
 800604a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800604e:	441d      	add	r5, r3
 8006050:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8006054:	2820      	cmp	r0, #32
 8006056:	dd13      	ble.n	8006080 <_dtoa_r+0x210>
 8006058:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800605c:	9b00      	ldr	r3, [sp, #0]
 800605e:	fa08 f800 	lsl.w	r8, r8, r0
 8006062:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8006066:	fa23 f000 	lsr.w	r0, r3, r0
 800606a:	ea48 0000 	orr.w	r0, r8, r0
 800606e:	f7fa fa15 	bl	800049c <__aeabi_ui2d>
 8006072:	2301      	movs	r3, #1
 8006074:	4682      	mov	sl, r0
 8006076:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800607a:	3d01      	subs	r5, #1
 800607c:	9313      	str	r3, [sp, #76]	; 0x4c
 800607e:	e772      	b.n	8005f66 <_dtoa_r+0xf6>
 8006080:	9b00      	ldr	r3, [sp, #0]
 8006082:	f1c0 0020 	rsb	r0, r0, #32
 8006086:	fa03 f000 	lsl.w	r0, r3, r0
 800608a:	e7f0      	b.n	800606e <_dtoa_r+0x1fe>
 800608c:	2301      	movs	r3, #1
 800608e:	e7b1      	b.n	8005ff4 <_dtoa_r+0x184>
 8006090:	900f      	str	r0, [sp, #60]	; 0x3c
 8006092:	e7b0      	b.n	8005ff6 <_dtoa_r+0x186>
 8006094:	9b05      	ldr	r3, [sp, #20]
 8006096:	eba3 030a 	sub.w	r3, r3, sl
 800609a:	9305      	str	r3, [sp, #20]
 800609c:	f1ca 0300 	rsb	r3, sl, #0
 80060a0:	9307      	str	r3, [sp, #28]
 80060a2:	2300      	movs	r3, #0
 80060a4:	930e      	str	r3, [sp, #56]	; 0x38
 80060a6:	e7bb      	b.n	8006020 <_dtoa_r+0x1b0>
 80060a8:	2301      	movs	r3, #1
 80060aa:	930a      	str	r3, [sp, #40]	; 0x28
 80060ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	dd59      	ble.n	8006166 <_dtoa_r+0x2f6>
 80060b2:	9302      	str	r3, [sp, #8]
 80060b4:	4699      	mov	r9, r3
 80060b6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80060b8:	2200      	movs	r2, #0
 80060ba:	6072      	str	r2, [r6, #4]
 80060bc:	2204      	movs	r2, #4
 80060be:	f102 0014 	add.w	r0, r2, #20
 80060c2:	4298      	cmp	r0, r3
 80060c4:	6871      	ldr	r1, [r6, #4]
 80060c6:	d953      	bls.n	8006170 <_dtoa_r+0x300>
 80060c8:	4620      	mov	r0, r4
 80060ca:	f000 fc9f 	bl	8006a0c <_Balloc>
 80060ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060d0:	6030      	str	r0, [r6, #0]
 80060d2:	f1b9 0f0e 	cmp.w	r9, #14
 80060d6:	f8d3 b000 	ldr.w	fp, [r3]
 80060da:	f200 80e6 	bhi.w	80062aa <_dtoa_r+0x43a>
 80060de:	2d00      	cmp	r5, #0
 80060e0:	f000 80e3 	beq.w	80062aa <_dtoa_r+0x43a>
 80060e4:	ed9d 7b00 	vldr	d7, [sp]
 80060e8:	f1ba 0f00 	cmp.w	sl, #0
 80060ec:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80060f0:	dd74      	ble.n	80061dc <_dtoa_r+0x36c>
 80060f2:	4a2a      	ldr	r2, [pc, #168]	; (800619c <_dtoa_r+0x32c>)
 80060f4:	f00a 030f 	and.w	r3, sl, #15
 80060f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80060fc:	ed93 7b00 	vldr	d7, [r3]
 8006100:	ea4f 162a 	mov.w	r6, sl, asr #4
 8006104:	06f0      	lsls	r0, r6, #27
 8006106:	ed8d 7b08 	vstr	d7, [sp, #32]
 800610a:	d565      	bpl.n	80061d8 <_dtoa_r+0x368>
 800610c:	4b24      	ldr	r3, [pc, #144]	; (80061a0 <_dtoa_r+0x330>)
 800610e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006112:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006116:	f7fa fb65 	bl	80007e4 <__aeabi_ddiv>
 800611a:	e9cd 0100 	strd	r0, r1, [sp]
 800611e:	f006 060f 	and.w	r6, r6, #15
 8006122:	2503      	movs	r5, #3
 8006124:	4f1e      	ldr	r7, [pc, #120]	; (80061a0 <_dtoa_r+0x330>)
 8006126:	e04c      	b.n	80061c2 <_dtoa_r+0x352>
 8006128:	2301      	movs	r3, #1
 800612a:	930a      	str	r3, [sp, #40]	; 0x28
 800612c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800612e:	4453      	add	r3, sl
 8006130:	f103 0901 	add.w	r9, r3, #1
 8006134:	9302      	str	r3, [sp, #8]
 8006136:	464b      	mov	r3, r9
 8006138:	2b01      	cmp	r3, #1
 800613a:	bfb8      	it	lt
 800613c:	2301      	movlt	r3, #1
 800613e:	e7ba      	b.n	80060b6 <_dtoa_r+0x246>
 8006140:	2300      	movs	r3, #0
 8006142:	e7b2      	b.n	80060aa <_dtoa_r+0x23a>
 8006144:	2300      	movs	r3, #0
 8006146:	e7f0      	b.n	800612a <_dtoa_r+0x2ba>
 8006148:	2501      	movs	r5, #1
 800614a:	2300      	movs	r3, #0
 800614c:	9306      	str	r3, [sp, #24]
 800614e:	950a      	str	r5, [sp, #40]	; 0x28
 8006150:	f04f 33ff 	mov.w	r3, #4294967295
 8006154:	9302      	str	r3, [sp, #8]
 8006156:	4699      	mov	r9, r3
 8006158:	2200      	movs	r2, #0
 800615a:	2312      	movs	r3, #18
 800615c:	920b      	str	r2, [sp, #44]	; 0x2c
 800615e:	e7aa      	b.n	80060b6 <_dtoa_r+0x246>
 8006160:	2301      	movs	r3, #1
 8006162:	930a      	str	r3, [sp, #40]	; 0x28
 8006164:	e7f4      	b.n	8006150 <_dtoa_r+0x2e0>
 8006166:	2301      	movs	r3, #1
 8006168:	9302      	str	r3, [sp, #8]
 800616a:	4699      	mov	r9, r3
 800616c:	461a      	mov	r2, r3
 800616e:	e7f5      	b.n	800615c <_dtoa_r+0x2ec>
 8006170:	3101      	adds	r1, #1
 8006172:	6071      	str	r1, [r6, #4]
 8006174:	0052      	lsls	r2, r2, #1
 8006176:	e7a2      	b.n	80060be <_dtoa_r+0x24e>
 8006178:	636f4361 	.word	0x636f4361
 800617c:	3fd287a7 	.word	0x3fd287a7
 8006180:	8b60c8b3 	.word	0x8b60c8b3
 8006184:	3fc68a28 	.word	0x3fc68a28
 8006188:	509f79fb 	.word	0x509f79fb
 800618c:	3fd34413 	.word	0x3fd34413
 8006190:	7ff00000 	.word	0x7ff00000
 8006194:	08008169 	.word	0x08008169
 8006198:	3ff80000 	.word	0x3ff80000
 800619c:	080081a0 	.word	0x080081a0
 80061a0:	08008178 	.word	0x08008178
 80061a4:	08008173 	.word	0x08008173
 80061a8:	07f1      	lsls	r1, r6, #31
 80061aa:	d508      	bpl.n	80061be <_dtoa_r+0x34e>
 80061ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80061b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80061b4:	f7fa f9ec 	bl	8000590 <__aeabi_dmul>
 80061b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80061bc:	3501      	adds	r5, #1
 80061be:	1076      	asrs	r6, r6, #1
 80061c0:	3708      	adds	r7, #8
 80061c2:	2e00      	cmp	r6, #0
 80061c4:	d1f0      	bne.n	80061a8 <_dtoa_r+0x338>
 80061c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80061ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80061ce:	f7fa fb09 	bl	80007e4 <__aeabi_ddiv>
 80061d2:	e9cd 0100 	strd	r0, r1, [sp]
 80061d6:	e01a      	b.n	800620e <_dtoa_r+0x39e>
 80061d8:	2502      	movs	r5, #2
 80061da:	e7a3      	b.n	8006124 <_dtoa_r+0x2b4>
 80061dc:	f000 80a0 	beq.w	8006320 <_dtoa_r+0x4b0>
 80061e0:	f1ca 0600 	rsb	r6, sl, #0
 80061e4:	4b9f      	ldr	r3, [pc, #636]	; (8006464 <_dtoa_r+0x5f4>)
 80061e6:	4fa0      	ldr	r7, [pc, #640]	; (8006468 <_dtoa_r+0x5f8>)
 80061e8:	f006 020f 	and.w	r2, r6, #15
 80061ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80061f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80061f8:	f7fa f9ca 	bl	8000590 <__aeabi_dmul>
 80061fc:	e9cd 0100 	strd	r0, r1, [sp]
 8006200:	1136      	asrs	r6, r6, #4
 8006202:	2300      	movs	r3, #0
 8006204:	2502      	movs	r5, #2
 8006206:	2e00      	cmp	r6, #0
 8006208:	d17f      	bne.n	800630a <_dtoa_r+0x49a>
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1e1      	bne.n	80061d2 <_dtoa_r+0x362>
 800620e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8087 	beq.w	8006324 <_dtoa_r+0x4b4>
 8006216:	e9dd 6700 	ldrd	r6, r7, [sp]
 800621a:	2200      	movs	r2, #0
 800621c:	4b93      	ldr	r3, [pc, #588]	; (800646c <_dtoa_r+0x5fc>)
 800621e:	4630      	mov	r0, r6
 8006220:	4639      	mov	r1, r7
 8006222:	f7fa fc27 	bl	8000a74 <__aeabi_dcmplt>
 8006226:	2800      	cmp	r0, #0
 8006228:	d07c      	beq.n	8006324 <_dtoa_r+0x4b4>
 800622a:	f1b9 0f00 	cmp.w	r9, #0
 800622e:	d079      	beq.n	8006324 <_dtoa_r+0x4b4>
 8006230:	9b02      	ldr	r3, [sp, #8]
 8006232:	2b00      	cmp	r3, #0
 8006234:	dd35      	ble.n	80062a2 <_dtoa_r+0x432>
 8006236:	f10a 33ff 	add.w	r3, sl, #4294967295
 800623a:	9308      	str	r3, [sp, #32]
 800623c:	4639      	mov	r1, r7
 800623e:	2200      	movs	r2, #0
 8006240:	4b8b      	ldr	r3, [pc, #556]	; (8006470 <_dtoa_r+0x600>)
 8006242:	4630      	mov	r0, r6
 8006244:	f7fa f9a4 	bl	8000590 <__aeabi_dmul>
 8006248:	e9cd 0100 	strd	r0, r1, [sp]
 800624c:	9f02      	ldr	r7, [sp, #8]
 800624e:	3501      	adds	r5, #1
 8006250:	4628      	mov	r0, r5
 8006252:	f7fa f933 	bl	80004bc <__aeabi_i2d>
 8006256:	e9dd 2300 	ldrd	r2, r3, [sp]
 800625a:	f7fa f999 	bl	8000590 <__aeabi_dmul>
 800625e:	2200      	movs	r2, #0
 8006260:	4b84      	ldr	r3, [pc, #528]	; (8006474 <_dtoa_r+0x604>)
 8006262:	f7f9 ffdf 	bl	8000224 <__adddf3>
 8006266:	4605      	mov	r5, r0
 8006268:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800626c:	2f00      	cmp	r7, #0
 800626e:	d15d      	bne.n	800632c <_dtoa_r+0x4bc>
 8006270:	2200      	movs	r2, #0
 8006272:	4b81      	ldr	r3, [pc, #516]	; (8006478 <_dtoa_r+0x608>)
 8006274:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006278:	f7f9 ffd2 	bl	8000220 <__aeabi_dsub>
 800627c:	462a      	mov	r2, r5
 800627e:	4633      	mov	r3, r6
 8006280:	e9cd 0100 	strd	r0, r1, [sp]
 8006284:	f7fa fc14 	bl	8000ab0 <__aeabi_dcmpgt>
 8006288:	2800      	cmp	r0, #0
 800628a:	f040 8288 	bne.w	800679e <_dtoa_r+0x92e>
 800628e:	462a      	mov	r2, r5
 8006290:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006294:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006298:	f7fa fbec 	bl	8000a74 <__aeabi_dcmplt>
 800629c:	2800      	cmp	r0, #0
 800629e:	f040 827c 	bne.w	800679a <_dtoa_r+0x92a>
 80062a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062a6:	e9cd 2300 	strd	r2, r3, [sp]
 80062aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f2c0 8150 	blt.w	8006552 <_dtoa_r+0x6e2>
 80062b2:	f1ba 0f0e 	cmp.w	sl, #14
 80062b6:	f300 814c 	bgt.w	8006552 <_dtoa_r+0x6e2>
 80062ba:	4b6a      	ldr	r3, [pc, #424]	; (8006464 <_dtoa_r+0x5f4>)
 80062bc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80062c0:	ed93 7b00 	vldr	d7, [r3]
 80062c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80062cc:	f280 80d8 	bge.w	8006480 <_dtoa_r+0x610>
 80062d0:	f1b9 0f00 	cmp.w	r9, #0
 80062d4:	f300 80d4 	bgt.w	8006480 <_dtoa_r+0x610>
 80062d8:	f040 825e 	bne.w	8006798 <_dtoa_r+0x928>
 80062dc:	2200      	movs	r2, #0
 80062de:	4b66      	ldr	r3, [pc, #408]	; (8006478 <_dtoa_r+0x608>)
 80062e0:	ec51 0b17 	vmov	r0, r1, d7
 80062e4:	f7fa f954 	bl	8000590 <__aeabi_dmul>
 80062e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80062ec:	f7fa fbd6 	bl	8000a9c <__aeabi_dcmpge>
 80062f0:	464f      	mov	r7, r9
 80062f2:	464e      	mov	r6, r9
 80062f4:	2800      	cmp	r0, #0
 80062f6:	f040 8234 	bne.w	8006762 <_dtoa_r+0x8f2>
 80062fa:	2331      	movs	r3, #49	; 0x31
 80062fc:	f10b 0501 	add.w	r5, fp, #1
 8006300:	f88b 3000 	strb.w	r3, [fp]
 8006304:	f10a 0a01 	add.w	sl, sl, #1
 8006308:	e22f      	b.n	800676a <_dtoa_r+0x8fa>
 800630a:	07f2      	lsls	r2, r6, #31
 800630c:	d505      	bpl.n	800631a <_dtoa_r+0x4aa>
 800630e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006312:	f7fa f93d 	bl	8000590 <__aeabi_dmul>
 8006316:	3501      	adds	r5, #1
 8006318:	2301      	movs	r3, #1
 800631a:	1076      	asrs	r6, r6, #1
 800631c:	3708      	adds	r7, #8
 800631e:	e772      	b.n	8006206 <_dtoa_r+0x396>
 8006320:	2502      	movs	r5, #2
 8006322:	e774      	b.n	800620e <_dtoa_r+0x39e>
 8006324:	f8cd a020 	str.w	sl, [sp, #32]
 8006328:	464f      	mov	r7, r9
 800632a:	e791      	b.n	8006250 <_dtoa_r+0x3e0>
 800632c:	4b4d      	ldr	r3, [pc, #308]	; (8006464 <_dtoa_r+0x5f4>)
 800632e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006332:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8006336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006338:	2b00      	cmp	r3, #0
 800633a:	d047      	beq.n	80063cc <_dtoa_r+0x55c>
 800633c:	4602      	mov	r2, r0
 800633e:	460b      	mov	r3, r1
 8006340:	2000      	movs	r0, #0
 8006342:	494e      	ldr	r1, [pc, #312]	; (800647c <_dtoa_r+0x60c>)
 8006344:	f7fa fa4e 	bl	80007e4 <__aeabi_ddiv>
 8006348:	462a      	mov	r2, r5
 800634a:	4633      	mov	r3, r6
 800634c:	f7f9 ff68 	bl	8000220 <__aeabi_dsub>
 8006350:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006354:	465d      	mov	r5, fp
 8006356:	e9dd 0100 	ldrd	r0, r1, [sp]
 800635a:	f7fa fbc9 	bl	8000af0 <__aeabi_d2iz>
 800635e:	4606      	mov	r6, r0
 8006360:	f7fa f8ac 	bl	80004bc <__aeabi_i2d>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	e9dd 0100 	ldrd	r0, r1, [sp]
 800636c:	f7f9 ff58 	bl	8000220 <__aeabi_dsub>
 8006370:	3630      	adds	r6, #48	; 0x30
 8006372:	f805 6b01 	strb.w	r6, [r5], #1
 8006376:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800637a:	e9cd 0100 	strd	r0, r1, [sp]
 800637e:	f7fa fb79 	bl	8000a74 <__aeabi_dcmplt>
 8006382:	2800      	cmp	r0, #0
 8006384:	d163      	bne.n	800644e <_dtoa_r+0x5de>
 8006386:	e9dd 2300 	ldrd	r2, r3, [sp]
 800638a:	2000      	movs	r0, #0
 800638c:	4937      	ldr	r1, [pc, #220]	; (800646c <_dtoa_r+0x5fc>)
 800638e:	f7f9 ff47 	bl	8000220 <__aeabi_dsub>
 8006392:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006396:	f7fa fb6d 	bl	8000a74 <__aeabi_dcmplt>
 800639a:	2800      	cmp	r0, #0
 800639c:	f040 80b7 	bne.w	800650e <_dtoa_r+0x69e>
 80063a0:	eba5 030b 	sub.w	r3, r5, fp
 80063a4:	429f      	cmp	r7, r3
 80063a6:	f77f af7c 	ble.w	80062a2 <_dtoa_r+0x432>
 80063aa:	2200      	movs	r2, #0
 80063ac:	4b30      	ldr	r3, [pc, #192]	; (8006470 <_dtoa_r+0x600>)
 80063ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063b2:	f7fa f8ed 	bl	8000590 <__aeabi_dmul>
 80063b6:	2200      	movs	r2, #0
 80063b8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80063bc:	4b2c      	ldr	r3, [pc, #176]	; (8006470 <_dtoa_r+0x600>)
 80063be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063c2:	f7fa f8e5 	bl	8000590 <__aeabi_dmul>
 80063c6:	e9cd 0100 	strd	r0, r1, [sp]
 80063ca:	e7c4      	b.n	8006356 <_dtoa_r+0x4e6>
 80063cc:	462a      	mov	r2, r5
 80063ce:	4633      	mov	r3, r6
 80063d0:	f7fa f8de 	bl	8000590 <__aeabi_dmul>
 80063d4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80063d8:	eb0b 0507 	add.w	r5, fp, r7
 80063dc:	465e      	mov	r6, fp
 80063de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063e2:	f7fa fb85 	bl	8000af0 <__aeabi_d2iz>
 80063e6:	4607      	mov	r7, r0
 80063e8:	f7fa f868 	bl	80004bc <__aeabi_i2d>
 80063ec:	3730      	adds	r7, #48	; 0x30
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063f6:	f7f9 ff13 	bl	8000220 <__aeabi_dsub>
 80063fa:	f806 7b01 	strb.w	r7, [r6], #1
 80063fe:	42ae      	cmp	r6, r5
 8006400:	e9cd 0100 	strd	r0, r1, [sp]
 8006404:	f04f 0200 	mov.w	r2, #0
 8006408:	d126      	bne.n	8006458 <_dtoa_r+0x5e8>
 800640a:	4b1c      	ldr	r3, [pc, #112]	; (800647c <_dtoa_r+0x60c>)
 800640c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006410:	f7f9 ff08 	bl	8000224 <__adddf3>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	e9dd 0100 	ldrd	r0, r1, [sp]
 800641c:	f7fa fb48 	bl	8000ab0 <__aeabi_dcmpgt>
 8006420:	2800      	cmp	r0, #0
 8006422:	d174      	bne.n	800650e <_dtoa_r+0x69e>
 8006424:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006428:	2000      	movs	r0, #0
 800642a:	4914      	ldr	r1, [pc, #80]	; (800647c <_dtoa_r+0x60c>)
 800642c:	f7f9 fef8 	bl	8000220 <__aeabi_dsub>
 8006430:	4602      	mov	r2, r0
 8006432:	460b      	mov	r3, r1
 8006434:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006438:	f7fa fb1c 	bl	8000a74 <__aeabi_dcmplt>
 800643c:	2800      	cmp	r0, #0
 800643e:	f43f af30 	beq.w	80062a2 <_dtoa_r+0x432>
 8006442:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006446:	2b30      	cmp	r3, #48	; 0x30
 8006448:	f105 32ff 	add.w	r2, r5, #4294967295
 800644c:	d002      	beq.n	8006454 <_dtoa_r+0x5e4>
 800644e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8006452:	e04a      	b.n	80064ea <_dtoa_r+0x67a>
 8006454:	4615      	mov	r5, r2
 8006456:	e7f4      	b.n	8006442 <_dtoa_r+0x5d2>
 8006458:	4b05      	ldr	r3, [pc, #20]	; (8006470 <_dtoa_r+0x600>)
 800645a:	f7fa f899 	bl	8000590 <__aeabi_dmul>
 800645e:	e9cd 0100 	strd	r0, r1, [sp]
 8006462:	e7bc      	b.n	80063de <_dtoa_r+0x56e>
 8006464:	080081a0 	.word	0x080081a0
 8006468:	08008178 	.word	0x08008178
 800646c:	3ff00000 	.word	0x3ff00000
 8006470:	40240000 	.word	0x40240000
 8006474:	401c0000 	.word	0x401c0000
 8006478:	40140000 	.word	0x40140000
 800647c:	3fe00000 	.word	0x3fe00000
 8006480:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006484:	465d      	mov	r5, fp
 8006486:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800648a:	4630      	mov	r0, r6
 800648c:	4639      	mov	r1, r7
 800648e:	f7fa f9a9 	bl	80007e4 <__aeabi_ddiv>
 8006492:	f7fa fb2d 	bl	8000af0 <__aeabi_d2iz>
 8006496:	4680      	mov	r8, r0
 8006498:	f7fa f810 	bl	80004bc <__aeabi_i2d>
 800649c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064a0:	f7fa f876 	bl	8000590 <__aeabi_dmul>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	4630      	mov	r0, r6
 80064aa:	4639      	mov	r1, r7
 80064ac:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80064b0:	f7f9 feb6 	bl	8000220 <__aeabi_dsub>
 80064b4:	f805 6b01 	strb.w	r6, [r5], #1
 80064b8:	eba5 060b 	sub.w	r6, r5, fp
 80064bc:	45b1      	cmp	r9, r6
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	d139      	bne.n	8006538 <_dtoa_r+0x6c8>
 80064c4:	f7f9 feae 	bl	8000224 <__adddf3>
 80064c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064cc:	4606      	mov	r6, r0
 80064ce:	460f      	mov	r7, r1
 80064d0:	f7fa faee 	bl	8000ab0 <__aeabi_dcmpgt>
 80064d4:	b9c8      	cbnz	r0, 800650a <_dtoa_r+0x69a>
 80064d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064da:	4630      	mov	r0, r6
 80064dc:	4639      	mov	r1, r7
 80064de:	f7fa fabf 	bl	8000a60 <__aeabi_dcmpeq>
 80064e2:	b110      	cbz	r0, 80064ea <_dtoa_r+0x67a>
 80064e4:	f018 0f01 	tst.w	r8, #1
 80064e8:	d10f      	bne.n	800650a <_dtoa_r+0x69a>
 80064ea:	9904      	ldr	r1, [sp, #16]
 80064ec:	4620      	mov	r0, r4
 80064ee:	f000 fac1 	bl	8006a74 <_Bfree>
 80064f2:	2300      	movs	r3, #0
 80064f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80064f6:	702b      	strb	r3, [r5, #0]
 80064f8:	f10a 0301 	add.w	r3, sl, #1
 80064fc:	6013      	str	r3, [r2, #0]
 80064fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 8241 	beq.w	8006988 <_dtoa_r+0xb18>
 8006506:	601d      	str	r5, [r3, #0]
 8006508:	e23e      	b.n	8006988 <_dtoa_r+0xb18>
 800650a:	f8cd a020 	str.w	sl, [sp, #32]
 800650e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006512:	2a39      	cmp	r2, #57	; 0x39
 8006514:	f105 33ff 	add.w	r3, r5, #4294967295
 8006518:	d108      	bne.n	800652c <_dtoa_r+0x6bc>
 800651a:	459b      	cmp	fp, r3
 800651c:	d10a      	bne.n	8006534 <_dtoa_r+0x6c4>
 800651e:	9b08      	ldr	r3, [sp, #32]
 8006520:	3301      	adds	r3, #1
 8006522:	9308      	str	r3, [sp, #32]
 8006524:	2330      	movs	r3, #48	; 0x30
 8006526:	f88b 3000 	strb.w	r3, [fp]
 800652a:	465b      	mov	r3, fp
 800652c:	781a      	ldrb	r2, [r3, #0]
 800652e:	3201      	adds	r2, #1
 8006530:	701a      	strb	r2, [r3, #0]
 8006532:	e78c      	b.n	800644e <_dtoa_r+0x5de>
 8006534:	461d      	mov	r5, r3
 8006536:	e7ea      	b.n	800650e <_dtoa_r+0x69e>
 8006538:	2200      	movs	r2, #0
 800653a:	4b9b      	ldr	r3, [pc, #620]	; (80067a8 <_dtoa_r+0x938>)
 800653c:	f7fa f828 	bl	8000590 <__aeabi_dmul>
 8006540:	2200      	movs	r2, #0
 8006542:	2300      	movs	r3, #0
 8006544:	4606      	mov	r6, r0
 8006546:	460f      	mov	r7, r1
 8006548:	f7fa fa8a 	bl	8000a60 <__aeabi_dcmpeq>
 800654c:	2800      	cmp	r0, #0
 800654e:	d09a      	beq.n	8006486 <_dtoa_r+0x616>
 8006550:	e7cb      	b.n	80064ea <_dtoa_r+0x67a>
 8006552:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006554:	2a00      	cmp	r2, #0
 8006556:	f000 808b 	beq.w	8006670 <_dtoa_r+0x800>
 800655a:	9a06      	ldr	r2, [sp, #24]
 800655c:	2a01      	cmp	r2, #1
 800655e:	dc6e      	bgt.n	800663e <_dtoa_r+0x7ce>
 8006560:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006562:	2a00      	cmp	r2, #0
 8006564:	d067      	beq.n	8006636 <_dtoa_r+0x7c6>
 8006566:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800656a:	9f07      	ldr	r7, [sp, #28]
 800656c:	9d05      	ldr	r5, [sp, #20]
 800656e:	9a05      	ldr	r2, [sp, #20]
 8006570:	2101      	movs	r1, #1
 8006572:	441a      	add	r2, r3
 8006574:	4620      	mov	r0, r4
 8006576:	9205      	str	r2, [sp, #20]
 8006578:	4498      	add	r8, r3
 800657a:	f000 fb1b 	bl	8006bb4 <__i2b>
 800657e:	4606      	mov	r6, r0
 8006580:	2d00      	cmp	r5, #0
 8006582:	dd0c      	ble.n	800659e <_dtoa_r+0x72e>
 8006584:	f1b8 0f00 	cmp.w	r8, #0
 8006588:	dd09      	ble.n	800659e <_dtoa_r+0x72e>
 800658a:	4545      	cmp	r5, r8
 800658c:	9a05      	ldr	r2, [sp, #20]
 800658e:	462b      	mov	r3, r5
 8006590:	bfa8      	it	ge
 8006592:	4643      	movge	r3, r8
 8006594:	1ad2      	subs	r2, r2, r3
 8006596:	9205      	str	r2, [sp, #20]
 8006598:	1aed      	subs	r5, r5, r3
 800659a:	eba8 0803 	sub.w	r8, r8, r3
 800659e:	9b07      	ldr	r3, [sp, #28]
 80065a0:	b1eb      	cbz	r3, 80065de <_dtoa_r+0x76e>
 80065a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d067      	beq.n	8006678 <_dtoa_r+0x808>
 80065a8:	b18f      	cbz	r7, 80065ce <_dtoa_r+0x75e>
 80065aa:	4631      	mov	r1, r6
 80065ac:	463a      	mov	r2, r7
 80065ae:	4620      	mov	r0, r4
 80065b0:	f000 fba0 	bl	8006cf4 <__pow5mult>
 80065b4:	9a04      	ldr	r2, [sp, #16]
 80065b6:	4601      	mov	r1, r0
 80065b8:	4606      	mov	r6, r0
 80065ba:	4620      	mov	r0, r4
 80065bc:	f000 fb03 	bl	8006bc6 <__multiply>
 80065c0:	9904      	ldr	r1, [sp, #16]
 80065c2:	9008      	str	r0, [sp, #32]
 80065c4:	4620      	mov	r0, r4
 80065c6:	f000 fa55 	bl	8006a74 <_Bfree>
 80065ca:	9b08      	ldr	r3, [sp, #32]
 80065cc:	9304      	str	r3, [sp, #16]
 80065ce:	9b07      	ldr	r3, [sp, #28]
 80065d0:	1bda      	subs	r2, r3, r7
 80065d2:	d004      	beq.n	80065de <_dtoa_r+0x76e>
 80065d4:	9904      	ldr	r1, [sp, #16]
 80065d6:	4620      	mov	r0, r4
 80065d8:	f000 fb8c 	bl	8006cf4 <__pow5mult>
 80065dc:	9004      	str	r0, [sp, #16]
 80065de:	2101      	movs	r1, #1
 80065e0:	4620      	mov	r0, r4
 80065e2:	f000 fae7 	bl	8006bb4 <__i2b>
 80065e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80065e8:	4607      	mov	r7, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 81d0 	beq.w	8006990 <_dtoa_r+0xb20>
 80065f0:	461a      	mov	r2, r3
 80065f2:	4601      	mov	r1, r0
 80065f4:	4620      	mov	r0, r4
 80065f6:	f000 fb7d 	bl	8006cf4 <__pow5mult>
 80065fa:	9b06      	ldr	r3, [sp, #24]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	4607      	mov	r7, r0
 8006600:	dc40      	bgt.n	8006684 <_dtoa_r+0x814>
 8006602:	9b00      	ldr	r3, [sp, #0]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d139      	bne.n	800667c <_dtoa_r+0x80c>
 8006608:	9b01      	ldr	r3, [sp, #4]
 800660a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800660e:	2b00      	cmp	r3, #0
 8006610:	d136      	bne.n	8006680 <_dtoa_r+0x810>
 8006612:	9b01      	ldr	r3, [sp, #4]
 8006614:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006618:	0d1b      	lsrs	r3, r3, #20
 800661a:	051b      	lsls	r3, r3, #20
 800661c:	b12b      	cbz	r3, 800662a <_dtoa_r+0x7ba>
 800661e:	9b05      	ldr	r3, [sp, #20]
 8006620:	3301      	adds	r3, #1
 8006622:	9305      	str	r3, [sp, #20]
 8006624:	f108 0801 	add.w	r8, r8, #1
 8006628:	2301      	movs	r3, #1
 800662a:	9307      	str	r3, [sp, #28]
 800662c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800662e:	2b00      	cmp	r3, #0
 8006630:	d12a      	bne.n	8006688 <_dtoa_r+0x818>
 8006632:	2001      	movs	r0, #1
 8006634:	e030      	b.n	8006698 <_dtoa_r+0x828>
 8006636:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006638:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800663c:	e795      	b.n	800656a <_dtoa_r+0x6fa>
 800663e:	9b07      	ldr	r3, [sp, #28]
 8006640:	f109 37ff 	add.w	r7, r9, #4294967295
 8006644:	42bb      	cmp	r3, r7
 8006646:	bfbf      	itttt	lt
 8006648:	9b07      	ldrlt	r3, [sp, #28]
 800664a:	9707      	strlt	r7, [sp, #28]
 800664c:	1afa      	sublt	r2, r7, r3
 800664e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006650:	bfbb      	ittet	lt
 8006652:	189b      	addlt	r3, r3, r2
 8006654:	930e      	strlt	r3, [sp, #56]	; 0x38
 8006656:	1bdf      	subge	r7, r3, r7
 8006658:	2700      	movlt	r7, #0
 800665a:	f1b9 0f00 	cmp.w	r9, #0
 800665e:	bfb5      	itete	lt
 8006660:	9b05      	ldrlt	r3, [sp, #20]
 8006662:	9d05      	ldrge	r5, [sp, #20]
 8006664:	eba3 0509 	sublt.w	r5, r3, r9
 8006668:	464b      	movge	r3, r9
 800666a:	bfb8      	it	lt
 800666c:	2300      	movlt	r3, #0
 800666e:	e77e      	b.n	800656e <_dtoa_r+0x6fe>
 8006670:	9f07      	ldr	r7, [sp, #28]
 8006672:	9d05      	ldr	r5, [sp, #20]
 8006674:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8006676:	e783      	b.n	8006580 <_dtoa_r+0x710>
 8006678:	9a07      	ldr	r2, [sp, #28]
 800667a:	e7ab      	b.n	80065d4 <_dtoa_r+0x764>
 800667c:	2300      	movs	r3, #0
 800667e:	e7d4      	b.n	800662a <_dtoa_r+0x7ba>
 8006680:	9b00      	ldr	r3, [sp, #0]
 8006682:	e7d2      	b.n	800662a <_dtoa_r+0x7ba>
 8006684:	2300      	movs	r3, #0
 8006686:	9307      	str	r3, [sp, #28]
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800668e:	6918      	ldr	r0, [r3, #16]
 8006690:	f000 fa42 	bl	8006b18 <__hi0bits>
 8006694:	f1c0 0020 	rsb	r0, r0, #32
 8006698:	4440      	add	r0, r8
 800669a:	f010 001f 	ands.w	r0, r0, #31
 800669e:	d047      	beq.n	8006730 <_dtoa_r+0x8c0>
 80066a0:	f1c0 0320 	rsb	r3, r0, #32
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	dd3b      	ble.n	8006720 <_dtoa_r+0x8b0>
 80066a8:	9b05      	ldr	r3, [sp, #20]
 80066aa:	f1c0 001c 	rsb	r0, r0, #28
 80066ae:	4403      	add	r3, r0
 80066b0:	9305      	str	r3, [sp, #20]
 80066b2:	4405      	add	r5, r0
 80066b4:	4480      	add	r8, r0
 80066b6:	9b05      	ldr	r3, [sp, #20]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	dd05      	ble.n	80066c8 <_dtoa_r+0x858>
 80066bc:	461a      	mov	r2, r3
 80066be:	9904      	ldr	r1, [sp, #16]
 80066c0:	4620      	mov	r0, r4
 80066c2:	f000 fb65 	bl	8006d90 <__lshift>
 80066c6:	9004      	str	r0, [sp, #16]
 80066c8:	f1b8 0f00 	cmp.w	r8, #0
 80066cc:	dd05      	ble.n	80066da <_dtoa_r+0x86a>
 80066ce:	4639      	mov	r1, r7
 80066d0:	4642      	mov	r2, r8
 80066d2:	4620      	mov	r0, r4
 80066d4:	f000 fb5c 	bl	8006d90 <__lshift>
 80066d8:	4607      	mov	r7, r0
 80066da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066dc:	b353      	cbz	r3, 8006734 <_dtoa_r+0x8c4>
 80066de:	4639      	mov	r1, r7
 80066e0:	9804      	ldr	r0, [sp, #16]
 80066e2:	f000 fba9 	bl	8006e38 <__mcmp>
 80066e6:	2800      	cmp	r0, #0
 80066e8:	da24      	bge.n	8006734 <_dtoa_r+0x8c4>
 80066ea:	2300      	movs	r3, #0
 80066ec:	220a      	movs	r2, #10
 80066ee:	9904      	ldr	r1, [sp, #16]
 80066f0:	4620      	mov	r0, r4
 80066f2:	f000 f9d6 	bl	8006aa2 <__multadd>
 80066f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f8:	9004      	str	r0, [sp, #16]
 80066fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f000 814d 	beq.w	800699e <_dtoa_r+0xb2e>
 8006704:	2300      	movs	r3, #0
 8006706:	4631      	mov	r1, r6
 8006708:	220a      	movs	r2, #10
 800670a:	4620      	mov	r0, r4
 800670c:	f000 f9c9 	bl	8006aa2 <__multadd>
 8006710:	9b02      	ldr	r3, [sp, #8]
 8006712:	2b00      	cmp	r3, #0
 8006714:	4606      	mov	r6, r0
 8006716:	dc4f      	bgt.n	80067b8 <_dtoa_r+0x948>
 8006718:	9b06      	ldr	r3, [sp, #24]
 800671a:	2b02      	cmp	r3, #2
 800671c:	dd4c      	ble.n	80067b8 <_dtoa_r+0x948>
 800671e:	e011      	b.n	8006744 <_dtoa_r+0x8d4>
 8006720:	d0c9      	beq.n	80066b6 <_dtoa_r+0x846>
 8006722:	9a05      	ldr	r2, [sp, #20]
 8006724:	331c      	adds	r3, #28
 8006726:	441a      	add	r2, r3
 8006728:	9205      	str	r2, [sp, #20]
 800672a:	441d      	add	r5, r3
 800672c:	4498      	add	r8, r3
 800672e:	e7c2      	b.n	80066b6 <_dtoa_r+0x846>
 8006730:	4603      	mov	r3, r0
 8006732:	e7f6      	b.n	8006722 <_dtoa_r+0x8b2>
 8006734:	f1b9 0f00 	cmp.w	r9, #0
 8006738:	dc38      	bgt.n	80067ac <_dtoa_r+0x93c>
 800673a:	9b06      	ldr	r3, [sp, #24]
 800673c:	2b02      	cmp	r3, #2
 800673e:	dd35      	ble.n	80067ac <_dtoa_r+0x93c>
 8006740:	f8cd 9008 	str.w	r9, [sp, #8]
 8006744:	9b02      	ldr	r3, [sp, #8]
 8006746:	b963      	cbnz	r3, 8006762 <_dtoa_r+0x8f2>
 8006748:	4639      	mov	r1, r7
 800674a:	2205      	movs	r2, #5
 800674c:	4620      	mov	r0, r4
 800674e:	f000 f9a8 	bl	8006aa2 <__multadd>
 8006752:	4601      	mov	r1, r0
 8006754:	4607      	mov	r7, r0
 8006756:	9804      	ldr	r0, [sp, #16]
 8006758:	f000 fb6e 	bl	8006e38 <__mcmp>
 800675c:	2800      	cmp	r0, #0
 800675e:	f73f adcc 	bgt.w	80062fa <_dtoa_r+0x48a>
 8006762:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006764:	465d      	mov	r5, fp
 8006766:	ea6f 0a03 	mvn.w	sl, r3
 800676a:	f04f 0900 	mov.w	r9, #0
 800676e:	4639      	mov	r1, r7
 8006770:	4620      	mov	r0, r4
 8006772:	f000 f97f 	bl	8006a74 <_Bfree>
 8006776:	2e00      	cmp	r6, #0
 8006778:	f43f aeb7 	beq.w	80064ea <_dtoa_r+0x67a>
 800677c:	f1b9 0f00 	cmp.w	r9, #0
 8006780:	d005      	beq.n	800678e <_dtoa_r+0x91e>
 8006782:	45b1      	cmp	r9, r6
 8006784:	d003      	beq.n	800678e <_dtoa_r+0x91e>
 8006786:	4649      	mov	r1, r9
 8006788:	4620      	mov	r0, r4
 800678a:	f000 f973 	bl	8006a74 <_Bfree>
 800678e:	4631      	mov	r1, r6
 8006790:	4620      	mov	r0, r4
 8006792:	f000 f96f 	bl	8006a74 <_Bfree>
 8006796:	e6a8      	b.n	80064ea <_dtoa_r+0x67a>
 8006798:	2700      	movs	r7, #0
 800679a:	463e      	mov	r6, r7
 800679c:	e7e1      	b.n	8006762 <_dtoa_r+0x8f2>
 800679e:	f8dd a020 	ldr.w	sl, [sp, #32]
 80067a2:	463e      	mov	r6, r7
 80067a4:	e5a9      	b.n	80062fa <_dtoa_r+0x48a>
 80067a6:	bf00      	nop
 80067a8:	40240000 	.word	0x40240000
 80067ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067ae:	f8cd 9008 	str.w	r9, [sp, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 80fa 	beq.w	80069ac <_dtoa_r+0xb3c>
 80067b8:	2d00      	cmp	r5, #0
 80067ba:	dd05      	ble.n	80067c8 <_dtoa_r+0x958>
 80067bc:	4631      	mov	r1, r6
 80067be:	462a      	mov	r2, r5
 80067c0:	4620      	mov	r0, r4
 80067c2:	f000 fae5 	bl	8006d90 <__lshift>
 80067c6:	4606      	mov	r6, r0
 80067c8:	9b07      	ldr	r3, [sp, #28]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d04c      	beq.n	8006868 <_dtoa_r+0x9f8>
 80067ce:	6871      	ldr	r1, [r6, #4]
 80067d0:	4620      	mov	r0, r4
 80067d2:	f000 f91b 	bl	8006a0c <_Balloc>
 80067d6:	6932      	ldr	r2, [r6, #16]
 80067d8:	3202      	adds	r2, #2
 80067da:	4605      	mov	r5, r0
 80067dc:	0092      	lsls	r2, r2, #2
 80067de:	f106 010c 	add.w	r1, r6, #12
 80067e2:	300c      	adds	r0, #12
 80067e4:	f7fe ff5a 	bl	800569c <memcpy>
 80067e8:	2201      	movs	r2, #1
 80067ea:	4629      	mov	r1, r5
 80067ec:	4620      	mov	r0, r4
 80067ee:	f000 facf 	bl	8006d90 <__lshift>
 80067f2:	9b00      	ldr	r3, [sp, #0]
 80067f4:	f8cd b014 	str.w	fp, [sp, #20]
 80067f8:	f003 0301 	and.w	r3, r3, #1
 80067fc:	46b1      	mov	r9, r6
 80067fe:	9307      	str	r3, [sp, #28]
 8006800:	4606      	mov	r6, r0
 8006802:	4639      	mov	r1, r7
 8006804:	9804      	ldr	r0, [sp, #16]
 8006806:	f7ff faa6 	bl	8005d56 <quorem>
 800680a:	4649      	mov	r1, r9
 800680c:	4605      	mov	r5, r0
 800680e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8006812:	9804      	ldr	r0, [sp, #16]
 8006814:	f000 fb10 	bl	8006e38 <__mcmp>
 8006818:	4632      	mov	r2, r6
 800681a:	9000      	str	r0, [sp, #0]
 800681c:	4639      	mov	r1, r7
 800681e:	4620      	mov	r0, r4
 8006820:	f000 fb24 	bl	8006e6c <__mdiff>
 8006824:	68c3      	ldr	r3, [r0, #12]
 8006826:	4602      	mov	r2, r0
 8006828:	bb03      	cbnz	r3, 800686c <_dtoa_r+0x9fc>
 800682a:	4601      	mov	r1, r0
 800682c:	9008      	str	r0, [sp, #32]
 800682e:	9804      	ldr	r0, [sp, #16]
 8006830:	f000 fb02 	bl	8006e38 <__mcmp>
 8006834:	9a08      	ldr	r2, [sp, #32]
 8006836:	4603      	mov	r3, r0
 8006838:	4611      	mov	r1, r2
 800683a:	4620      	mov	r0, r4
 800683c:	9308      	str	r3, [sp, #32]
 800683e:	f000 f919 	bl	8006a74 <_Bfree>
 8006842:	9b08      	ldr	r3, [sp, #32]
 8006844:	b9a3      	cbnz	r3, 8006870 <_dtoa_r+0xa00>
 8006846:	9a06      	ldr	r2, [sp, #24]
 8006848:	b992      	cbnz	r2, 8006870 <_dtoa_r+0xa00>
 800684a:	9a07      	ldr	r2, [sp, #28]
 800684c:	b982      	cbnz	r2, 8006870 <_dtoa_r+0xa00>
 800684e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8006852:	d029      	beq.n	80068a8 <_dtoa_r+0xa38>
 8006854:	9b00      	ldr	r3, [sp, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	dd01      	ble.n	800685e <_dtoa_r+0x9ee>
 800685a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800685e:	9b05      	ldr	r3, [sp, #20]
 8006860:	1c5d      	adds	r5, r3, #1
 8006862:	f883 8000 	strb.w	r8, [r3]
 8006866:	e782      	b.n	800676e <_dtoa_r+0x8fe>
 8006868:	4630      	mov	r0, r6
 800686a:	e7c2      	b.n	80067f2 <_dtoa_r+0x982>
 800686c:	2301      	movs	r3, #1
 800686e:	e7e3      	b.n	8006838 <_dtoa_r+0x9c8>
 8006870:	9a00      	ldr	r2, [sp, #0]
 8006872:	2a00      	cmp	r2, #0
 8006874:	db04      	blt.n	8006880 <_dtoa_r+0xa10>
 8006876:	d125      	bne.n	80068c4 <_dtoa_r+0xa54>
 8006878:	9a06      	ldr	r2, [sp, #24]
 800687a:	bb1a      	cbnz	r2, 80068c4 <_dtoa_r+0xa54>
 800687c:	9a07      	ldr	r2, [sp, #28]
 800687e:	bb0a      	cbnz	r2, 80068c4 <_dtoa_r+0xa54>
 8006880:	2b00      	cmp	r3, #0
 8006882:	ddec      	ble.n	800685e <_dtoa_r+0x9ee>
 8006884:	2201      	movs	r2, #1
 8006886:	9904      	ldr	r1, [sp, #16]
 8006888:	4620      	mov	r0, r4
 800688a:	f000 fa81 	bl	8006d90 <__lshift>
 800688e:	4639      	mov	r1, r7
 8006890:	9004      	str	r0, [sp, #16]
 8006892:	f000 fad1 	bl	8006e38 <__mcmp>
 8006896:	2800      	cmp	r0, #0
 8006898:	dc03      	bgt.n	80068a2 <_dtoa_r+0xa32>
 800689a:	d1e0      	bne.n	800685e <_dtoa_r+0x9ee>
 800689c:	f018 0f01 	tst.w	r8, #1
 80068a0:	d0dd      	beq.n	800685e <_dtoa_r+0x9ee>
 80068a2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80068a6:	d1d8      	bne.n	800685a <_dtoa_r+0x9ea>
 80068a8:	9b05      	ldr	r3, [sp, #20]
 80068aa:	9a05      	ldr	r2, [sp, #20]
 80068ac:	1c5d      	adds	r5, r3, #1
 80068ae:	2339      	movs	r3, #57	; 0x39
 80068b0:	7013      	strb	r3, [r2, #0]
 80068b2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80068b6:	2b39      	cmp	r3, #57	; 0x39
 80068b8:	f105 32ff 	add.w	r2, r5, #4294967295
 80068bc:	d04f      	beq.n	800695e <_dtoa_r+0xaee>
 80068be:	3301      	adds	r3, #1
 80068c0:	7013      	strb	r3, [r2, #0]
 80068c2:	e754      	b.n	800676e <_dtoa_r+0x8fe>
 80068c4:	9a05      	ldr	r2, [sp, #20]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	f102 0501 	add.w	r5, r2, #1
 80068cc:	dd06      	ble.n	80068dc <_dtoa_r+0xa6c>
 80068ce:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 80068d2:	d0e9      	beq.n	80068a8 <_dtoa_r+0xa38>
 80068d4:	f108 0801 	add.w	r8, r8, #1
 80068d8:	9b05      	ldr	r3, [sp, #20]
 80068da:	e7c2      	b.n	8006862 <_dtoa_r+0x9f2>
 80068dc:	9a02      	ldr	r2, [sp, #8]
 80068de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80068e2:	eba5 030b 	sub.w	r3, r5, fp
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d021      	beq.n	800692e <_dtoa_r+0xabe>
 80068ea:	2300      	movs	r3, #0
 80068ec:	220a      	movs	r2, #10
 80068ee:	9904      	ldr	r1, [sp, #16]
 80068f0:	4620      	mov	r0, r4
 80068f2:	f000 f8d6 	bl	8006aa2 <__multadd>
 80068f6:	45b1      	cmp	r9, r6
 80068f8:	9004      	str	r0, [sp, #16]
 80068fa:	f04f 0300 	mov.w	r3, #0
 80068fe:	f04f 020a 	mov.w	r2, #10
 8006902:	4649      	mov	r1, r9
 8006904:	4620      	mov	r0, r4
 8006906:	d105      	bne.n	8006914 <_dtoa_r+0xaa4>
 8006908:	f000 f8cb 	bl	8006aa2 <__multadd>
 800690c:	4681      	mov	r9, r0
 800690e:	4606      	mov	r6, r0
 8006910:	9505      	str	r5, [sp, #20]
 8006912:	e776      	b.n	8006802 <_dtoa_r+0x992>
 8006914:	f000 f8c5 	bl	8006aa2 <__multadd>
 8006918:	4631      	mov	r1, r6
 800691a:	4681      	mov	r9, r0
 800691c:	2300      	movs	r3, #0
 800691e:	220a      	movs	r2, #10
 8006920:	4620      	mov	r0, r4
 8006922:	f000 f8be 	bl	8006aa2 <__multadd>
 8006926:	4606      	mov	r6, r0
 8006928:	e7f2      	b.n	8006910 <_dtoa_r+0xaa0>
 800692a:	f04f 0900 	mov.w	r9, #0
 800692e:	2201      	movs	r2, #1
 8006930:	9904      	ldr	r1, [sp, #16]
 8006932:	4620      	mov	r0, r4
 8006934:	f000 fa2c 	bl	8006d90 <__lshift>
 8006938:	4639      	mov	r1, r7
 800693a:	9004      	str	r0, [sp, #16]
 800693c:	f000 fa7c 	bl	8006e38 <__mcmp>
 8006940:	2800      	cmp	r0, #0
 8006942:	dcb6      	bgt.n	80068b2 <_dtoa_r+0xa42>
 8006944:	d102      	bne.n	800694c <_dtoa_r+0xadc>
 8006946:	f018 0f01 	tst.w	r8, #1
 800694a:	d1b2      	bne.n	80068b2 <_dtoa_r+0xa42>
 800694c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006950:	2b30      	cmp	r3, #48	; 0x30
 8006952:	f105 32ff 	add.w	r2, r5, #4294967295
 8006956:	f47f af0a 	bne.w	800676e <_dtoa_r+0x8fe>
 800695a:	4615      	mov	r5, r2
 800695c:	e7f6      	b.n	800694c <_dtoa_r+0xadc>
 800695e:	4593      	cmp	fp, r2
 8006960:	d105      	bne.n	800696e <_dtoa_r+0xafe>
 8006962:	2331      	movs	r3, #49	; 0x31
 8006964:	f10a 0a01 	add.w	sl, sl, #1
 8006968:	f88b 3000 	strb.w	r3, [fp]
 800696c:	e6ff      	b.n	800676e <_dtoa_r+0x8fe>
 800696e:	4615      	mov	r5, r2
 8006970:	e79f      	b.n	80068b2 <_dtoa_r+0xa42>
 8006972:	f8df b064 	ldr.w	fp, [pc, #100]	; 80069d8 <_dtoa_r+0xb68>
 8006976:	e007      	b.n	8006988 <_dtoa_r+0xb18>
 8006978:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800697a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80069dc <_dtoa_r+0xb6c>
 800697e:	b11b      	cbz	r3, 8006988 <_dtoa_r+0xb18>
 8006980:	f10b 0308 	add.w	r3, fp, #8
 8006984:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	4658      	mov	r0, fp
 800698a:	b017      	add	sp, #92	; 0x5c
 800698c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006990:	9b06      	ldr	r3, [sp, #24]
 8006992:	2b01      	cmp	r3, #1
 8006994:	f77f ae35 	ble.w	8006602 <_dtoa_r+0x792>
 8006998:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800699a:	9307      	str	r3, [sp, #28]
 800699c:	e649      	b.n	8006632 <_dtoa_r+0x7c2>
 800699e:	9b02      	ldr	r3, [sp, #8]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	dc03      	bgt.n	80069ac <_dtoa_r+0xb3c>
 80069a4:	9b06      	ldr	r3, [sp, #24]
 80069a6:	2b02      	cmp	r3, #2
 80069a8:	f73f aecc 	bgt.w	8006744 <_dtoa_r+0x8d4>
 80069ac:	465d      	mov	r5, fp
 80069ae:	4639      	mov	r1, r7
 80069b0:	9804      	ldr	r0, [sp, #16]
 80069b2:	f7ff f9d0 	bl	8005d56 <quorem>
 80069b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80069ba:	f805 8b01 	strb.w	r8, [r5], #1
 80069be:	9a02      	ldr	r2, [sp, #8]
 80069c0:	eba5 030b 	sub.w	r3, r5, fp
 80069c4:	429a      	cmp	r2, r3
 80069c6:	ddb0      	ble.n	800692a <_dtoa_r+0xaba>
 80069c8:	2300      	movs	r3, #0
 80069ca:	220a      	movs	r2, #10
 80069cc:	9904      	ldr	r1, [sp, #16]
 80069ce:	4620      	mov	r0, r4
 80069d0:	f000 f867 	bl	8006aa2 <__multadd>
 80069d4:	9004      	str	r0, [sp, #16]
 80069d6:	e7ea      	b.n	80069ae <_dtoa_r+0xb3e>
 80069d8:	08008168 	.word	0x08008168
 80069dc:	0800816a 	.word	0x0800816a

080069e0 <_localeconv_r>:
 80069e0:	4b04      	ldr	r3, [pc, #16]	; (80069f4 <_localeconv_r+0x14>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6a18      	ldr	r0, [r3, #32]
 80069e6:	4b04      	ldr	r3, [pc, #16]	; (80069f8 <_localeconv_r+0x18>)
 80069e8:	2800      	cmp	r0, #0
 80069ea:	bf08      	it	eq
 80069ec:	4618      	moveq	r0, r3
 80069ee:	30f0      	adds	r0, #240	; 0xf0
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	20000014 	.word	0x20000014
 80069f8:	20000078 	.word	0x20000078

080069fc <malloc>:
 80069fc:	4b02      	ldr	r3, [pc, #8]	; (8006a08 <malloc+0xc>)
 80069fe:	4601      	mov	r1, r0
 8006a00:	6818      	ldr	r0, [r3, #0]
 8006a02:	f000 baed 	b.w	8006fe0 <_malloc_r>
 8006a06:	bf00      	nop
 8006a08:	20000014 	.word	0x20000014

08006a0c <_Balloc>:
 8006a0c:	b570      	push	{r4, r5, r6, lr}
 8006a0e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006a10:	4604      	mov	r4, r0
 8006a12:	460e      	mov	r6, r1
 8006a14:	b93d      	cbnz	r5, 8006a26 <_Balloc+0x1a>
 8006a16:	2010      	movs	r0, #16
 8006a18:	f7ff fff0 	bl	80069fc <malloc>
 8006a1c:	6260      	str	r0, [r4, #36]	; 0x24
 8006a1e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006a22:	6005      	str	r5, [r0, #0]
 8006a24:	60c5      	str	r5, [r0, #12]
 8006a26:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006a28:	68eb      	ldr	r3, [r5, #12]
 8006a2a:	b183      	cbz	r3, 8006a4e <_Balloc+0x42>
 8006a2c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a2e:	68db      	ldr	r3, [r3, #12]
 8006a30:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006a34:	b9b8      	cbnz	r0, 8006a66 <_Balloc+0x5a>
 8006a36:	2101      	movs	r1, #1
 8006a38:	fa01 f506 	lsl.w	r5, r1, r6
 8006a3c:	1d6a      	adds	r2, r5, #5
 8006a3e:	0092      	lsls	r2, r2, #2
 8006a40:	4620      	mov	r0, r4
 8006a42:	f000 fabf 	bl	8006fc4 <_calloc_r>
 8006a46:	b160      	cbz	r0, 8006a62 <_Balloc+0x56>
 8006a48:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8006a4c:	e00e      	b.n	8006a6c <_Balloc+0x60>
 8006a4e:	2221      	movs	r2, #33	; 0x21
 8006a50:	2104      	movs	r1, #4
 8006a52:	4620      	mov	r0, r4
 8006a54:	f000 fab6 	bl	8006fc4 <_calloc_r>
 8006a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a5a:	60e8      	str	r0, [r5, #12]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1e4      	bne.n	8006a2c <_Balloc+0x20>
 8006a62:	2000      	movs	r0, #0
 8006a64:	bd70      	pop	{r4, r5, r6, pc}
 8006a66:	6802      	ldr	r2, [r0, #0]
 8006a68:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006a72:	e7f7      	b.n	8006a64 <_Balloc+0x58>

08006a74 <_Bfree>:
 8006a74:	b570      	push	{r4, r5, r6, lr}
 8006a76:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006a78:	4606      	mov	r6, r0
 8006a7a:	460d      	mov	r5, r1
 8006a7c:	b93c      	cbnz	r4, 8006a8e <_Bfree+0x1a>
 8006a7e:	2010      	movs	r0, #16
 8006a80:	f7ff ffbc 	bl	80069fc <malloc>
 8006a84:	6270      	str	r0, [r6, #36]	; 0x24
 8006a86:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a8a:	6004      	str	r4, [r0, #0]
 8006a8c:	60c4      	str	r4, [r0, #12]
 8006a8e:	b13d      	cbz	r5, 8006aa0 <_Bfree+0x2c>
 8006a90:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006a92:	686a      	ldr	r2, [r5, #4]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a9a:	6029      	str	r1, [r5, #0]
 8006a9c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006aa0:	bd70      	pop	{r4, r5, r6, pc}

08006aa2 <__multadd>:
 8006aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aa6:	690d      	ldr	r5, [r1, #16]
 8006aa8:	461f      	mov	r7, r3
 8006aaa:	4606      	mov	r6, r0
 8006aac:	460c      	mov	r4, r1
 8006aae:	f101 0c14 	add.w	ip, r1, #20
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	f8dc 0000 	ldr.w	r0, [ip]
 8006ab8:	b281      	uxth	r1, r0
 8006aba:	fb02 7101 	mla	r1, r2, r1, r7
 8006abe:	0c0f      	lsrs	r7, r1, #16
 8006ac0:	0c00      	lsrs	r0, r0, #16
 8006ac2:	fb02 7000 	mla	r0, r2, r0, r7
 8006ac6:	b289      	uxth	r1, r1
 8006ac8:	3301      	adds	r3, #1
 8006aca:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006ace:	429d      	cmp	r5, r3
 8006ad0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8006ad4:	f84c 1b04 	str.w	r1, [ip], #4
 8006ad8:	dcec      	bgt.n	8006ab4 <__multadd+0x12>
 8006ada:	b1d7      	cbz	r7, 8006b12 <__multadd+0x70>
 8006adc:	68a3      	ldr	r3, [r4, #8]
 8006ade:	42ab      	cmp	r3, r5
 8006ae0:	dc12      	bgt.n	8006b08 <__multadd+0x66>
 8006ae2:	6861      	ldr	r1, [r4, #4]
 8006ae4:	4630      	mov	r0, r6
 8006ae6:	3101      	adds	r1, #1
 8006ae8:	f7ff ff90 	bl	8006a0c <_Balloc>
 8006aec:	6922      	ldr	r2, [r4, #16]
 8006aee:	3202      	adds	r2, #2
 8006af0:	f104 010c 	add.w	r1, r4, #12
 8006af4:	4680      	mov	r8, r0
 8006af6:	0092      	lsls	r2, r2, #2
 8006af8:	300c      	adds	r0, #12
 8006afa:	f7fe fdcf 	bl	800569c <memcpy>
 8006afe:	4621      	mov	r1, r4
 8006b00:	4630      	mov	r0, r6
 8006b02:	f7ff ffb7 	bl	8006a74 <_Bfree>
 8006b06:	4644      	mov	r4, r8
 8006b08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b0c:	3501      	adds	r5, #1
 8006b0e:	615f      	str	r7, [r3, #20]
 8006b10:	6125      	str	r5, [r4, #16]
 8006b12:	4620      	mov	r0, r4
 8006b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006b18 <__hi0bits>:
 8006b18:	0c02      	lsrs	r2, r0, #16
 8006b1a:	0412      	lsls	r2, r2, #16
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	b9b2      	cbnz	r2, 8006b4e <__hi0bits+0x36>
 8006b20:	0403      	lsls	r3, r0, #16
 8006b22:	2010      	movs	r0, #16
 8006b24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006b28:	bf04      	itt	eq
 8006b2a:	021b      	lsleq	r3, r3, #8
 8006b2c:	3008      	addeq	r0, #8
 8006b2e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006b32:	bf04      	itt	eq
 8006b34:	011b      	lsleq	r3, r3, #4
 8006b36:	3004      	addeq	r0, #4
 8006b38:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006b3c:	bf04      	itt	eq
 8006b3e:	009b      	lsleq	r3, r3, #2
 8006b40:	3002      	addeq	r0, #2
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	db06      	blt.n	8006b54 <__hi0bits+0x3c>
 8006b46:	005b      	lsls	r3, r3, #1
 8006b48:	d503      	bpl.n	8006b52 <__hi0bits+0x3a>
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	4770      	bx	lr
 8006b4e:	2000      	movs	r0, #0
 8006b50:	e7e8      	b.n	8006b24 <__hi0bits+0xc>
 8006b52:	2020      	movs	r0, #32
 8006b54:	4770      	bx	lr

08006b56 <__lo0bits>:
 8006b56:	6803      	ldr	r3, [r0, #0]
 8006b58:	f013 0207 	ands.w	r2, r3, #7
 8006b5c:	4601      	mov	r1, r0
 8006b5e:	d00b      	beq.n	8006b78 <__lo0bits+0x22>
 8006b60:	07da      	lsls	r2, r3, #31
 8006b62:	d423      	bmi.n	8006bac <__lo0bits+0x56>
 8006b64:	0798      	lsls	r0, r3, #30
 8006b66:	bf49      	itett	mi
 8006b68:	085b      	lsrmi	r3, r3, #1
 8006b6a:	089b      	lsrpl	r3, r3, #2
 8006b6c:	2001      	movmi	r0, #1
 8006b6e:	600b      	strmi	r3, [r1, #0]
 8006b70:	bf5c      	itt	pl
 8006b72:	600b      	strpl	r3, [r1, #0]
 8006b74:	2002      	movpl	r0, #2
 8006b76:	4770      	bx	lr
 8006b78:	b298      	uxth	r0, r3
 8006b7a:	b9a8      	cbnz	r0, 8006ba8 <__lo0bits+0x52>
 8006b7c:	0c1b      	lsrs	r3, r3, #16
 8006b7e:	2010      	movs	r0, #16
 8006b80:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006b84:	bf04      	itt	eq
 8006b86:	0a1b      	lsreq	r3, r3, #8
 8006b88:	3008      	addeq	r0, #8
 8006b8a:	071a      	lsls	r2, r3, #28
 8006b8c:	bf04      	itt	eq
 8006b8e:	091b      	lsreq	r3, r3, #4
 8006b90:	3004      	addeq	r0, #4
 8006b92:	079a      	lsls	r2, r3, #30
 8006b94:	bf04      	itt	eq
 8006b96:	089b      	lsreq	r3, r3, #2
 8006b98:	3002      	addeq	r0, #2
 8006b9a:	07da      	lsls	r2, r3, #31
 8006b9c:	d402      	bmi.n	8006ba4 <__lo0bits+0x4e>
 8006b9e:	085b      	lsrs	r3, r3, #1
 8006ba0:	d006      	beq.n	8006bb0 <__lo0bits+0x5a>
 8006ba2:	3001      	adds	r0, #1
 8006ba4:	600b      	str	r3, [r1, #0]
 8006ba6:	4770      	bx	lr
 8006ba8:	4610      	mov	r0, r2
 8006baa:	e7e9      	b.n	8006b80 <__lo0bits+0x2a>
 8006bac:	2000      	movs	r0, #0
 8006bae:	4770      	bx	lr
 8006bb0:	2020      	movs	r0, #32
 8006bb2:	4770      	bx	lr

08006bb4 <__i2b>:
 8006bb4:	b510      	push	{r4, lr}
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	2101      	movs	r1, #1
 8006bba:	f7ff ff27 	bl	8006a0c <_Balloc>
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	6144      	str	r4, [r0, #20]
 8006bc2:	6102      	str	r2, [r0, #16]
 8006bc4:	bd10      	pop	{r4, pc}

08006bc6 <__multiply>:
 8006bc6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bca:	4614      	mov	r4, r2
 8006bcc:	690a      	ldr	r2, [r1, #16]
 8006bce:	6923      	ldr	r3, [r4, #16]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	bfb8      	it	lt
 8006bd4:	460b      	movlt	r3, r1
 8006bd6:	4688      	mov	r8, r1
 8006bd8:	bfbc      	itt	lt
 8006bda:	46a0      	movlt	r8, r4
 8006bdc:	461c      	movlt	r4, r3
 8006bde:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006be2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8006be6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006bea:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006bee:	eb07 0609 	add.w	r6, r7, r9
 8006bf2:	42b3      	cmp	r3, r6
 8006bf4:	bfb8      	it	lt
 8006bf6:	3101      	addlt	r1, #1
 8006bf8:	f7ff ff08 	bl	8006a0c <_Balloc>
 8006bfc:	f100 0514 	add.w	r5, r0, #20
 8006c00:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8006c04:	462b      	mov	r3, r5
 8006c06:	2200      	movs	r2, #0
 8006c08:	4573      	cmp	r3, lr
 8006c0a:	d316      	bcc.n	8006c3a <__multiply+0x74>
 8006c0c:	f104 0214 	add.w	r2, r4, #20
 8006c10:	f108 0114 	add.w	r1, r8, #20
 8006c14:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006c18:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006c1c:	9300      	str	r3, [sp, #0]
 8006c1e:	9b00      	ldr	r3, [sp, #0]
 8006c20:	9201      	str	r2, [sp, #4]
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d80c      	bhi.n	8006c40 <__multiply+0x7a>
 8006c26:	2e00      	cmp	r6, #0
 8006c28:	dd03      	ble.n	8006c32 <__multiply+0x6c>
 8006c2a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d05d      	beq.n	8006cee <__multiply+0x128>
 8006c32:	6106      	str	r6, [r0, #16]
 8006c34:	b003      	add	sp, #12
 8006c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c3a:	f843 2b04 	str.w	r2, [r3], #4
 8006c3e:	e7e3      	b.n	8006c08 <__multiply+0x42>
 8006c40:	f8b2 b000 	ldrh.w	fp, [r2]
 8006c44:	f1bb 0f00 	cmp.w	fp, #0
 8006c48:	d023      	beq.n	8006c92 <__multiply+0xcc>
 8006c4a:	4689      	mov	r9, r1
 8006c4c:	46ac      	mov	ip, r5
 8006c4e:	f04f 0800 	mov.w	r8, #0
 8006c52:	f859 4b04 	ldr.w	r4, [r9], #4
 8006c56:	f8dc a000 	ldr.w	sl, [ip]
 8006c5a:	b2a3      	uxth	r3, r4
 8006c5c:	fa1f fa8a 	uxth.w	sl, sl
 8006c60:	fb0b a303 	mla	r3, fp, r3, sl
 8006c64:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006c68:	f8dc 4000 	ldr.w	r4, [ip]
 8006c6c:	4443      	add	r3, r8
 8006c6e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006c72:	fb0b 840a 	mla	r4, fp, sl, r8
 8006c76:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006c7a:	46e2      	mov	sl, ip
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006c82:	454f      	cmp	r7, r9
 8006c84:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8006c88:	f84a 3b04 	str.w	r3, [sl], #4
 8006c8c:	d82b      	bhi.n	8006ce6 <__multiply+0x120>
 8006c8e:	f8cc 8004 	str.w	r8, [ip, #4]
 8006c92:	9b01      	ldr	r3, [sp, #4]
 8006c94:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8006c98:	3204      	adds	r2, #4
 8006c9a:	f1ba 0f00 	cmp.w	sl, #0
 8006c9e:	d020      	beq.n	8006ce2 <__multiply+0x11c>
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	4689      	mov	r9, r1
 8006ca4:	46a8      	mov	r8, r5
 8006ca6:	f04f 0b00 	mov.w	fp, #0
 8006caa:	f8b9 c000 	ldrh.w	ip, [r9]
 8006cae:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8006cb2:	fb0a 440c 	mla	r4, sl, ip, r4
 8006cb6:	445c      	add	r4, fp
 8006cb8:	46c4      	mov	ip, r8
 8006cba:	b29b      	uxth	r3, r3
 8006cbc:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8006cc0:	f84c 3b04 	str.w	r3, [ip], #4
 8006cc4:	f859 3b04 	ldr.w	r3, [r9], #4
 8006cc8:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8006ccc:	0c1b      	lsrs	r3, r3, #16
 8006cce:	fb0a b303 	mla	r3, sl, r3, fp
 8006cd2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8006cd6:	454f      	cmp	r7, r9
 8006cd8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8006cdc:	d805      	bhi.n	8006cea <__multiply+0x124>
 8006cde:	f8c8 3004 	str.w	r3, [r8, #4]
 8006ce2:	3504      	adds	r5, #4
 8006ce4:	e79b      	b.n	8006c1e <__multiply+0x58>
 8006ce6:	46d4      	mov	ip, sl
 8006ce8:	e7b3      	b.n	8006c52 <__multiply+0x8c>
 8006cea:	46e0      	mov	r8, ip
 8006cec:	e7dd      	b.n	8006caa <__multiply+0xe4>
 8006cee:	3e01      	subs	r6, #1
 8006cf0:	e799      	b.n	8006c26 <__multiply+0x60>
	...

08006cf4 <__pow5mult>:
 8006cf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cf8:	4615      	mov	r5, r2
 8006cfa:	f012 0203 	ands.w	r2, r2, #3
 8006cfe:	4606      	mov	r6, r0
 8006d00:	460f      	mov	r7, r1
 8006d02:	d007      	beq.n	8006d14 <__pow5mult+0x20>
 8006d04:	3a01      	subs	r2, #1
 8006d06:	4c21      	ldr	r4, [pc, #132]	; (8006d8c <__pow5mult+0x98>)
 8006d08:	2300      	movs	r3, #0
 8006d0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006d0e:	f7ff fec8 	bl	8006aa2 <__multadd>
 8006d12:	4607      	mov	r7, r0
 8006d14:	10ad      	asrs	r5, r5, #2
 8006d16:	d035      	beq.n	8006d84 <__pow5mult+0x90>
 8006d18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006d1a:	b93c      	cbnz	r4, 8006d2c <__pow5mult+0x38>
 8006d1c:	2010      	movs	r0, #16
 8006d1e:	f7ff fe6d 	bl	80069fc <malloc>
 8006d22:	6270      	str	r0, [r6, #36]	; 0x24
 8006d24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006d28:	6004      	str	r4, [r0, #0]
 8006d2a:	60c4      	str	r4, [r0, #12]
 8006d2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006d30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006d34:	b94c      	cbnz	r4, 8006d4a <__pow5mult+0x56>
 8006d36:	f240 2171 	movw	r1, #625	; 0x271
 8006d3a:	4630      	mov	r0, r6
 8006d3c:	f7ff ff3a 	bl	8006bb4 <__i2b>
 8006d40:	2300      	movs	r3, #0
 8006d42:	f8c8 0008 	str.w	r0, [r8, #8]
 8006d46:	4604      	mov	r4, r0
 8006d48:	6003      	str	r3, [r0, #0]
 8006d4a:	f04f 0800 	mov.w	r8, #0
 8006d4e:	07eb      	lsls	r3, r5, #31
 8006d50:	d50a      	bpl.n	8006d68 <__pow5mult+0x74>
 8006d52:	4639      	mov	r1, r7
 8006d54:	4622      	mov	r2, r4
 8006d56:	4630      	mov	r0, r6
 8006d58:	f7ff ff35 	bl	8006bc6 <__multiply>
 8006d5c:	4639      	mov	r1, r7
 8006d5e:	4681      	mov	r9, r0
 8006d60:	4630      	mov	r0, r6
 8006d62:	f7ff fe87 	bl	8006a74 <_Bfree>
 8006d66:	464f      	mov	r7, r9
 8006d68:	106d      	asrs	r5, r5, #1
 8006d6a:	d00b      	beq.n	8006d84 <__pow5mult+0x90>
 8006d6c:	6820      	ldr	r0, [r4, #0]
 8006d6e:	b938      	cbnz	r0, 8006d80 <__pow5mult+0x8c>
 8006d70:	4622      	mov	r2, r4
 8006d72:	4621      	mov	r1, r4
 8006d74:	4630      	mov	r0, r6
 8006d76:	f7ff ff26 	bl	8006bc6 <__multiply>
 8006d7a:	6020      	str	r0, [r4, #0]
 8006d7c:	f8c0 8000 	str.w	r8, [r0]
 8006d80:	4604      	mov	r4, r0
 8006d82:	e7e4      	b.n	8006d4e <__pow5mult+0x5a>
 8006d84:	4638      	mov	r0, r7
 8006d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d8a:	bf00      	nop
 8006d8c:	08008268 	.word	0x08008268

08006d90 <__lshift>:
 8006d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d94:	460c      	mov	r4, r1
 8006d96:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006d9a:	6923      	ldr	r3, [r4, #16]
 8006d9c:	6849      	ldr	r1, [r1, #4]
 8006d9e:	eb0a 0903 	add.w	r9, sl, r3
 8006da2:	68a3      	ldr	r3, [r4, #8]
 8006da4:	4607      	mov	r7, r0
 8006da6:	4616      	mov	r6, r2
 8006da8:	f109 0501 	add.w	r5, r9, #1
 8006dac:	42ab      	cmp	r3, r5
 8006dae:	db32      	blt.n	8006e16 <__lshift+0x86>
 8006db0:	4638      	mov	r0, r7
 8006db2:	f7ff fe2b 	bl	8006a0c <_Balloc>
 8006db6:	2300      	movs	r3, #0
 8006db8:	4680      	mov	r8, r0
 8006dba:	f100 0114 	add.w	r1, r0, #20
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	4553      	cmp	r3, sl
 8006dc2:	db2b      	blt.n	8006e1c <__lshift+0x8c>
 8006dc4:	6920      	ldr	r0, [r4, #16]
 8006dc6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006dca:	f104 0314 	add.w	r3, r4, #20
 8006dce:	f016 021f 	ands.w	r2, r6, #31
 8006dd2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006dd6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006dda:	d025      	beq.n	8006e28 <__lshift+0x98>
 8006ddc:	f1c2 0e20 	rsb	lr, r2, #32
 8006de0:	2000      	movs	r0, #0
 8006de2:	681e      	ldr	r6, [r3, #0]
 8006de4:	468a      	mov	sl, r1
 8006de6:	4096      	lsls	r6, r2
 8006de8:	4330      	orrs	r0, r6
 8006dea:	f84a 0b04 	str.w	r0, [sl], #4
 8006dee:	f853 0b04 	ldr.w	r0, [r3], #4
 8006df2:	459c      	cmp	ip, r3
 8006df4:	fa20 f00e 	lsr.w	r0, r0, lr
 8006df8:	d814      	bhi.n	8006e24 <__lshift+0x94>
 8006dfa:	6048      	str	r0, [r1, #4]
 8006dfc:	b108      	cbz	r0, 8006e02 <__lshift+0x72>
 8006dfe:	f109 0502 	add.w	r5, r9, #2
 8006e02:	3d01      	subs	r5, #1
 8006e04:	4638      	mov	r0, r7
 8006e06:	f8c8 5010 	str.w	r5, [r8, #16]
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	f7ff fe32 	bl	8006a74 <_Bfree>
 8006e10:	4640      	mov	r0, r8
 8006e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e16:	3101      	adds	r1, #1
 8006e18:	005b      	lsls	r3, r3, #1
 8006e1a:	e7c7      	b.n	8006dac <__lshift+0x1c>
 8006e1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006e20:	3301      	adds	r3, #1
 8006e22:	e7cd      	b.n	8006dc0 <__lshift+0x30>
 8006e24:	4651      	mov	r1, sl
 8006e26:	e7dc      	b.n	8006de2 <__lshift+0x52>
 8006e28:	3904      	subs	r1, #4
 8006e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e2e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006e32:	459c      	cmp	ip, r3
 8006e34:	d8f9      	bhi.n	8006e2a <__lshift+0x9a>
 8006e36:	e7e4      	b.n	8006e02 <__lshift+0x72>

08006e38 <__mcmp>:
 8006e38:	6903      	ldr	r3, [r0, #16]
 8006e3a:	690a      	ldr	r2, [r1, #16]
 8006e3c:	1a9b      	subs	r3, r3, r2
 8006e3e:	b530      	push	{r4, r5, lr}
 8006e40:	d10c      	bne.n	8006e5c <__mcmp+0x24>
 8006e42:	0092      	lsls	r2, r2, #2
 8006e44:	3014      	adds	r0, #20
 8006e46:	3114      	adds	r1, #20
 8006e48:	1884      	adds	r4, r0, r2
 8006e4a:	4411      	add	r1, r2
 8006e4c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006e50:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006e54:	4295      	cmp	r5, r2
 8006e56:	d003      	beq.n	8006e60 <__mcmp+0x28>
 8006e58:	d305      	bcc.n	8006e66 <__mcmp+0x2e>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	bd30      	pop	{r4, r5, pc}
 8006e60:	42a0      	cmp	r0, r4
 8006e62:	d3f3      	bcc.n	8006e4c <__mcmp+0x14>
 8006e64:	e7fa      	b.n	8006e5c <__mcmp+0x24>
 8006e66:	f04f 33ff 	mov.w	r3, #4294967295
 8006e6a:	e7f7      	b.n	8006e5c <__mcmp+0x24>

08006e6c <__mdiff>:
 8006e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e70:	460d      	mov	r5, r1
 8006e72:	4607      	mov	r7, r0
 8006e74:	4611      	mov	r1, r2
 8006e76:	4628      	mov	r0, r5
 8006e78:	4614      	mov	r4, r2
 8006e7a:	f7ff ffdd 	bl	8006e38 <__mcmp>
 8006e7e:	1e06      	subs	r6, r0, #0
 8006e80:	d108      	bne.n	8006e94 <__mdiff+0x28>
 8006e82:	4631      	mov	r1, r6
 8006e84:	4638      	mov	r0, r7
 8006e86:	f7ff fdc1 	bl	8006a0c <_Balloc>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e94:	bfa4      	itt	ge
 8006e96:	4623      	movge	r3, r4
 8006e98:	462c      	movge	r4, r5
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	6861      	ldr	r1, [r4, #4]
 8006e9e:	bfa6      	itte	ge
 8006ea0:	461d      	movge	r5, r3
 8006ea2:	2600      	movge	r6, #0
 8006ea4:	2601      	movlt	r6, #1
 8006ea6:	f7ff fdb1 	bl	8006a0c <_Balloc>
 8006eaa:	692b      	ldr	r3, [r5, #16]
 8006eac:	60c6      	str	r6, [r0, #12]
 8006eae:	6926      	ldr	r6, [r4, #16]
 8006eb0:	f105 0914 	add.w	r9, r5, #20
 8006eb4:	f104 0214 	add.w	r2, r4, #20
 8006eb8:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006ebc:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8006ec0:	f100 0514 	add.w	r5, r0, #20
 8006ec4:	f04f 0e00 	mov.w	lr, #0
 8006ec8:	f852 ab04 	ldr.w	sl, [r2], #4
 8006ecc:	f859 4b04 	ldr.w	r4, [r9], #4
 8006ed0:	fa1e f18a 	uxtah	r1, lr, sl
 8006ed4:	b2a3      	uxth	r3, r4
 8006ed6:	1ac9      	subs	r1, r1, r3
 8006ed8:	0c23      	lsrs	r3, r4, #16
 8006eda:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8006ede:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006ee2:	b289      	uxth	r1, r1
 8006ee4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8006ee8:	45c8      	cmp	r8, r9
 8006eea:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006eee:	4694      	mov	ip, r2
 8006ef0:	f845 3b04 	str.w	r3, [r5], #4
 8006ef4:	d8e8      	bhi.n	8006ec8 <__mdiff+0x5c>
 8006ef6:	45bc      	cmp	ip, r7
 8006ef8:	d304      	bcc.n	8006f04 <__mdiff+0x98>
 8006efa:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006efe:	b183      	cbz	r3, 8006f22 <__mdiff+0xb6>
 8006f00:	6106      	str	r6, [r0, #16]
 8006f02:	e7c5      	b.n	8006e90 <__mdiff+0x24>
 8006f04:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006f08:	fa1e f381 	uxtah	r3, lr, r1
 8006f0c:	141a      	asrs	r2, r3, #16
 8006f0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006f18:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8006f1c:	f845 3b04 	str.w	r3, [r5], #4
 8006f20:	e7e9      	b.n	8006ef6 <__mdiff+0x8a>
 8006f22:	3e01      	subs	r6, #1
 8006f24:	e7e9      	b.n	8006efa <__mdiff+0x8e>

08006f26 <__d2b>:
 8006f26:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f2a:	460e      	mov	r6, r1
 8006f2c:	2101      	movs	r1, #1
 8006f2e:	ec59 8b10 	vmov	r8, r9, d0
 8006f32:	4615      	mov	r5, r2
 8006f34:	f7ff fd6a 	bl	8006a0c <_Balloc>
 8006f38:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006f3c:	4607      	mov	r7, r0
 8006f3e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f42:	bb34      	cbnz	r4, 8006f92 <__d2b+0x6c>
 8006f44:	9301      	str	r3, [sp, #4]
 8006f46:	f1b8 0300 	subs.w	r3, r8, #0
 8006f4a:	d027      	beq.n	8006f9c <__d2b+0x76>
 8006f4c:	a802      	add	r0, sp, #8
 8006f4e:	f840 3d08 	str.w	r3, [r0, #-8]!
 8006f52:	f7ff fe00 	bl	8006b56 <__lo0bits>
 8006f56:	9900      	ldr	r1, [sp, #0]
 8006f58:	b1f0      	cbz	r0, 8006f98 <__d2b+0x72>
 8006f5a:	9a01      	ldr	r2, [sp, #4]
 8006f5c:	f1c0 0320 	rsb	r3, r0, #32
 8006f60:	fa02 f303 	lsl.w	r3, r2, r3
 8006f64:	430b      	orrs	r3, r1
 8006f66:	40c2      	lsrs	r2, r0
 8006f68:	617b      	str	r3, [r7, #20]
 8006f6a:	9201      	str	r2, [sp, #4]
 8006f6c:	9b01      	ldr	r3, [sp, #4]
 8006f6e:	61bb      	str	r3, [r7, #24]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	bf14      	ite	ne
 8006f74:	2102      	movne	r1, #2
 8006f76:	2101      	moveq	r1, #1
 8006f78:	6139      	str	r1, [r7, #16]
 8006f7a:	b1c4      	cbz	r4, 8006fae <__d2b+0x88>
 8006f7c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8006f80:	4404      	add	r4, r0
 8006f82:	6034      	str	r4, [r6, #0]
 8006f84:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006f88:	6028      	str	r0, [r5, #0]
 8006f8a:	4638      	mov	r0, r7
 8006f8c:	b003      	add	sp, #12
 8006f8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006f96:	e7d5      	b.n	8006f44 <__d2b+0x1e>
 8006f98:	6179      	str	r1, [r7, #20]
 8006f9a:	e7e7      	b.n	8006f6c <__d2b+0x46>
 8006f9c:	a801      	add	r0, sp, #4
 8006f9e:	f7ff fdda 	bl	8006b56 <__lo0bits>
 8006fa2:	9b01      	ldr	r3, [sp, #4]
 8006fa4:	617b      	str	r3, [r7, #20]
 8006fa6:	2101      	movs	r1, #1
 8006fa8:	6139      	str	r1, [r7, #16]
 8006faa:	3020      	adds	r0, #32
 8006fac:	e7e5      	b.n	8006f7a <__d2b+0x54>
 8006fae:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006fb2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006fb6:	6030      	str	r0, [r6, #0]
 8006fb8:	6918      	ldr	r0, [r3, #16]
 8006fba:	f7ff fdad 	bl	8006b18 <__hi0bits>
 8006fbe:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006fc2:	e7e1      	b.n	8006f88 <__d2b+0x62>

08006fc4 <_calloc_r>:
 8006fc4:	b538      	push	{r3, r4, r5, lr}
 8006fc6:	fb02 f401 	mul.w	r4, r2, r1
 8006fca:	4621      	mov	r1, r4
 8006fcc:	f000 f808 	bl	8006fe0 <_malloc_r>
 8006fd0:	4605      	mov	r5, r0
 8006fd2:	b118      	cbz	r0, 8006fdc <_calloc_r+0x18>
 8006fd4:	4622      	mov	r2, r4
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	f7fe fb6b 	bl	80056b2 <memset>
 8006fdc:	4628      	mov	r0, r5
 8006fde:	bd38      	pop	{r3, r4, r5, pc}

08006fe0 <_malloc_r>:
 8006fe0:	b570      	push	{r4, r5, r6, lr}
 8006fe2:	1ccd      	adds	r5, r1, #3
 8006fe4:	f025 0503 	bic.w	r5, r5, #3
 8006fe8:	3508      	adds	r5, #8
 8006fea:	2d0c      	cmp	r5, #12
 8006fec:	bf38      	it	cc
 8006fee:	250c      	movcc	r5, #12
 8006ff0:	2d00      	cmp	r5, #0
 8006ff2:	4606      	mov	r6, r0
 8006ff4:	db01      	blt.n	8006ffa <_malloc_r+0x1a>
 8006ff6:	42a9      	cmp	r1, r5
 8006ff8:	d903      	bls.n	8007002 <_malloc_r+0x22>
 8006ffa:	230c      	movs	r3, #12
 8006ffc:	6033      	str	r3, [r6, #0]
 8006ffe:	2000      	movs	r0, #0
 8007000:	bd70      	pop	{r4, r5, r6, pc}
 8007002:	f000 f869 	bl	80070d8 <__malloc_lock>
 8007006:	4a21      	ldr	r2, [pc, #132]	; (800708c <_malloc_r+0xac>)
 8007008:	6814      	ldr	r4, [r2, #0]
 800700a:	4621      	mov	r1, r4
 800700c:	b991      	cbnz	r1, 8007034 <_malloc_r+0x54>
 800700e:	4c20      	ldr	r4, [pc, #128]	; (8007090 <_malloc_r+0xb0>)
 8007010:	6823      	ldr	r3, [r4, #0]
 8007012:	b91b      	cbnz	r3, 800701c <_malloc_r+0x3c>
 8007014:	4630      	mov	r0, r6
 8007016:	f000 f83d 	bl	8007094 <_sbrk_r>
 800701a:	6020      	str	r0, [r4, #0]
 800701c:	4629      	mov	r1, r5
 800701e:	4630      	mov	r0, r6
 8007020:	f000 f838 	bl	8007094 <_sbrk_r>
 8007024:	1c43      	adds	r3, r0, #1
 8007026:	d124      	bne.n	8007072 <_malloc_r+0x92>
 8007028:	230c      	movs	r3, #12
 800702a:	6033      	str	r3, [r6, #0]
 800702c:	4630      	mov	r0, r6
 800702e:	f000 f854 	bl	80070da <__malloc_unlock>
 8007032:	e7e4      	b.n	8006ffe <_malloc_r+0x1e>
 8007034:	680b      	ldr	r3, [r1, #0]
 8007036:	1b5b      	subs	r3, r3, r5
 8007038:	d418      	bmi.n	800706c <_malloc_r+0x8c>
 800703a:	2b0b      	cmp	r3, #11
 800703c:	d90f      	bls.n	800705e <_malloc_r+0x7e>
 800703e:	600b      	str	r3, [r1, #0]
 8007040:	50cd      	str	r5, [r1, r3]
 8007042:	18cc      	adds	r4, r1, r3
 8007044:	4630      	mov	r0, r6
 8007046:	f000 f848 	bl	80070da <__malloc_unlock>
 800704a:	f104 000b 	add.w	r0, r4, #11
 800704e:	1d23      	adds	r3, r4, #4
 8007050:	f020 0007 	bic.w	r0, r0, #7
 8007054:	1ac3      	subs	r3, r0, r3
 8007056:	d0d3      	beq.n	8007000 <_malloc_r+0x20>
 8007058:	425a      	negs	r2, r3
 800705a:	50e2      	str	r2, [r4, r3]
 800705c:	e7d0      	b.n	8007000 <_malloc_r+0x20>
 800705e:	428c      	cmp	r4, r1
 8007060:	684b      	ldr	r3, [r1, #4]
 8007062:	bf16      	itet	ne
 8007064:	6063      	strne	r3, [r4, #4]
 8007066:	6013      	streq	r3, [r2, #0]
 8007068:	460c      	movne	r4, r1
 800706a:	e7eb      	b.n	8007044 <_malloc_r+0x64>
 800706c:	460c      	mov	r4, r1
 800706e:	6849      	ldr	r1, [r1, #4]
 8007070:	e7cc      	b.n	800700c <_malloc_r+0x2c>
 8007072:	1cc4      	adds	r4, r0, #3
 8007074:	f024 0403 	bic.w	r4, r4, #3
 8007078:	42a0      	cmp	r0, r4
 800707a:	d005      	beq.n	8007088 <_malloc_r+0xa8>
 800707c:	1a21      	subs	r1, r4, r0
 800707e:	4630      	mov	r0, r6
 8007080:	f000 f808 	bl	8007094 <_sbrk_r>
 8007084:	3001      	adds	r0, #1
 8007086:	d0cf      	beq.n	8007028 <_malloc_r+0x48>
 8007088:	6025      	str	r5, [r4, #0]
 800708a:	e7db      	b.n	8007044 <_malloc_r+0x64>
 800708c:	2000020c 	.word	0x2000020c
 8007090:	20000210 	.word	0x20000210

08007094 <_sbrk_r>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4c06      	ldr	r4, [pc, #24]	; (80070b0 <_sbrk_r+0x1c>)
 8007098:	2300      	movs	r3, #0
 800709a:	4605      	mov	r5, r0
 800709c:	4608      	mov	r0, r1
 800709e:	6023      	str	r3, [r4, #0]
 80070a0:	f7fb f870 	bl	8002184 <_sbrk>
 80070a4:	1c43      	adds	r3, r0, #1
 80070a6:	d102      	bne.n	80070ae <_sbrk_r+0x1a>
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	b103      	cbz	r3, 80070ae <_sbrk_r+0x1a>
 80070ac:	602b      	str	r3, [r5, #0]
 80070ae:	bd38      	pop	{r3, r4, r5, pc}
 80070b0:	20038804 	.word	0x20038804

080070b4 <__ascii_mbtowc>:
 80070b4:	b082      	sub	sp, #8
 80070b6:	b901      	cbnz	r1, 80070ba <__ascii_mbtowc+0x6>
 80070b8:	a901      	add	r1, sp, #4
 80070ba:	b142      	cbz	r2, 80070ce <__ascii_mbtowc+0x1a>
 80070bc:	b14b      	cbz	r3, 80070d2 <__ascii_mbtowc+0x1e>
 80070be:	7813      	ldrb	r3, [r2, #0]
 80070c0:	600b      	str	r3, [r1, #0]
 80070c2:	7812      	ldrb	r2, [r2, #0]
 80070c4:	1c10      	adds	r0, r2, #0
 80070c6:	bf18      	it	ne
 80070c8:	2001      	movne	r0, #1
 80070ca:	b002      	add	sp, #8
 80070cc:	4770      	bx	lr
 80070ce:	4610      	mov	r0, r2
 80070d0:	e7fb      	b.n	80070ca <__ascii_mbtowc+0x16>
 80070d2:	f06f 0001 	mvn.w	r0, #1
 80070d6:	e7f8      	b.n	80070ca <__ascii_mbtowc+0x16>

080070d8 <__malloc_lock>:
 80070d8:	4770      	bx	lr

080070da <__malloc_unlock>:
 80070da:	4770      	bx	lr

080070dc <__ascii_wctomb>:
 80070dc:	b149      	cbz	r1, 80070f2 <__ascii_wctomb+0x16>
 80070de:	2aff      	cmp	r2, #255	; 0xff
 80070e0:	bf85      	ittet	hi
 80070e2:	238a      	movhi	r3, #138	; 0x8a
 80070e4:	6003      	strhi	r3, [r0, #0]
 80070e6:	700a      	strbls	r2, [r1, #0]
 80070e8:	f04f 30ff 	movhi.w	r0, #4294967295
 80070ec:	bf98      	it	ls
 80070ee:	2001      	movls	r0, #1
 80070f0:	4770      	bx	lr
 80070f2:	4608      	mov	r0, r1
 80070f4:	4770      	bx	lr
	...

080070f8 <floor>:
 80070f8:	ec51 0b10 	vmov	r0, r1, d0
 80070fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007100:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007104:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007108:	2e13      	cmp	r6, #19
 800710a:	460c      	mov	r4, r1
 800710c:	ee10 5a10 	vmov	r5, s0
 8007110:	4680      	mov	r8, r0
 8007112:	dc34      	bgt.n	800717e <floor+0x86>
 8007114:	2e00      	cmp	r6, #0
 8007116:	da16      	bge.n	8007146 <floor+0x4e>
 8007118:	a335      	add	r3, pc, #212	; (adr r3, 80071f0 <floor+0xf8>)
 800711a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711e:	f7f9 f881 	bl	8000224 <__adddf3>
 8007122:	2200      	movs	r2, #0
 8007124:	2300      	movs	r3, #0
 8007126:	f7f9 fcc3 	bl	8000ab0 <__aeabi_dcmpgt>
 800712a:	b148      	cbz	r0, 8007140 <floor+0x48>
 800712c:	2c00      	cmp	r4, #0
 800712e:	da59      	bge.n	80071e4 <floor+0xec>
 8007130:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007134:	4a30      	ldr	r2, [pc, #192]	; (80071f8 <floor+0x100>)
 8007136:	432b      	orrs	r3, r5
 8007138:	2500      	movs	r5, #0
 800713a:	42ab      	cmp	r3, r5
 800713c:	bf18      	it	ne
 800713e:	4614      	movne	r4, r2
 8007140:	4621      	mov	r1, r4
 8007142:	4628      	mov	r0, r5
 8007144:	e025      	b.n	8007192 <floor+0x9a>
 8007146:	4f2d      	ldr	r7, [pc, #180]	; (80071fc <floor+0x104>)
 8007148:	4137      	asrs	r7, r6
 800714a:	ea01 0307 	and.w	r3, r1, r7
 800714e:	4303      	orrs	r3, r0
 8007150:	d01f      	beq.n	8007192 <floor+0x9a>
 8007152:	a327      	add	r3, pc, #156	; (adr r3, 80071f0 <floor+0xf8>)
 8007154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007158:	f7f9 f864 	bl	8000224 <__adddf3>
 800715c:	2200      	movs	r2, #0
 800715e:	2300      	movs	r3, #0
 8007160:	f7f9 fca6 	bl	8000ab0 <__aeabi_dcmpgt>
 8007164:	2800      	cmp	r0, #0
 8007166:	d0eb      	beq.n	8007140 <floor+0x48>
 8007168:	2c00      	cmp	r4, #0
 800716a:	bfbe      	ittt	lt
 800716c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007170:	fa43 f606 	asrlt.w	r6, r3, r6
 8007174:	19a4      	addlt	r4, r4, r6
 8007176:	ea24 0407 	bic.w	r4, r4, r7
 800717a:	2500      	movs	r5, #0
 800717c:	e7e0      	b.n	8007140 <floor+0x48>
 800717e:	2e33      	cmp	r6, #51	; 0x33
 8007180:	dd0b      	ble.n	800719a <floor+0xa2>
 8007182:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007186:	d104      	bne.n	8007192 <floor+0x9a>
 8007188:	ee10 2a10 	vmov	r2, s0
 800718c:	460b      	mov	r3, r1
 800718e:	f7f9 f849 	bl	8000224 <__adddf3>
 8007192:	ec41 0b10 	vmov	d0, r0, r1
 8007196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800719a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800719e:	f04f 33ff 	mov.w	r3, #4294967295
 80071a2:	fa23 f707 	lsr.w	r7, r3, r7
 80071a6:	4207      	tst	r7, r0
 80071a8:	d0f3      	beq.n	8007192 <floor+0x9a>
 80071aa:	a311      	add	r3, pc, #68	; (adr r3, 80071f0 <floor+0xf8>)
 80071ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b0:	f7f9 f838 	bl	8000224 <__adddf3>
 80071b4:	2200      	movs	r2, #0
 80071b6:	2300      	movs	r3, #0
 80071b8:	f7f9 fc7a 	bl	8000ab0 <__aeabi_dcmpgt>
 80071bc:	2800      	cmp	r0, #0
 80071be:	d0bf      	beq.n	8007140 <floor+0x48>
 80071c0:	2c00      	cmp	r4, #0
 80071c2:	da02      	bge.n	80071ca <floor+0xd2>
 80071c4:	2e14      	cmp	r6, #20
 80071c6:	d103      	bne.n	80071d0 <floor+0xd8>
 80071c8:	3401      	adds	r4, #1
 80071ca:	ea25 0507 	bic.w	r5, r5, r7
 80071ce:	e7b7      	b.n	8007140 <floor+0x48>
 80071d0:	2301      	movs	r3, #1
 80071d2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80071d6:	fa03 f606 	lsl.w	r6, r3, r6
 80071da:	4435      	add	r5, r6
 80071dc:	4545      	cmp	r5, r8
 80071de:	bf38      	it	cc
 80071e0:	18e4      	addcc	r4, r4, r3
 80071e2:	e7f2      	b.n	80071ca <floor+0xd2>
 80071e4:	2500      	movs	r5, #0
 80071e6:	462c      	mov	r4, r5
 80071e8:	e7aa      	b.n	8007140 <floor+0x48>
 80071ea:	bf00      	nop
 80071ec:	f3af 8000 	nop.w
 80071f0:	8800759c 	.word	0x8800759c
 80071f4:	7e37e43c 	.word	0x7e37e43c
 80071f8:	bff00000 	.word	0xbff00000
 80071fc:	000fffff 	.word	0x000fffff

08007200 <sin>:
 8007200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007202:	ec51 0b10 	vmov	r0, r1, d0
 8007206:	4a20      	ldr	r2, [pc, #128]	; (8007288 <sin+0x88>)
 8007208:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800720c:	4293      	cmp	r3, r2
 800720e:	dc07      	bgt.n	8007220 <sin+0x20>
 8007210:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8007280 <sin+0x80>
 8007214:	2000      	movs	r0, #0
 8007216:	f000 fe37 	bl	8007e88 <__kernel_sin>
 800721a:	ec51 0b10 	vmov	r0, r1, d0
 800721e:	e007      	b.n	8007230 <sin+0x30>
 8007220:	4a1a      	ldr	r2, [pc, #104]	; (800728c <sin+0x8c>)
 8007222:	4293      	cmp	r3, r2
 8007224:	dd09      	ble.n	800723a <sin+0x3a>
 8007226:	ee10 2a10 	vmov	r2, s0
 800722a:	460b      	mov	r3, r1
 800722c:	f7f8 fff8 	bl	8000220 <__aeabi_dsub>
 8007230:	ec41 0b10 	vmov	d0, r0, r1
 8007234:	b005      	add	sp, #20
 8007236:	f85d fb04 	ldr.w	pc, [sp], #4
 800723a:	4668      	mov	r0, sp
 800723c:	f000 f828 	bl	8007290 <__ieee754_rem_pio2>
 8007240:	f000 0003 	and.w	r0, r0, #3
 8007244:	2801      	cmp	r0, #1
 8007246:	ed9d 1b02 	vldr	d1, [sp, #8]
 800724a:	ed9d 0b00 	vldr	d0, [sp]
 800724e:	d004      	beq.n	800725a <sin+0x5a>
 8007250:	2802      	cmp	r0, #2
 8007252:	d005      	beq.n	8007260 <sin+0x60>
 8007254:	b970      	cbnz	r0, 8007274 <sin+0x74>
 8007256:	2001      	movs	r0, #1
 8007258:	e7dd      	b.n	8007216 <sin+0x16>
 800725a:	f000 fa0d 	bl	8007678 <__kernel_cos>
 800725e:	e7dc      	b.n	800721a <sin+0x1a>
 8007260:	2001      	movs	r0, #1
 8007262:	f000 fe11 	bl	8007e88 <__kernel_sin>
 8007266:	ec53 2b10 	vmov	r2, r3, d0
 800726a:	ee10 0a10 	vmov	r0, s0
 800726e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007272:	e7dd      	b.n	8007230 <sin+0x30>
 8007274:	f000 fa00 	bl	8007678 <__kernel_cos>
 8007278:	e7f5      	b.n	8007266 <sin+0x66>
 800727a:	bf00      	nop
 800727c:	f3af 8000 	nop.w
	...
 8007288:	3fe921fb 	.word	0x3fe921fb
 800728c:	7fefffff 	.word	0x7fefffff

08007290 <__ieee754_rem_pio2>:
 8007290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007294:	ec57 6b10 	vmov	r6, r7, d0
 8007298:	4bc3      	ldr	r3, [pc, #780]	; (80075a8 <__ieee754_rem_pio2+0x318>)
 800729a:	b08d      	sub	sp, #52	; 0x34
 800729c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80072a0:	4598      	cmp	r8, r3
 80072a2:	4604      	mov	r4, r0
 80072a4:	9704      	str	r7, [sp, #16]
 80072a6:	dc07      	bgt.n	80072b8 <__ieee754_rem_pio2+0x28>
 80072a8:	2200      	movs	r2, #0
 80072aa:	2300      	movs	r3, #0
 80072ac:	ed84 0b00 	vstr	d0, [r4]
 80072b0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80072b4:	2500      	movs	r5, #0
 80072b6:	e027      	b.n	8007308 <__ieee754_rem_pio2+0x78>
 80072b8:	4bbc      	ldr	r3, [pc, #752]	; (80075ac <__ieee754_rem_pio2+0x31c>)
 80072ba:	4598      	cmp	r8, r3
 80072bc:	dc75      	bgt.n	80073aa <__ieee754_rem_pio2+0x11a>
 80072be:	9b04      	ldr	r3, [sp, #16]
 80072c0:	4dbb      	ldr	r5, [pc, #748]	; (80075b0 <__ieee754_rem_pio2+0x320>)
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	ee10 0a10 	vmov	r0, s0
 80072c8:	a3a9      	add	r3, pc, #676	; (adr r3, 8007570 <__ieee754_rem_pio2+0x2e0>)
 80072ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ce:	4639      	mov	r1, r7
 80072d0:	dd36      	ble.n	8007340 <__ieee754_rem_pio2+0xb0>
 80072d2:	f7f8 ffa5 	bl	8000220 <__aeabi_dsub>
 80072d6:	45a8      	cmp	r8, r5
 80072d8:	4606      	mov	r6, r0
 80072da:	460f      	mov	r7, r1
 80072dc:	d018      	beq.n	8007310 <__ieee754_rem_pio2+0x80>
 80072de:	a3a6      	add	r3, pc, #664	; (adr r3, 8007578 <__ieee754_rem_pio2+0x2e8>)
 80072e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e4:	f7f8 ff9c 	bl	8000220 <__aeabi_dsub>
 80072e8:	4602      	mov	r2, r0
 80072ea:	460b      	mov	r3, r1
 80072ec:	e9c4 2300 	strd	r2, r3, [r4]
 80072f0:	4630      	mov	r0, r6
 80072f2:	4639      	mov	r1, r7
 80072f4:	f7f8 ff94 	bl	8000220 <__aeabi_dsub>
 80072f8:	a39f      	add	r3, pc, #636	; (adr r3, 8007578 <__ieee754_rem_pio2+0x2e8>)
 80072fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fe:	f7f8 ff8f 	bl	8000220 <__aeabi_dsub>
 8007302:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007306:	2501      	movs	r5, #1
 8007308:	4628      	mov	r0, r5
 800730a:	b00d      	add	sp, #52	; 0x34
 800730c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007310:	a39b      	add	r3, pc, #620	; (adr r3, 8007580 <__ieee754_rem_pio2+0x2f0>)
 8007312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007316:	f7f8 ff83 	bl	8000220 <__aeabi_dsub>
 800731a:	a39b      	add	r3, pc, #620	; (adr r3, 8007588 <__ieee754_rem_pio2+0x2f8>)
 800731c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007320:	4606      	mov	r6, r0
 8007322:	460f      	mov	r7, r1
 8007324:	f7f8 ff7c 	bl	8000220 <__aeabi_dsub>
 8007328:	4602      	mov	r2, r0
 800732a:	460b      	mov	r3, r1
 800732c:	e9c4 2300 	strd	r2, r3, [r4]
 8007330:	4630      	mov	r0, r6
 8007332:	4639      	mov	r1, r7
 8007334:	f7f8 ff74 	bl	8000220 <__aeabi_dsub>
 8007338:	a393      	add	r3, pc, #588	; (adr r3, 8007588 <__ieee754_rem_pio2+0x2f8>)
 800733a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800733e:	e7de      	b.n	80072fe <__ieee754_rem_pio2+0x6e>
 8007340:	f7f8 ff70 	bl	8000224 <__adddf3>
 8007344:	45a8      	cmp	r8, r5
 8007346:	4606      	mov	r6, r0
 8007348:	460f      	mov	r7, r1
 800734a:	d016      	beq.n	800737a <__ieee754_rem_pio2+0xea>
 800734c:	a38a      	add	r3, pc, #552	; (adr r3, 8007578 <__ieee754_rem_pio2+0x2e8>)
 800734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007352:	f7f8 ff67 	bl	8000224 <__adddf3>
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	e9c4 2300 	strd	r2, r3, [r4]
 800735e:	4630      	mov	r0, r6
 8007360:	4639      	mov	r1, r7
 8007362:	f7f8 ff5d 	bl	8000220 <__aeabi_dsub>
 8007366:	a384      	add	r3, pc, #528	; (adr r3, 8007578 <__ieee754_rem_pio2+0x2e8>)
 8007368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800736c:	f7f8 ff5a 	bl	8000224 <__adddf3>
 8007370:	f04f 35ff 	mov.w	r5, #4294967295
 8007374:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007378:	e7c6      	b.n	8007308 <__ieee754_rem_pio2+0x78>
 800737a:	a381      	add	r3, pc, #516	; (adr r3, 8007580 <__ieee754_rem_pio2+0x2f0>)
 800737c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007380:	f7f8 ff50 	bl	8000224 <__adddf3>
 8007384:	a380      	add	r3, pc, #512	; (adr r3, 8007588 <__ieee754_rem_pio2+0x2f8>)
 8007386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800738a:	4606      	mov	r6, r0
 800738c:	460f      	mov	r7, r1
 800738e:	f7f8 ff49 	bl	8000224 <__adddf3>
 8007392:	4602      	mov	r2, r0
 8007394:	460b      	mov	r3, r1
 8007396:	e9c4 2300 	strd	r2, r3, [r4]
 800739a:	4630      	mov	r0, r6
 800739c:	4639      	mov	r1, r7
 800739e:	f7f8 ff3f 	bl	8000220 <__aeabi_dsub>
 80073a2:	a379      	add	r3, pc, #484	; (adr r3, 8007588 <__ieee754_rem_pio2+0x2f8>)
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	e7e0      	b.n	800736c <__ieee754_rem_pio2+0xdc>
 80073aa:	4b82      	ldr	r3, [pc, #520]	; (80075b4 <__ieee754_rem_pio2+0x324>)
 80073ac:	4598      	cmp	r8, r3
 80073ae:	f300 80d0 	bgt.w	8007552 <__ieee754_rem_pio2+0x2c2>
 80073b2:	f000 fe23 	bl	8007ffc <fabs>
 80073b6:	ec57 6b10 	vmov	r6, r7, d0
 80073ba:	ee10 0a10 	vmov	r0, s0
 80073be:	a374      	add	r3, pc, #464	; (adr r3, 8007590 <__ieee754_rem_pio2+0x300>)
 80073c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c4:	4639      	mov	r1, r7
 80073c6:	f7f9 f8e3 	bl	8000590 <__aeabi_dmul>
 80073ca:	2200      	movs	r2, #0
 80073cc:	4b7a      	ldr	r3, [pc, #488]	; (80075b8 <__ieee754_rem_pio2+0x328>)
 80073ce:	f7f8 ff29 	bl	8000224 <__adddf3>
 80073d2:	f7f9 fb8d 	bl	8000af0 <__aeabi_d2iz>
 80073d6:	4605      	mov	r5, r0
 80073d8:	f7f9 f870 	bl	80004bc <__aeabi_i2d>
 80073dc:	a364      	add	r3, pc, #400	; (adr r3, 8007570 <__ieee754_rem_pio2+0x2e0>)
 80073de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073e6:	f7f9 f8d3 	bl	8000590 <__aeabi_dmul>
 80073ea:	4602      	mov	r2, r0
 80073ec:	460b      	mov	r3, r1
 80073ee:	4630      	mov	r0, r6
 80073f0:	4639      	mov	r1, r7
 80073f2:	f7f8 ff15 	bl	8000220 <__aeabi_dsub>
 80073f6:	a360      	add	r3, pc, #384	; (adr r3, 8007578 <__ieee754_rem_pio2+0x2e8>)
 80073f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fc:	4682      	mov	sl, r0
 80073fe:	468b      	mov	fp, r1
 8007400:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007404:	f7f9 f8c4 	bl	8000590 <__aeabi_dmul>
 8007408:	2d1f      	cmp	r5, #31
 800740a:	4606      	mov	r6, r0
 800740c:	460f      	mov	r7, r1
 800740e:	dc0c      	bgt.n	800742a <__ieee754_rem_pio2+0x19a>
 8007410:	1e6a      	subs	r2, r5, #1
 8007412:	4b6a      	ldr	r3, [pc, #424]	; (80075bc <__ieee754_rem_pio2+0x32c>)
 8007414:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007418:	4543      	cmp	r3, r8
 800741a:	d006      	beq.n	800742a <__ieee754_rem_pio2+0x19a>
 800741c:	4632      	mov	r2, r6
 800741e:	463b      	mov	r3, r7
 8007420:	4650      	mov	r0, sl
 8007422:	4659      	mov	r1, fp
 8007424:	f7f8 fefc 	bl	8000220 <__aeabi_dsub>
 8007428:	e00e      	b.n	8007448 <__ieee754_rem_pio2+0x1b8>
 800742a:	4632      	mov	r2, r6
 800742c:	463b      	mov	r3, r7
 800742e:	4650      	mov	r0, sl
 8007430:	4659      	mov	r1, fp
 8007432:	f7f8 fef5 	bl	8000220 <__aeabi_dsub>
 8007436:	ea4f 5328 	mov.w	r3, r8, asr #20
 800743a:	9305      	str	r3, [sp, #20]
 800743c:	9a05      	ldr	r2, [sp, #20]
 800743e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	2b10      	cmp	r3, #16
 8007446:	dc02      	bgt.n	800744e <__ieee754_rem_pio2+0x1be>
 8007448:	e9c4 0100 	strd	r0, r1, [r4]
 800744c:	e039      	b.n	80074c2 <__ieee754_rem_pio2+0x232>
 800744e:	a34c      	add	r3, pc, #304	; (adr r3, 8007580 <__ieee754_rem_pio2+0x2f0>)
 8007450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007454:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007458:	f7f9 f89a 	bl	8000590 <__aeabi_dmul>
 800745c:	4606      	mov	r6, r0
 800745e:	460f      	mov	r7, r1
 8007460:	4602      	mov	r2, r0
 8007462:	460b      	mov	r3, r1
 8007464:	4650      	mov	r0, sl
 8007466:	4659      	mov	r1, fp
 8007468:	f7f8 feda 	bl	8000220 <__aeabi_dsub>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	4680      	mov	r8, r0
 8007472:	4689      	mov	r9, r1
 8007474:	4650      	mov	r0, sl
 8007476:	4659      	mov	r1, fp
 8007478:	f7f8 fed2 	bl	8000220 <__aeabi_dsub>
 800747c:	4632      	mov	r2, r6
 800747e:	463b      	mov	r3, r7
 8007480:	f7f8 fece 	bl	8000220 <__aeabi_dsub>
 8007484:	a340      	add	r3, pc, #256	; (adr r3, 8007588 <__ieee754_rem_pio2+0x2f8>)
 8007486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800748a:	4606      	mov	r6, r0
 800748c:	460f      	mov	r7, r1
 800748e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007492:	f7f9 f87d 	bl	8000590 <__aeabi_dmul>
 8007496:	4632      	mov	r2, r6
 8007498:	463b      	mov	r3, r7
 800749a:	f7f8 fec1 	bl	8000220 <__aeabi_dsub>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4606      	mov	r6, r0
 80074a4:	460f      	mov	r7, r1
 80074a6:	4640      	mov	r0, r8
 80074a8:	4649      	mov	r1, r9
 80074aa:	f7f8 feb9 	bl	8000220 <__aeabi_dsub>
 80074ae:	9a05      	ldr	r2, [sp, #20]
 80074b0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80074b4:	1ad3      	subs	r3, r2, r3
 80074b6:	2b31      	cmp	r3, #49	; 0x31
 80074b8:	dc20      	bgt.n	80074fc <__ieee754_rem_pio2+0x26c>
 80074ba:	e9c4 0100 	strd	r0, r1, [r4]
 80074be:	46c2      	mov	sl, r8
 80074c0:	46cb      	mov	fp, r9
 80074c2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80074c6:	4650      	mov	r0, sl
 80074c8:	4642      	mov	r2, r8
 80074ca:	464b      	mov	r3, r9
 80074cc:	4659      	mov	r1, fp
 80074ce:	f7f8 fea7 	bl	8000220 <__aeabi_dsub>
 80074d2:	463b      	mov	r3, r7
 80074d4:	4632      	mov	r2, r6
 80074d6:	f7f8 fea3 	bl	8000220 <__aeabi_dsub>
 80074da:	9b04      	ldr	r3, [sp, #16]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80074e2:	f6bf af11 	bge.w	8007308 <__ieee754_rem_pio2+0x78>
 80074e6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80074ea:	6063      	str	r3, [r4, #4]
 80074ec:	f8c4 8000 	str.w	r8, [r4]
 80074f0:	60a0      	str	r0, [r4, #8]
 80074f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80074f6:	60e3      	str	r3, [r4, #12]
 80074f8:	426d      	negs	r5, r5
 80074fa:	e705      	b.n	8007308 <__ieee754_rem_pio2+0x78>
 80074fc:	a326      	add	r3, pc, #152	; (adr r3, 8007598 <__ieee754_rem_pio2+0x308>)
 80074fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007502:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007506:	f7f9 f843 	bl	8000590 <__aeabi_dmul>
 800750a:	4606      	mov	r6, r0
 800750c:	460f      	mov	r7, r1
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	4640      	mov	r0, r8
 8007514:	4649      	mov	r1, r9
 8007516:	f7f8 fe83 	bl	8000220 <__aeabi_dsub>
 800751a:	4602      	mov	r2, r0
 800751c:	460b      	mov	r3, r1
 800751e:	4682      	mov	sl, r0
 8007520:	468b      	mov	fp, r1
 8007522:	4640      	mov	r0, r8
 8007524:	4649      	mov	r1, r9
 8007526:	f7f8 fe7b 	bl	8000220 <__aeabi_dsub>
 800752a:	4632      	mov	r2, r6
 800752c:	463b      	mov	r3, r7
 800752e:	f7f8 fe77 	bl	8000220 <__aeabi_dsub>
 8007532:	a31b      	add	r3, pc, #108	; (adr r3, 80075a0 <__ieee754_rem_pio2+0x310>)
 8007534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007538:	4606      	mov	r6, r0
 800753a:	460f      	mov	r7, r1
 800753c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007540:	f7f9 f826 	bl	8000590 <__aeabi_dmul>
 8007544:	4632      	mov	r2, r6
 8007546:	463b      	mov	r3, r7
 8007548:	f7f8 fe6a 	bl	8000220 <__aeabi_dsub>
 800754c:	4606      	mov	r6, r0
 800754e:	460f      	mov	r7, r1
 8007550:	e764      	b.n	800741c <__ieee754_rem_pio2+0x18c>
 8007552:	4b1b      	ldr	r3, [pc, #108]	; (80075c0 <__ieee754_rem_pio2+0x330>)
 8007554:	4598      	cmp	r8, r3
 8007556:	dd35      	ble.n	80075c4 <__ieee754_rem_pio2+0x334>
 8007558:	ee10 2a10 	vmov	r2, s0
 800755c:	463b      	mov	r3, r7
 800755e:	4630      	mov	r0, r6
 8007560:	4639      	mov	r1, r7
 8007562:	f7f8 fe5d 	bl	8000220 <__aeabi_dsub>
 8007566:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800756a:	e9c4 0100 	strd	r0, r1, [r4]
 800756e:	e6a1      	b.n	80072b4 <__ieee754_rem_pio2+0x24>
 8007570:	54400000 	.word	0x54400000
 8007574:	3ff921fb 	.word	0x3ff921fb
 8007578:	1a626331 	.word	0x1a626331
 800757c:	3dd0b461 	.word	0x3dd0b461
 8007580:	1a600000 	.word	0x1a600000
 8007584:	3dd0b461 	.word	0x3dd0b461
 8007588:	2e037073 	.word	0x2e037073
 800758c:	3ba3198a 	.word	0x3ba3198a
 8007590:	6dc9c883 	.word	0x6dc9c883
 8007594:	3fe45f30 	.word	0x3fe45f30
 8007598:	2e000000 	.word	0x2e000000
 800759c:	3ba3198a 	.word	0x3ba3198a
 80075a0:	252049c1 	.word	0x252049c1
 80075a4:	397b839a 	.word	0x397b839a
 80075a8:	3fe921fb 	.word	0x3fe921fb
 80075ac:	4002d97b 	.word	0x4002d97b
 80075b0:	3ff921fb 	.word	0x3ff921fb
 80075b4:	413921fb 	.word	0x413921fb
 80075b8:	3fe00000 	.word	0x3fe00000
 80075bc:	08008380 	.word	0x08008380
 80075c0:	7fefffff 	.word	0x7fefffff
 80075c4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80075c8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80075cc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80075d0:	4630      	mov	r0, r6
 80075d2:	460f      	mov	r7, r1
 80075d4:	f7f9 fa8c 	bl	8000af0 <__aeabi_d2iz>
 80075d8:	f7f8 ff70 	bl	80004bc <__aeabi_i2d>
 80075dc:	4602      	mov	r2, r0
 80075de:	460b      	mov	r3, r1
 80075e0:	4630      	mov	r0, r6
 80075e2:	4639      	mov	r1, r7
 80075e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80075e8:	f7f8 fe1a 	bl	8000220 <__aeabi_dsub>
 80075ec:	2200      	movs	r2, #0
 80075ee:	4b1f      	ldr	r3, [pc, #124]	; (800766c <__ieee754_rem_pio2+0x3dc>)
 80075f0:	f7f8 ffce 	bl	8000590 <__aeabi_dmul>
 80075f4:	460f      	mov	r7, r1
 80075f6:	4606      	mov	r6, r0
 80075f8:	f7f9 fa7a 	bl	8000af0 <__aeabi_d2iz>
 80075fc:	f7f8 ff5e 	bl	80004bc <__aeabi_i2d>
 8007600:	4602      	mov	r2, r0
 8007602:	460b      	mov	r3, r1
 8007604:	4630      	mov	r0, r6
 8007606:	4639      	mov	r1, r7
 8007608:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800760c:	f7f8 fe08 	bl	8000220 <__aeabi_dsub>
 8007610:	2200      	movs	r2, #0
 8007612:	4b16      	ldr	r3, [pc, #88]	; (800766c <__ieee754_rem_pio2+0x3dc>)
 8007614:	f7f8 ffbc 	bl	8000590 <__aeabi_dmul>
 8007618:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800761c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8007620:	f04f 0803 	mov.w	r8, #3
 8007624:	2600      	movs	r6, #0
 8007626:	2700      	movs	r7, #0
 8007628:	4632      	mov	r2, r6
 800762a:	463b      	mov	r3, r7
 800762c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007630:	f108 3aff 	add.w	sl, r8, #4294967295
 8007634:	f7f9 fa14 	bl	8000a60 <__aeabi_dcmpeq>
 8007638:	b9b0      	cbnz	r0, 8007668 <__ieee754_rem_pio2+0x3d8>
 800763a:	4b0d      	ldr	r3, [pc, #52]	; (8007670 <__ieee754_rem_pio2+0x3e0>)
 800763c:	9301      	str	r3, [sp, #4]
 800763e:	2302      	movs	r3, #2
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	462a      	mov	r2, r5
 8007644:	4643      	mov	r3, r8
 8007646:	4621      	mov	r1, r4
 8007648:	a806      	add	r0, sp, #24
 800764a:	f000 f8dd 	bl	8007808 <__kernel_rem_pio2>
 800764e:	9b04      	ldr	r3, [sp, #16]
 8007650:	2b00      	cmp	r3, #0
 8007652:	4605      	mov	r5, r0
 8007654:	f6bf ae58 	bge.w	8007308 <__ieee754_rem_pio2+0x78>
 8007658:	6863      	ldr	r3, [r4, #4]
 800765a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800765e:	6063      	str	r3, [r4, #4]
 8007660:	68e3      	ldr	r3, [r4, #12]
 8007662:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007666:	e746      	b.n	80074f6 <__ieee754_rem_pio2+0x266>
 8007668:	46d0      	mov	r8, sl
 800766a:	e7dd      	b.n	8007628 <__ieee754_rem_pio2+0x398>
 800766c:	41700000 	.word	0x41700000
 8007670:	08008400 	.word	0x08008400
 8007674:	00000000 	.word	0x00000000

08007678 <__kernel_cos>:
 8007678:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800767c:	ec59 8b10 	vmov	r8, r9, d0
 8007680:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8007684:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8007688:	ed2d 8b02 	vpush	{d8}
 800768c:	eeb0 8a41 	vmov.f32	s16, s2
 8007690:	eef0 8a61 	vmov.f32	s17, s3
 8007694:	da07      	bge.n	80076a6 <__kernel_cos+0x2e>
 8007696:	ee10 0a10 	vmov	r0, s0
 800769a:	4649      	mov	r1, r9
 800769c:	f7f9 fa28 	bl	8000af0 <__aeabi_d2iz>
 80076a0:	2800      	cmp	r0, #0
 80076a2:	f000 8089 	beq.w	80077b8 <__kernel_cos+0x140>
 80076a6:	4642      	mov	r2, r8
 80076a8:	464b      	mov	r3, r9
 80076aa:	4640      	mov	r0, r8
 80076ac:	4649      	mov	r1, r9
 80076ae:	f7f8 ff6f 	bl	8000590 <__aeabi_dmul>
 80076b2:	2200      	movs	r2, #0
 80076b4:	4b4e      	ldr	r3, [pc, #312]	; (80077f0 <__kernel_cos+0x178>)
 80076b6:	4604      	mov	r4, r0
 80076b8:	460d      	mov	r5, r1
 80076ba:	f7f8 ff69 	bl	8000590 <__aeabi_dmul>
 80076be:	a340      	add	r3, pc, #256	; (adr r3, 80077c0 <__kernel_cos+0x148>)
 80076c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c4:	4682      	mov	sl, r0
 80076c6:	468b      	mov	fp, r1
 80076c8:	4620      	mov	r0, r4
 80076ca:	4629      	mov	r1, r5
 80076cc:	f7f8 ff60 	bl	8000590 <__aeabi_dmul>
 80076d0:	a33d      	add	r3, pc, #244	; (adr r3, 80077c8 <__kernel_cos+0x150>)
 80076d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d6:	f7f8 fda5 	bl	8000224 <__adddf3>
 80076da:	4622      	mov	r2, r4
 80076dc:	462b      	mov	r3, r5
 80076de:	f7f8 ff57 	bl	8000590 <__aeabi_dmul>
 80076e2:	a33b      	add	r3, pc, #236	; (adr r3, 80077d0 <__kernel_cos+0x158>)
 80076e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e8:	f7f8 fd9a 	bl	8000220 <__aeabi_dsub>
 80076ec:	4622      	mov	r2, r4
 80076ee:	462b      	mov	r3, r5
 80076f0:	f7f8 ff4e 	bl	8000590 <__aeabi_dmul>
 80076f4:	a338      	add	r3, pc, #224	; (adr r3, 80077d8 <__kernel_cos+0x160>)
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	f7f8 fd93 	bl	8000224 <__adddf3>
 80076fe:	4622      	mov	r2, r4
 8007700:	462b      	mov	r3, r5
 8007702:	f7f8 ff45 	bl	8000590 <__aeabi_dmul>
 8007706:	a336      	add	r3, pc, #216	; (adr r3, 80077e0 <__kernel_cos+0x168>)
 8007708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770c:	f7f8 fd88 	bl	8000220 <__aeabi_dsub>
 8007710:	4622      	mov	r2, r4
 8007712:	462b      	mov	r3, r5
 8007714:	f7f8 ff3c 	bl	8000590 <__aeabi_dmul>
 8007718:	a333      	add	r3, pc, #204	; (adr r3, 80077e8 <__kernel_cos+0x170>)
 800771a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800771e:	f7f8 fd81 	bl	8000224 <__adddf3>
 8007722:	4622      	mov	r2, r4
 8007724:	462b      	mov	r3, r5
 8007726:	f7f8 ff33 	bl	8000590 <__aeabi_dmul>
 800772a:	4622      	mov	r2, r4
 800772c:	462b      	mov	r3, r5
 800772e:	f7f8 ff2f 	bl	8000590 <__aeabi_dmul>
 8007732:	ec53 2b18 	vmov	r2, r3, d8
 8007736:	4604      	mov	r4, r0
 8007738:	460d      	mov	r5, r1
 800773a:	4640      	mov	r0, r8
 800773c:	4649      	mov	r1, r9
 800773e:	f7f8 ff27 	bl	8000590 <__aeabi_dmul>
 8007742:	460b      	mov	r3, r1
 8007744:	4602      	mov	r2, r0
 8007746:	4629      	mov	r1, r5
 8007748:	4620      	mov	r0, r4
 800774a:	f7f8 fd69 	bl	8000220 <__aeabi_dsub>
 800774e:	4b29      	ldr	r3, [pc, #164]	; (80077f4 <__kernel_cos+0x17c>)
 8007750:	429e      	cmp	r6, r3
 8007752:	4680      	mov	r8, r0
 8007754:	4689      	mov	r9, r1
 8007756:	dc11      	bgt.n	800777c <__kernel_cos+0x104>
 8007758:	4602      	mov	r2, r0
 800775a:	460b      	mov	r3, r1
 800775c:	4650      	mov	r0, sl
 800775e:	4659      	mov	r1, fp
 8007760:	f7f8 fd5e 	bl	8000220 <__aeabi_dsub>
 8007764:	460b      	mov	r3, r1
 8007766:	4924      	ldr	r1, [pc, #144]	; (80077f8 <__kernel_cos+0x180>)
 8007768:	4602      	mov	r2, r0
 800776a:	2000      	movs	r0, #0
 800776c:	f7f8 fd58 	bl	8000220 <__aeabi_dsub>
 8007770:	ecbd 8b02 	vpop	{d8}
 8007774:	ec41 0b10 	vmov	d0, r0, r1
 8007778:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777c:	4b1f      	ldr	r3, [pc, #124]	; (80077fc <__kernel_cos+0x184>)
 800777e:	491e      	ldr	r1, [pc, #120]	; (80077f8 <__kernel_cos+0x180>)
 8007780:	429e      	cmp	r6, r3
 8007782:	bfcc      	ite	gt
 8007784:	4d1e      	ldrgt	r5, [pc, #120]	; (8007800 <__kernel_cos+0x188>)
 8007786:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800778a:	2400      	movs	r4, #0
 800778c:	4622      	mov	r2, r4
 800778e:	462b      	mov	r3, r5
 8007790:	2000      	movs	r0, #0
 8007792:	f7f8 fd45 	bl	8000220 <__aeabi_dsub>
 8007796:	4622      	mov	r2, r4
 8007798:	4606      	mov	r6, r0
 800779a:	460f      	mov	r7, r1
 800779c:	462b      	mov	r3, r5
 800779e:	4650      	mov	r0, sl
 80077a0:	4659      	mov	r1, fp
 80077a2:	f7f8 fd3d 	bl	8000220 <__aeabi_dsub>
 80077a6:	4642      	mov	r2, r8
 80077a8:	464b      	mov	r3, r9
 80077aa:	f7f8 fd39 	bl	8000220 <__aeabi_dsub>
 80077ae:	4602      	mov	r2, r0
 80077b0:	460b      	mov	r3, r1
 80077b2:	4630      	mov	r0, r6
 80077b4:	4639      	mov	r1, r7
 80077b6:	e7d9      	b.n	800776c <__kernel_cos+0xf4>
 80077b8:	2000      	movs	r0, #0
 80077ba:	490f      	ldr	r1, [pc, #60]	; (80077f8 <__kernel_cos+0x180>)
 80077bc:	e7d8      	b.n	8007770 <__kernel_cos+0xf8>
 80077be:	bf00      	nop
 80077c0:	be8838d4 	.word	0xbe8838d4
 80077c4:	bda8fae9 	.word	0xbda8fae9
 80077c8:	bdb4b1c4 	.word	0xbdb4b1c4
 80077cc:	3e21ee9e 	.word	0x3e21ee9e
 80077d0:	809c52ad 	.word	0x809c52ad
 80077d4:	3e927e4f 	.word	0x3e927e4f
 80077d8:	19cb1590 	.word	0x19cb1590
 80077dc:	3efa01a0 	.word	0x3efa01a0
 80077e0:	16c15177 	.word	0x16c15177
 80077e4:	3f56c16c 	.word	0x3f56c16c
 80077e8:	5555554c 	.word	0x5555554c
 80077ec:	3fa55555 	.word	0x3fa55555
 80077f0:	3fe00000 	.word	0x3fe00000
 80077f4:	3fd33332 	.word	0x3fd33332
 80077f8:	3ff00000 	.word	0x3ff00000
 80077fc:	3fe90000 	.word	0x3fe90000
 8007800:	3fd20000 	.word	0x3fd20000
 8007804:	00000000 	.word	0x00000000

08007808 <__kernel_rem_pio2>:
 8007808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800780c:	ed2d 8b02 	vpush	{d8}
 8007810:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8007814:	1ed4      	subs	r4, r2, #3
 8007816:	9308      	str	r3, [sp, #32]
 8007818:	9101      	str	r1, [sp, #4]
 800781a:	4bc5      	ldr	r3, [pc, #788]	; (8007b30 <__kernel_rem_pio2+0x328>)
 800781c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800781e:	9009      	str	r0, [sp, #36]	; 0x24
 8007820:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007824:	9304      	str	r3, [sp, #16]
 8007826:	9b08      	ldr	r3, [sp, #32]
 8007828:	3b01      	subs	r3, #1
 800782a:	9307      	str	r3, [sp, #28]
 800782c:	2318      	movs	r3, #24
 800782e:	fb94 f4f3 	sdiv	r4, r4, r3
 8007832:	f06f 0317 	mvn.w	r3, #23
 8007836:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800783a:	fb04 3303 	mla	r3, r4, r3, r3
 800783e:	eb03 0a02 	add.w	sl, r3, r2
 8007842:	9b04      	ldr	r3, [sp, #16]
 8007844:	9a07      	ldr	r2, [sp, #28]
 8007846:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8007b20 <__kernel_rem_pio2+0x318>
 800784a:	eb03 0802 	add.w	r8, r3, r2
 800784e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007850:	1aa7      	subs	r7, r4, r2
 8007852:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007856:	ae22      	add	r6, sp, #136	; 0x88
 8007858:	2500      	movs	r5, #0
 800785a:	4545      	cmp	r5, r8
 800785c:	dd13      	ble.n	8007886 <__kernel_rem_pio2+0x7e>
 800785e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8007b20 <__kernel_rem_pio2+0x318>
 8007862:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8007866:	2600      	movs	r6, #0
 8007868:	9b04      	ldr	r3, [sp, #16]
 800786a:	429e      	cmp	r6, r3
 800786c:	dc32      	bgt.n	80078d4 <__kernel_rem_pio2+0xcc>
 800786e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007870:	9302      	str	r3, [sp, #8]
 8007872:	9b08      	ldr	r3, [sp, #32]
 8007874:	199d      	adds	r5, r3, r6
 8007876:	ab22      	add	r3, sp, #136	; 0x88
 8007878:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800787c:	9306      	str	r3, [sp, #24]
 800787e:	ec59 8b18 	vmov	r8, r9, d8
 8007882:	2700      	movs	r7, #0
 8007884:	e01f      	b.n	80078c6 <__kernel_rem_pio2+0xbe>
 8007886:	42ef      	cmn	r7, r5
 8007888:	d407      	bmi.n	800789a <__kernel_rem_pio2+0x92>
 800788a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800788e:	f7f8 fe15 	bl	80004bc <__aeabi_i2d>
 8007892:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007896:	3501      	adds	r5, #1
 8007898:	e7df      	b.n	800785a <__kernel_rem_pio2+0x52>
 800789a:	ec51 0b18 	vmov	r0, r1, d8
 800789e:	e7f8      	b.n	8007892 <__kernel_rem_pio2+0x8a>
 80078a0:	9906      	ldr	r1, [sp, #24]
 80078a2:	9d02      	ldr	r5, [sp, #8]
 80078a4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80078a8:	9106      	str	r1, [sp, #24]
 80078aa:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80078ae:	9502      	str	r5, [sp, #8]
 80078b0:	f7f8 fe6e 	bl	8000590 <__aeabi_dmul>
 80078b4:	4602      	mov	r2, r0
 80078b6:	460b      	mov	r3, r1
 80078b8:	4640      	mov	r0, r8
 80078ba:	4649      	mov	r1, r9
 80078bc:	f7f8 fcb2 	bl	8000224 <__adddf3>
 80078c0:	3701      	adds	r7, #1
 80078c2:	4680      	mov	r8, r0
 80078c4:	4689      	mov	r9, r1
 80078c6:	9b07      	ldr	r3, [sp, #28]
 80078c8:	429f      	cmp	r7, r3
 80078ca:	dde9      	ble.n	80078a0 <__kernel_rem_pio2+0x98>
 80078cc:	e8eb 8902 	strd	r8, r9, [fp], #8
 80078d0:	3601      	adds	r6, #1
 80078d2:	e7c9      	b.n	8007868 <__kernel_rem_pio2+0x60>
 80078d4:	9b04      	ldr	r3, [sp, #16]
 80078d6:	aa0e      	add	r2, sp, #56	; 0x38
 80078d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80078dc:	930c      	str	r3, [sp, #48]	; 0x30
 80078de:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80078e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80078e4:	9c04      	ldr	r4, [sp, #16]
 80078e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80078e8:	ab9a      	add	r3, sp, #616	; 0x268
 80078ea:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 80078ee:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80078f2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078f6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 80078fa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 80078fe:	ab9a      	add	r3, sp, #616	; 0x268
 8007900:	445b      	add	r3, fp
 8007902:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8007906:	2500      	movs	r5, #0
 8007908:	1b63      	subs	r3, r4, r5
 800790a:	2b00      	cmp	r3, #0
 800790c:	dc78      	bgt.n	8007a00 <__kernel_rem_pio2+0x1f8>
 800790e:	4650      	mov	r0, sl
 8007910:	ec49 8b10 	vmov	d0, r8, r9
 8007914:	f000 fb7c 	bl	8008010 <scalbn>
 8007918:	ec57 6b10 	vmov	r6, r7, d0
 800791c:	2200      	movs	r2, #0
 800791e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007922:	ee10 0a10 	vmov	r0, s0
 8007926:	4639      	mov	r1, r7
 8007928:	f7f8 fe32 	bl	8000590 <__aeabi_dmul>
 800792c:	ec41 0b10 	vmov	d0, r0, r1
 8007930:	f7ff fbe2 	bl	80070f8 <floor>
 8007934:	2200      	movs	r2, #0
 8007936:	ec51 0b10 	vmov	r0, r1, d0
 800793a:	4b7e      	ldr	r3, [pc, #504]	; (8007b34 <__kernel_rem_pio2+0x32c>)
 800793c:	f7f8 fe28 	bl	8000590 <__aeabi_dmul>
 8007940:	4602      	mov	r2, r0
 8007942:	460b      	mov	r3, r1
 8007944:	4630      	mov	r0, r6
 8007946:	4639      	mov	r1, r7
 8007948:	f7f8 fc6a 	bl	8000220 <__aeabi_dsub>
 800794c:	460f      	mov	r7, r1
 800794e:	4606      	mov	r6, r0
 8007950:	f7f9 f8ce 	bl	8000af0 <__aeabi_d2iz>
 8007954:	9006      	str	r0, [sp, #24]
 8007956:	f7f8 fdb1 	bl	80004bc <__aeabi_i2d>
 800795a:	4602      	mov	r2, r0
 800795c:	460b      	mov	r3, r1
 800795e:	4630      	mov	r0, r6
 8007960:	4639      	mov	r1, r7
 8007962:	f7f8 fc5d 	bl	8000220 <__aeabi_dsub>
 8007966:	f1ba 0f00 	cmp.w	sl, #0
 800796a:	4606      	mov	r6, r0
 800796c:	460f      	mov	r7, r1
 800796e:	dd6c      	ble.n	8007a4a <__kernel_rem_pio2+0x242>
 8007970:	1e62      	subs	r2, r4, #1
 8007972:	ab0e      	add	r3, sp, #56	; 0x38
 8007974:	f1ca 0118 	rsb	r1, sl, #24
 8007978:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800797c:	9d06      	ldr	r5, [sp, #24]
 800797e:	fa40 f301 	asr.w	r3, r0, r1
 8007982:	441d      	add	r5, r3
 8007984:	408b      	lsls	r3, r1
 8007986:	1ac0      	subs	r0, r0, r3
 8007988:	ab0e      	add	r3, sp, #56	; 0x38
 800798a:	9506      	str	r5, [sp, #24]
 800798c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007990:	f1ca 0317 	rsb	r3, sl, #23
 8007994:	fa40 f303 	asr.w	r3, r0, r3
 8007998:	9302      	str	r3, [sp, #8]
 800799a:	9b02      	ldr	r3, [sp, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	dd62      	ble.n	8007a66 <__kernel_rem_pio2+0x25e>
 80079a0:	9b06      	ldr	r3, [sp, #24]
 80079a2:	2200      	movs	r2, #0
 80079a4:	3301      	adds	r3, #1
 80079a6:	9306      	str	r3, [sp, #24]
 80079a8:	4615      	mov	r5, r2
 80079aa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80079ae:	4294      	cmp	r4, r2
 80079b0:	f300 8095 	bgt.w	8007ade <__kernel_rem_pio2+0x2d6>
 80079b4:	f1ba 0f00 	cmp.w	sl, #0
 80079b8:	dd07      	ble.n	80079ca <__kernel_rem_pio2+0x1c2>
 80079ba:	f1ba 0f01 	cmp.w	sl, #1
 80079be:	f000 80a2 	beq.w	8007b06 <__kernel_rem_pio2+0x2fe>
 80079c2:	f1ba 0f02 	cmp.w	sl, #2
 80079c6:	f000 80c1 	beq.w	8007b4c <__kernel_rem_pio2+0x344>
 80079ca:	9b02      	ldr	r3, [sp, #8]
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d14a      	bne.n	8007a66 <__kernel_rem_pio2+0x25e>
 80079d0:	4632      	mov	r2, r6
 80079d2:	463b      	mov	r3, r7
 80079d4:	2000      	movs	r0, #0
 80079d6:	4958      	ldr	r1, [pc, #352]	; (8007b38 <__kernel_rem_pio2+0x330>)
 80079d8:	f7f8 fc22 	bl	8000220 <__aeabi_dsub>
 80079dc:	4606      	mov	r6, r0
 80079de:	460f      	mov	r7, r1
 80079e0:	2d00      	cmp	r5, #0
 80079e2:	d040      	beq.n	8007a66 <__kernel_rem_pio2+0x25e>
 80079e4:	4650      	mov	r0, sl
 80079e6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8007b28 <__kernel_rem_pio2+0x320>
 80079ea:	f000 fb11 	bl	8008010 <scalbn>
 80079ee:	4630      	mov	r0, r6
 80079f0:	4639      	mov	r1, r7
 80079f2:	ec53 2b10 	vmov	r2, r3, d0
 80079f6:	f7f8 fc13 	bl	8000220 <__aeabi_dsub>
 80079fa:	4606      	mov	r6, r0
 80079fc:	460f      	mov	r7, r1
 80079fe:	e032      	b.n	8007a66 <__kernel_rem_pio2+0x25e>
 8007a00:	2200      	movs	r2, #0
 8007a02:	4b4e      	ldr	r3, [pc, #312]	; (8007b3c <__kernel_rem_pio2+0x334>)
 8007a04:	4640      	mov	r0, r8
 8007a06:	4649      	mov	r1, r9
 8007a08:	f7f8 fdc2 	bl	8000590 <__aeabi_dmul>
 8007a0c:	f7f9 f870 	bl	8000af0 <__aeabi_d2iz>
 8007a10:	f7f8 fd54 	bl	80004bc <__aeabi_i2d>
 8007a14:	2200      	movs	r2, #0
 8007a16:	4b4a      	ldr	r3, [pc, #296]	; (8007b40 <__kernel_rem_pio2+0x338>)
 8007a18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a1c:	f7f8 fdb8 	bl	8000590 <__aeabi_dmul>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	4640      	mov	r0, r8
 8007a26:	4649      	mov	r1, r9
 8007a28:	f7f8 fbfa 	bl	8000220 <__aeabi_dsub>
 8007a2c:	f7f9 f860 	bl	8000af0 <__aeabi_d2iz>
 8007a30:	ab0e      	add	r3, sp, #56	; 0x38
 8007a32:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8007a36:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8007a3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a3e:	f7f8 fbf1 	bl	8000224 <__adddf3>
 8007a42:	3501      	adds	r5, #1
 8007a44:	4680      	mov	r8, r0
 8007a46:	4689      	mov	r9, r1
 8007a48:	e75e      	b.n	8007908 <__kernel_rem_pio2+0x100>
 8007a4a:	d105      	bne.n	8007a58 <__kernel_rem_pio2+0x250>
 8007a4c:	1e63      	subs	r3, r4, #1
 8007a4e:	aa0e      	add	r2, sp, #56	; 0x38
 8007a50:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8007a54:	15c3      	asrs	r3, r0, #23
 8007a56:	e79f      	b.n	8007998 <__kernel_rem_pio2+0x190>
 8007a58:	2200      	movs	r2, #0
 8007a5a:	4b3a      	ldr	r3, [pc, #232]	; (8007b44 <__kernel_rem_pio2+0x33c>)
 8007a5c:	f7f9 f81e 	bl	8000a9c <__aeabi_dcmpge>
 8007a60:	2800      	cmp	r0, #0
 8007a62:	d139      	bne.n	8007ad8 <__kernel_rem_pio2+0x2d0>
 8007a64:	9002      	str	r0, [sp, #8]
 8007a66:	2200      	movs	r2, #0
 8007a68:	2300      	movs	r3, #0
 8007a6a:	4630      	mov	r0, r6
 8007a6c:	4639      	mov	r1, r7
 8007a6e:	f7f8 fff7 	bl	8000a60 <__aeabi_dcmpeq>
 8007a72:	2800      	cmp	r0, #0
 8007a74:	f000 80c7 	beq.w	8007c06 <__kernel_rem_pio2+0x3fe>
 8007a78:	1e65      	subs	r5, r4, #1
 8007a7a:	462b      	mov	r3, r5
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	9904      	ldr	r1, [sp, #16]
 8007a80:	428b      	cmp	r3, r1
 8007a82:	da6a      	bge.n	8007b5a <__kernel_rem_pio2+0x352>
 8007a84:	2a00      	cmp	r2, #0
 8007a86:	f000 8088 	beq.w	8007b9a <__kernel_rem_pio2+0x392>
 8007a8a:	ab0e      	add	r3, sp, #56	; 0x38
 8007a8c:	f1aa 0a18 	sub.w	sl, sl, #24
 8007a90:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 80b4 	beq.w	8007c02 <__kernel_rem_pio2+0x3fa>
 8007a9a:	4650      	mov	r0, sl
 8007a9c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8007b28 <__kernel_rem_pio2+0x320>
 8007aa0:	f000 fab6 	bl	8008010 <scalbn>
 8007aa4:	00ec      	lsls	r4, r5, #3
 8007aa6:	ab72      	add	r3, sp, #456	; 0x1c8
 8007aa8:	191e      	adds	r6, r3, r4
 8007aaa:	ec59 8b10 	vmov	r8, r9, d0
 8007aae:	f106 0a08 	add.w	sl, r6, #8
 8007ab2:	462f      	mov	r7, r5
 8007ab4:	2f00      	cmp	r7, #0
 8007ab6:	f280 80df 	bge.w	8007c78 <__kernel_rem_pio2+0x470>
 8007aba:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8007b20 <__kernel_rem_pio2+0x318>
 8007abe:	f04f 0a00 	mov.w	sl, #0
 8007ac2:	eba5 030a 	sub.w	r3, r5, sl
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	f2c0 810a 	blt.w	8007ce0 <__kernel_rem_pio2+0x4d8>
 8007acc:	f8df b078 	ldr.w	fp, [pc, #120]	; 8007b48 <__kernel_rem_pio2+0x340>
 8007ad0:	ec59 8b18 	vmov	r8, r9, d8
 8007ad4:	2700      	movs	r7, #0
 8007ad6:	e0f5      	b.n	8007cc4 <__kernel_rem_pio2+0x4bc>
 8007ad8:	2302      	movs	r3, #2
 8007ada:	9302      	str	r3, [sp, #8]
 8007adc:	e760      	b.n	80079a0 <__kernel_rem_pio2+0x198>
 8007ade:	ab0e      	add	r3, sp, #56	; 0x38
 8007ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae4:	b94d      	cbnz	r5, 8007afa <__kernel_rem_pio2+0x2f2>
 8007ae6:	b12b      	cbz	r3, 8007af4 <__kernel_rem_pio2+0x2ec>
 8007ae8:	a80e      	add	r0, sp, #56	; 0x38
 8007aea:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8007aee:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007af2:	2301      	movs	r3, #1
 8007af4:	3201      	adds	r2, #1
 8007af6:	461d      	mov	r5, r3
 8007af8:	e759      	b.n	80079ae <__kernel_rem_pio2+0x1a6>
 8007afa:	a80e      	add	r0, sp, #56	; 0x38
 8007afc:	1acb      	subs	r3, r1, r3
 8007afe:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8007b02:	462b      	mov	r3, r5
 8007b04:	e7f6      	b.n	8007af4 <__kernel_rem_pio2+0x2ec>
 8007b06:	1e62      	subs	r2, r4, #1
 8007b08:	ab0e      	add	r3, sp, #56	; 0x38
 8007b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b0e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007b12:	a90e      	add	r1, sp, #56	; 0x38
 8007b14:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007b18:	e757      	b.n	80079ca <__kernel_rem_pio2+0x1c2>
 8007b1a:	bf00      	nop
 8007b1c:	f3af 8000 	nop.w
	...
 8007b2c:	3ff00000 	.word	0x3ff00000
 8007b30:	08008548 	.word	0x08008548
 8007b34:	40200000 	.word	0x40200000
 8007b38:	3ff00000 	.word	0x3ff00000
 8007b3c:	3e700000 	.word	0x3e700000
 8007b40:	41700000 	.word	0x41700000
 8007b44:	3fe00000 	.word	0x3fe00000
 8007b48:	08008508 	.word	0x08008508
 8007b4c:	1e62      	subs	r2, r4, #1
 8007b4e:	ab0e      	add	r3, sp, #56	; 0x38
 8007b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b54:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007b58:	e7db      	b.n	8007b12 <__kernel_rem_pio2+0x30a>
 8007b5a:	a90e      	add	r1, sp, #56	; 0x38
 8007b5c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007b60:	3b01      	subs	r3, #1
 8007b62:	430a      	orrs	r2, r1
 8007b64:	e78b      	b.n	8007a7e <__kernel_rem_pio2+0x276>
 8007b66:	3301      	adds	r3, #1
 8007b68:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007b6c:	2900      	cmp	r1, #0
 8007b6e:	d0fa      	beq.n	8007b66 <__kernel_rem_pio2+0x35e>
 8007b70:	9a08      	ldr	r2, [sp, #32]
 8007b72:	4422      	add	r2, r4
 8007b74:	00d2      	lsls	r2, r2, #3
 8007b76:	a922      	add	r1, sp, #136	; 0x88
 8007b78:	18e3      	adds	r3, r4, r3
 8007b7a:	9206      	str	r2, [sp, #24]
 8007b7c:	440a      	add	r2, r1
 8007b7e:	9302      	str	r3, [sp, #8]
 8007b80:	f10b 0108 	add.w	r1, fp, #8
 8007b84:	f102 0308 	add.w	r3, r2, #8
 8007b88:	1c66      	adds	r6, r4, #1
 8007b8a:	910a      	str	r1, [sp, #40]	; 0x28
 8007b8c:	2500      	movs	r5, #0
 8007b8e:	930d      	str	r3, [sp, #52]	; 0x34
 8007b90:	9b02      	ldr	r3, [sp, #8]
 8007b92:	42b3      	cmp	r3, r6
 8007b94:	da04      	bge.n	8007ba0 <__kernel_rem_pio2+0x398>
 8007b96:	461c      	mov	r4, r3
 8007b98:	e6a6      	b.n	80078e8 <__kernel_rem_pio2+0xe0>
 8007b9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e7e3      	b.n	8007b68 <__kernel_rem_pio2+0x360>
 8007ba0:	9b06      	ldr	r3, [sp, #24]
 8007ba2:	18ef      	adds	r7, r5, r3
 8007ba4:	ab22      	add	r3, sp, #136	; 0x88
 8007ba6:	441f      	add	r7, r3
 8007ba8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007baa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007bae:	f7f8 fc85 	bl	80004bc <__aeabi_i2d>
 8007bb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bb4:	461c      	mov	r4, r3
 8007bb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007bb8:	e9c7 0100 	strd	r0, r1, [r7]
 8007bbc:	eb03 0b05 	add.w	fp, r3, r5
 8007bc0:	2700      	movs	r7, #0
 8007bc2:	f04f 0800 	mov.w	r8, #0
 8007bc6:	f04f 0900 	mov.w	r9, #0
 8007bca:	9b07      	ldr	r3, [sp, #28]
 8007bcc:	429f      	cmp	r7, r3
 8007bce:	dd08      	ble.n	8007be2 <__kernel_rem_pio2+0x3da>
 8007bd0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bd2:	aa72      	add	r2, sp, #456	; 0x1c8
 8007bd4:	18eb      	adds	r3, r5, r3
 8007bd6:	4413      	add	r3, r2
 8007bd8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8007bdc:	3601      	adds	r6, #1
 8007bde:	3508      	adds	r5, #8
 8007be0:	e7d6      	b.n	8007b90 <__kernel_rem_pio2+0x388>
 8007be2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8007be6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8007bea:	f7f8 fcd1 	bl	8000590 <__aeabi_dmul>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	4640      	mov	r0, r8
 8007bf4:	4649      	mov	r1, r9
 8007bf6:	f7f8 fb15 	bl	8000224 <__adddf3>
 8007bfa:	3701      	adds	r7, #1
 8007bfc:	4680      	mov	r8, r0
 8007bfe:	4689      	mov	r9, r1
 8007c00:	e7e3      	b.n	8007bca <__kernel_rem_pio2+0x3c2>
 8007c02:	3d01      	subs	r5, #1
 8007c04:	e741      	b.n	8007a8a <__kernel_rem_pio2+0x282>
 8007c06:	f1ca 0000 	rsb	r0, sl, #0
 8007c0a:	ec47 6b10 	vmov	d0, r6, r7
 8007c0e:	f000 f9ff 	bl	8008010 <scalbn>
 8007c12:	ec57 6b10 	vmov	r6, r7, d0
 8007c16:	2200      	movs	r2, #0
 8007c18:	4b99      	ldr	r3, [pc, #612]	; (8007e80 <__kernel_rem_pio2+0x678>)
 8007c1a:	ee10 0a10 	vmov	r0, s0
 8007c1e:	4639      	mov	r1, r7
 8007c20:	f7f8 ff3c 	bl	8000a9c <__aeabi_dcmpge>
 8007c24:	b1f8      	cbz	r0, 8007c66 <__kernel_rem_pio2+0x45e>
 8007c26:	2200      	movs	r2, #0
 8007c28:	4b96      	ldr	r3, [pc, #600]	; (8007e84 <__kernel_rem_pio2+0x67c>)
 8007c2a:	4630      	mov	r0, r6
 8007c2c:	4639      	mov	r1, r7
 8007c2e:	f7f8 fcaf 	bl	8000590 <__aeabi_dmul>
 8007c32:	f7f8 ff5d 	bl	8000af0 <__aeabi_d2iz>
 8007c36:	4680      	mov	r8, r0
 8007c38:	f7f8 fc40 	bl	80004bc <__aeabi_i2d>
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	4b90      	ldr	r3, [pc, #576]	; (8007e80 <__kernel_rem_pio2+0x678>)
 8007c40:	f7f8 fca6 	bl	8000590 <__aeabi_dmul>
 8007c44:	460b      	mov	r3, r1
 8007c46:	4602      	mov	r2, r0
 8007c48:	4639      	mov	r1, r7
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f7f8 fae8 	bl	8000220 <__aeabi_dsub>
 8007c50:	f7f8 ff4e 	bl	8000af0 <__aeabi_d2iz>
 8007c54:	1c65      	adds	r5, r4, #1
 8007c56:	ab0e      	add	r3, sp, #56	; 0x38
 8007c58:	f10a 0a18 	add.w	sl, sl, #24
 8007c5c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007c60:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8007c64:	e719      	b.n	8007a9a <__kernel_rem_pio2+0x292>
 8007c66:	4630      	mov	r0, r6
 8007c68:	4639      	mov	r1, r7
 8007c6a:	f7f8 ff41 	bl	8000af0 <__aeabi_d2iz>
 8007c6e:	ab0e      	add	r3, sp, #56	; 0x38
 8007c70:	4625      	mov	r5, r4
 8007c72:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007c76:	e710      	b.n	8007a9a <__kernel_rem_pio2+0x292>
 8007c78:	ab0e      	add	r3, sp, #56	; 0x38
 8007c7a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8007c7e:	f7f8 fc1d 	bl	80004bc <__aeabi_i2d>
 8007c82:	4642      	mov	r2, r8
 8007c84:	464b      	mov	r3, r9
 8007c86:	f7f8 fc83 	bl	8000590 <__aeabi_dmul>
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8007c90:	4b7c      	ldr	r3, [pc, #496]	; (8007e84 <__kernel_rem_pio2+0x67c>)
 8007c92:	4640      	mov	r0, r8
 8007c94:	4649      	mov	r1, r9
 8007c96:	f7f8 fc7b 	bl	8000590 <__aeabi_dmul>
 8007c9a:	3f01      	subs	r7, #1
 8007c9c:	4680      	mov	r8, r0
 8007c9e:	4689      	mov	r9, r1
 8007ca0:	e708      	b.n	8007ab4 <__kernel_rem_pio2+0x2ac>
 8007ca2:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8007ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007caa:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8007cae:	f7f8 fc6f 	bl	8000590 <__aeabi_dmul>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	4640      	mov	r0, r8
 8007cb8:	4649      	mov	r1, r9
 8007cba:	f7f8 fab3 	bl	8000224 <__adddf3>
 8007cbe:	3701      	adds	r7, #1
 8007cc0:	4680      	mov	r8, r0
 8007cc2:	4689      	mov	r9, r1
 8007cc4:	9b04      	ldr	r3, [sp, #16]
 8007cc6:	429f      	cmp	r7, r3
 8007cc8:	dc01      	bgt.n	8007cce <__kernel_rem_pio2+0x4c6>
 8007cca:	45ba      	cmp	sl, r7
 8007ccc:	dae9      	bge.n	8007ca2 <__kernel_rem_pio2+0x49a>
 8007cce:	ab4a      	add	r3, sp, #296	; 0x128
 8007cd0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007cd4:	e9c3 8900 	strd	r8, r9, [r3]
 8007cd8:	f10a 0a01 	add.w	sl, sl, #1
 8007cdc:	3e08      	subs	r6, #8
 8007cde:	e6f0      	b.n	8007ac2 <__kernel_rem_pio2+0x2ba>
 8007ce0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8007ce2:	2b03      	cmp	r3, #3
 8007ce4:	d85b      	bhi.n	8007d9e <__kernel_rem_pio2+0x596>
 8007ce6:	e8df f003 	tbb	[pc, r3]
 8007cea:	264a      	.short	0x264a
 8007cec:	0226      	.short	0x0226
 8007cee:	ab9a      	add	r3, sp, #616	; 0x268
 8007cf0:	441c      	add	r4, r3
 8007cf2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007cf6:	46a2      	mov	sl, r4
 8007cf8:	46ab      	mov	fp, r5
 8007cfa:	f1bb 0f00 	cmp.w	fp, #0
 8007cfe:	dc6c      	bgt.n	8007dda <__kernel_rem_pio2+0x5d2>
 8007d00:	46a2      	mov	sl, r4
 8007d02:	46ab      	mov	fp, r5
 8007d04:	f1bb 0f01 	cmp.w	fp, #1
 8007d08:	f300 8086 	bgt.w	8007e18 <__kernel_rem_pio2+0x610>
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	2100      	movs	r1, #0
 8007d10:	2d01      	cmp	r5, #1
 8007d12:	f300 80a0 	bgt.w	8007e56 <__kernel_rem_pio2+0x64e>
 8007d16:	9b02      	ldr	r3, [sp, #8]
 8007d18:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8007d1c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f040 809e 	bne.w	8007e62 <__kernel_rem_pio2+0x65a>
 8007d26:	9b01      	ldr	r3, [sp, #4]
 8007d28:	e9c3 7800 	strd	r7, r8, [r3]
 8007d2c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8007d30:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007d34:	e033      	b.n	8007d9e <__kernel_rem_pio2+0x596>
 8007d36:	3408      	adds	r4, #8
 8007d38:	ab4a      	add	r3, sp, #296	; 0x128
 8007d3a:	441c      	add	r4, r3
 8007d3c:	462e      	mov	r6, r5
 8007d3e:	2000      	movs	r0, #0
 8007d40:	2100      	movs	r1, #0
 8007d42:	2e00      	cmp	r6, #0
 8007d44:	da3a      	bge.n	8007dbc <__kernel_rem_pio2+0x5b4>
 8007d46:	9b02      	ldr	r3, [sp, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d03d      	beq.n	8007dc8 <__kernel_rem_pio2+0x5c0>
 8007d4c:	4602      	mov	r2, r0
 8007d4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d52:	9c01      	ldr	r4, [sp, #4]
 8007d54:	e9c4 2300 	strd	r2, r3, [r4]
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007d60:	f7f8 fa5e 	bl	8000220 <__aeabi_dsub>
 8007d64:	ae4c      	add	r6, sp, #304	; 0x130
 8007d66:	2401      	movs	r4, #1
 8007d68:	42a5      	cmp	r5, r4
 8007d6a:	da30      	bge.n	8007dce <__kernel_rem_pio2+0x5c6>
 8007d6c:	9b02      	ldr	r3, [sp, #8]
 8007d6e:	b113      	cbz	r3, 8007d76 <__kernel_rem_pio2+0x56e>
 8007d70:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d74:	4619      	mov	r1, r3
 8007d76:	9b01      	ldr	r3, [sp, #4]
 8007d78:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007d7c:	e00f      	b.n	8007d9e <__kernel_rem_pio2+0x596>
 8007d7e:	ab9a      	add	r3, sp, #616	; 0x268
 8007d80:	441c      	add	r4, r3
 8007d82:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007d86:	2000      	movs	r0, #0
 8007d88:	2100      	movs	r1, #0
 8007d8a:	2d00      	cmp	r5, #0
 8007d8c:	da10      	bge.n	8007db0 <__kernel_rem_pio2+0x5a8>
 8007d8e:	9b02      	ldr	r3, [sp, #8]
 8007d90:	b113      	cbz	r3, 8007d98 <__kernel_rem_pio2+0x590>
 8007d92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d96:	4619      	mov	r1, r3
 8007d98:	9b01      	ldr	r3, [sp, #4]
 8007d9a:	e9c3 0100 	strd	r0, r1, [r3]
 8007d9e:	9b06      	ldr	r3, [sp, #24]
 8007da0:	f003 0007 	and.w	r0, r3, #7
 8007da4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8007da8:	ecbd 8b02 	vpop	{d8}
 8007dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007db0:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007db4:	f7f8 fa36 	bl	8000224 <__adddf3>
 8007db8:	3d01      	subs	r5, #1
 8007dba:	e7e6      	b.n	8007d8a <__kernel_rem_pio2+0x582>
 8007dbc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007dc0:	f7f8 fa30 	bl	8000224 <__adddf3>
 8007dc4:	3e01      	subs	r6, #1
 8007dc6:	e7bc      	b.n	8007d42 <__kernel_rem_pio2+0x53a>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	460b      	mov	r3, r1
 8007dcc:	e7c1      	b.n	8007d52 <__kernel_rem_pio2+0x54a>
 8007dce:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007dd2:	f7f8 fa27 	bl	8000224 <__adddf3>
 8007dd6:	3401      	adds	r4, #1
 8007dd8:	e7c6      	b.n	8007d68 <__kernel_rem_pio2+0x560>
 8007dda:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8007dde:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007de2:	4640      	mov	r0, r8
 8007de4:	ec53 2b17 	vmov	r2, r3, d7
 8007de8:	4649      	mov	r1, r9
 8007dea:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007dee:	f7f8 fa19 	bl	8000224 <__adddf3>
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	4606      	mov	r6, r0
 8007df8:	460f      	mov	r7, r1
 8007dfa:	4640      	mov	r0, r8
 8007dfc:	4649      	mov	r1, r9
 8007dfe:	f7f8 fa0f 	bl	8000220 <__aeabi_dsub>
 8007e02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e06:	f7f8 fa0d 	bl	8000224 <__adddf3>
 8007e0a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e0e:	e9ca 0100 	strd	r0, r1, [sl]
 8007e12:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8007e16:	e770      	b.n	8007cfa <__kernel_rem_pio2+0x4f2>
 8007e18:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8007e1c:	ed3a 7b02 	vldmdb	sl!, {d7}
 8007e20:	4630      	mov	r0, r6
 8007e22:	ec53 2b17 	vmov	r2, r3, d7
 8007e26:	4639      	mov	r1, r7
 8007e28:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007e2c:	f7f8 f9fa 	bl	8000224 <__adddf3>
 8007e30:	4602      	mov	r2, r0
 8007e32:	460b      	mov	r3, r1
 8007e34:	4680      	mov	r8, r0
 8007e36:	4689      	mov	r9, r1
 8007e38:	4630      	mov	r0, r6
 8007e3a:	4639      	mov	r1, r7
 8007e3c:	f7f8 f9f0 	bl	8000220 <__aeabi_dsub>
 8007e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e44:	f7f8 f9ee 	bl	8000224 <__adddf3>
 8007e48:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007e4c:	e9ca 0100 	strd	r0, r1, [sl]
 8007e50:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8007e54:	e756      	b.n	8007d04 <__kernel_rem_pio2+0x4fc>
 8007e56:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007e5a:	f7f8 f9e3 	bl	8000224 <__adddf3>
 8007e5e:	3d01      	subs	r5, #1
 8007e60:	e756      	b.n	8007d10 <__kernel_rem_pio2+0x508>
 8007e62:	9b01      	ldr	r3, [sp, #4]
 8007e64:	9a01      	ldr	r2, [sp, #4]
 8007e66:	601f      	str	r7, [r3, #0]
 8007e68:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8007e6c:	605c      	str	r4, [r3, #4]
 8007e6e:	609d      	str	r5, [r3, #8]
 8007e70:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007e74:	60d3      	str	r3, [r2, #12]
 8007e76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007e7a:	6110      	str	r0, [r2, #16]
 8007e7c:	6153      	str	r3, [r2, #20]
 8007e7e:	e78e      	b.n	8007d9e <__kernel_rem_pio2+0x596>
 8007e80:	41700000 	.word	0x41700000
 8007e84:	3e700000 	.word	0x3e700000

08007e88 <__kernel_sin>:
 8007e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e8c:	ec55 4b10 	vmov	r4, r5, d0
 8007e90:	b085      	sub	sp, #20
 8007e92:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007e96:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007e9a:	ed8d 1b00 	vstr	d1, [sp]
 8007e9e:	9002      	str	r0, [sp, #8]
 8007ea0:	da06      	bge.n	8007eb0 <__kernel_sin+0x28>
 8007ea2:	ee10 0a10 	vmov	r0, s0
 8007ea6:	4629      	mov	r1, r5
 8007ea8:	f7f8 fe22 	bl	8000af0 <__aeabi_d2iz>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	d051      	beq.n	8007f54 <__kernel_sin+0xcc>
 8007eb0:	4622      	mov	r2, r4
 8007eb2:	462b      	mov	r3, r5
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	f7f8 fb6a 	bl	8000590 <__aeabi_dmul>
 8007ebc:	4682      	mov	sl, r0
 8007ebe:	468b      	mov	fp, r1
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	460b      	mov	r3, r1
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	f7f8 fb62 	bl	8000590 <__aeabi_dmul>
 8007ecc:	a341      	add	r3, pc, #260	; (adr r3, 8007fd4 <__kernel_sin+0x14c>)
 8007ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed2:	4680      	mov	r8, r0
 8007ed4:	4689      	mov	r9, r1
 8007ed6:	4650      	mov	r0, sl
 8007ed8:	4659      	mov	r1, fp
 8007eda:	f7f8 fb59 	bl	8000590 <__aeabi_dmul>
 8007ede:	a33f      	add	r3, pc, #252	; (adr r3, 8007fdc <__kernel_sin+0x154>)
 8007ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee4:	f7f8 f99c 	bl	8000220 <__aeabi_dsub>
 8007ee8:	4652      	mov	r2, sl
 8007eea:	465b      	mov	r3, fp
 8007eec:	f7f8 fb50 	bl	8000590 <__aeabi_dmul>
 8007ef0:	a33c      	add	r3, pc, #240	; (adr r3, 8007fe4 <__kernel_sin+0x15c>)
 8007ef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef6:	f7f8 f995 	bl	8000224 <__adddf3>
 8007efa:	4652      	mov	r2, sl
 8007efc:	465b      	mov	r3, fp
 8007efe:	f7f8 fb47 	bl	8000590 <__aeabi_dmul>
 8007f02:	a33a      	add	r3, pc, #232	; (adr r3, 8007fec <__kernel_sin+0x164>)
 8007f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f08:	f7f8 f98a 	bl	8000220 <__aeabi_dsub>
 8007f0c:	4652      	mov	r2, sl
 8007f0e:	465b      	mov	r3, fp
 8007f10:	f7f8 fb3e 	bl	8000590 <__aeabi_dmul>
 8007f14:	a337      	add	r3, pc, #220	; (adr r3, 8007ff4 <__kernel_sin+0x16c>)
 8007f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f1a:	f7f8 f983 	bl	8000224 <__adddf3>
 8007f1e:	9b02      	ldr	r3, [sp, #8]
 8007f20:	4606      	mov	r6, r0
 8007f22:	460f      	mov	r7, r1
 8007f24:	b9db      	cbnz	r3, 8007f5e <__kernel_sin+0xd6>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	4650      	mov	r0, sl
 8007f2c:	4659      	mov	r1, fp
 8007f2e:	f7f8 fb2f 	bl	8000590 <__aeabi_dmul>
 8007f32:	a325      	add	r3, pc, #148	; (adr r3, 8007fc8 <__kernel_sin+0x140>)
 8007f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f38:	f7f8 f972 	bl	8000220 <__aeabi_dsub>
 8007f3c:	4642      	mov	r2, r8
 8007f3e:	464b      	mov	r3, r9
 8007f40:	f7f8 fb26 	bl	8000590 <__aeabi_dmul>
 8007f44:	4602      	mov	r2, r0
 8007f46:	460b      	mov	r3, r1
 8007f48:	4620      	mov	r0, r4
 8007f4a:	4629      	mov	r1, r5
 8007f4c:	f7f8 f96a 	bl	8000224 <__adddf3>
 8007f50:	4604      	mov	r4, r0
 8007f52:	460d      	mov	r5, r1
 8007f54:	ec45 4b10 	vmov	d0, r4, r5
 8007f58:	b005      	add	sp, #20
 8007f5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5e:	2200      	movs	r2, #0
 8007f60:	4b1b      	ldr	r3, [pc, #108]	; (8007fd0 <__kernel_sin+0x148>)
 8007f62:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f66:	f7f8 fb13 	bl	8000590 <__aeabi_dmul>
 8007f6a:	4632      	mov	r2, r6
 8007f6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f70:	463b      	mov	r3, r7
 8007f72:	4640      	mov	r0, r8
 8007f74:	4649      	mov	r1, r9
 8007f76:	f7f8 fb0b 	bl	8000590 <__aeabi_dmul>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f82:	f7f8 f94d 	bl	8000220 <__aeabi_dsub>
 8007f86:	4652      	mov	r2, sl
 8007f88:	465b      	mov	r3, fp
 8007f8a:	f7f8 fb01 	bl	8000590 <__aeabi_dmul>
 8007f8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f92:	f7f8 f945 	bl	8000220 <__aeabi_dsub>
 8007f96:	a30c      	add	r3, pc, #48	; (adr r3, 8007fc8 <__kernel_sin+0x140>)
 8007f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9c:	4606      	mov	r6, r0
 8007f9e:	460f      	mov	r7, r1
 8007fa0:	4640      	mov	r0, r8
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	f7f8 faf4 	bl	8000590 <__aeabi_dmul>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4630      	mov	r0, r6
 8007fae:	4639      	mov	r1, r7
 8007fb0:	f7f8 f938 	bl	8000224 <__adddf3>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	4620      	mov	r0, r4
 8007fba:	4629      	mov	r1, r5
 8007fbc:	f7f8 f930 	bl	8000220 <__aeabi_dsub>
 8007fc0:	e7c6      	b.n	8007f50 <__kernel_sin+0xc8>
 8007fc2:	bf00      	nop
 8007fc4:	f3af 8000 	nop.w
 8007fc8:	55555549 	.word	0x55555549
 8007fcc:	3fc55555 	.word	0x3fc55555
 8007fd0:	3fe00000 	.word	0x3fe00000
 8007fd4:	5acfd57c 	.word	0x5acfd57c
 8007fd8:	3de5d93a 	.word	0x3de5d93a
 8007fdc:	8a2b9ceb 	.word	0x8a2b9ceb
 8007fe0:	3e5ae5e6 	.word	0x3e5ae5e6
 8007fe4:	57b1fe7d 	.word	0x57b1fe7d
 8007fe8:	3ec71de3 	.word	0x3ec71de3
 8007fec:	19c161d5 	.word	0x19c161d5
 8007ff0:	3f2a01a0 	.word	0x3f2a01a0
 8007ff4:	1110f8a6 	.word	0x1110f8a6
 8007ff8:	3f811111 	.word	0x3f811111

08007ffc <fabs>:
 8007ffc:	ec51 0b10 	vmov	r0, r1, d0
 8008000:	ee10 2a10 	vmov	r2, s0
 8008004:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008008:	ec43 2b10 	vmov	d0, r2, r3
 800800c:	4770      	bx	lr
	...

08008010 <scalbn>:
 8008010:	b570      	push	{r4, r5, r6, lr}
 8008012:	ec55 4b10 	vmov	r4, r5, d0
 8008016:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800801a:	4606      	mov	r6, r0
 800801c:	462b      	mov	r3, r5
 800801e:	b9aa      	cbnz	r2, 800804c <scalbn+0x3c>
 8008020:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008024:	4323      	orrs	r3, r4
 8008026:	d03b      	beq.n	80080a0 <scalbn+0x90>
 8008028:	4b31      	ldr	r3, [pc, #196]	; (80080f0 <scalbn+0xe0>)
 800802a:	4629      	mov	r1, r5
 800802c:	2200      	movs	r2, #0
 800802e:	ee10 0a10 	vmov	r0, s0
 8008032:	f7f8 faad 	bl	8000590 <__aeabi_dmul>
 8008036:	4b2f      	ldr	r3, [pc, #188]	; (80080f4 <scalbn+0xe4>)
 8008038:	429e      	cmp	r6, r3
 800803a:	4604      	mov	r4, r0
 800803c:	460d      	mov	r5, r1
 800803e:	da12      	bge.n	8008066 <scalbn+0x56>
 8008040:	a327      	add	r3, pc, #156	; (adr r3, 80080e0 <scalbn+0xd0>)
 8008042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008046:	f7f8 faa3 	bl	8000590 <__aeabi_dmul>
 800804a:	e009      	b.n	8008060 <scalbn+0x50>
 800804c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008050:	428a      	cmp	r2, r1
 8008052:	d10c      	bne.n	800806e <scalbn+0x5e>
 8008054:	ee10 2a10 	vmov	r2, s0
 8008058:	4620      	mov	r0, r4
 800805a:	4629      	mov	r1, r5
 800805c:	f7f8 f8e2 	bl	8000224 <__adddf3>
 8008060:	4604      	mov	r4, r0
 8008062:	460d      	mov	r5, r1
 8008064:	e01c      	b.n	80080a0 <scalbn+0x90>
 8008066:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800806a:	460b      	mov	r3, r1
 800806c:	3a36      	subs	r2, #54	; 0x36
 800806e:	4432      	add	r2, r6
 8008070:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008074:	428a      	cmp	r2, r1
 8008076:	dd0b      	ble.n	8008090 <scalbn+0x80>
 8008078:	ec45 4b11 	vmov	d1, r4, r5
 800807c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80080e8 <scalbn+0xd8>
 8008080:	f000 f83c 	bl	80080fc <copysign>
 8008084:	a318      	add	r3, pc, #96	; (adr r3, 80080e8 <scalbn+0xd8>)
 8008086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808a:	ec51 0b10 	vmov	r0, r1, d0
 800808e:	e7da      	b.n	8008046 <scalbn+0x36>
 8008090:	2a00      	cmp	r2, #0
 8008092:	dd08      	ble.n	80080a6 <scalbn+0x96>
 8008094:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008098:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800809c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80080a0:	ec45 4b10 	vmov	d0, r4, r5
 80080a4:	bd70      	pop	{r4, r5, r6, pc}
 80080a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80080aa:	da0d      	bge.n	80080c8 <scalbn+0xb8>
 80080ac:	f24c 3350 	movw	r3, #50000	; 0xc350
 80080b0:	429e      	cmp	r6, r3
 80080b2:	ec45 4b11 	vmov	d1, r4, r5
 80080b6:	dce1      	bgt.n	800807c <scalbn+0x6c>
 80080b8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 80080e0 <scalbn+0xd0>
 80080bc:	f000 f81e 	bl	80080fc <copysign>
 80080c0:	a307      	add	r3, pc, #28	; (adr r3, 80080e0 <scalbn+0xd0>)
 80080c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080c6:	e7e0      	b.n	800808a <scalbn+0x7a>
 80080c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80080cc:	3236      	adds	r2, #54	; 0x36
 80080ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80080d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80080d6:	4620      	mov	r0, r4
 80080d8:	4629      	mov	r1, r5
 80080da:	2200      	movs	r2, #0
 80080dc:	4b06      	ldr	r3, [pc, #24]	; (80080f8 <scalbn+0xe8>)
 80080de:	e7b2      	b.n	8008046 <scalbn+0x36>
 80080e0:	c2f8f359 	.word	0xc2f8f359
 80080e4:	01a56e1f 	.word	0x01a56e1f
 80080e8:	8800759c 	.word	0x8800759c
 80080ec:	7e37e43c 	.word	0x7e37e43c
 80080f0:	43500000 	.word	0x43500000
 80080f4:	ffff3cb0 	.word	0xffff3cb0
 80080f8:	3c900000 	.word	0x3c900000

080080fc <copysign>:
 80080fc:	ec51 0b10 	vmov	r0, r1, d0
 8008100:	ee11 0a90 	vmov	r0, s3
 8008104:	ee10 2a10 	vmov	r2, s0
 8008108:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800810c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008110:	ea41 0300 	orr.w	r3, r1, r0
 8008114:	ec43 2b10 	vmov	d0, r2, r3
 8008118:	4770      	bx	lr
	...

0800811c <_init>:
 800811c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800811e:	bf00      	nop
 8008120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008122:	bc08      	pop	{r3}
 8008124:	469e      	mov	lr, r3
 8008126:	4770      	bx	lr

08008128 <_fini>:
 8008128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812a:	bf00      	nop
 800812c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800812e:	bc08      	pop	{r3}
 8008130:	469e      	mov	lr, r3
 8008132:	4770      	bx	lr
