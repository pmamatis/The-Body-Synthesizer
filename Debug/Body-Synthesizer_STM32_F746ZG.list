
Body-Synthesizer_STM32_F746ZG.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006624  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00048960  080067f0  080067f0  000167f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0804f150  0804f150  00060084  2**0
                  CONTENTS
  4 .ARM          00000008  0804f150  0804f150  0005f150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0804f158  0804f158  00060084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0804f158  0804f158  0005f158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0804f15c  0804f15c  0005f15c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0804f160  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000246a8  20000088  0804f1e4  00060088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20024730  0804f1e4  00064730  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00060084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f8b  00000000  00000000  000600b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002b2d  00000000  00000000  0007503f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f30  00000000  00000000  00077b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000de0  00000000  00000000  00078aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002814a  00000000  00000000  00079880  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e676  00000000  00000000  000a19ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f1696  00000000  00000000  000b0040  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a16d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000434c  00000000  00000000  001a1754  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000088 	.word	0x20000088
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080067d4 	.word	0x080067d4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000008c 	.word	0x2000008c
 8000204:	080067d4 	.word	0x080067d4

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000346:	f1a4 0401 	sub.w	r4, r4, #1
 800034a:	d1e9      	bne.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpun>:
 8000ab4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000abc:	d102      	bne.n	8000ac4 <__aeabi_dcmpun+0x10>
 8000abe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ac2:	d10a      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ac4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000acc:	d102      	bne.n	8000ad4 <__aeabi_dcmpun+0x20>
 8000ace:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ad2:	d102      	bne.n	8000ada <__aeabi_dcmpun+0x26>
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	f04f 0001 	mov.w	r0, #1
 8000ade:	4770      	bx	lr

08000ae0 <__aeabi_d2uiz>:
 8000ae0:	004a      	lsls	r2, r1, #1
 8000ae2:	d211      	bcs.n	8000b08 <__aeabi_d2uiz+0x28>
 8000ae4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ae8:	d211      	bcs.n	8000b0e <__aeabi_d2uiz+0x2e>
 8000aea:	d50d      	bpl.n	8000b08 <__aeabi_d2uiz+0x28>
 8000aec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af4:	d40e      	bmi.n	8000b14 <__aeabi_d2uiz+0x34>
 8000af6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000afe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b02:	fa23 f002 	lsr.w	r0, r3, r2
 8000b06:	4770      	bx	lr
 8000b08:	f04f 0000 	mov.w	r0, #0
 8000b0c:	4770      	bx	lr
 8000b0e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b12:	d102      	bne.n	8000b1a <__aeabi_d2uiz+0x3a>
 8000b14:	f04f 30ff 	mov.w	r0, #4294967295
 8000b18:	4770      	bx	lr
 8000b1a:	f04f 0000 	mov.w	r0, #0
 8000b1e:	4770      	bx	lr

08000b20 <__aeabi_d2f>:
 8000b20:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b24:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b28:	bf24      	itt	cs
 8000b2a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b2e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b32:	d90d      	bls.n	8000b50 <__aeabi_d2f+0x30>
 8000b34:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b38:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b3c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b40:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b44:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b48:	bf08      	it	eq
 8000b4a:	f020 0001 	biceq.w	r0, r0, #1
 8000b4e:	4770      	bx	lr
 8000b50:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b54:	d121      	bne.n	8000b9a <__aeabi_d2f+0x7a>
 8000b56:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b5a:	bfbc      	itt	lt
 8000b5c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	4770      	bxlt	lr
 8000b62:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b66:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b6a:	f1c2 0218 	rsb	r2, r2, #24
 8000b6e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b72:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b76:	fa20 f002 	lsr.w	r0, r0, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	f040 0001 	orrne.w	r0, r0, #1
 8000b80:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b84:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b88:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b8c:	ea40 000c 	orr.w	r0, r0, ip
 8000b90:	fa23 f302 	lsr.w	r3, r3, r2
 8000b94:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b98:	e7cc      	b.n	8000b34 <__aeabi_d2f+0x14>
 8000b9a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b9e:	d107      	bne.n	8000bb0 <__aeabi_d2f+0x90>
 8000ba0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ba4:	bf1e      	ittt	ne
 8000ba6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000baa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bae:	4770      	bxne	lr
 8000bb0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bb4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bb8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd4:	f000 b972 	b.w	8000ebc <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf4:	9e08      	ldr	r6, [sp, #32]
 8000bf6:	4604      	mov	r4, r0
 8000bf8:	4688      	mov	r8, r1
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d14b      	bne.n	8000c96 <__udivmoddi4+0xa6>
 8000bfe:	428a      	cmp	r2, r1
 8000c00:	4615      	mov	r5, r2
 8000c02:	d967      	bls.n	8000cd4 <__udivmoddi4+0xe4>
 8000c04:	fab2 f282 	clz	r2, r2
 8000c08:	b14a      	cbz	r2, 8000c1e <__udivmoddi4+0x2e>
 8000c0a:	f1c2 0720 	rsb	r7, r2, #32
 8000c0e:	fa01 f302 	lsl.w	r3, r1, r2
 8000c12:	fa20 f707 	lsr.w	r7, r0, r7
 8000c16:	4095      	lsls	r5, r2
 8000c18:	ea47 0803 	orr.w	r8, r7, r3
 8000c1c:	4094      	lsls	r4, r2
 8000c1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c22:	0c23      	lsrs	r3, r4, #16
 8000c24:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c28:	fa1f fc85 	uxth.w	ip, r5
 8000c2c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c30:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c34:	fb07 f10c 	mul.w	r1, r7, ip
 8000c38:	4299      	cmp	r1, r3
 8000c3a:	d909      	bls.n	8000c50 <__udivmoddi4+0x60>
 8000c3c:	18eb      	adds	r3, r5, r3
 8000c3e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c42:	f080 811b 	bcs.w	8000e7c <__udivmoddi4+0x28c>
 8000c46:	4299      	cmp	r1, r3
 8000c48:	f240 8118 	bls.w	8000e7c <__udivmoddi4+0x28c>
 8000c4c:	3f02      	subs	r7, #2
 8000c4e:	442b      	add	r3, r5
 8000c50:	1a5b      	subs	r3, r3, r1
 8000c52:	b2a4      	uxth	r4, r4
 8000c54:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c58:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c60:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c64:	45a4      	cmp	ip, r4
 8000c66:	d909      	bls.n	8000c7c <__udivmoddi4+0x8c>
 8000c68:	192c      	adds	r4, r5, r4
 8000c6a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6e:	f080 8107 	bcs.w	8000e80 <__udivmoddi4+0x290>
 8000c72:	45a4      	cmp	ip, r4
 8000c74:	f240 8104 	bls.w	8000e80 <__udivmoddi4+0x290>
 8000c78:	3802      	subs	r0, #2
 8000c7a:	442c      	add	r4, r5
 8000c7c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c80:	eba4 040c 	sub.w	r4, r4, ip
 8000c84:	2700      	movs	r7, #0
 8000c86:	b11e      	cbz	r6, 8000c90 <__udivmoddi4+0xa0>
 8000c88:	40d4      	lsrs	r4, r2
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c90:	4639      	mov	r1, r7
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d909      	bls.n	8000cae <__udivmoddi4+0xbe>
 8000c9a:	2e00      	cmp	r6, #0
 8000c9c:	f000 80eb 	beq.w	8000e76 <__udivmoddi4+0x286>
 8000ca0:	2700      	movs	r7, #0
 8000ca2:	e9c6 0100 	strd	r0, r1, [r6]
 8000ca6:	4638      	mov	r0, r7
 8000ca8:	4639      	mov	r1, r7
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	fab3 f783 	clz	r7, r3
 8000cb2:	2f00      	cmp	r7, #0
 8000cb4:	d147      	bne.n	8000d46 <__udivmoddi4+0x156>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xd0>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 80fa 	bhi.w	8000eb4 <__udivmoddi4+0x2c4>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	4698      	mov	r8, r3
 8000cca:	2e00      	cmp	r6, #0
 8000ccc:	d0e0      	beq.n	8000c90 <__udivmoddi4+0xa0>
 8000cce:	e9c6 4800 	strd	r4, r8, [r6]
 8000cd2:	e7dd      	b.n	8000c90 <__udivmoddi4+0xa0>
 8000cd4:	b902      	cbnz	r2, 8000cd8 <__udivmoddi4+0xe8>
 8000cd6:	deff      	udf	#255	; 0xff
 8000cd8:	fab2 f282 	clz	r2, r2
 8000cdc:	2a00      	cmp	r2, #0
 8000cde:	f040 808f 	bne.w	8000e00 <__udivmoddi4+0x210>
 8000ce2:	1b49      	subs	r1, r1, r5
 8000ce4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ce8:	fa1f f885 	uxth.w	r8, r5
 8000cec:	2701      	movs	r7, #1
 8000cee:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cf2:	0c23      	lsrs	r3, r4, #16
 8000cf4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb08 f10c 	mul.w	r1, r8, ip
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d907      	bls.n	8000d14 <__udivmoddi4+0x124>
 8000d04:	18eb      	adds	r3, r5, r3
 8000d06:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x122>
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	f200 80cd 	bhi.w	8000eac <__udivmoddi4+0x2bc>
 8000d12:	4684      	mov	ip, r0
 8000d14:	1a59      	subs	r1, r3, r1
 8000d16:	b2a3      	uxth	r3, r4
 8000d18:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d1c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d20:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d24:	fb08 f800 	mul.w	r8, r8, r0
 8000d28:	45a0      	cmp	r8, r4
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x14c>
 8000d2c:	192c      	adds	r4, r5, r4
 8000d2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x14a>
 8000d34:	45a0      	cmp	r8, r4
 8000d36:	f200 80b6 	bhi.w	8000ea6 <__udivmoddi4+0x2b6>
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	eba4 0408 	sub.w	r4, r4, r8
 8000d40:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d44:	e79f      	b.n	8000c86 <__udivmoddi4+0x96>
 8000d46:	f1c7 0c20 	rsb	ip, r7, #32
 8000d4a:	40bb      	lsls	r3, r7
 8000d4c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d50:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d54:	fa01 f407 	lsl.w	r4, r1, r7
 8000d58:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d5c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d60:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d64:	4325      	orrs	r5, r4
 8000d66:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d6a:	0c2c      	lsrs	r4, r5, #16
 8000d6c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d70:	fa1f fa8e 	uxth.w	sl, lr
 8000d74:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d78:	fb09 f40a 	mul.w	r4, r9, sl
 8000d7c:	429c      	cmp	r4, r3
 8000d7e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d82:	fa00 f107 	lsl.w	r1, r0, r7
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b0>
 8000d88:	eb1e 0303 	adds.w	r3, lr, r3
 8000d8c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d90:	f080 8087 	bcs.w	8000ea2 <__udivmoddi4+0x2b2>
 8000d94:	429c      	cmp	r4, r3
 8000d96:	f240 8084 	bls.w	8000ea2 <__udivmoddi4+0x2b2>
 8000d9a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d9e:	4473      	add	r3, lr
 8000da0:	1b1b      	subs	r3, r3, r4
 8000da2:	b2ad      	uxth	r5, r5
 8000da4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da8:	fb08 3310 	mls	r3, r8, r0, r3
 8000dac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000db0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000db4:	45a2      	cmp	sl, r4
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1da>
 8000db8:	eb1e 0404 	adds.w	r4, lr, r4
 8000dbc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc0:	d26b      	bcs.n	8000e9a <__udivmoddi4+0x2aa>
 8000dc2:	45a2      	cmp	sl, r4
 8000dc4:	d969      	bls.n	8000e9a <__udivmoddi4+0x2aa>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4474      	add	r4, lr
 8000dca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dce:	fba0 8902 	umull	r8, r9, r0, r2
 8000dd2:	eba4 040a 	sub.w	r4, r4, sl
 8000dd6:	454c      	cmp	r4, r9
 8000dd8:	46c2      	mov	sl, r8
 8000dda:	464b      	mov	r3, r9
 8000ddc:	d354      	bcc.n	8000e88 <__udivmoddi4+0x298>
 8000dde:	d051      	beq.n	8000e84 <__udivmoddi4+0x294>
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d069      	beq.n	8000eb8 <__udivmoddi4+0x2c8>
 8000de4:	ebb1 050a 	subs.w	r5, r1, sl
 8000de8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dec:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000df0:	40fd      	lsrs	r5, r7
 8000df2:	40fc      	lsrs	r4, r7
 8000df4:	ea4c 0505 	orr.w	r5, ip, r5
 8000df8:	e9c6 5400 	strd	r5, r4, [r6]
 8000dfc:	2700      	movs	r7, #0
 8000dfe:	e747      	b.n	8000c90 <__udivmoddi4+0xa0>
 8000e00:	f1c2 0320 	rsb	r3, r2, #32
 8000e04:	fa20 f703 	lsr.w	r7, r0, r3
 8000e08:	4095      	lsls	r5, r2
 8000e0a:	fa01 f002 	lsl.w	r0, r1, r2
 8000e0e:	fa21 f303 	lsr.w	r3, r1, r3
 8000e12:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e16:	4338      	orrs	r0, r7
 8000e18:	0c01      	lsrs	r1, r0, #16
 8000e1a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e1e:	fa1f f885 	uxth.w	r8, r5
 8000e22:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e26:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e2a:	fb07 f308 	mul.w	r3, r7, r8
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d907      	bls.n	8000e46 <__udivmoddi4+0x256>
 8000e36:	1869      	adds	r1, r5, r1
 8000e38:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e3c:	d22f      	bcs.n	8000e9e <__udivmoddi4+0x2ae>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d92d      	bls.n	8000e9e <__udivmoddi4+0x2ae>
 8000e42:	3f02      	subs	r7, #2
 8000e44:	4429      	add	r1, r5
 8000e46:	1acb      	subs	r3, r1, r3
 8000e48:	b281      	uxth	r1, r0
 8000e4a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e4e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e52:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e56:	fb00 f308 	mul.w	r3, r0, r8
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x27e>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e64:	d217      	bcs.n	8000e96 <__udivmoddi4+0x2a6>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d915      	bls.n	8000e96 <__udivmoddi4+0x2a6>
 8000e6a:	3802      	subs	r0, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1ac9      	subs	r1, r1, r3
 8000e70:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e74:	e73b      	b.n	8000cee <__udivmoddi4+0xfe>
 8000e76:	4637      	mov	r7, r6
 8000e78:	4630      	mov	r0, r6
 8000e7a:	e709      	b.n	8000c90 <__udivmoddi4+0xa0>
 8000e7c:	4607      	mov	r7, r0
 8000e7e:	e6e7      	b.n	8000c50 <__udivmoddi4+0x60>
 8000e80:	4618      	mov	r0, r3
 8000e82:	e6fb      	b.n	8000c7c <__udivmoddi4+0x8c>
 8000e84:	4541      	cmp	r1, r8
 8000e86:	d2ab      	bcs.n	8000de0 <__udivmoddi4+0x1f0>
 8000e88:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e8c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e90:	3801      	subs	r0, #1
 8000e92:	4613      	mov	r3, r2
 8000e94:	e7a4      	b.n	8000de0 <__udivmoddi4+0x1f0>
 8000e96:	4660      	mov	r0, ip
 8000e98:	e7e9      	b.n	8000e6e <__udivmoddi4+0x27e>
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	e795      	b.n	8000dca <__udivmoddi4+0x1da>
 8000e9e:	4667      	mov	r7, ip
 8000ea0:	e7d1      	b.n	8000e46 <__udivmoddi4+0x256>
 8000ea2:	4681      	mov	r9, r0
 8000ea4:	e77c      	b.n	8000da0 <__udivmoddi4+0x1b0>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	442c      	add	r4, r5
 8000eaa:	e747      	b.n	8000d3c <__udivmoddi4+0x14c>
 8000eac:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb0:	442b      	add	r3, r5
 8000eb2:	e72f      	b.n	8000d14 <__udivmoddi4+0x124>
 8000eb4:	4638      	mov	r0, r7
 8000eb6:	e708      	b.n	8000cca <__udivmoddi4+0xda>
 8000eb8:	4637      	mov	r7, r6
 8000eba:	e6e9      	b.n	8000c90 <__udivmoddi4+0xa0>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <Get_Keyindex>:

/** @brief returns the index of a note-letter depending on the keys-array
 * 	@param key: note-letter e.g. C
 * 	@return key index
 * 	*/
uint8_t Get_Keyindex(char key){
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]

	uint8_t keyindex = 0;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]

	for(int i = 0; i < 12; i++){
 8000ece:	2300      	movs	r3, #0
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	e00b      	b.n	8000eec <Get_Keyindex+0x2c>
		if(key == keys[i]) keyindex = i;
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <Get_Keyindex+0x40>)
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	4413      	add	r3, r2
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	79fa      	ldrb	r2, [r7, #7]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d101      	bne.n	8000ee6 <Get_Keyindex+0x26>
 8000ee2:	68bb      	ldr	r3, [r7, #8]
 8000ee4:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i < 12; i++){
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	2b0b      	cmp	r3, #11
 8000ef0:	ddf0      	ble.n	8000ed4 <Get_Keyindex+0x14>
	}
return keyindex;
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	0804ed2c 	.word	0x0804ed2c

08000f04 <Get_Note_Frequency>:


/**@brief returns the frequency of a music note listed in the
 */
double Get_Note_Frequency(uint8_t index,uint8_t octave){
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b087      	sub	sp, #28
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	71fb      	strb	r3, [r7, #7]
 8000f10:	4613      	mov	r3, r2
 8000f12:	71bb      	strb	r3, [r7, #6]
	int tmp_octave = 12*octave; //DEBUG
 8000f14:	79ba      	ldrb	r2, [r7, #6]
 8000f16:	4613      	mov	r3, r2
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	4413      	add	r3, r2
 8000f1c:	009b      	lsls	r3, r3, #2
 8000f1e:	617b      	str	r3, [r7, #20]
	double note_freq =LUT_FREQUENCYS[tmp_octave+index];
 8000f20:	79fa      	ldrb	r2, [r7, #7]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	4413      	add	r3, r2
 8000f26:	4a0b      	ldr	r2, [pc, #44]	; (8000f54 <Get_Note_Frequency+0x50>)
 8000f28:	009b      	lsls	r3, r3, #2
 8000f2a:	4413      	add	r3, r2
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff face 	bl	80004d0 <__aeabi_f2d>
 8000f34:	4603      	mov	r3, r0
 8000f36:	460c      	mov	r4, r1
 8000f38:	e9c7 3402 	strd	r3, r4, [r7, #8]
	return note_freq;
 8000f3c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000f40:	ec44 3b17 	vmov	d7, r3, r4
}
 8000f44:	eeb0 0a47 	vmov.f32	s0, s14
 8000f48:	eef0 0a67 	vmov.f32	s1, s15
 8000f4c:	371c      	adds	r7, #28
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd90      	pop	{r4, r7, pc}
 8000f52:	bf00      	nop
 8000f54:	0801fdf8 	.word	0x0801fdf8

08000f58 <Get_Note_Index>:

/**@brief returns the frequency of a music note listed in the
 */
uint16_t Get_Note_Index(char key,uint8_t octave){
 8000f58:	b590      	push	{r4, r7, lr}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	460a      	mov	r2, r1
 8000f62:	71fb      	strb	r3, [r7, #7]
 8000f64:	4613      	mov	r3, r2
 8000f66:	71bb      	strb	r3, [r7, #6]
	return 12*octave + Get_Keyindex(key);
 8000f68:	79bb      	ldrb	r3, [r7, #6]
 8000f6a:	b29b      	uxth	r3, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	0052      	lsls	r2, r2, #1
 8000f70:	4413      	add	r3, r2
 8000f72:	009b      	lsls	r3, r3, #2
 8000f74:	b29c      	uxth	r4, r3
 8000f76:	79fb      	ldrb	r3, [r7, #7]
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ffa1 	bl	8000ec0 <Get_Keyindex>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	4423      	add	r3, r4
 8000f84:	b29b      	uxth	r3, r3
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd90      	pop	{r4, r7, pc}
	...

08000f90 <Filters_Init>:
 * Global variables for FIR LPF Example
 * ------------------------------------------------------------------- */
uint32_t samplerate = LUT_SR;
float tempo[BLOCKSIZE];

DSP_Status Filters_Init(){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0

	SetupLowpass(&EQ_BAND1, 20, 0.707);
 8000f94:	eddf 0a04 	vldr	s1, [pc, #16]	; 8000fa8 <Filters_Init+0x18>
 8000f98:	eeb3 0a04 	vmov.f32	s0, #52	; 0x41a00000  20.0
 8000f9c:	4803      	ldr	r0, [pc, #12]	; (8000fac <Filters_Init+0x1c>)
 8000f9e:	f000 f807 	bl	8000fb0 <SetupLowpass>

	return DSP_OK;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	3f34fdf4 	.word	0x3f34fdf4
 8000fac:	2000c364 	.word	0x2000c364

08000fb0 <SetupLowpass>:


DSP_Status SetupLowpass(struct BQFilter *LP, float cutoff, float Q){
 8000fb0:	b5b0      	push	{r4, r5, r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	ed87 0a02 	vstr	s0, [r7, #8]
 8000fbc:	edc7 0a01 	vstr	s1, [r7, #4]

	float w0 = tanf(M_PI * cutoff / samplerate);
 8000fc0:	68b8      	ldr	r0, [r7, #8]
 8000fc2:	f7ff fa85 	bl	80004d0 <__aeabi_f2d>
 8000fc6:	a343      	add	r3, pc, #268	; (adr r3, 80010d4 <SetupLowpass+0x124>)
 8000fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fcc:	f7ff fad8 	bl	8000580 <__aeabi_dmul>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	460c      	mov	r4, r1
 8000fd4:	4625      	mov	r5, r4
 8000fd6:	461c      	mov	r4, r3
 8000fd8:	4b3d      	ldr	r3, [pc, #244]	; (80010d0 <SetupLowpass+0x120>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff fa55 	bl	800048c <__aeabi_ui2d>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
 8000fe6:	4620      	mov	r0, r4
 8000fe8:	4629      	mov	r1, r5
 8000fea:	f7ff fbf3 	bl	80007d4 <__aeabi_ddiv>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	460c      	mov	r4, r1
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	4621      	mov	r1, r4
 8000ff6:	f7ff fd93 	bl	8000b20 <__aeabi_d2f>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	ee00 3a10 	vmov	s0, r3
 8001000:	f004 fd00 	bl	8005a04 <tanf>
 8001004:	ed87 0a05 	vstr	s0, [r7, #20]
	float N = 1 / (w0 * w0 + w0 / Q + 1);
 8001008:	ed97 7a05 	vldr	s14, [r7, #20]
 800100c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001010:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001014:	ed97 6a05 	vldr	s12, [r7, #20]
 8001018:	edd7 6a01 	vldr	s13, [r7, #4]
 800101c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001024:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001028:	ee37 7a87 	vadd.f32	s14, s15, s14
 800102c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001030:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001034:	edc7 7a04 	vstr	s15, [r7, #16]

	LP->b0 = N * w0 * w0;
 8001038:	ed97 7a04 	vldr	s14, [r7, #16]
 800103c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001040:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001044:	edd7 7a05 	vldr	s15, [r7, #20]
 8001048:	ee67 7a27 	vmul.f32	s15, s14, s15
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	edc3 7a03 	vstr	s15, [r3, #12]
	LP->b1 = 2 * LP->b0;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	edd3 7a03 	vldr	s15, [r3, #12]
 8001058:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	edc3 7a04 	vstr	s15, [r3, #16]
	LP->b2 = LP->b0;
 8001062:	68fb      	ldr	r3, [r7, #12]
 8001064:	68da      	ldr	r2, [r3, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	615a      	str	r2, [r3, #20]
	LP->a1 = 2 * N * (w0 * w0 - 1);
 800106a:	edd7 7a04 	vldr	s15, [r7, #16]
 800106e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001072:	edd7 6a05 	vldr	s13, [r7, #20]
 8001076:	edd7 7a05 	vldr	s15, [r7, #20]
 800107a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800107e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001082:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	edc3 7a01 	vstr	s15, [r3, #4]
	LP->a2 = N * (w0 * w0 - w0 / Q + 1);
 8001090:	ed97 7a05 	vldr	s14, [r7, #20]
 8001094:	edd7 7a05 	vldr	s15, [r7, #20]
 8001098:	ee27 7a27 	vmul.f32	s14, s14, s15
 800109c:	ed97 6a05 	vldr	s12, [r7, #20]
 80010a0:	edd7 6a01 	vldr	s13, [r7, #4]
 80010a4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80010a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80010b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80010b4:	edd7 7a04 	vldr	s15, [r7, #16]
 80010b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	edc3 7a02 	vstr	s15, [r3, #8]

	return DSP_OK;
 80010c2:	2301      	movs	r3, #1
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bdb0      	pop	{r4, r5, r7, pc}
 80010cc:	f3af 8000 	nop.w
 80010d0:	20000000 	.word	0x20000000
 80010d4:	54442d18 	.word	0x54442d18
 80010d8:	400921fb 	.word	0x400921fb

080010dc <ProcessFilterTest>:
	//SetupHighpass(BP[1], cutoff_HP, QLP);

	return DSP_OK;
}

DSP_Status ProcessFilterTest(struct BQFilter *F,  float *data){
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	6039      	str	r1, [r7, #0]

	float input = 0;
 80010e6:	f04f 0300 	mov.w	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
	float out = 0;
 80010ec:	f04f 0300 	mov.w	r3, #0
 80010f0:	60bb      	str	r3, [r7, #8]

	input = *data;
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	60fb      	str	r3, [r7, #12]
	//out = input * F.b0 + F.z[0] * F.b1 + F.z[1] * F.b2 - F.z[2] * F.a1 - F.z[3] * F.a2;
	out = input * F->b0 + F->z[0] * F->b1 + F->z[1] * F->b2 - F->z[2] * F->a1 - F->z[3] * F->a2;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	ed93 7a03 	vldr	s14, [r3, #12]
 80010fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8001102:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	edd3 6a06 	vldr	s13, [r3, #24]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001116:	ee37 7a27 	vadd.f32	s14, s14, s15
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	edd3 6a07 	vldr	s13, [r3, #28]
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	edd3 7a05 	vldr	s15, [r3, #20]
 8001126:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800112a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	edd3 6a08 	vldr	s13, [r3, #32]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	edd3 7a01 	vldr	s15, [r3, #4]
 800113a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800113e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	edd3 7a02 	vldr	s15, [r3, #8]
 800114e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001156:	edc7 7a02 	vstr	s15, [r7, #8]
	F->z[3] = F->z[2];
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6a1a      	ldr	r2, [r3, #32]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	625a      	str	r2, [r3, #36]	; 0x24
	F->z[2] = out;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	68ba      	ldr	r2, [r7, #8]
 8001166:	621a      	str	r2, [r3, #32]
	F->z[1] = F->z[0];
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	699a      	ldr	r2, [r3, #24]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	61da      	str	r2, [r3, #28]
	F->z[0] = input;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	619a      	str	r2, [r3, #24]
	*data = out;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	68ba      	ldr	r2, [r7, #8]
 800117a:	601a      	str	r2, [r3, #0]

	return DSP_OK;
 800117c:	2301      	movs	r3, #1

}
 800117e:	4618      	mov	r0, r3
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
	...

0800118c <HAL_DAC_ConvCpltCallbackCh1>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//DAC_CHANNEL_1
void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac) {
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
	outputBuffer_position = FULL_BLOCK;
 8001194:	4b04      	ldr	r3, [pc, #16]	; (80011a8 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
 8001196:	2201      	movs	r2, #1
 8001198:	701a      	strb	r2, [r3, #0]
	//Signal_Synthesis_LFO(&tremollo);
	Signal_Synthesis();
 800119a:	f000 fbed 	bl	8001978 <Signal_Synthesis>



}
 800119e:	bf00      	nop
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200000a8 	.word	0x200000a8

080011ac <HAL_DAC_ConvHalfCpltCallbackCh1>:


void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
	outputBuffer_position = HALF_BLOCK;
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	701a      	strb	r2, [r3, #0]
	//Signal_Synthesis_LFO(&tremollo);
	Signal_Synthesis();
 80011ba:	f000 fbdd 	bl	8001978 <Signal_Synthesis>

}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	200000a8 	.word	0x200000a8

080011cc <HAL_DACEx_ConvHalfCpltCallbackCh2>:

//DAC_CHANNEL_2
void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac) {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]

}
 80011d4:	bf00      	nop
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <HAL_DACEx_ConvCpltCallbackCh2>:

void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac) {
 80011e0:	b480      	push	{r7}
 80011e2:	b083      	sub	sp, #12
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]

}
 80011e8:	bf00      	nop
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80011f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011f6:	b095      	sub	sp, #84	; 0x54
 80011f8:	af12      	add	r7, sp, #72	; 0x48
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011fa:	f000 ff84 	bl	8002106 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011fe:	f000 f84b 	bl	8001298 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001202:	f000 fa41 	bl	8001688 <MX_GPIO_Init>
	MX_TIM8_Init();
 8001206:	f000 f941 	bl	800148c <MX_TIM8_Init>
	MX_DMA_Init();
 800120a:	f000 fa17 	bl	800163c <MX_DMA_Init>
	MX_DAC_Init();
 800120e:	f000 f8d3 	bl	80013b8 <MX_DAC_Init>
	MX_TIM6_Init();
 8001212:	f000 f905 	bl	8001420 <MX_TIM6_Init>
	MX_USART3_UART_Init();
 8001216:	f000 f9e1 	bl	80015dc <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	Signal_Synthesis_Init(htim8, hdac);
 800121a:	4e1a      	ldr	r6, [pc, #104]	; (8001284 <main+0x90>)
 800121c:	4b1a      	ldr	r3, [pc, #104]	; (8001288 <main+0x94>)
 800121e:	ac0c      	add	r4, sp, #48	; 0x30
 8001220:	461d      	mov	r5, r3
 8001222:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001224:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001226:	682b      	ldr	r3, [r5, #0]
 8001228:	6023      	str	r3, [r4, #0]
 800122a:	466d      	mov	r5, sp
 800122c:	f106 0410 	add.w	r4, r6, #16
 8001230:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001232:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001236:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001238:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800123c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001240:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001244:	f000 fa80 	bl	8001748 <Signal_Synthesis_Init>
	Filters_Init();
 8001248:	f7ff fea2 	bl	8000f90 <Filters_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */



	tremollo.index = 0;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <main+0x98>)
 800124e:	2200      	movs	r2, #0
 8001250:	605a      	str	r2, [r3, #4]
	tremollo.frequency = 5;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <main+0x98>)
 8001254:	4a0e      	ldr	r2, [pc, #56]	; (8001290 <main+0x9c>)
 8001256:	60da      	str	r2, [r3, #12]
	tremollo.quarter = 0;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <main+0x98>)
 800125a:	2200      	movs	r2, #0
 800125c:	721a      	strb	r2, [r3, #8]





	HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, output_vector1 ,BLOCKSIZE, DAC_ALIGN_12B_R);
 800125e:	2300      	movs	r3, #0
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001266:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <main+0xa0>)
 8001268:	2100      	movs	r1, #0
 800126a:	4807      	ldr	r0, [pc, #28]	; (8001288 <main+0x94>)
 800126c:	f001 f8dc 	bl	8002428 <HAL_DAC_Start_DMA>

	//Example signal for test



	NewSignal(SIN, 'A',1);
 8001270:	2201      	movs	r2, #1
 8001272:	2141      	movs	r1, #65	; 0x41
 8001274:	2001      	movs	r0, #1
 8001276:	f000 fb01 	bl	800187c <NewSignal>
	HAL_Delay(1000);*/
	//starts the DAC output
	//  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1,(uint32_t)* output_vector1,BLOCKSIZE, DAC_ALIGN_12B_R);


	int i =0;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
	int c = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	603b      	str	r3, [r7, #0]
	while (1)
 8001282:	e7fe      	b.n	8001282 <main+0x8e>
 8001284:	20024550 	.word	0x20024550
 8001288:	20024674 	.word	0x20024674
 800128c:	20000100 	.word	0x20000100
 8001290:	40a00000 	.word	0x40a00000
 8001294:	2000013c 	.word	0x2000013c

08001298 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b0b4      	sub	sp, #208	; 0xd0
 800129c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800129e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80012a2:	2230      	movs	r2, #48	; 0x30
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f004 fba3 	bl	80059f2 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012bc:	f107 0308 	add.w	r3, r7, #8
 80012c0:	2284      	movs	r2, #132	; 0x84
 80012c2:	2100      	movs	r1, #0
 80012c4:	4618      	mov	r0, r3
 80012c6:	f004 fb94 	bl	80059f2 <memset>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80012ca:	4b39      	ldr	r3, [pc, #228]	; (80013b0 <SystemClock_Config+0x118>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	4a38      	ldr	r2, [pc, #224]	; (80013b0 <SystemClock_Config+0x118>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
 80012d6:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <SystemClock_Config+0x118>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e2:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <SystemClock_Config+0x11c>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a33      	ldr	r2, [pc, #204]	; (80013b4 <SystemClock_Config+0x11c>)
 80012e8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80012ec:	6013      	str	r3, [r2, #0]
 80012ee:	4b31      	ldr	r3, [pc, #196]	; (80013b4 <SystemClock_Config+0x11c>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012f6:	603b      	str	r3, [r7, #0]
 80012f8:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012fa:	2302      	movs	r3, #2
 80012fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001300:	2301      	movs	r3, #1
 8001302:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001306:	2310      	movs	r3, #16
 8001308:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130c:	2302      	movs	r3, #2
 800130e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001318:	2308      	movs	r3, #8
 800131a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 216;
 800131e:	23d8      	movs	r3, #216	; 0xd8
 8001320:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001324:	2302      	movs	r3, #2
 8001326:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 2;
 800132a:	2302      	movs	r3, #2
 800132c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001330:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001334:	4618      	mov	r0, r3
 8001336:	f001 ff7d 	bl	8003234 <HAL_RCC_OscConfig>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <SystemClock_Config+0xac>
	{
		Error_Handler();
 8001340:	f000 f9fa 	bl	8001738 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001344:	f001 ff26 	bl	8003194 <HAL_PWREx_EnableOverDrive>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0xba>
	{
		Error_Handler();
 800134e:	f000 f9f3 	bl	8001738 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001352:	230f      	movs	r3, #15
 8001354:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001358:	2302      	movs	r3, #2
 800135a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135e:	2300      	movs	r3, #0
 8001360:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001364:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001368:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800136c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001370:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001374:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001378:	2107      	movs	r1, #7
 800137a:	4618      	mov	r0, r3
 800137c:	f002 f9fe 	bl	800377c <HAL_RCC_ClockConfig>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <SystemClock_Config+0xf2>
	{
		Error_Handler();
 8001386:	f000 f9d7 	bl	8001738 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800138a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800138e:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001390:	2300      	movs	r3, #0
 8001392:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001394:	f107 0308 	add.w	r3, r7, #8
 8001398:	4618      	mov	r0, r3
 800139a:	f002 fbc1 	bl	8003b20 <HAL_RCCEx_PeriphCLKConfig>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <SystemClock_Config+0x110>
	{
		Error_Handler();
 80013a4:	f000 f9c8 	bl	8001738 <Error_Handler>
	}
}
 80013a8:	bf00      	nop
 80013aa:	37d0      	adds	r7, #208	; 0xd0
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	40023800 	.word	0x40023800
 80013b4:	40007000 	.word	0x40007000

080013b8 <MX_DAC_Init>:
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b082      	sub	sp, #8
 80013bc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC_Init 0 */

	/* USER CODE END DAC_Init 0 */

	DAC_ChannelConfTypeDef sConfig = {0};
 80013be:	463b      	mov	r3, r7
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
	/* USER CODE BEGIN DAC_Init 1 */

	/* USER CODE END DAC_Init 1 */
	/** DAC Initialization
	 */
	hdac.Instance = DAC;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <MX_DAC_Init+0x60>)
 80013c8:	4a14      	ldr	r2, [pc, #80]	; (800141c <MX_DAC_Init+0x64>)
 80013ca:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac) != HAL_OK)
 80013cc:	4812      	ldr	r0, [pc, #72]	; (8001418 <MX_DAC_Init+0x60>)
 80013ce:	f001 f808 	bl	80023e2 <HAL_DAC_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_DAC_Init+0x24>
	{
		Error_Handler();
 80013d8:	f000 f9ae 	bl	8001738 <Error_Handler>
	}
	/** DAC channel OUT1 config
	 */
	sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80013dc:	230c      	movs	r3, #12
 80013de:	603b      	str	r3, [r7, #0]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80013e4:	463b      	mov	r3, r7
 80013e6:	2200      	movs	r2, #0
 80013e8:	4619      	mov	r1, r3
 80013ea:	480b      	ldr	r0, [pc, #44]	; (8001418 <MX_DAC_Init+0x60>)
 80013ec:	f001 f8d4 	bl	8002598 <HAL_DAC_ConfigChannel>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_DAC_Init+0x42>
	{
		Error_Handler();
 80013f6:	f000 f99f 	bl	8001738 <Error_Handler>
	}
	/** DAC channel OUT2 config
	 */
	if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80013fa:	463b      	mov	r3, r7
 80013fc:	2210      	movs	r2, #16
 80013fe:	4619      	mov	r1, r3
 8001400:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_DAC_Init+0x60>)
 8001402:	f001 f8c9 	bl	8002598 <HAL_DAC_ConfigChannel>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_DAC_Init+0x58>
	{
		Error_Handler();
 800140c:	f000 f994 	bl	8001738 <Error_Handler>
	}
	/* USER CODE BEGIN DAC_Init 2 */

	/* USER CODE END DAC_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	20024674 	.word	0x20024674
 800141c:	40007400 	.word	0x40007400

08001420 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8001430:	4b14      	ldr	r3, [pc, #80]	; (8001484 <MX_TIM6_Init+0x64>)
 8001432:	4a15      	ldr	r2, [pc, #84]	; (8001488 <MX_TIM6_Init+0x68>)
 8001434:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 8001436:	4b13      	ldr	r3, [pc, #76]	; (8001484 <MX_TIM6_Init+0x64>)
 8001438:	2200      	movs	r2, #0
 800143a:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800143c:	4b11      	ldr	r3, [pc, #68]	; (8001484 <MX_TIM6_Init+0x64>)
 800143e:	2200      	movs	r2, #0
 8001440:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 5400;
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <MX_TIM6_Init+0x64>)
 8001444:	f241 5218 	movw	r2, #5400	; 0x1518
 8001448:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <MX_TIM6_Init+0x64>)
 800144c:	2280      	movs	r2, #128	; 0x80
 800144e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001450:	480c      	ldr	r0, [pc, #48]	; (8001484 <MX_TIM6_Init+0x64>)
 8001452:	f002 ff53 	bl	80042fc <HAL_TIM_Base_Init>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <MX_TIM6_Init+0x40>
	{
		Error_Handler();
 800145c:	f000 f96c 	bl	8001738 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001460:	2320      	movs	r3, #32
 8001462:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	4619      	mov	r1, r3
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_TIM6_Init+0x64>)
 800146e:	f003 fd3b 	bl	8004ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_TIM6_Init+0x5c>
	{
		Error_Handler();
 8001478:	f000 f95e 	bl	8001738 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	3710      	adds	r7, #16
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2002468c 	.word	0x2002468c
 8001488:	40001000 	.word	0x40001000

0800148c <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b09a      	sub	sp, #104	; 0x68
 8001490:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001492:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001496:	2200      	movs	r2, #0
 8001498:	601a      	str	r2, [r3, #0]
 800149a:	605a      	str	r2, [r3, #4]
 800149c:	609a      	str	r2, [r3, #8]
 800149e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	605a      	str	r2, [r3, #4]
 80014aa:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80014ac:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
 80014bc:	615a      	str	r2, [r3, #20]
 80014be:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	222c      	movs	r2, #44	; 0x2c
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f004 fa93 	bl	80059f2 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 80014cc:	4b41      	ldr	r3, [pc, #260]	; (80015d4 <MX_TIM8_Init+0x148>)
 80014ce:	4a42      	ldr	r2, [pc, #264]	; (80015d8 <MX_TIM8_Init+0x14c>)
 80014d0:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 80014d2:	4b40      	ldr	r3, [pc, #256]	; (80015d4 <MX_TIM8_Init+0x148>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d8:	4b3e      	ldr	r3, [pc, #248]	; (80015d4 <MX_TIM8_Init+0x148>)
 80014da:	2200      	movs	r2, #0
 80014dc:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 10800;
 80014de:	4b3d      	ldr	r3, [pc, #244]	; (80015d4 <MX_TIM8_Init+0x148>)
 80014e0:	f642 2230 	movw	r2, #10800	; 0x2a30
 80014e4:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e6:	4b3b      	ldr	r3, [pc, #236]	; (80015d4 <MX_TIM8_Init+0x148>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 80014ec:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <MX_TIM8_Init+0x148>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014f2:	4b38      	ldr	r3, [pc, #224]	; (80015d4 <MX_TIM8_Init+0x148>)
 80014f4:	2280      	movs	r2, #128	; 0x80
 80014f6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80014f8:	4836      	ldr	r0, [pc, #216]	; (80015d4 <MX_TIM8_Init+0x148>)
 80014fa:	f002 feff 	bl	80042fc <HAL_TIM_Base_Init>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d001      	beq.n	8001508 <MX_TIM8_Init+0x7c>
	{
		Error_Handler();
 8001504:	f000 f918 	bl	8001738 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800150c:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800150e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001512:	4619      	mov	r1, r3
 8001514:	482f      	ldr	r0, [pc, #188]	; (80015d4 <MX_TIM8_Init+0x148>)
 8001516:	f003 f895 	bl	8004644 <HAL_TIM_ConfigClockSource>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <MX_TIM8_Init+0x98>
	{
		Error_Handler();
 8001520:	f000 f90a 	bl	8001738 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001524:	482b      	ldr	r0, [pc, #172]	; (80015d4 <MX_TIM8_Init+0x148>)
 8001526:	f002 ff3f 	bl	80043a8 <HAL_TIM_PWM_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM8_Init+0xa8>
	{
		Error_Handler();
 8001530:	f000 f902 	bl	8001738 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001534:	2320      	movs	r3, #32
 8001536:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001538:	2300      	movs	r3, #0
 800153a:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001540:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001544:	4619      	mov	r1, r3
 8001546:	4823      	ldr	r0, [pc, #140]	; (80015d4 <MX_TIM8_Init+0x148>)
 8001548:	f003 fcce 	bl	8004ee8 <HAL_TIMEx_MasterConfigSynchronization>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM8_Init+0xca>
	{
		Error_Handler();
 8001552:	f000 f8f1 	bl	8001738 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001556:	2360      	movs	r3, #96	; 0x60
 8001558:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155e:	2300      	movs	r3, #0
 8001560:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800156e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001572:	220c      	movs	r2, #12
 8001574:	4619      	mov	r1, r3
 8001576:	4817      	ldr	r0, [pc, #92]	; (80015d4 <MX_TIM8_Init+0x148>)
 8001578:	f002 ff4c 	bl	8004414 <HAL_TIM_PWM_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM8_Init+0xfa>
	{
		Error_Handler();
 8001582:	f000 f8d9 	bl	8001738 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001596:	2300      	movs	r3, #0
 8001598:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800159a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800159e:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80015a0:	2300      	movs	r3, #0
 80015a2:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015a4:	2300      	movs	r3, #0
 80015a6:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015a8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4619      	mov	r1, r3
 80015ba:	4806      	ldr	r0, [pc, #24]	; (80015d4 <MX_TIM8_Init+0x148>)
 80015bc:	f003 fd22 	bl	8005004 <HAL_TIMEx_ConfigBreakDeadTime>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_TIM8_Init+0x13e>
	{
		Error_Handler();
 80015c6:	f000 f8b7 	bl	8001738 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	3768      	adds	r7, #104	; 0x68
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20024550 	.word	0x20024550
 80015d8:	40010400 	.word	0x40010400

080015dc <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_USART3_UART_Init+0x58>)
 80015e2:	4a15      	ldr	r2, [pc, #84]	; (8001638 <MX_USART3_UART_Init+0x5c>)
 80015e4:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80015e6:	4b13      	ldr	r3, [pc, #76]	; (8001634 <MX_USART3_UART_Init+0x58>)
 80015e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015ec:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <MX_USART3_UART_Init+0x58>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <MX_USART3_UART_Init+0x58>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <MX_USART3_UART_Init+0x58>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <MX_USART3_UART_Init+0x58>)
 8001602:	220c      	movs	r2, #12
 8001604:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001606:	4b0b      	ldr	r3, [pc, #44]	; (8001634 <MX_USART3_UART_Init+0x58>)
 8001608:	2200      	movs	r2, #0
 800160a:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800160c:	4b09      	ldr	r3, [pc, #36]	; (8001634 <MX_USART3_UART_Init+0x58>)
 800160e:	2200      	movs	r2, #0
 8001610:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001612:	4b08      	ldr	r3, [pc, #32]	; (8001634 <MX_USART3_UART_Init+0x58>)
 8001614:	2200      	movs	r2, #0
 8001616:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001618:	4b06      	ldr	r3, [pc, #24]	; (8001634 <MX_USART3_UART_Init+0x58>)
 800161a:	2200      	movs	r2, #0
 800161c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800161e:	4805      	ldr	r0, [pc, #20]	; (8001634 <MX_USART3_UART_Init+0x58>)
 8001620:	f003 fd6e 	bl	8005100 <HAL_UART_Init>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_USART3_UART_Init+0x52>
	{
		Error_Handler();
 800162a:	f000 f885 	bl	8001738 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20024590 	.word	0x20024590
 8001638:	40004800 	.word	0x40004800

0800163c <MX_DMA_Init>:

/** 
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) 
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001642:	4b10      	ldr	r3, [pc, #64]	; (8001684 <MX_DMA_Init+0x48>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <MX_DMA_Init+0x48>)
 8001648:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b0d      	ldr	r3, [pc, #52]	; (8001684 <MX_DMA_Init+0x48>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800165a:	2200      	movs	r2, #0
 800165c:	2100      	movs	r1, #0
 800165e:	2010      	movs	r0, #16
 8001660:	f000 fe89 	bl	8002376 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001664:	2010      	movs	r0, #16
 8001666:	f000 fea2 	bl	80023ae <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800166a:	2200      	movs	r2, #0
 800166c:	2100      	movs	r1, #0
 800166e:	2011      	movs	r0, #17
 8001670:	f000 fe81 	bl	8002376 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001674:	2011      	movs	r0, #17
 8001676:	f000 fe9a 	bl	80023ae <HAL_NVIC_EnableIRQ>

}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40023800 	.word	0x40023800

08001688 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b088      	sub	sp, #32
 800168c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	4b24      	ldr	r3, [pc, #144]	; (8001730 <MX_GPIO_Init+0xa8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	4a23      	ldr	r2, [pc, #140]	; (8001730 <MX_GPIO_Init+0xa8>)
 80016a4:	f043 0301 	orr.w	r3, r3, #1
 80016a8:	6313      	str	r3, [r2, #48]	; 0x30
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <MX_GPIO_Init+0xa8>)
 80016ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ae:	f003 0301 	and.w	r3, r3, #1
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016b6:	4b1e      	ldr	r3, [pc, #120]	; (8001730 <MX_GPIO_Init+0xa8>)
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	4a1d      	ldr	r2, [pc, #116]	; (8001730 <MX_GPIO_Init+0xa8>)
 80016bc:	f043 0302 	orr.w	r3, r3, #2
 80016c0:	6313      	str	r3, [r2, #48]	; 0x30
 80016c2:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <MX_GPIO_Init+0xa8>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	f003 0302 	and.w	r3, r3, #2
 80016ca:	607b      	str	r3, [r7, #4]
 80016cc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80016ce:	4b18      	ldr	r3, [pc, #96]	; (8001730 <MX_GPIO_Init+0xa8>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4a17      	ldr	r2, [pc, #92]	; (8001730 <MX_GPIO_Init+0xa8>)
 80016d4:	f043 0308 	orr.w	r3, r3, #8
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4b15      	ldr	r3, [pc, #84]	; (8001730 <MX_GPIO_Init+0xa8>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2181      	movs	r1, #129	; 0x81
 80016ea:	4812      	ldr	r0, [pc, #72]	; (8001734 <MX_GPIO_Init+0xac>)
 80016ec:	f001 fd38 	bl	8003160 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PB0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016f0:	2301      	movs	r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f4:	2301      	movs	r3, #1
 80016f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fc:	2303      	movs	r3, #3
 80016fe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	4619      	mov	r1, r3
 8001706:	480b      	ldr	r0, [pc, #44]	; (8001734 <MX_GPIO_Init+0xac>)
 8001708:	f001 fb80 	bl	8002e0c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 800170c:	2380      	movs	r3, #128	; 0x80
 800170e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001710:	2301      	movs	r3, #1
 8001712:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001718:	2300      	movs	r3, #0
 800171a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171c:	f107 030c 	add.w	r3, r7, #12
 8001720:	4619      	mov	r1, r3
 8001722:	4804      	ldr	r0, [pc, #16]	; (8001734 <MX_GPIO_Init+0xac>)
 8001724:	f001 fb72 	bl	8002e0c <HAL_GPIO_Init>

}
 8001728:	bf00      	nop
 800172a:	3720      	adds	r7, #32
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40023800 	.word	0x40023800
 8001734:	40020400 	.word	0x40020400

08001738 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 800173c:	bf00      	nop
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
	...

08001748 <Signal_Synthesis_Init>:
/**@brief Init funtion for the signal_synthesis, must be used in order to use any other funtion of this .c
 * @param htim: timer-handler which controls the DAC, timer have to be connected with DAC
 * @param hdac: is the DAC handler
 *@return gives HAL-Status of started timer back
 */
HAL_StatusTypeDef Signal_Synthesis_Init(TIM_HandleTypeDef htim, DAC_HandleTypeDef hdac){
 8001748:	b084      	sub	sp, #16
 800174a:	b590      	push	{r4, r7, lr}
 800174c:	b083      	sub	sp, #12
 800174e:	af00      	add	r7, sp, #0
 8001750:	f107 0418 	add.w	r4, r7, #24
 8001754:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	// Sets the maximal digital value which the DAC converts into analog voltage
	maxValueDAC = (double)DAC_MAXVALUE_TO_AMPLITUDE_RATIO * (double)AMPLITUDE;
 8001758:	4a19      	ldr	r2, [pc, #100]	; (80017c0 <Signal_Synthesis_Init+0x78>)
 800175a:	a417      	add	r4, pc, #92	; (adr r4, 80017b8 <Signal_Synthesis_Init+0x70>)
 800175c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001760:	e9c2 3400 	strd	r3, r4, [r2]
	outputBuffer_position = HALF_BLOCK;
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <Signal_Synthesis_Init+0x7c>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
	output_Channel = 1;
 800176a:	4b17      	ldr	r3, [pc, #92]	; (80017c8 <Signal_Synthesis_Init+0x80>)
 800176c:	2201      	movs	r2, #1
 800176e:	701a      	strb	r2, [r3, #0]
	signals1.count = 0;
 8001770:	4b16      	ldr	r3, [pc, #88]	; (80017cc <Signal_Synthesis_Init+0x84>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]

	//Sets all taken ID to zero
	for(int Signal_Synthesis_Init_count = 0; Signal_Synthesis_Init_count < MAX_SIGNAL_KOMBINATION;Signal_Synthesis_Init_count++){
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	e007      	b.n	800178c <Signal_Synthesis_Init+0x44>
		ID_array[Signal_Synthesis_Init_count]=0;
 800177c:	4a14      	ldr	r2, [pc, #80]	; (80017d0 <Signal_Synthesis_Init+0x88>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
	for(int Signal_Synthesis_Init_count = 0; Signal_Synthesis_Init_count < MAX_SIGNAL_KOMBINATION;Signal_Synthesis_Init_count++){
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3301      	adds	r3, #1
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b13      	cmp	r3, #19
 8001790:	ddf4      	ble.n	800177c <Signal_Synthesis_Init+0x34>
	}
	//Inits and starts timer connected with DAC
	SetTimerSettings(&htim, LUT_SR);
 8001792:	4910      	ldr	r1, [pc, #64]	; (80017d4 <Signal_Synthesis_Init+0x8c>)
 8001794:	f107 0018 	add.w	r0, r7, #24
 8001798:	f000 f81e 	bl	80017d8 <SetTimerSettings>
	return HAL_TIM_Base_Start(&htim);
 800179c:	f107 0018 	add.w	r0, r7, #24
 80017a0:	f002 fdd8 	bl	8004354 <HAL_TIM_Base_Start>
 80017a4:	4603      	mov	r3, r0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80017b0:	b004      	add	sp, #16
 80017b2:	4770      	bx	lr
 80017b4:	f3af 8000 	nop.w
 80017b8:	364d9360 	.word	0x364d9360
 80017bc:	40a364d9 	.word	0x40a364d9
 80017c0:	20000008 	.word	0x20000008
 80017c4:	200000a8 	.word	0x200000a8
 80017c8:	200000d4 	.word	0x200000d4
 80017cc:	2000c168 	.word	0x2000c168
 80017d0:	2000c2d8 	.word	0x2000c2d8
 80017d4:	00017700 	.word	0x00017700

080017d8 <SetTimerSettings>:

/**@brief Init funtion for the Timer which triggers the DAC, this function sets the timerperiode and presacaler
 * @param htim: timer-handler which controls the DAC, timer have to be connected with DAC
 * @param SR: Sample Rate
 */
void SetTimerSettings(TIM_HandleTypeDef* htim, uint32_t SR) {
 80017d8:	b5b0      	push	{r4, r5, r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]

	uint32_t Clock = HAL_RCC_GetHCLKFreq();	// system core clock HCLK
 80017e2:	f002 f969 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 80017e6:	6138      	str	r0, [r7, #16]
	uint32_t values_length = 65536;
 80017e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ec:	60fb      	str	r3, [r7, #12]
	uint16_t prescaler;
	uint32_t timerperiod;

	for(int i=1; i<values_length; i++) {
 80017ee:	2301      	movs	r3, #1
 80017f0:	617b      	str	r3, [r7, #20]
 80017f2:	e02b      	b.n	800184c <SetTimerSettings+0x74>

		prescaler = fmod(Clock, i);	// modulo-operation
 80017f4:	6938      	ldr	r0, [r7, #16]
 80017f6:	f7fe fe49 	bl	800048c <__aeabi_ui2d>
 80017fa:	4604      	mov	r4, r0
 80017fc:	460d      	mov	r5, r1
 80017fe:	6978      	ldr	r0, [r7, #20]
 8001800:	f7fe fe54 	bl	80004ac <__aeabi_i2d>
 8001804:	4602      	mov	r2, r0
 8001806:	460b      	mov	r3, r1
 8001808:	ec43 2b11 	vmov	d1, r2, r3
 800180c:	ec45 4b10 	vmov	d0, r4, r5
 8001810:	f004 f920 	bl	8005a54 <fmod>
 8001814:	ec54 3b10 	vmov	r3, r4, d0
 8001818:	4618      	mov	r0, r3
 800181a:	4621      	mov	r1, r4
 800181c:	f7ff f960 	bl	8000ae0 <__aeabi_d2uiz>
 8001820:	4603      	mov	r3, r0
 8001822:	83fb      	strh	r3, [r7, #30]
		if(prescaler == 0) {// find possible prescaler Values
 8001824:	8bfb      	ldrh	r3, [r7, #30]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d10d      	bne.n	8001846 <SetTimerSettings+0x6e>
			prescaler = i;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	83fb      	strh	r3, [r7, #30]
			timerperiod = Clock/( prescaler * SR );//set timerperiod
 800182e:	8bfb      	ldrh	r3, [r7, #30]
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	fb02 f303 	mul.w	r3, r2, r3
 8001836:	693a      	ldr	r2, [r7, #16]
 8001838:	fbb2 f3f3 	udiv	r3, r2, r3
 800183c:	61bb      	str	r3, [r7, #24]
			if (timerperiod < values_length){
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	429a      	cmp	r2, r3
 8001844:	d307      	bcc.n	8001856 <SetTimerSettings+0x7e>
	for(int i=1; i<values_length; i++) {
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	3301      	adds	r3, #1
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	429a      	cmp	r2, r3
 8001852:	d8cf      	bhi.n	80017f4 <SetTimerSettings+0x1c>
 8001854:	e000      	b.n	8001858 <SetTimerSettings+0x80>
				break;
 8001856:	bf00      	nop
			}
		}
	}//end for-loop

	__HAL_TIM_SET_AUTORELOAD(htim, timerperiod-1);	// update timer settings
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	3a01      	subs	r2, #1
 8001860:	62da      	str	r2, [r3, #44]	; 0x2c
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	1e5a      	subs	r2, r3, #1
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	60da      	str	r2, [r3, #12]
	__HAL_TIM_SET_PRESCALER(htim, prescaler-1);
 800186a:	8bfb      	ldrh	r3, [r7, #30]
 800186c:	1e5a      	subs	r2, r3, #1
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	629a      	str	r2, [r3, #40]	; 0x28
	//TIM6->ARR = period-1;
	//TIM6->PSC = prescaler-1;
}
 8001874:	bf00      	nop
 8001876:	3720      	adds	r7, #32
 8001878:	46bd      	mov	sp, r7
 800187a:	bdb0      	pop	{r4, r5, r7, pc}

0800187c <NewSignal>:
 *  @param kind: kind of the signal, use signal_kind_enum
 *  @param key:  is string which is a note key from C to b
 *  @param octave: defines in which octave the key is settled.
 *  @attention the combination of key and octave defines the frequency
 */
void NewSignal(uint8_t kind, uint8_t key, uint8_t octave){
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
 8001886:	460b      	mov	r3, r1
 8001888:	71bb      	strb	r3, [r7, #6]
 800188a:	4613      	mov	r3, r2
 800188c:	717b      	strb	r3, [r7, #5]

	if (signals1.count <= MAX_SIGNAL_KOMBINATION){
 800188e:	4b37      	ldr	r3, [pc, #220]	; (800196c <NewSignal+0xf0>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	2b14      	cmp	r3, #20
 8001894:	d865      	bhi.n	8001962 <NewSignal+0xe6>
		signals1.count += 1;
 8001896:	4b35      	ldr	r3, [pc, #212]	; (800196c <NewSignal+0xf0>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	3301      	adds	r3, #1
 800189c:	b2da      	uxtb	r2, r3
 800189e:	4b33      	ldr	r3, [pc, #204]	; (800196c <NewSignal+0xf0>)
 80018a0:	701a      	strb	r2, [r3, #0]
		uint8_t index = signals1.count-1;
 80018a2:	4b32      	ldr	r3, [pc, #200]	; (800196c <NewSignal+0xf0>)
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	3b01      	subs	r3, #1
 80018a8:	72fb      	strb	r3, [r7, #11]

		signals1.kind[index] = kind;
 80018aa:	7afb      	ldrb	r3, [r7, #11]
 80018ac:	79fa      	ldrb	r2, [r7, #7]
 80018ae:	492f      	ldr	r1, [pc, #188]	; (800196c <NewSignal+0xf0>)
 80018b0:	3302      	adds	r3, #2
 80018b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		signals1.freq[index] = Get_Note_Frequency(Get_Keyindex(key), octave);
 80018b6:	79bb      	ldrb	r3, [r7, #6]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fb01 	bl	8000ec0 <Get_Keyindex>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	7afc      	ldrb	r4, [r7, #11]
 80018c4:	797b      	ldrb	r3, [r7, #5]
 80018c6:	4619      	mov	r1, r3
 80018c8:	4610      	mov	r0, r2
 80018ca:	f7ff fb1b 	bl	8000f04 <Get_Note_Frequency>
 80018ce:	eeb0 7a40 	vmov.f32	s14, s0
 80018d2:	eef0 7a60 	vmov.f32	s15, s1
 80018d6:	4a25      	ldr	r2, [pc, #148]	; (800196c <NewSignal+0xf0>)
 80018d8:	f104 030b 	add.w	r3, r4, #11
 80018dc:	00db      	lsls	r3, r3, #3
 80018de:	4413      	add	r3, r2
 80018e0:	ed83 7b00 	vstr	d7, [r3]
		signals1.freqIndex[index] = Get_Note_Index(key,octave);
 80018e4:	797a      	ldrb	r2, [r7, #5]
 80018e6:	79bb      	ldrb	r3, [r7, #6]
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f7ff fb34 	bl	8000f58 <Get_Note_Index>
 80018f0:	4603      	mov	r3, r0
 80018f2:	461a      	mov	r2, r3
 80018f4:	7afb      	ldrb	r3, [r7, #11]
 80018f6:	b2d1      	uxtb	r1, r2
 80018f8:	4a1c      	ldr	r2, [pc, #112]	; (800196c <NewSignal+0xf0>)
 80018fa:	4413      	add	r3, r2
 80018fc:	460a      	mov	r2, r1
 80018fe:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		signals1.current_LUT_Index[index] = LUT_STARTINDEX[signals1.freqIndex[index]];
 8001902:	7afb      	ldrb	r3, [r7, #11]
 8001904:	4a19      	ldr	r2, [pc, #100]	; (800196c <NewSignal+0xf0>)
 8001906:	4413      	add	r3, r2
 8001908:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
 800190c:	4619      	mov	r1, r3
 800190e:	7afb      	ldrb	r3, [r7, #11]
 8001910:	4a17      	ldr	r2, [pc, #92]	; (8001970 <NewSignal+0xf4>)
 8001912:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8001916:	4915      	ldr	r1, [pc, #84]	; (800196c <NewSignal+0xf0>)
 8001918:	3342      	adds	r3, #66	; 0x42
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	440b      	add	r3, r1
 800191e:	605a      	str	r2, [r3, #4]
		signals1.max = 0;
 8001920:	4b12      	ldr	r3, [pc, #72]	; (800196c <NewSignal+0xf0>)
 8001922:	f04f 0200 	mov.w	r2, #0
 8001926:	605a      	str	r2, [r3, #4]
		for (int NewSignal_count = 0; NewSignal_count < MAX_SIGNAL_KOMBINATION;NewSignal_count++){
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	e016      	b.n	800195c <NewSignal+0xe0>
			if(!ID_array[NewSignal_count]){
 800192e:	4a11      	ldr	r2, [pc, #68]	; (8001974 <NewSignal+0xf8>)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4413      	add	r3, r2
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d10d      	bne.n	8001956 <NewSignal+0xda>
				signals1.ID[NewSignal_count] = NewSignal_count;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	b2d9      	uxtb	r1, r3
 800193e:	4a0b      	ldr	r2, [pc, #44]	; (800196c <NewSignal+0xf0>)
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	4413      	add	r3, r2
 8001944:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 8001948:	460a      	mov	r2, r1
 800194a:	701a      	strb	r2, [r3, #0]
				ID_array[NewSignal_count] = 1;
 800194c:	4a09      	ldr	r2, [pc, #36]	; (8001974 <NewSignal+0xf8>)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4413      	add	r3, r2
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
		for (int NewSignal_count = 0; NewSignal_count < MAX_SIGNAL_KOMBINATION;NewSignal_count++){
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	3301      	adds	r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2b13      	cmp	r3, #19
 8001960:	dde5      	ble.n	800192e <NewSignal+0xb2>

		}

	}

}
 8001962:	bf00      	nop
 8001964:	3714      	adds	r7, #20
 8001966:	46bd      	mov	sp, r7
 8001968:	bd90      	pop	{r4, r7, pc}
 800196a:	bf00      	nop
 800196c:	2000c168 	.word	0x2000c168
 8001970:	0801fbb0 	.word	0x0801fbb0
 8001974:	2000c2d8 	.word	0x2000c2d8

08001978 <Signal_Synthesis>:



/** @brief generates a signal in the outputvector, depending on the signals inside the struct signals1. To add signals use NewSignal and to delete signals use DeleteSignal
 */
void Signal_Synthesis(){
 8001978:	b590      	push	{r4, r7, lr}
 800197a:	b0e5      	sub	sp, #404	; 0x194
 800197c:	af00      	add	r7, sp, #0

	//Variables
	float addValue=0;
 800197e:	f04f 0300 	mov.w	r3, #0
 8001982:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
	uint8_t count;
	struct signal signals;
	// decide if Channel 1 or Channel 2
	/**@TODO */
	if (output_Channel == 1){
 8001986:	4bcc      	ldr	r3, [pc, #816]	; (8001cb8 <Signal_Synthesis+0x340>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d10c      	bne.n	80019a8 <Signal_Synthesis+0x30>
		count = signals1.count;
 800198e:	4bcb      	ldr	r3, [pc, #812]	; (8001cbc <Signal_Synthesis+0x344>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
		signals = signals1;
 8001996:	463b      	mov	r3, r7
 8001998:	4ac8      	ldr	r2, [pc, #800]	; (8001cbc <Signal_Synthesis+0x344>)
 800199a:	4618      	mov	r0, r3
 800199c:	4611      	mov	r1, r2
 800199e:	f44f 73b8 	mov.w	r3, #368	; 0x170
 80019a2:	461a      	mov	r2, r3
 80019a4:	f004 f81a 	bl	80059dc <memcpy>
	//		}


	//decide if first half of BLOCKSIZE or second half
	uint16_t BLOOCKSIZE_startIndex, BLOOCKSIZE_endIndex;
	if (outputBuffer_position == HALF_BLOCK){
 80019a8:	4bc5      	ldr	r3, [pc, #788]	; (8001cc0 <Signal_Synthesis+0x348>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d107      	bne.n	80019c0 <Signal_Synthesis+0x48>
		BLOOCKSIZE_startIndex = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	f8a7 3188 	strh.w	r3, [r7, #392]	; 0x188
		BLOOCKSIZE_endIndex = (BLOCKSIZE/2);
 80019b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ba:	f8a7 3186 	strh.w	r3, [r7, #390]	; 0x186
 80019be:	e00b      	b.n	80019d8 <Signal_Synthesis+0x60>
	}
	else if(outputBuffer_position == FULL_BLOCK){
 80019c0:	4bbf      	ldr	r3, [pc, #764]	; (8001cc0 <Signal_Synthesis+0x348>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d107      	bne.n	80019d8 <Signal_Synthesis+0x60>
		BLOOCKSIZE_startIndex = BLOCKSIZE/2;
 80019c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019cc:	f8a7 3188 	strh.w	r3, [r7, #392]	; 0x188
		BLOOCKSIZE_endIndex  = BLOCKSIZE;
 80019d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019d4:	f8a7 3186 	strh.w	r3, [r7, #390]	; 0x186
	}

	//Loop to for first signal synthesis and find maximum
	for (int BLOCKSIZE_counter = BLOOCKSIZE_startIndex; BLOCKSIZE_counter < BLOOCKSIZE_endIndex ;BLOCKSIZE_counter++){
 80019d8:	f8b7 3188 	ldrh.w	r3, [r7, #392]	; 0x188
 80019dc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80019e0:	e080      	b.n	8001ae4 <Signal_Synthesis+0x16c>
		addValue = 0;
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
		//Loop to reach all Signals
		for (int j = 0; j < count;j++){
 80019ea:	2300      	movs	r3, #0
 80019ec:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 80019f0:	e052      	b.n	8001a98 <Signal_Synthesis+0x120>
			switch (signals.kind[j]) {
 80019f2:	463b      	mov	r3, r7
 80019f4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80019f8:	3202      	adds	r2, #2
 80019fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d145      	bne.n	8001a8e <Signal_Synthesis+0x116>
			case SIN:
				//adds all SIN values from the signals to addValue
				addValue = addValue + LUT[signals.current_LUT_Index[j]];
 8001a02:	463a      	mov	r2, r7
 8001a04:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001a08:	3342      	adds	r3, #66	; 0x42
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	4aac      	ldr	r2, [pc, #688]	; (8001cc4 <Signal_Synthesis+0x34c>)
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	ed97 7a63 	vldr	s14, [r7, #396]	; 0x18c
 8001a1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a22:	edc7 7a63 	vstr	s15, [r7, #396]	; 0x18c

				//get index for the next sin value
				signals.current_LUT_Index[j]++;
 8001a26:	463a      	mov	r2, r7
 8001a28:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001a2c:	3342      	adds	r3, #66	; 0x42
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	1c5a      	adds	r2, r3, #1
 8001a36:	4639      	mov	r1, r7
 8001a38:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001a3c:	3342      	adds	r3, #66	; 0x42
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	440b      	add	r3, r1
 8001a42:	605a      	str	r2, [r3, #4]
				if (signals.current_LUT_Index[j] > LUT_ENDINDEX[signals.freqIndex[j]])
 8001a44:	463a      	mov	r2, r7
 8001a46:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001a4a:	3342      	adds	r3, #66	; 0x42
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	4413      	add	r3, r2
 8001a50:	685a      	ldr	r2, [r3, #4]
 8001a52:	4639      	mov	r1, r7
 8001a54:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001a58:	440b      	add	r3, r1
 8001a5a:	33f8      	adds	r3, #248	; 0xf8
 8001a5c:	781b      	ldrb	r3, [r3, #0]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4b99      	ldr	r3, [pc, #612]	; (8001cc8 <Signal_Synthesis+0x350>)
 8001a62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d910      	bls.n	8001a8c <Signal_Synthesis+0x114>
				{
					signals.current_LUT_Index[j] = LUT_STARTINDEX[signals1.freqIndex[j]];
 8001a6a:	4a94      	ldr	r2, [pc, #592]	; (8001cbc <Signal_Synthesis+0x344>)
 8001a6c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001a70:	4413      	add	r3, r2
 8001a72:	33f8      	adds	r3, #248	; 0xf8
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	461a      	mov	r2, r3
 8001a78:	4b94      	ldr	r3, [pc, #592]	; (8001ccc <Signal_Synthesis+0x354>)
 8001a7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001a7e:	4639      	mov	r1, r7
 8001a80:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001a84:	3342      	adds	r3, #66	; 0x42
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	440b      	add	r3, r1
 8001a8a:	605a      	str	r2, [r3, #4]
				}
				break;
 8001a8c:	bf00      	nop
		for (int j = 0; j < count;j++){
 8001a8e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001a92:	3301      	adds	r3, #1
 8001a94:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001a98:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8001a9c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	dba6      	blt.n	80019f2 <Signal_Synthesis+0x7a>
		}// SIgnal counter for-loop



		//maximum
		if (signals.max < fabs((double)addValue)){
 8001aa4:	463b      	mov	r3, r7
 8001aa6:	ed93 7a01 	vldr	s14, [r3, #4]
 8001aaa:	edd7 7a63 	vldr	s15, [r7, #396]	; 0x18c
 8001aae:	eef0 7ae7 	vabs.f32	s15, s15
 8001ab2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ab6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aba:	d506      	bpl.n	8001aca <Signal_Synthesis+0x152>
			signals.max = fabs((double)addValue);
 8001abc:	edd7 7a63 	vldr	s15, [r7, #396]	; 0x18c
 8001ac0:	eef0 7ae7 	vabs.f32	s15, s15
 8001ac4:	463b      	mov	r3, r7
 8001ac6:	edc3 7a01 	vstr	s15, [r3, #4]




		//write into calculate vector
		calculate_vector1[BLOCKSIZE_counter] = addValue;
 8001aca:	4a81      	ldr	r2, [pc, #516]	; (8001cd0 <Signal_Synthesis+0x358>)
 8001acc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8001ad8:	601a      	str	r2, [r3, #0]
	for (int BLOCKSIZE_counter = BLOOCKSIZE_startIndex; BLOCKSIZE_counter < BLOOCKSIZE_endIndex ;BLOCKSIZE_counter++){
 8001ada:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001ae4:	f8b7 3186 	ldrh.w	r3, [r7, #390]	; 0x186
 8001ae8:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8001aec:	429a      	cmp	r2, r3
 8001aee:	f6ff af78 	blt.w	80019e2 <Signal_Synthesis+0x6a>

	} //BLOCKSIZE for-Loop I


	//Loop to adjust the signal
	for (int BLOCKSIZE_counter = BLOOCKSIZE_startIndex; BLOCKSIZE_counter < BLOOCKSIZE_endIndex ;BLOCKSIZE_counter++){
 8001af2:	f8b7 3188 	ldrh.w	r3, [r7, #392]	; 0x188
 8001af6:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001afa:	e0ce      	b.n	8001c9a <Signal_Synthesis+0x322>


		//norm the signal to -1...1
		//		addValue = addValue/count;
		calculate_vector1[BLOCKSIZE_counter] = calculate_vector1[BLOCKSIZE_counter]/signals.max;
 8001afc:	4a74      	ldr	r2, [pc, #464]	; (8001cd0 <Signal_Synthesis+0x358>)
 8001afe:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	edd3 6a00 	vldr	s13, [r3]
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	ed93 7a01 	vldr	s14, [r3, #4]
 8001b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b14:	4a6e      	ldr	r2, [pc, #440]	; (8001cd0 <Signal_Synthesis+0x358>)
 8001b16:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	4413      	add	r3, r2
 8001b1e:	edc3 7a00 	vstr	s15, [r3]
		//scale output signal depeding on amount of voices
		switch (signals.count){
 8001b22:	463b      	mov	r3, r7
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d86c      	bhi.n	8001c06 <Signal_Synthesis+0x28e>
 8001b2c:	a201      	add	r2, pc, #4	; (adr r2, 8001b34 <Signal_Synthesis+0x1bc>)
 8001b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b32:	bf00      	nop
 8001b34:	08001b49 	.word	0x08001b49
 8001b38:	08001b6f 	.word	0x08001b6f
 8001b3c:	08001b95 	.word	0x08001b95
 8001b40:	08001bbb 	.word	0x08001bbb
 8001b44:	08001be1 	.word	0x08001be1
		case 1:
			calculate_vector1[BLOCKSIZE_counter] = calculate_vector1[BLOCKSIZE_counter]/((float)2.37);// -7.5 dB
 8001b48:	4a61      	ldr	r2, [pc, #388]	; (8001cd0 <Signal_Synthesis+0x358>)
 8001b4a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	ed93 7a00 	vldr	s14, [r3]
 8001b56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8001cd4 <Signal_Synthesis+0x35c>
 8001b5a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b5e:	4a5c      	ldr	r2, [pc, #368]	; (8001cd0 <Signal_Synthesis+0x358>)
 8001b60:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001b6c:	e058      	b.n	8001c20 <Signal_Synthesis+0x2a8>
		case 2:
			calculate_vector1[BLOCKSIZE_counter] = calculate_vector1[BLOCKSIZE_counter] /((float)2);// -6 dB
 8001b6e:	4a58      	ldr	r2, [pc, #352]	; (8001cd0 <Signal_Synthesis+0x358>)
 8001b70:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	4413      	add	r3, r2
 8001b78:	ed93 7a00 	vldr	s14, [r3]
 8001b7c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001b80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b84:	4a52      	ldr	r2, [pc, #328]	; (8001cd0 <Signal_Synthesis+0x358>)
 8001b86:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	4413      	add	r3, r2
 8001b8e:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001b92:	e045      	b.n	8001c20 <Signal_Synthesis+0x2a8>
		case 3:
			calculate_vector1[BLOCKSIZE_counter] = calculate_vector1[BLOCKSIZE_counter] /((float)1.679);// -4.5 dB
 8001b94:	4a4e      	ldr	r2, [pc, #312]	; (8001cd0 <Signal_Synthesis+0x358>)
 8001b96:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	ed93 7a00 	vldr	s14, [r3]
 8001ba2:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8001cd8 <Signal_Synthesis+0x360>
 8001ba6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001baa:	4a49      	ldr	r2, [pc, #292]	; (8001cd0 <Signal_Synthesis+0x358>)
 8001bac:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	4413      	add	r3, r2
 8001bb4:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001bb8:	e032      	b.n	8001c20 <Signal_Synthesis+0x2a8>
		case 4:
			calculate_vector1[BLOCKSIZE_counter] = calculate_vector1[BLOCKSIZE_counter] /((float)sqrt((double)2));// -3 dB
 8001bba:	4a45      	ldr	r2, [pc, #276]	; (8001cd0 <Signal_Synthesis+0x358>)
 8001bbc:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	4413      	add	r3, r2
 8001bc4:	ed93 7a00 	vldr	s14, [r3]
 8001bc8:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001cdc <Signal_Synthesis+0x364>
 8001bcc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bd0:	4a3f      	ldr	r2, [pc, #252]	; (8001cd0 <Signal_Synthesis+0x358>)
 8001bd2:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001bde:	e01f      	b.n	8001c20 <Signal_Synthesis+0x2a8>
		case 5:
			calculate_vector1[BLOCKSIZE_counter] = calculate_vector1[BLOCKSIZE_counter] /((float)1.1885);// -1.5 dB
 8001be0:	4a3b      	ldr	r2, [pc, #236]	; (8001cd0 <Signal_Synthesis+0x358>)
 8001be2:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	4413      	add	r3, r2
 8001bea:	ed93 7a00 	vldr	s14, [r3]
 8001bee:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8001ce0 <Signal_Synthesis+0x368>
 8001bf2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bf6:	4a36      	ldr	r2, [pc, #216]	; (8001cd0 <Signal_Synthesis+0x358>)
 8001bf8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4413      	add	r3, r2
 8001c00:	edc3 7a00 	vstr	s15, [r3]
			break;
 8001c04:	e00c      	b.n	8001c20 <Signal_Synthesis+0x2a8>
		default:
			calculate_vector1[BLOCKSIZE_counter] = calculate_vector1[BLOCKSIZE_counter];
 8001c06:	4a32      	ldr	r2, [pc, #200]	; (8001cd0 <Signal_Synthesis+0x358>)
 8001c08:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	492f      	ldr	r1, [pc, #188]	; (8001cd0 <Signal_Synthesis+0x358>)
 8001c14:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	440b      	add	r3, r1
 8001c1c:	601a      	str	r2, [r3, #0]
			break;
 8001c1e:	bf00      	nop


		//Effekte
		//ProcessFilter(&EQ_BAND1, calculate_vector1, BLOOCKSIZE_endIndex);

		ProcessFilterTest(&EQ_BAND1, &calculate_vector1[BLOCKSIZE_counter]);
 8001c20:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4a2a      	ldr	r2, [pc, #168]	; (8001cd0 <Signal_Synthesis+0x358>)
 8001c28:	4413      	add	r3, r2
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	482d      	ldr	r0, [pc, #180]	; (8001ce4 <Signal_Synthesis+0x36c>)
 8001c2e:	f7ff fa55 	bl	80010dc <ProcessFilterTest>
		//				index_tmp++;
		//			}


		//Signal adjustment to DAC
		output_vector1[BLOCKSIZE_counter] =(uint32_t)((calculate_vector1[BLOCKSIZE_counter]+1)/2 * maxValueDAC + OFFSET );
 8001c32:	4a27      	ldr	r2, [pc, #156]	; (8001cd0 <Signal_Synthesis+0x358>)
 8001c34:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	4413      	add	r3, r2
 8001c3c:	edd3 7a00 	vldr	s15, [r3]
 8001c40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c44:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001c48:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001c4c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001c50:	ee16 0a90 	vmov	r0, s13
 8001c54:	f7fe fc3c 	bl	80004d0 <__aeabi_f2d>
 8001c58:	4b23      	ldr	r3, [pc, #140]	; (8001ce8 <Signal_Synthesis+0x370>)
 8001c5a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c5e:	461a      	mov	r2, r3
 8001c60:	4623      	mov	r3, r4
 8001c62:	f7fe fc8d 	bl	8000580 <__aeabi_dmul>
 8001c66:	4603      	mov	r3, r0
 8001c68:	460c      	mov	r4, r1
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	4621      	mov	r1, r4
 8001c6e:	a310      	add	r3, pc, #64	; (adr r3, 8001cb0 <Signal_Synthesis+0x338>)
 8001c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c74:	f7fe face 	bl	8000214 <__adddf3>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	460c      	mov	r4, r1
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	4621      	mov	r1, r4
 8001c80:	f7fe ff2e 	bl	8000ae0 <__aeabi_d2uiz>
 8001c84:	4601      	mov	r1, r0
 8001c86:	4a19      	ldr	r2, [pc, #100]	; (8001cec <Signal_Synthesis+0x374>)
 8001c88:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001c8c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int BLOCKSIZE_counter = BLOOCKSIZE_startIndex; BLOCKSIZE_counter < BLOOCKSIZE_endIndex ;BLOCKSIZE_counter++){
 8001c90:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8001c94:	3301      	adds	r3, #1
 8001c96:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8001c9a:	f8b7 3186 	ldrh.w	r3, [r7, #390]	; 0x186
 8001c9e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001ca2:	429a      	cmp	r2, r3
 8001ca4:	f6ff af2a 	blt.w	8001afc <Signal_Synthesis+0x184>
	} //BLOCKSIZE for-Loop II



	// save current LUT index into signals1,
	for (int tmp_count = 0 ; tmp_count < signals.count; tmp_count++){
 8001ca8:	2300      	movs	r3, #0
 8001caa:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001cae:	e032      	b.n	8001d16 <Signal_Synthesis+0x39e>
 8001cb0:	00000000 	.word	0x00000000
 8001cb4:	40622000 	.word	0x40622000
 8001cb8:	200000d4 	.word	0x200000d4
 8001cbc:	2000c168 	.word	0x2000c168
 8001cc0:	200000a8 	.word	0x200000a8
 8001cc4:	080067f0 	.word	0x080067f0
 8001cc8:	0801fa8c 	.word	0x0801fa8c
 8001ccc:	0801fbb0 	.word	0x0801fbb0
 8001cd0:	2001c3b4 	.word	0x2001c3b4
 8001cd4:	4017ae14 	.word	0x4017ae14
 8001cd8:	3fd6e979 	.word	0x3fd6e979
 8001cdc:	3fb504f3 	.word	0x3fb504f3
 8001ce0:	3f9820c5 	.word	0x3f9820c5
 8001ce4:	2000c364 	.word	0x2000c364
 8001ce8:	20000008 	.word	0x20000008
 8001cec:	2000013c 	.word	0x2000013c
		signals1.current_LUT_Index[tmp_count] = signals.current_LUT_Index[tmp_count];
 8001cf0:	463a      	mov	r2, r7
 8001cf2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001cf6:	3342      	adds	r3, #66	; 0x42
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	490c      	ldr	r1, [pc, #48]	; (8001d30 <Signal_Synthesis+0x3b8>)
 8001d00:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001d04:	3342      	adds	r3, #66	; 0x42
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	605a      	str	r2, [r3, #4]
	for (int tmp_count = 0 ; tmp_count < signals.count; tmp_count++){
 8001d0c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001d10:	3301      	adds	r3, #1
 8001d12:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8001d16:	463b      	mov	r3, r7
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001d20:	4293      	cmp	r3, r2
 8001d22:	dbe5      	blt.n	8001cf0 <Signal_Synthesis+0x378>
	}

}//Signal Synthesis
 8001d24:	bf00      	nop
 8001d26:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd90      	pop	{r4, r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	2000c168 	.word	0x2000c168

08001d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001d3a:	4b0f      	ldr	r3, [pc, #60]	; (8001d78 <HAL_MspInit+0x44>)
 8001d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3e:	4a0e      	ldr	r2, [pc, #56]	; (8001d78 <HAL_MspInit+0x44>)
 8001d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d44:	6413      	str	r3, [r2, #64]	; 0x40
 8001d46:	4b0c      	ldr	r3, [pc, #48]	; (8001d78 <HAL_MspInit+0x44>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_MspInit+0x44>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	4a08      	ldr	r2, [pc, #32]	; (8001d78 <HAL_MspInit+0x44>)
 8001d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_MspInit+0x44>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40023800 	.word	0x40023800

08001d7c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b08a      	sub	sp, #40	; 0x28
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	2200      	movs	r2, #0
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
 8001d90:	60da      	str	r2, [r3, #12]
 8001d92:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a47      	ldr	r2, [pc, #284]	; (8001eb8 <HAL_DAC_MspInit+0x13c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	f040 8088 	bne.w	8001eb0 <HAL_DAC_MspInit+0x134>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001da0:	4b46      	ldr	r3, [pc, #280]	; (8001ebc <HAL_DAC_MspInit+0x140>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da4:	4a45      	ldr	r2, [pc, #276]	; (8001ebc <HAL_DAC_MspInit+0x140>)
 8001da6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001daa:	6413      	str	r3, [r2, #64]	; 0x40
 8001dac:	4b43      	ldr	r3, [pc, #268]	; (8001ebc <HAL_DAC_MspInit+0x140>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001db4:	613b      	str	r3, [r7, #16]
 8001db6:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db8:	4b40      	ldr	r3, [pc, #256]	; (8001ebc <HAL_DAC_MspInit+0x140>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dbc:	4a3f      	ldr	r2, [pc, #252]	; (8001ebc <HAL_DAC_MspInit+0x140>)
 8001dbe:	f043 0301 	orr.w	r3, r3, #1
 8001dc2:	6313      	str	r3, [r2, #48]	; 0x30
 8001dc4:	4b3d      	ldr	r3, [pc, #244]	; (8001ebc <HAL_DAC_MspInit+0x140>)
 8001dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration    
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001dd0:	2330      	movs	r3, #48	; 0x30
 8001dd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ddc:	f107 0314 	add.w	r3, r7, #20
 8001de0:	4619      	mov	r1, r3
 8001de2:	4837      	ldr	r0, [pc, #220]	; (8001ec0 <HAL_DAC_MspInit+0x144>)
 8001de4:	f001 f812 	bl	8002e0c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8001de8:	4b36      	ldr	r3, [pc, #216]	; (8001ec4 <HAL_DAC_MspInit+0x148>)
 8001dea:	4a37      	ldr	r2, [pc, #220]	; (8001ec8 <HAL_DAC_MspInit+0x14c>)
 8001dec:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8001dee:	4b35      	ldr	r3, [pc, #212]	; (8001ec4 <HAL_DAC_MspInit+0x148>)
 8001df0:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001df4:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001df6:	4b33      	ldr	r3, [pc, #204]	; (8001ec4 <HAL_DAC_MspInit+0x148>)
 8001df8:	2240      	movs	r2, #64	; 0x40
 8001dfa:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dfc:	4b31      	ldr	r3, [pc, #196]	; (8001ec4 <HAL_DAC_MspInit+0x148>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8001e02:	4b30      	ldr	r3, [pc, #192]	; (8001ec4 <HAL_DAC_MspInit+0x148>)
 8001e04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e08:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e0a:	4b2e      	ldr	r3, [pc, #184]	; (8001ec4 <HAL_DAC_MspInit+0x148>)
 8001e0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e10:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e12:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_DAC_MspInit+0x148>)
 8001e14:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e18:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8001e1a:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <HAL_DAC_MspInit+0x148>)
 8001e1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e20:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e22:	4b28      	ldr	r3, [pc, #160]	; (8001ec4 <HAL_DAC_MspInit+0x148>)
 8001e24:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e28:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e2a:	4b26      	ldr	r3, [pc, #152]	; (8001ec4 <HAL_DAC_MspInit+0x148>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8001e30:	4824      	ldr	r0, [pc, #144]	; (8001ec4 <HAL_DAC_MspInit+0x148>)
 8001e32:	f000 fc75 	bl	8002720 <HAL_DMA_Init>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <HAL_DAC_MspInit+0xc4>
    {
      Error_Handler();
 8001e3c:	f7ff fc7c 	bl	8001738 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac2);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a20      	ldr	r2, [pc, #128]	; (8001ec4 <HAL_DAC_MspInit+0x148>)
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	4a1f      	ldr	r2, [pc, #124]	; (8001ec4 <HAL_DAC_MspInit+0x148>)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	; (8001ecc <HAL_DAC_MspInit+0x150>)
 8001e4e:	4a20      	ldr	r2, [pc, #128]	; (8001ed0 <HAL_DAC_MspInit+0x154>)
 8001e50:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001e52:	4b1e      	ldr	r3, [pc, #120]	; (8001ecc <HAL_DAC_MspInit+0x150>)
 8001e54:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001e58:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e5a:	4b1c      	ldr	r3, [pc, #112]	; (8001ecc <HAL_DAC_MspInit+0x150>)
 8001e5c:	2240      	movs	r2, #64	; 0x40
 8001e5e:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e60:	4b1a      	ldr	r3, [pc, #104]	; (8001ecc <HAL_DAC_MspInit+0x150>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001e66:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_DAC_MspInit+0x150>)
 8001e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e6c:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001e6e:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <HAL_DAC_MspInit+0x150>)
 8001e70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e74:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001e76:	4b15      	ldr	r3, [pc, #84]	; (8001ecc <HAL_DAC_MspInit+0x150>)
 8001e78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e7c:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001e7e:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <HAL_DAC_MspInit+0x150>)
 8001e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e84:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001e86:	4b11      	ldr	r3, [pc, #68]	; (8001ecc <HAL_DAC_MspInit+0x150>)
 8001e88:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001e8c:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e8e:	4b0f      	ldr	r3, [pc, #60]	; (8001ecc <HAL_DAC_MspInit+0x150>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001e94:	480d      	ldr	r0, [pc, #52]	; (8001ecc <HAL_DAC_MspInit+0x150>)
 8001e96:	f000 fc43 	bl	8002720 <HAL_DMA_Init>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <HAL_DAC_MspInit+0x128>
    {
      Error_Handler();
 8001ea0:	f7ff fc4a 	bl	8001738 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	4a09      	ldr	r2, [pc, #36]	; (8001ecc <HAL_DAC_MspInit+0x150>)
 8001ea8:	609a      	str	r2, [r3, #8]
 8001eaa:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <HAL_DAC_MspInit+0x150>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8001eb0:	bf00      	nop
 8001eb2:	3728      	adds	r7, #40	; 0x28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40007400 	.word	0x40007400
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	200246cc 	.word	0x200246cc
 8001ec8:	400260a0 	.word	0x400260a0
 8001ecc:	20024614 	.word	0x20024614
 8001ed0:	40026088 	.word	0x40026088

08001ed4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a13      	ldr	r2, [pc, #76]	; (8001f30 <HAL_TIM_Base_MspInit+0x5c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d10c      	bne.n	8001f00 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001ee6:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <HAL_TIM_Base_MspInit+0x60>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	4a12      	ldr	r2, [pc, #72]	; (8001f34 <HAL_TIM_Base_MspInit+0x60>)
 8001eec:	f043 0310 	orr.w	r3, r3, #16
 8001ef0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <HAL_TIM_Base_MspInit+0x60>)
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001efe:	e010      	b.n	8001f22 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM8)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a0c      	ldr	r2, [pc, #48]	; (8001f38 <HAL_TIM_Base_MspInit+0x64>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d10b      	bne.n	8001f22 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001f0a:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <HAL_TIM_Base_MspInit+0x60>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <HAL_TIM_Base_MspInit+0x60>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6453      	str	r3, [r2, #68]	; 0x44
 8001f16:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <HAL_TIM_Base_MspInit+0x60>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	68bb      	ldr	r3, [r7, #8]
}
 8001f22:	bf00      	nop
 8001f24:	3714      	adds	r7, #20
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40001000 	.word	0x40001000
 8001f34:	40023800 	.word	0x40023800
 8001f38:	40010400 	.word	0x40010400

08001f3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b08a      	sub	sp, #40	; 0x28
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f44:	f107 0314 	add.w	r3, r7, #20
 8001f48:	2200      	movs	r2, #0
 8001f4a:	601a      	str	r2, [r3, #0]
 8001f4c:	605a      	str	r2, [r3, #4]
 8001f4e:	609a      	str	r2, [r3, #8]
 8001f50:	60da      	str	r2, [r3, #12]
 8001f52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a17      	ldr	r2, [pc, #92]	; (8001fb8 <HAL_UART_MspInit+0x7c>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d128      	bne.n	8001fb0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <HAL_UART_MspInit+0x80>)
 8001f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f62:	4a16      	ldr	r2, [pc, #88]	; (8001fbc <HAL_UART_MspInit+0x80>)
 8001f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f68:	6413      	str	r3, [r2, #64]	; 0x40
 8001f6a:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <HAL_UART_MspInit+0x80>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <HAL_UART_MspInit+0x80>)
 8001f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7a:	4a10      	ldr	r2, [pc, #64]	; (8001fbc <HAL_UART_MspInit+0x80>)
 8001f7c:	f043 0308 	orr.w	r3, r3, #8
 8001f80:	6313      	str	r3, [r2, #48]	; 0x30
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <HAL_UART_MspInit+0x80>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	60fb      	str	r3, [r7, #12]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f8e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f94:	2302      	movs	r3, #2
 8001f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001fa0:	2307      	movs	r3, #7
 8001fa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <HAL_UART_MspInit+0x84>)
 8001fac:	f000 ff2e 	bl	8002e0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001fb0:	bf00      	nop
 8001fb2:	3728      	adds	r7, #40	; 0x28
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	40004800 	.word	0x40004800
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	40020c00 	.word	0x40020c00

08001fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr

08001fd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fd6:	e7fe      	b.n	8001fd6 <HardFault_Handler+0x4>

08001fd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fdc:	e7fe      	b.n	8001fdc <MemManage_Handler+0x4>

08001fde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe2:	e7fe      	b.n	8001fe2 <BusFault_Handler+0x4>

08001fe4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe8:	e7fe      	b.n	8001fe8 <UsageFault_Handler+0x4>

08001fea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fea:	b480      	push	{r7}
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002018:	f000 f8b2 	bl	8002180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800201c:	bf00      	nop
 800201e:	bd80      	pop	{r7, pc}

08002020 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8002024:	4802      	ldr	r0, [pc, #8]	; (8002030 <DMA1_Stream5_IRQHandler+0x10>)
 8002026:	f000 fc89 	bl	800293c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20024614 	.word	0x20024614

08002034 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8002038:	4802      	ldr	r0, [pc, #8]	; (8002044 <DMA1_Stream6_IRQHandler+0x10>)
 800203a:	f000 fc7f 	bl	800293c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	200246cc 	.word	0x200246cc

08002048 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800204c:	4b15      	ldr	r3, [pc, #84]	; (80020a4 <SystemInit+0x5c>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002052:	4a14      	ldr	r2, [pc, #80]	; (80020a4 <SystemInit+0x5c>)
 8002054:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002058:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800205c:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <SystemInit+0x60>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a11      	ldr	r2, [pc, #68]	; (80020a8 <SystemInit+0x60>)
 8002062:	f043 0301 	orr.w	r3, r3, #1
 8002066:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002068:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <SystemInit+0x60>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800206e:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <SystemInit+0x60>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	490d      	ldr	r1, [pc, #52]	; (80020a8 <SystemInit+0x60>)
 8002074:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <SystemInit+0x64>)
 8002076:	4013      	ands	r3, r2
 8002078:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800207a:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <SystemInit+0x60>)
 800207c:	4a0c      	ldr	r2, [pc, #48]	; (80020b0 <SystemInit+0x68>)
 800207e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <SystemInit+0x60>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <SystemInit+0x60>)
 8002086:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800208a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800208c:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <SystemInit+0x60>)
 800208e:	2200      	movs	r2, #0
 8002090:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002092:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <SystemInit+0x5c>)
 8002094:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002098:	609a      	str	r2, [r3, #8]
#endif
}
 800209a:	bf00      	nop
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000ed00 	.word	0xe000ed00
 80020a8:	40023800 	.word	0x40023800
 80020ac:	fef6ffff 	.word	0xfef6ffff
 80020b0:	24003010 	.word	0x24003010

080020b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80020b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020ba:	e003      	b.n	80020c4 <LoopCopyDataInit>

080020bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80020be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020c2:	3104      	adds	r1, #4

080020c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020c4:	480b      	ldr	r0, [pc, #44]	; (80020f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020cc:	d3f6      	bcc.n	80020bc <CopyDataInit>
  ldr  r2, =_sbss
 80020ce:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020d0:	e002      	b.n	80020d8 <LoopFillZerobss>

080020d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80020d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020d4:	f842 3b04 	str.w	r3, [r2], #4

080020d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020d8:	4b09      	ldr	r3, [pc, #36]	; (8002100 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020dc:	d3f9      	bcc.n	80020d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020de:	f7ff ffb3 	bl	8002048 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020e2:	f003 fc57 	bl	8005994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020e6:	f7ff f885 	bl	80011f4 <main>
  bx  lr    
 80020ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020ec:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80020f0:	0804f160 	.word	0x0804f160
  ldr  r0, =_sdata
 80020f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020f8:	20000084 	.word	0x20000084
  ldr  r2, =_sbss
 80020fc:	20000088 	.word	0x20000088
  ldr  r3, = _ebss
 8002100:	20024730 	.word	0x20024730

08002104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002104:	e7fe      	b.n	8002104 <ADC_IRQHandler>

08002106 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800210a:	2003      	movs	r0, #3
 800210c:	f000 f928 	bl	8002360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002110:	2000      	movs	r0, #0
 8002112:	f000 f805 	bl	8002120 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002116:	f7ff fe0d 	bl	8001d34 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_InitTick+0x54>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_InitTick+0x58>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4619      	mov	r1, r3
 8002132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002136:	fbb3 f3f1 	udiv	r3, r3, r1
 800213a:	fbb2 f3f3 	udiv	r3, r2, r3
 800213e:	4618      	mov	r0, r3
 8002140:	f000 f943 	bl	80023ca <HAL_SYSTICK_Config>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e00e      	b.n	800216c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b0f      	cmp	r3, #15
 8002152:	d80a      	bhi.n	800216a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002154:	2200      	movs	r2, #0
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	f000 f90b 	bl	8002376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002160:	4a06      	ldr	r2, [pc, #24]	; (800217c <HAL_InitTick+0x5c>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	e000      	b.n	800216c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20000010 	.word	0x20000010
 8002178:	20000018 	.word	0x20000018
 800217c:	20000014 	.word	0x20000014

08002180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_IncTick+0x20>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_IncTick+0x24>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4413      	add	r3, r2
 8002190:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <HAL_IncTick+0x24>)
 8002192:	6013      	str	r3, [r2, #0]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000018 	.word	0x20000018
 80021a4:	2002472c 	.word	0x2002472c

080021a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return uwTick;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <HAL_GetTick+0x14>)
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	2002472c 	.word	0x2002472c

080021c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d0:	4b0b      	ldr	r3, [pc, #44]	; (8002200 <__NVIC_SetPriorityGrouping+0x40>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021dc:	4013      	ands	r3, r2
 80021de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <__NVIC_SetPriorityGrouping+0x44>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ee:	4a04      	ldr	r2, [pc, #16]	; (8002200 <__NVIC_SetPriorityGrouping+0x40>)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	60d3      	str	r3, [r2, #12]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00
 8002204:	05fa0000 	.word	0x05fa0000

08002208 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800220c:	4b04      	ldr	r3, [pc, #16]	; (8002220 <__NVIC_GetPriorityGrouping+0x18>)
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	0a1b      	lsrs	r3, r3, #8
 8002212:	f003 0307 	and.w	r3, r3, #7
}
 8002216:	4618      	mov	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	4603      	mov	r3, r0
 800222c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800222e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002232:	2b00      	cmp	r3, #0
 8002234:	db0b      	blt.n	800224e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002236:	79fb      	ldrb	r3, [r7, #7]
 8002238:	f003 021f 	and.w	r2, r3, #31
 800223c:	4907      	ldr	r1, [pc, #28]	; (800225c <__NVIC_EnableIRQ+0x38>)
 800223e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	2001      	movs	r0, #1
 8002246:	fa00 f202 	lsl.w	r2, r0, r2
 800224a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	e000e100 	.word	0xe000e100

08002260 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002260:	b480      	push	{r7}
 8002262:	b083      	sub	sp, #12
 8002264:	af00      	add	r7, sp, #0
 8002266:	4603      	mov	r3, r0
 8002268:	6039      	str	r1, [r7, #0]
 800226a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800226c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002270:	2b00      	cmp	r3, #0
 8002272:	db0a      	blt.n	800228a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	b2da      	uxtb	r2, r3
 8002278:	490c      	ldr	r1, [pc, #48]	; (80022ac <__NVIC_SetPriority+0x4c>)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	0112      	lsls	r2, r2, #4
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	440b      	add	r3, r1
 8002284:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002288:	e00a      	b.n	80022a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	4908      	ldr	r1, [pc, #32]	; (80022b0 <__NVIC_SetPriority+0x50>)
 8002290:	79fb      	ldrb	r3, [r7, #7]
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	3b04      	subs	r3, #4
 8002298:	0112      	lsls	r2, r2, #4
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	440b      	add	r3, r1
 800229e:	761a      	strb	r2, [r3, #24]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	e000e100 	.word	0xe000e100
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	; 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f003 0307 	and.w	r3, r3, #7
 80022c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f1c3 0307 	rsb	r3, r3, #7
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	bf28      	it	cs
 80022d2:	2304      	movcs	r3, #4
 80022d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3304      	adds	r3, #4
 80022da:	2b06      	cmp	r3, #6
 80022dc:	d902      	bls.n	80022e4 <NVIC_EncodePriority+0x30>
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3b03      	subs	r3, #3
 80022e2:	e000      	b.n	80022e6 <NVIC_EncodePriority+0x32>
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e8:	f04f 32ff 	mov.w	r2, #4294967295
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	401a      	ands	r2, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	fa01 f303 	lsl.w	r3, r1, r3
 8002306:	43d9      	mvns	r1, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800230c:	4313      	orrs	r3, r2
         );
}
 800230e:	4618      	mov	r0, r3
 8002310:	3724      	adds	r7, #36	; 0x24
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
	...

0800231c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	3b01      	subs	r3, #1
 8002328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800232c:	d301      	bcc.n	8002332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800232e:	2301      	movs	r3, #1
 8002330:	e00f      	b.n	8002352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002332:	4a0a      	ldr	r2, [pc, #40]	; (800235c <SysTick_Config+0x40>)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3b01      	subs	r3, #1
 8002338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800233a:	210f      	movs	r1, #15
 800233c:	f04f 30ff 	mov.w	r0, #4294967295
 8002340:	f7ff ff8e 	bl	8002260 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002344:	4b05      	ldr	r3, [pc, #20]	; (800235c <SysTick_Config+0x40>)
 8002346:	2200      	movs	r2, #0
 8002348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800234a:	4b04      	ldr	r3, [pc, #16]	; (800235c <SysTick_Config+0x40>)
 800234c:	2207      	movs	r2, #7
 800234e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3708      	adds	r7, #8
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	e000e010 	.word	0xe000e010

08002360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff ff29 	bl	80021c0 <__NVIC_SetPriorityGrouping>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	60b9      	str	r1, [r7, #8]
 8002380:	607a      	str	r2, [r7, #4]
 8002382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002388:	f7ff ff3e 	bl	8002208 <__NVIC_GetPriorityGrouping>
 800238c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	68b9      	ldr	r1, [r7, #8]
 8002392:	6978      	ldr	r0, [r7, #20]
 8002394:	f7ff ff8e 	bl	80022b4 <NVIC_EncodePriority>
 8002398:	4602      	mov	r2, r0
 800239a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800239e:	4611      	mov	r1, r2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff ff5d 	bl	8002260 <__NVIC_SetPriority>
}
 80023a6:	bf00      	nop
 80023a8:	3718      	adds	r7, #24
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	4603      	mov	r3, r0
 80023b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ff31 	bl	8002224 <__NVIC_EnableIRQ>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff ffa2 	bl	800231c <SysTick_Config>
 80023d8:	4603      	mov	r3, r0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e014      	b.n	800241e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	791b      	ldrb	r3, [r3, #4]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d105      	bne.n	800240a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2200      	movs	r2, #0
 8002402:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff fcb9 	bl	8001d7c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2202      	movs	r2, #2
 800240e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800241c:	2300      	movs	r3, #0
}
 800241e:	4618      	mov	r0, r3
 8002420:	3708      	adds	r7, #8
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
	...

08002428 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	60f8      	str	r0, [r7, #12]
 8002430:	60b9      	str	r1, [r7, #8]
 8002432:	607a      	str	r2, [r7, #4]
 8002434:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0;
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	795b      	ldrb	r3, [r3, #5]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_DAC_Start_DMA+0x1e>
 8002442:	2302      	movs	r3, #2
 8002444:	e08e      	b.n	8002564 <HAL_DAC_Start_DMA+0x13c>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2201      	movs	r2, #1
 800244a:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2202      	movs	r2, #2
 8002450:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d12a      	bne.n	80024ae <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4a43      	ldr	r2, [pc, #268]	; (800256c <HAL_DAC_Start_DMA+0x144>)
 800245e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	4a42      	ldr	r2, [pc, #264]	; (8002570 <HAL_DAC_Start_DMA+0x148>)
 8002466:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	4a41      	ldr	r2, [pc, #260]	; (8002574 <HAL_DAC_Start_DMA+0x14c>)
 800246e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800247e:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	2b04      	cmp	r3, #4
 8002484:	d009      	beq.n	800249a <HAL_DAC_Start_DMA+0x72>
 8002486:	2b08      	cmp	r3, #8
 8002488:	d00c      	beq.n	80024a4 <HAL_DAC_Start_DMA+0x7c>
 800248a:	2b00      	cmp	r3, #0
 800248c:	d000      	beq.n	8002490 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800248e:	e039      	b.n	8002504 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	3308      	adds	r3, #8
 8002496:	617b      	str	r3, [r7, #20]
        break;
 8002498:	e034      	b.n	8002504 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	330c      	adds	r3, #12
 80024a0:	617b      	str	r3, [r7, #20]
        break;
 80024a2:	e02f      	b.n	8002504 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	3310      	adds	r3, #16
 80024aa:	617b      	str	r3, [r7, #20]
        break;
 80024ac:	e02a      	b.n	8002504 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	4a31      	ldr	r2, [pc, #196]	; (8002578 <HAL_DAC_Start_DMA+0x150>)
 80024b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	4a30      	ldr	r2, [pc, #192]	; (800257c <HAL_DAC_Start_DMA+0x154>)
 80024bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	68db      	ldr	r3, [r3, #12]
 80024c2:	4a2f      	ldr	r2, [pc, #188]	; (8002580 <HAL_DAC_Start_DMA+0x158>)
 80024c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80024d4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	2b04      	cmp	r3, #4
 80024da:	d009      	beq.n	80024f0 <HAL_DAC_Start_DMA+0xc8>
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d00c      	beq.n	80024fa <HAL_DAC_Start_DMA+0xd2>
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d000      	beq.n	80024e6 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80024e4:	e00e      	b.n	8002504 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	3314      	adds	r3, #20
 80024ec:	617b      	str	r3, [r7, #20]
        break;
 80024ee:	e009      	b.n	8002504 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	3318      	adds	r3, #24
 80024f6:	617b      	str	r3, [r7, #20]
        break;
 80024f8:	e004      	b.n	8002504 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	331c      	adds	r3, #28
 8002500:	617b      	str	r3, [r7, #20]
        break;
 8002502:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d10f      	bne.n	800252a <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002518:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6898      	ldr	r0, [r3, #8]
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	697a      	ldr	r2, [r7, #20]
 8002524:	f000 f9aa 	bl	800287c <HAL_DMA_Start_IT>
 8002528:	e00e      	b.n	8002548 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002538:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	68d8      	ldr	r0, [r3, #12]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	f000 f99a 	bl	800287c <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6819      	ldr	r1, [r3, #0]
 800254e:	2201      	movs	r2, #1
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	409a      	lsls	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2200      	movs	r2, #0
 8002560:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	08002633 	.word	0x08002633
 8002570:	08002655 	.word	0x08002655
 8002574:	08002671 	.word	0x08002671
 8002578:	080026b3 	.word	0x080026b3
 800257c:	080026d5 	.word	0x080026d5
 8002580:	080026f1 	.word	0x080026f1

08002584 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002598:	b480      	push	{r7}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	2300      	movs	r3, #0
 80025aa:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	795b      	ldrb	r3, [r3, #5]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d101      	bne.n	80025b8 <HAL_DAC_ConfigChannel+0x20>
 80025b4:	2302      	movs	r3, #2
 80025b6:	e036      	b.n	8002626 <HAL_DAC_ConfigChannel+0x8e>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2201      	movs	r2, #1
 80025bc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2202      	movs	r2, #2
 80025c2:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80025cc:	f640 72fe 	movw	r2, #4094	; 0xffe
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43db      	mvns	r3, r3
 80025d8:	697a      	ldr	r2, [r7, #20]
 80025da:	4013      	ands	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	697a      	ldr	r2, [r7, #20]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	697a      	ldr	r2, [r7, #20]
 80025fe:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6819      	ldr	r1, [r3, #0]
 8002606:	22c0      	movs	r2, #192	; 0xc0
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	43da      	mvns	r2, r3
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	400a      	ands	r2, r1
 8002616:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	2201      	movs	r2, #1
 800261c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	371c      	adds	r7, #28
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr

08002632 <DAC_DMAConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b084      	sub	sp, #16
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263e:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002640:	68f8      	ldr	r0, [r7, #12]
 8002642:	f7fe fda3 	bl	800118c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2201      	movs	r2, #1
 800264a:	711a      	strb	r2, [r3, #4]
}
 800264c:	bf00      	nop
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}

08002654 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b084      	sub	sp, #16
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002660:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f7fe fda2 	bl	80011ac <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002668:	bf00      	nop
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}

08002670 <DAC_DMAErrorCh1>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267c:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	f043 0204 	orr.w	r2, r3, #4
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f7ff ff7a 	bl	8002584 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2201      	movs	r2, #1
 8002694:	711a      	strb	r2, [r3, #4]
}
 8002696:	bf00      	nop
 8002698:	3710      	adds	r7, #16
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}

0800269e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800269e:	b480      	push	{r7}
 80026a0:	b083      	sub	sp, #12
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr

080026b2 <DAC_DMAConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b084      	sub	sp, #16
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026be:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80026c0:	68f8      	ldr	r0, [r7, #12]
 80026c2:	f7fe fd8d 	bl	80011e0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2201      	movs	r2, #1
 80026ca:	711a      	strb	r2, [r3, #4]
}
 80026cc:	bf00      	nop
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026e0:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80026e2:	68f8      	ldr	r0, [r7, #12]
 80026e4:	f7fe fd72 	bl	80011cc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80026e8:	bf00      	nop
 80026ea:	3710      	adds	r7, #16
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <DAC_DMAErrorCh2>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fc:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	f043 0204 	orr.w	r2, r3, #4
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 800270a:	68f8      	ldr	r0, [r7, #12]
 800270c:	f7ff ffc7 	bl	800269e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2201      	movs	r2, #1
 8002714:	711a      	strb	r2, [r3, #4]
}
 8002716:	bf00      	nop
 8002718:	3710      	adds	r7, #16
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800272c:	f7ff fd3c 	bl	80021a8 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e099      	b.n	8002870 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2202      	movs	r2, #2
 8002748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800275c:	e00f      	b.n	800277e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800275e:	f7ff fd23 	bl	80021a8 <HAL_GetTick>
 8002762:	4602      	mov	r2, r0
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	1ad3      	subs	r3, r2, r3
 8002768:	2b05      	cmp	r3, #5
 800276a:	d908      	bls.n	800277e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2220      	movs	r2, #32
 8002770:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2203      	movs	r2, #3
 8002776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e078      	b.n	8002870 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0301 	and.w	r3, r3, #1
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1e8      	bne.n	800275e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	4b38      	ldr	r3, [pc, #224]	; (8002878 <HAL_DMA_Init+0x158>)
 8002798:	4013      	ands	r3, r2
 800279a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6a1b      	ldr	r3, [r3, #32]
 80027c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027ca:	697a      	ldr	r2, [r7, #20]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d4:	2b04      	cmp	r3, #4
 80027d6:	d107      	bne.n	80027e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e0:	4313      	orrs	r3, r2
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	697a      	ldr	r2, [r7, #20]
 80027ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	f023 0307 	bic.w	r3, r3, #7
 80027fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002804:	697a      	ldr	r2, [r7, #20]
 8002806:	4313      	orrs	r3, r2
 8002808:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	2b04      	cmp	r3, #4
 8002810:	d117      	bne.n	8002842 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	2b00      	cmp	r3, #0
 8002822:	d00e      	beq.n	8002842 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fa77 	bl	8002d18 <DMA_CheckFifoParam>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d008      	beq.n	8002842 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2240      	movs	r2, #64	; 0x40
 8002834:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2201      	movs	r2, #1
 800283a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800283e:	2301      	movs	r3, #1
 8002840:	e016      	b.n	8002870 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 fa2e 	bl	8002cac <DMA_CalcBaseAndBitshift>
 8002850:	4603      	mov	r3, r0
 8002852:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002858:	223f      	movs	r2, #63	; 0x3f
 800285a:	409a      	lsls	r2, r3
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2201      	movs	r2, #1
 800286a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800286e:	2300      	movs	r3, #0
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	f010803f 	.word	0xf010803f

0800287c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800288a:	2300      	movs	r3, #0
 800288c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002892:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_DMA_Start_IT+0x26>
 800289e:	2302      	movs	r3, #2
 80028a0:	e048      	b.n	8002934 <HAL_DMA_Start_IT+0xb8>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d137      	bne.n	8002926 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2202      	movs	r2, #2
 80028ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	2200      	movs	r2, #0
 80028c2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	687a      	ldr	r2, [r7, #4]
 80028c8:	68b9      	ldr	r1, [r7, #8]
 80028ca:	68f8      	ldr	r0, [r7, #12]
 80028cc:	f000 f9c0 	bl	8002c50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	223f      	movs	r2, #63	; 0x3f
 80028d6:	409a      	lsls	r2, r3
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f042 0216 	orr.w	r2, r2, #22
 80028ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028fa:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002900:	2b00      	cmp	r3, #0
 8002902:	d007      	beq.n	8002914 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f042 0208 	orr.w	r2, r2, #8
 8002912:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f042 0201 	orr.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e005      	b.n	8002932 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800292e:	2302      	movs	r3, #2
 8002930:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002932:	7dfb      	ldrb	r3, [r7, #23]
}
 8002934:	4618      	mov	r0, r3
 8002936:	3718      	adds	r7, #24
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002948:	4b92      	ldr	r3, [pc, #584]	; (8002b94 <HAL_DMA_IRQHandler+0x258>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a92      	ldr	r2, [pc, #584]	; (8002b98 <HAL_DMA_IRQHandler+0x25c>)
 800294e:	fba2 2303 	umull	r2, r3, r2, r3
 8002952:	0a9b      	lsrs	r3, r3, #10
 8002954:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002966:	2208      	movs	r2, #8
 8002968:	409a      	lsls	r2, r3
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d01a      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0304 	and.w	r3, r3, #4
 800297c:	2b00      	cmp	r3, #0
 800297e:	d013      	beq.n	80029a8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0204 	bic.w	r2, r2, #4
 800298e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002994:	2208      	movs	r2, #8
 8002996:	409a      	lsls	r2, r3
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a0:	f043 0201 	orr.w	r2, r3, #1
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	2201      	movs	r2, #1
 80029ae:	409a      	lsls	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d012      	beq.n	80029de <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d00b      	beq.n	80029de <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ca:	2201      	movs	r2, #1
 80029cc:	409a      	lsls	r2, r3
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d6:	f043 0202 	orr.w	r2, r3, #2
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e2:	2204      	movs	r2, #4
 80029e4:	409a      	lsls	r2, r3
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4013      	ands	r3, r2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d012      	beq.n	8002a14 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00b      	beq.n	8002a14 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	2204      	movs	r2, #4
 8002a02:	409a      	lsls	r2, r3
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0c:	f043 0204 	orr.w	r2, r3, #4
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a18:	2210      	movs	r2, #16
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d043      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0308 	and.w	r3, r3, #8
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d03c      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	2210      	movs	r2, #16
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d018      	beq.n	8002a7e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d108      	bne.n	8002a6c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d024      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4798      	blx	r3
 8002a6a:	e01f      	b.n	8002aac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01b      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	4798      	blx	r3
 8002a7c:	e016      	b.n	8002aac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f022 0208 	bic.w	r2, r2, #8
 8002a9a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d003      	beq.n	8002aac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab0:	2220      	movs	r2, #32
 8002ab2:	409a      	lsls	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	f000 808e 	beq.w	8002bda <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0310 	and.w	r3, r3, #16
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8086 	beq.w	8002bda <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b05      	cmp	r3, #5
 8002ae4:	d136      	bne.n	8002b54 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0216 	bic.w	r2, r2, #22
 8002af4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b04:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d103      	bne.n	8002b16 <HAL_DMA_IRQHandler+0x1da>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d007      	beq.n	8002b26 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f022 0208 	bic.w	r2, r2, #8
 8002b24:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2a:	223f      	movs	r2, #63	; 0x3f
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d07d      	beq.n	8002c46 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	4798      	blx	r3
        }
        return;
 8002b52:	e078      	b.n	8002c46 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d01c      	beq.n	8002b9c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d108      	bne.n	8002b82 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d030      	beq.n	8002bda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	4798      	blx	r3
 8002b80:	e02b      	b.n	8002bda <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d027      	beq.n	8002bda <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	4798      	blx	r3
 8002b92:	e022      	b.n	8002bda <HAL_DMA_IRQHandler+0x29e>
 8002b94:	20000010 	.word	0x20000010
 8002b98:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10f      	bne.n	8002bca <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0210 	bic.w	r2, r2, #16
 8002bb8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d032      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d022      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2205      	movs	r2, #5
 8002bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0201 	bic.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	3301      	adds	r3, #1
 8002c0a:	60bb      	str	r3, [r7, #8]
 8002c0c:	697a      	ldr	r2, [r7, #20]
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d307      	bcc.n	8002c22 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1f2      	bne.n	8002c06 <HAL_DMA_IRQHandler+0x2ca>
 8002c20:	e000      	b.n	8002c24 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c22:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d005      	beq.n	8002c48 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	4798      	blx	r3
 8002c44:	e000      	b.n	8002c48 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c46:	bf00      	nop
    }
  }
}
 8002c48:	3718      	adds	r7, #24
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop

08002c50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b40      	cmp	r3, #64	; 0x40
 8002c7c:	d108      	bne.n	8002c90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c8e:	e007      	b.n	8002ca0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	60da      	str	r2, [r3, #12]
}
 8002ca0:	bf00      	nop
 8002ca2:	3714      	adds	r7, #20
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002caa:	4770      	bx	lr

08002cac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b085      	sub	sp, #20
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	3b10      	subs	r3, #16
 8002cbc:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <DMA_CalcBaseAndBitshift+0x60>)
 8002cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc2:	091b      	lsrs	r3, r3, #4
 8002cc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cc6:	4a12      	ldr	r2, [pc, #72]	; (8002d10 <DMA_CalcBaseAndBitshift+0x64>)
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	4413      	add	r3, r2
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b03      	cmp	r3, #3
 8002cd8:	d908      	bls.n	8002cec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <DMA_CalcBaseAndBitshift+0x68>)
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	1d1a      	adds	r2, r3, #4
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	659a      	str	r2, [r3, #88]	; 0x58
 8002cea:	e006      	b.n	8002cfa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	4b08      	ldr	r3, [pc, #32]	; (8002d14 <DMA_CalcBaseAndBitshift+0x68>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3714      	adds	r7, #20
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	aaaaaaab 	.word	0xaaaaaaab
 8002d10:	0804ed60 	.word	0x0804ed60
 8002d14:	fffffc00 	.word	0xfffffc00

08002d18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d11f      	bne.n	8002d72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	2b03      	cmp	r3, #3
 8002d36:	d855      	bhi.n	8002de4 <DMA_CheckFifoParam+0xcc>
 8002d38:	a201      	add	r2, pc, #4	; (adr r2, 8002d40 <DMA_CheckFifoParam+0x28>)
 8002d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3e:	bf00      	nop
 8002d40:	08002d51 	.word	0x08002d51
 8002d44:	08002d63 	.word	0x08002d63
 8002d48:	08002d51 	.word	0x08002d51
 8002d4c:	08002de5 	.word	0x08002de5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d045      	beq.n	8002de8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d60:	e042      	b.n	8002de8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d6a:	d13f      	bne.n	8002dec <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d70:	e03c      	b.n	8002dec <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7a:	d121      	bne.n	8002dc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b03      	cmp	r3, #3
 8002d80:	d836      	bhi.n	8002df0 <DMA_CheckFifoParam+0xd8>
 8002d82:	a201      	add	r2, pc, #4	; (adr r2, 8002d88 <DMA_CheckFifoParam+0x70>)
 8002d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d88:	08002d99 	.word	0x08002d99
 8002d8c:	08002d9f 	.word	0x08002d9f
 8002d90:	08002d99 	.word	0x08002d99
 8002d94:	08002db1 	.word	0x08002db1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d9c:	e02f      	b.n	8002dfe <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d024      	beq.n	8002df4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dae:	e021      	b.n	8002df4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002db8:	d11e      	bne.n	8002df8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dbe:	e01b      	b.n	8002df8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d902      	bls.n	8002dcc <DMA_CheckFifoParam+0xb4>
 8002dc6:	2b03      	cmp	r3, #3
 8002dc8:	d003      	beq.n	8002dd2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002dca:	e018      	b.n	8002dfe <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	73fb      	strb	r3, [r7, #15]
      break;
 8002dd0:	e015      	b.n	8002dfe <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00e      	beq.n	8002dfc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
      break;
 8002de2:	e00b      	b.n	8002dfc <DMA_CheckFifoParam+0xe4>
      break;
 8002de4:	bf00      	nop
 8002de6:	e00a      	b.n	8002dfe <DMA_CheckFifoParam+0xe6>
      break;
 8002de8:	bf00      	nop
 8002dea:	e008      	b.n	8002dfe <DMA_CheckFifoParam+0xe6>
      break;
 8002dec:	bf00      	nop
 8002dee:	e006      	b.n	8002dfe <DMA_CheckFifoParam+0xe6>
      break;
 8002df0:	bf00      	nop
 8002df2:	e004      	b.n	8002dfe <DMA_CheckFifoParam+0xe6>
      break;
 8002df4:	bf00      	nop
 8002df6:	e002      	b.n	8002dfe <DMA_CheckFifoParam+0xe6>
      break;   
 8002df8:	bf00      	nop
 8002dfa:	e000      	b.n	8002dfe <DMA_CheckFifoParam+0xe6>
      break;
 8002dfc:	bf00      	nop
    }
  } 
  
  return status; 
 8002dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b089      	sub	sp, #36	; 0x24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e16:	2300      	movs	r3, #0
 8002e18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e22:	2300      	movs	r3, #0
 8002e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
 8002e2a:	e175      	b.n	8003118 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	fa02 f303 	lsl.w	r3, r2, r3
 8002e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e40:	693a      	ldr	r2, [r7, #16]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	f040 8164 	bne.w	8003112 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d00b      	beq.n	8002e6a <HAL_GPIO_Init+0x5e>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d007      	beq.n	8002e6a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002e5e:	2b11      	cmp	r3, #17
 8002e60:	d003      	beq.n	8002e6a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b12      	cmp	r3, #18
 8002e68:	d130      	bne.n	8002ecc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	2203      	movs	r2, #3
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 0201 	and.w	r2, r3, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	2203      	movs	r2, #3
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	43db      	mvns	r3, r3
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	4013      	ands	r3, r2
 8002ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	689a      	ldr	r2, [r3, #8]
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	005b      	lsls	r3, r3, #1
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0x100>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	2b12      	cmp	r3, #18
 8002f0a:	d123      	bne.n	8002f54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	08da      	lsrs	r2, r3, #3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3208      	adds	r2, #8
 8002f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	f003 0307 	and.w	r3, r3, #7
 8002f20:	009b      	lsls	r3, r3, #2
 8002f22:	220f      	movs	r2, #15
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	f003 0307 	and.w	r3, r3, #7
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	69ba      	ldr	r2, [r7, #24]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	08da      	lsrs	r2, r3, #3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	3208      	adds	r2, #8
 8002f4e:	69b9      	ldr	r1, [r7, #24]
 8002f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f5a:	69fb      	ldr	r3, [r7, #28]
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	2203      	movs	r2, #3
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f003 0203 	and.w	r2, r3, #3
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f000 80be 	beq.w	8003112 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f96:	4b65      	ldr	r3, [pc, #404]	; (800312c <HAL_GPIO_Init+0x320>)
 8002f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9a:	4a64      	ldr	r2, [pc, #400]	; (800312c <HAL_GPIO_Init+0x320>)
 8002f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fa2:	4b62      	ldr	r3, [pc, #392]	; (800312c <HAL_GPIO_Init+0x320>)
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002faa:	60fb      	str	r3, [r7, #12]
 8002fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002fae:	4a60      	ldr	r2, [pc, #384]	; (8003130 <HAL_GPIO_Init+0x324>)
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	089b      	lsrs	r3, r3, #2
 8002fb4:	3302      	adds	r3, #2
 8002fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	f003 0303 	and.w	r3, r3, #3
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	220f      	movs	r2, #15
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a57      	ldr	r2, [pc, #348]	; (8003134 <HAL_GPIO_Init+0x328>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d037      	beq.n	800304a <HAL_GPIO_Init+0x23e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a56      	ldr	r2, [pc, #344]	; (8003138 <HAL_GPIO_Init+0x32c>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d031      	beq.n	8003046 <HAL_GPIO_Init+0x23a>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a55      	ldr	r2, [pc, #340]	; (800313c <HAL_GPIO_Init+0x330>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d02b      	beq.n	8003042 <HAL_GPIO_Init+0x236>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a54      	ldr	r2, [pc, #336]	; (8003140 <HAL_GPIO_Init+0x334>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d025      	beq.n	800303e <HAL_GPIO_Init+0x232>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a53      	ldr	r2, [pc, #332]	; (8003144 <HAL_GPIO_Init+0x338>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d01f      	beq.n	800303a <HAL_GPIO_Init+0x22e>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a52      	ldr	r2, [pc, #328]	; (8003148 <HAL_GPIO_Init+0x33c>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d019      	beq.n	8003036 <HAL_GPIO_Init+0x22a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a51      	ldr	r2, [pc, #324]	; (800314c <HAL_GPIO_Init+0x340>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d013      	beq.n	8003032 <HAL_GPIO_Init+0x226>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a50      	ldr	r2, [pc, #320]	; (8003150 <HAL_GPIO_Init+0x344>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00d      	beq.n	800302e <HAL_GPIO_Init+0x222>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a4f      	ldr	r2, [pc, #316]	; (8003154 <HAL_GPIO_Init+0x348>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d007      	beq.n	800302a <HAL_GPIO_Init+0x21e>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a4e      	ldr	r2, [pc, #312]	; (8003158 <HAL_GPIO_Init+0x34c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d101      	bne.n	8003026 <HAL_GPIO_Init+0x21a>
 8003022:	2309      	movs	r3, #9
 8003024:	e012      	b.n	800304c <HAL_GPIO_Init+0x240>
 8003026:	230a      	movs	r3, #10
 8003028:	e010      	b.n	800304c <HAL_GPIO_Init+0x240>
 800302a:	2308      	movs	r3, #8
 800302c:	e00e      	b.n	800304c <HAL_GPIO_Init+0x240>
 800302e:	2307      	movs	r3, #7
 8003030:	e00c      	b.n	800304c <HAL_GPIO_Init+0x240>
 8003032:	2306      	movs	r3, #6
 8003034:	e00a      	b.n	800304c <HAL_GPIO_Init+0x240>
 8003036:	2305      	movs	r3, #5
 8003038:	e008      	b.n	800304c <HAL_GPIO_Init+0x240>
 800303a:	2304      	movs	r3, #4
 800303c:	e006      	b.n	800304c <HAL_GPIO_Init+0x240>
 800303e:	2303      	movs	r3, #3
 8003040:	e004      	b.n	800304c <HAL_GPIO_Init+0x240>
 8003042:	2302      	movs	r3, #2
 8003044:	e002      	b.n	800304c <HAL_GPIO_Init+0x240>
 8003046:	2301      	movs	r3, #1
 8003048:	e000      	b.n	800304c <HAL_GPIO_Init+0x240>
 800304a:	2300      	movs	r3, #0
 800304c:	69fa      	ldr	r2, [r7, #28]
 800304e:	f002 0203 	and.w	r2, r2, #3
 8003052:	0092      	lsls	r2, r2, #2
 8003054:	4093      	lsls	r3, r2
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	4313      	orrs	r3, r2
 800305a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800305c:	4934      	ldr	r1, [pc, #208]	; (8003130 <HAL_GPIO_Init+0x324>)
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	089b      	lsrs	r3, r3, #2
 8003062:	3302      	adds	r3, #2
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800306a:	4b3c      	ldr	r3, [pc, #240]	; (800315c <HAL_GPIO_Init+0x350>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	43db      	mvns	r3, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4013      	ands	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800308e:	4a33      	ldr	r2, [pc, #204]	; (800315c <HAL_GPIO_Init+0x350>)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003094:	4b31      	ldr	r3, [pc, #196]	; (800315c <HAL_GPIO_Init+0x350>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030b8:	4a28      	ldr	r2, [pc, #160]	; (800315c <HAL_GPIO_Init+0x350>)
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030be:	4b27      	ldr	r3, [pc, #156]	; (800315c <HAL_GPIO_Init+0x350>)
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	43db      	mvns	r3, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4013      	ands	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030e2:	4a1e      	ldr	r2, [pc, #120]	; (800315c <HAL_GPIO_Init+0x350>)
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030e8:	4b1c      	ldr	r3, [pc, #112]	; (800315c <HAL_GPIO_Init+0x350>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	43db      	mvns	r3, r3
 80030f2:	69ba      	ldr	r2, [r7, #24]
 80030f4:	4013      	ands	r3, r2
 80030f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d003      	beq.n	800310c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003104:	69ba      	ldr	r2, [r7, #24]
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800310c:	4a13      	ldr	r2, [pc, #76]	; (800315c <HAL_GPIO_Init+0x350>)
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3301      	adds	r3, #1
 8003116:	61fb      	str	r3, [r7, #28]
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	2b0f      	cmp	r3, #15
 800311c:	f67f ae86 	bls.w	8002e2c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003120:	bf00      	nop
 8003122:	3724      	adds	r7, #36	; 0x24
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	40023800 	.word	0x40023800
 8003130:	40013800 	.word	0x40013800
 8003134:	40020000 	.word	0x40020000
 8003138:	40020400 	.word	0x40020400
 800313c:	40020800 	.word	0x40020800
 8003140:	40020c00 	.word	0x40020c00
 8003144:	40021000 	.word	0x40021000
 8003148:	40021400 	.word	0x40021400
 800314c:	40021800 	.word	0x40021800
 8003150:	40021c00 	.word	0x40021c00
 8003154:	40022000 	.word	0x40022000
 8003158:	40022400 	.word	0x40022400
 800315c:	40013c00 	.word	0x40013c00

08003160 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	460b      	mov	r3, r1
 800316a:	807b      	strh	r3, [r7, #2]
 800316c:	4613      	mov	r3, r2
 800316e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003170:	787b      	ldrb	r3, [r7, #1]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003176:	887a      	ldrh	r2, [r7, #2]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800317c:	e003      	b.n	8003186 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800317e:	887b      	ldrh	r3, [r7, #2]
 8003180:	041a      	lsls	r2, r3, #16
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	619a      	str	r2, [r3, #24]
}
 8003186:	bf00      	nop
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800319a:	2300      	movs	r3, #0
 800319c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	4b23      	ldr	r3, [pc, #140]	; (800322c <HAL_PWREx_EnableOverDrive+0x98>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	4a22      	ldr	r2, [pc, #136]	; (800322c <HAL_PWREx_EnableOverDrive+0x98>)
 80031a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a8:	6413      	str	r3, [r2, #64]	; 0x40
 80031aa:	4b20      	ldr	r3, [pc, #128]	; (800322c <HAL_PWREx_EnableOverDrive+0x98>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80031b6:	4b1e      	ldr	r3, [pc, #120]	; (8003230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a1d      	ldr	r2, [pc, #116]	; (8003230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031c0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031c2:	f7fe fff1 	bl	80021a8 <HAL_GetTick>
 80031c6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031c8:	e009      	b.n	80031de <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80031ca:	f7fe ffed 	bl	80021a8 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80031d8:	d901      	bls.n	80031de <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e022      	b.n	8003224 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80031de:	4b14      	ldr	r3, [pc, #80]	; (8003230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031ea:	d1ee      	bne.n	80031ca <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80031ec:	4b10      	ldr	r3, [pc, #64]	; (8003230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a0f      	ldr	r2, [pc, #60]	; (8003230 <HAL_PWREx_EnableOverDrive+0x9c>)
 80031f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031f6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031f8:	f7fe ffd6 	bl	80021a8 <HAL_GetTick>
 80031fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80031fe:	e009      	b.n	8003214 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003200:	f7fe ffd2 	bl	80021a8 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800320e:	d901      	bls.n	8003214 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e007      	b.n	8003224 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003214:	4b06      	ldr	r3, [pc, #24]	; (8003230 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003220:	d1ee      	bne.n	8003200 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	40023800 	.word	0x40023800
 8003230:	40007000 	.word	0x40007000

08003234 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800323c:	2300      	movs	r3, #0
 800323e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e291      	b.n	800376e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0301 	and.w	r3, r3, #1
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 8087 	beq.w	8003366 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003258:	4b96      	ldr	r3, [pc, #600]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	2b04      	cmp	r3, #4
 8003262:	d00c      	beq.n	800327e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003264:	4b93      	ldr	r3, [pc, #588]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	f003 030c 	and.w	r3, r3, #12
 800326c:	2b08      	cmp	r3, #8
 800326e:	d112      	bne.n	8003296 <HAL_RCC_OscConfig+0x62>
 8003270:	4b90      	ldr	r3, [pc, #576]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800327c:	d10b      	bne.n	8003296 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327e:	4b8d      	ldr	r3, [pc, #564]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d06c      	beq.n	8003364 <HAL_RCC_OscConfig+0x130>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d168      	bne.n	8003364 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e26b      	b.n	800376e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800329e:	d106      	bne.n	80032ae <HAL_RCC_OscConfig+0x7a>
 80032a0:	4b84      	ldr	r3, [pc, #528]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a83      	ldr	r2, [pc, #524]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032aa:	6013      	str	r3, [r2, #0]
 80032ac:	e02e      	b.n	800330c <HAL_RCC_OscConfig+0xd8>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10c      	bne.n	80032d0 <HAL_RCC_OscConfig+0x9c>
 80032b6:	4b7f      	ldr	r3, [pc, #508]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a7e      	ldr	r2, [pc, #504]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	4b7c      	ldr	r3, [pc, #496]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a7b      	ldr	r2, [pc, #492]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032c8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032cc:	6013      	str	r3, [r2, #0]
 80032ce:	e01d      	b.n	800330c <HAL_RCC_OscConfig+0xd8>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d8:	d10c      	bne.n	80032f4 <HAL_RCC_OscConfig+0xc0>
 80032da:	4b76      	ldr	r3, [pc, #472]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a75      	ldr	r2, [pc, #468]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e4:	6013      	str	r3, [r2, #0]
 80032e6:	4b73      	ldr	r3, [pc, #460]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a72      	ldr	r2, [pc, #456]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f0:	6013      	str	r3, [r2, #0]
 80032f2:	e00b      	b.n	800330c <HAL_RCC_OscConfig+0xd8>
 80032f4:	4b6f      	ldr	r3, [pc, #444]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a6e      	ldr	r2, [pc, #440]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 80032fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fe:	6013      	str	r3, [r2, #0]
 8003300:	4b6c      	ldr	r3, [pc, #432]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a6b      	ldr	r2, [pc, #428]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003306:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800330a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d013      	beq.n	800333c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003314:	f7fe ff48 	bl	80021a8 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331c:	f7fe ff44 	bl	80021a8 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e21f      	b.n	800376e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332e:	4b61      	ldr	r3, [pc, #388]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0xe8>
 800333a:	e014      	b.n	8003366 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333c:	f7fe ff34 	bl	80021a8 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003344:	f7fe ff30 	bl	80021a8 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b64      	cmp	r3, #100	; 0x64
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e20b      	b.n	800376e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003356:	4b57      	ldr	r3, [pc, #348]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x110>
 8003362:	e000      	b.n	8003366 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d069      	beq.n	8003446 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003372:	4b50      	ldr	r3, [pc, #320]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00b      	beq.n	8003396 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337e:	4b4d      	ldr	r3, [pc, #308]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 030c 	and.w	r3, r3, #12
 8003386:	2b08      	cmp	r3, #8
 8003388:	d11c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x190>
 800338a:	4b4a      	ldr	r3, [pc, #296]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d116      	bne.n	80033c4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003396:	4b47      	ldr	r3, [pc, #284]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d005      	beq.n	80033ae <HAL_RCC_OscConfig+0x17a>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d001      	beq.n	80033ae <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e1df      	b.n	800376e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ae:	4b41      	ldr	r3, [pc, #260]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	493d      	ldr	r1, [pc, #244]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033c2:	e040      	b.n	8003446 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d023      	beq.n	8003414 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033cc:	4b39      	ldr	r3, [pc, #228]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a38      	ldr	r2, [pc, #224]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 80033d2:	f043 0301 	orr.w	r3, r3, #1
 80033d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033d8:	f7fe fee6 	bl	80021a8 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033de:	e008      	b.n	80033f2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033e0:	f7fe fee2 	bl	80021a8 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	2b02      	cmp	r3, #2
 80033ec:	d901      	bls.n	80033f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80033ee:	2303      	movs	r3, #3
 80033f0:	e1bd      	b.n	800376e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033f2:	4b30      	ldr	r3, [pc, #192]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d0f0      	beq.n	80033e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033fe:	4b2d      	ldr	r3, [pc, #180]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4929      	ldr	r1, [pc, #164]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 800340e:	4313      	orrs	r3, r2
 8003410:	600b      	str	r3, [r1, #0]
 8003412:	e018      	b.n	8003446 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003414:	4b27      	ldr	r3, [pc, #156]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a26      	ldr	r2, [pc, #152]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 800341a:	f023 0301 	bic.w	r3, r3, #1
 800341e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003420:	f7fe fec2 	bl	80021a8 <HAL_GetTick>
 8003424:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003426:	e008      	b.n	800343a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003428:	f7fe febe 	bl	80021a8 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	1ad3      	subs	r3, r2, r3
 8003432:	2b02      	cmp	r3, #2
 8003434:	d901      	bls.n	800343a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003436:	2303      	movs	r3, #3
 8003438:	e199      	b.n	800376e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800343a:	4b1e      	ldr	r3, [pc, #120]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d1f0      	bne.n	8003428 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0308 	and.w	r3, r3, #8
 800344e:	2b00      	cmp	r3, #0
 8003450:	d038      	beq.n	80034c4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d019      	beq.n	800348e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800345a:	4b16      	ldr	r3, [pc, #88]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 800345c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345e:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003466:	f7fe fe9f 	bl	80021a8 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800346e:	f7fe fe9b 	bl	80021a8 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e176      	b.n	800376e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003482:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003484:	f003 0302 	and.w	r3, r3, #2
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x23a>
 800348c:	e01a      	b.n	80034c4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800348e:	4b09      	ldr	r3, [pc, #36]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003490:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003492:	4a08      	ldr	r2, [pc, #32]	; (80034b4 <HAL_RCC_OscConfig+0x280>)
 8003494:	f023 0301 	bic.w	r3, r3, #1
 8003498:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349a:	f7fe fe85 	bl	80021a8 <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a0:	e00a      	b.n	80034b8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034a2:	f7fe fe81 	bl	80021a8 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d903      	bls.n	80034b8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e15c      	b.n	800376e <HAL_RCC_OscConfig+0x53a>
 80034b4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034b8:	4b91      	ldr	r3, [pc, #580]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 80034ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d1ee      	bne.n	80034a2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 80a4 	beq.w	800361a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034d2:	4b8b      	ldr	r3, [pc, #556]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10d      	bne.n	80034fa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80034de:	4b88      	ldr	r3, [pc, #544]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	4a87      	ldr	r2, [pc, #540]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 80034e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034e8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ea:	4b85      	ldr	r3, [pc, #532]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 80034ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034f6:	2301      	movs	r3, #1
 80034f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034fa:	4b82      	ldr	r3, [pc, #520]	; (8003704 <HAL_RCC_OscConfig+0x4d0>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003502:	2b00      	cmp	r3, #0
 8003504:	d118      	bne.n	8003538 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003506:	4b7f      	ldr	r3, [pc, #508]	; (8003704 <HAL_RCC_OscConfig+0x4d0>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a7e      	ldr	r2, [pc, #504]	; (8003704 <HAL_RCC_OscConfig+0x4d0>)
 800350c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003510:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003512:	f7fe fe49 	bl	80021a8 <HAL_GetTick>
 8003516:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800351a:	f7fe fe45 	bl	80021a8 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b64      	cmp	r3, #100	; 0x64
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e120      	b.n	800376e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800352c:	4b75      	ldr	r3, [pc, #468]	; (8003704 <HAL_RCC_OscConfig+0x4d0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	2b01      	cmp	r3, #1
 800353e:	d106      	bne.n	800354e <HAL_RCC_OscConfig+0x31a>
 8003540:	4b6f      	ldr	r3, [pc, #444]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 8003542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003544:	4a6e      	ldr	r2, [pc, #440]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 8003546:	f043 0301 	orr.w	r3, r3, #1
 800354a:	6713      	str	r3, [r2, #112]	; 0x70
 800354c:	e02d      	b.n	80035aa <HAL_RCC_OscConfig+0x376>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10c      	bne.n	8003570 <HAL_RCC_OscConfig+0x33c>
 8003556:	4b6a      	ldr	r3, [pc, #424]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	4a69      	ldr	r2, [pc, #420]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 800355c:	f023 0301 	bic.w	r3, r3, #1
 8003560:	6713      	str	r3, [r2, #112]	; 0x70
 8003562:	4b67      	ldr	r3, [pc, #412]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 8003564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003566:	4a66      	ldr	r2, [pc, #408]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 8003568:	f023 0304 	bic.w	r3, r3, #4
 800356c:	6713      	str	r3, [r2, #112]	; 0x70
 800356e:	e01c      	b.n	80035aa <HAL_RCC_OscConfig+0x376>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	2b05      	cmp	r3, #5
 8003576:	d10c      	bne.n	8003592 <HAL_RCC_OscConfig+0x35e>
 8003578:	4b61      	ldr	r3, [pc, #388]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	4a60      	ldr	r2, [pc, #384]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 800357e:	f043 0304 	orr.w	r3, r3, #4
 8003582:	6713      	str	r3, [r2, #112]	; 0x70
 8003584:	4b5e      	ldr	r3, [pc, #376]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 8003586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003588:	4a5d      	ldr	r2, [pc, #372]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 800358a:	f043 0301 	orr.w	r3, r3, #1
 800358e:	6713      	str	r3, [r2, #112]	; 0x70
 8003590:	e00b      	b.n	80035aa <HAL_RCC_OscConfig+0x376>
 8003592:	4b5b      	ldr	r3, [pc, #364]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 8003594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003596:	4a5a      	ldr	r2, [pc, #360]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 8003598:	f023 0301 	bic.w	r3, r3, #1
 800359c:	6713      	str	r3, [r2, #112]	; 0x70
 800359e:	4b58      	ldr	r3, [pc, #352]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 80035a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a2:	4a57      	ldr	r2, [pc, #348]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 80035a4:	f023 0304 	bic.w	r3, r3, #4
 80035a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d015      	beq.n	80035de <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035b2:	f7fe fdf9 	bl	80021a8 <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035b8:	e00a      	b.n	80035d0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f7fe fdf5 	bl	80021a8 <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e0ce      	b.n	800376e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d0:	4b4b      	ldr	r3, [pc, #300]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 80035d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0ee      	beq.n	80035ba <HAL_RCC_OscConfig+0x386>
 80035dc:	e014      	b.n	8003608 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035de:	f7fe fde3 	bl	80021a8 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035e4:	e00a      	b.n	80035fc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035e6:	f7fe fddf 	bl	80021a8 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e0b8      	b.n	800376e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035fc:	4b40      	ldr	r3, [pc, #256]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 80035fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1ee      	bne.n	80035e6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003608:	7dfb      	ldrb	r3, [r7, #23]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d105      	bne.n	800361a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800360e:	4b3c      	ldr	r3, [pc, #240]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	4a3b      	ldr	r2, [pc, #236]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 8003614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003618:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 80a4 	beq.w	800376c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003624:	4b36      	ldr	r3, [pc, #216]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f003 030c 	and.w	r3, r3, #12
 800362c:	2b08      	cmp	r3, #8
 800362e:	d06b      	beq.n	8003708 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b02      	cmp	r3, #2
 8003636:	d149      	bne.n	80036cc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003638:	4b31      	ldr	r3, [pc, #196]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a30      	ldr	r2, [pc, #192]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 800363e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003642:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003644:	f7fe fdb0 	bl	80021a8 <HAL_GetTick>
 8003648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364a:	e008      	b.n	800365e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800364c:	f7fe fdac 	bl	80021a8 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d901      	bls.n	800365e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e087      	b.n	800376e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800365e:	4b28      	ldr	r3, [pc, #160]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1f0      	bne.n	800364c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	69da      	ldr	r2, [r3, #28]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	019b      	lsls	r3, r3, #6
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003680:	085b      	lsrs	r3, r3, #1
 8003682:	3b01      	subs	r3, #1
 8003684:	041b      	lsls	r3, r3, #16
 8003686:	431a      	orrs	r2, r3
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368c:	061b      	lsls	r3, r3, #24
 800368e:	4313      	orrs	r3, r2
 8003690:	4a1b      	ldr	r2, [pc, #108]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 8003692:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003696:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003698:	4b19      	ldr	r3, [pc, #100]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a18      	ldr	r2, [pc, #96]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 800369e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a4:	f7fe fd80 	bl	80021a8 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036aa:	e008      	b.n	80036be <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ac:	f7fe fd7c 	bl	80021a8 <HAL_GetTick>
 80036b0:	4602      	mov	r2, r0
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	1ad3      	subs	r3, r2, r3
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d901      	bls.n	80036be <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e057      	b.n	800376e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036be:	4b10      	ldr	r3, [pc, #64]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d0f0      	beq.n	80036ac <HAL_RCC_OscConfig+0x478>
 80036ca:	e04f      	b.n	800376c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a0b      	ldr	r2, [pc, #44]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 80036d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036d8:	f7fe fd66 	bl	80021a8 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036e0:	f7fe fd62 	bl	80021a8 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e03d      	b.n	800376e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f2:	4b03      	ldr	r3, [pc, #12]	; (8003700 <HAL_RCC_OscConfig+0x4cc>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d1f0      	bne.n	80036e0 <HAL_RCC_OscConfig+0x4ac>
 80036fe:	e035      	b.n	800376c <HAL_RCC_OscConfig+0x538>
 8003700:	40023800 	.word	0x40023800
 8003704:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003708:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <HAL_RCC_OscConfig+0x544>)
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d028      	beq.n	8003768 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	d121      	bne.n	8003768 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800372e:	429a      	cmp	r2, r3
 8003730:	d11a      	bne.n	8003768 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003732:	68fa      	ldr	r2, [r7, #12]
 8003734:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003738:	4013      	ands	r3, r2
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800373e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003740:	4293      	cmp	r3, r2
 8003742:	d111      	bne.n	8003768 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374e:	085b      	lsrs	r3, r3, #1
 8003750:	3b01      	subs	r3, #1
 8003752:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003754:	429a      	cmp	r2, r3
 8003756:	d107      	bne.n	8003768 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003762:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003764:	429a      	cmp	r2, r3
 8003766:	d001      	beq.n	800376c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e000      	b.n	800376e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	40023800 	.word	0x40023800

0800377c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003786:	2300      	movs	r3, #0
 8003788:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e0d0      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003794:	4b6a      	ldr	r3, [pc, #424]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 030f 	and.w	r3, r3, #15
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	429a      	cmp	r2, r3
 80037a0:	d910      	bls.n	80037c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037a2:	4b67      	ldr	r3, [pc, #412]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f023 020f 	bic.w	r2, r3, #15
 80037aa:	4965      	ldr	r1, [pc, #404]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037b2:	4b63      	ldr	r3, [pc, #396]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 030f 	and.w	r3, r3, #15
 80037ba:	683a      	ldr	r2, [r7, #0]
 80037bc:	429a      	cmp	r2, r3
 80037be:	d001      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e0b8      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0302 	and.w	r3, r3, #2
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d020      	beq.n	8003812 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d005      	beq.n	80037e8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037dc:	4b59      	ldr	r3, [pc, #356]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	4a58      	ldr	r2, [pc, #352]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 80037e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037e6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0308 	and.w	r3, r3, #8
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d005      	beq.n	8003800 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037f4:	4b53      	ldr	r3, [pc, #332]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	4a52      	ldr	r2, [pc, #328]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 80037fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037fe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003800:	4b50      	ldr	r3, [pc, #320]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	494d      	ldr	r1, [pc, #308]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 800380e:	4313      	orrs	r3, r2
 8003810:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b00      	cmp	r3, #0
 800381c:	d040      	beq.n	80038a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	2b01      	cmp	r3, #1
 8003824:	d107      	bne.n	8003836 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003826:	4b47      	ldr	r3, [pc, #284]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d115      	bne.n	800385e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e07f      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b02      	cmp	r3, #2
 800383c:	d107      	bne.n	800384e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383e:	4b41      	ldr	r3, [pc, #260]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	e073      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384e:	4b3d      	ldr	r3, [pc, #244]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d101      	bne.n	800385e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e06b      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385e:	4b39      	ldr	r3, [pc, #228]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f023 0203 	bic.w	r2, r3, #3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	4936      	ldr	r1, [pc, #216]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 800386c:	4313      	orrs	r3, r2
 800386e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003870:	f7fe fc9a 	bl	80021a8 <HAL_GetTick>
 8003874:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003876:	e00a      	b.n	800388e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003878:	f7fe fc96 	bl	80021a8 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	f241 3288 	movw	r2, #5000	; 0x1388
 8003886:	4293      	cmp	r3, r2
 8003888:	d901      	bls.n	800388e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e053      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388e:	4b2d      	ldr	r3, [pc, #180]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 020c 	and.w	r2, r3, #12
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	429a      	cmp	r2, r3
 800389e:	d1eb      	bne.n	8003878 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038a0:	4b27      	ldr	r3, [pc, #156]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 030f 	and.w	r3, r3, #15
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d210      	bcs.n	80038d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ae:	4b24      	ldr	r3, [pc, #144]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f023 020f 	bic.w	r2, r3, #15
 80038b6:	4922      	ldr	r1, [pc, #136]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038be:	4b20      	ldr	r3, [pc, #128]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f003 030f 	and.w	r3, r3, #15
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d001      	beq.n	80038d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	e032      	b.n	8003936 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0304 	and.w	r3, r3, #4
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d008      	beq.n	80038ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038dc:	4b19      	ldr	r3, [pc, #100]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	4916      	ldr	r1, [pc, #88]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 80038ea:	4313      	orrs	r3, r2
 80038ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	691b      	ldr	r3, [r3, #16]
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	490e      	ldr	r1, [pc, #56]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 800390a:	4313      	orrs	r3, r2
 800390c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800390e:	f000 f821 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 8003912:	4601      	mov	r1, r0
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	091b      	lsrs	r3, r3, #4
 800391a:	f003 030f 	and.w	r3, r3, #15
 800391e:	4a0a      	ldr	r2, [pc, #40]	; (8003948 <HAL_RCC_ClockConfig+0x1cc>)
 8003920:	5cd3      	ldrb	r3, [r2, r3]
 8003922:	fa21 f303 	lsr.w	r3, r1, r3
 8003926:	4a09      	ldr	r2, [pc, #36]	; (800394c <HAL_RCC_ClockConfig+0x1d0>)
 8003928:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800392a:	4b09      	ldr	r3, [pc, #36]	; (8003950 <HAL_RCC_ClockConfig+0x1d4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4618      	mov	r0, r3
 8003930:	f7fe fbf6 	bl	8002120 <HAL_InitTick>

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	40023c00 	.word	0x40023c00
 8003944:	40023800 	.word	0x40023800
 8003948:	0804ed48 	.word	0x0804ed48
 800394c:	20000010 	.word	0x20000010
 8003950:	20000014 	.word	0x20000014

08003954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003954:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800395a:	2300      	movs	r3, #0
 800395c:	607b      	str	r3, [r7, #4]
 800395e:	2300      	movs	r3, #0
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	2300      	movs	r3, #0
 8003964:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003966:	2300      	movs	r3, #0
 8003968:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800396a:	4b50      	ldr	r3, [pc, #320]	; (8003aac <HAL_RCC_GetSysClockFreq+0x158>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 030c 	and.w	r3, r3, #12
 8003972:	2b04      	cmp	r3, #4
 8003974:	d007      	beq.n	8003986 <HAL_RCC_GetSysClockFreq+0x32>
 8003976:	2b08      	cmp	r3, #8
 8003978:	d008      	beq.n	800398c <HAL_RCC_GetSysClockFreq+0x38>
 800397a:	2b00      	cmp	r3, #0
 800397c:	f040 808d 	bne.w	8003a9a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003980:	4b4b      	ldr	r3, [pc, #300]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003982:	60bb      	str	r3, [r7, #8]
      break;
 8003984:	e08c      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003986:	4b4b      	ldr	r3, [pc, #300]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 8003988:	60bb      	str	r3, [r7, #8]
      break;
 800398a:	e089      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800398c:	4b47      	ldr	r3, [pc, #284]	; (8003aac <HAL_RCC_GetSysClockFreq+0x158>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003994:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003996:	4b45      	ldr	r3, [pc, #276]	; (8003aac <HAL_RCC_GetSysClockFreq+0x158>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d023      	beq.n	80039ea <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039a2:	4b42      	ldr	r3, [pc, #264]	; (8003aac <HAL_RCC_GetSysClockFreq+0x158>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	099b      	lsrs	r3, r3, #6
 80039a8:	f04f 0400 	mov.w	r4, #0
 80039ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039b0:	f04f 0200 	mov.w	r2, #0
 80039b4:	ea03 0501 	and.w	r5, r3, r1
 80039b8:	ea04 0602 	and.w	r6, r4, r2
 80039bc:	4a3d      	ldr	r2, [pc, #244]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 80039be:	fb02 f106 	mul.w	r1, r2, r6
 80039c2:	2200      	movs	r2, #0
 80039c4:	fb02 f205 	mul.w	r2, r2, r5
 80039c8:	440a      	add	r2, r1
 80039ca:	493a      	ldr	r1, [pc, #232]	; (8003ab4 <HAL_RCC_GetSysClockFreq+0x160>)
 80039cc:	fba5 0101 	umull	r0, r1, r5, r1
 80039d0:	1853      	adds	r3, r2, r1
 80039d2:	4619      	mov	r1, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f04f 0400 	mov.w	r4, #0
 80039da:	461a      	mov	r2, r3
 80039dc:	4623      	mov	r3, r4
 80039de:	f7fd f8ef 	bl	8000bc0 <__aeabi_uldivmod>
 80039e2:	4603      	mov	r3, r0
 80039e4:	460c      	mov	r4, r1
 80039e6:	60fb      	str	r3, [r7, #12]
 80039e8:	e049      	b.n	8003a7e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ea:	4b30      	ldr	r3, [pc, #192]	; (8003aac <HAL_RCC_GetSysClockFreq+0x158>)
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	099b      	lsrs	r3, r3, #6
 80039f0:	f04f 0400 	mov.w	r4, #0
 80039f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039f8:	f04f 0200 	mov.w	r2, #0
 80039fc:	ea03 0501 	and.w	r5, r3, r1
 8003a00:	ea04 0602 	and.w	r6, r4, r2
 8003a04:	4629      	mov	r1, r5
 8003a06:	4632      	mov	r2, r6
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	f04f 0400 	mov.w	r4, #0
 8003a10:	0154      	lsls	r4, r2, #5
 8003a12:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a16:	014b      	lsls	r3, r1, #5
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4622      	mov	r2, r4
 8003a1c:	1b49      	subs	r1, r1, r5
 8003a1e:	eb62 0206 	sbc.w	r2, r2, r6
 8003a22:	f04f 0300 	mov.w	r3, #0
 8003a26:	f04f 0400 	mov.w	r4, #0
 8003a2a:	0194      	lsls	r4, r2, #6
 8003a2c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a30:	018b      	lsls	r3, r1, #6
 8003a32:	1a5b      	subs	r3, r3, r1
 8003a34:	eb64 0402 	sbc.w	r4, r4, r2
 8003a38:	f04f 0100 	mov.w	r1, #0
 8003a3c:	f04f 0200 	mov.w	r2, #0
 8003a40:	00e2      	lsls	r2, r4, #3
 8003a42:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a46:	00d9      	lsls	r1, r3, #3
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4614      	mov	r4, r2
 8003a4c:	195b      	adds	r3, r3, r5
 8003a4e:	eb44 0406 	adc.w	r4, r4, r6
 8003a52:	f04f 0100 	mov.w	r1, #0
 8003a56:	f04f 0200 	mov.w	r2, #0
 8003a5a:	02a2      	lsls	r2, r4, #10
 8003a5c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003a60:	0299      	lsls	r1, r3, #10
 8003a62:	460b      	mov	r3, r1
 8003a64:	4614      	mov	r4, r2
 8003a66:	4618      	mov	r0, r3
 8003a68:	4621      	mov	r1, r4
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f04f 0400 	mov.w	r4, #0
 8003a70:	461a      	mov	r2, r3
 8003a72:	4623      	mov	r3, r4
 8003a74:	f7fd f8a4 	bl	8000bc0 <__aeabi_uldivmod>
 8003a78:	4603      	mov	r3, r0
 8003a7a:	460c      	mov	r4, r1
 8003a7c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003a7e:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <HAL_RCC_GetSysClockFreq+0x158>)
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	0c1b      	lsrs	r3, r3, #16
 8003a84:	f003 0303 	and.w	r3, r3, #3
 8003a88:	3301      	adds	r3, #1
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a96:	60bb      	str	r3, [r7, #8]
      break;
 8003a98:	e002      	b.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a9a:	4b05      	ldr	r3, [pc, #20]	; (8003ab0 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003a9c:	60bb      	str	r3, [r7, #8]
      break;
 8003a9e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aaa:	bf00      	nop
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	00f42400 	.word	0x00f42400
 8003ab4:	017d7840 	.word	0x017d7840

08003ab8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003abc:	4b03      	ldr	r3, [pc, #12]	; (8003acc <HAL_RCC_GetHCLKFreq+0x14>)
 8003abe:	681b      	ldr	r3, [r3, #0]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	20000010 	.word	0x20000010

08003ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ad4:	f7ff fff0 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 8003ad8:	4601      	mov	r1, r0
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	0a9b      	lsrs	r3, r3, #10
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	4a03      	ldr	r2, [pc, #12]	; (8003af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ae6:	5cd3      	ldrb	r3, [r2, r3]
 8003ae8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	40023800 	.word	0x40023800
 8003af4:	0804ed58 	.word	0x0804ed58

08003af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003afc:	f7ff ffdc 	bl	8003ab8 <HAL_RCC_GetHCLKFreq>
 8003b00:	4601      	mov	r1, r0
 8003b02:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	0b5b      	lsrs	r3, r3, #13
 8003b08:	f003 0307 	and.w	r3, r3, #7
 8003b0c:	4a03      	ldr	r2, [pc, #12]	; (8003b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b0e:	5cd3      	ldrb	r3, [r2, r3]
 8003b10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	0804ed58 	.word	0x0804ed58

08003b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b088      	sub	sp, #32
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d012      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b48:	4b69      	ldr	r3, [pc, #420]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	4a68      	ldr	r2, [pc, #416]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003b52:	6093      	str	r3, [r2, #8]
 8003b54:	4b66      	ldr	r3, [pc, #408]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b56:	689a      	ldr	r2, [r3, #8]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5c:	4964      	ldr	r1, [pc, #400]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d017      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b7a:	4b5d      	ldr	r3, [pc, #372]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b88:	4959      	ldr	r1, [pc, #356]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b98:	d101      	bne.n	8003b9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d017      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003bb6:	4b4e      	ldr	r3, [pc, #312]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc4:	494a      	ldr	r1, [pc, #296]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd4:	d101      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003be2:	2301      	movs	r3, #1
 8003be4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0320 	and.w	r3, r3, #32
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	f000 808b 	beq.w	8003d1a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c04:	4b3a      	ldr	r3, [pc, #232]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c08:	4a39      	ldr	r2, [pc, #228]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	6413      	str	r3, [r2, #64]	; 0x40
 8003c10:	4b37      	ldr	r3, [pc, #220]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003c1c:	4b35      	ldr	r3, [pc, #212]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a34      	ldr	r2, [pc, #208]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c28:	f7fe fabe 	bl	80021a8 <HAL_GetTick>
 8003c2c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c2e:	e008      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c30:	f7fe faba 	bl	80021a8 <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	2b64      	cmp	r3, #100	; 0x64
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e355      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003c42:	4b2c      	ldr	r3, [pc, #176]	; (8003cf4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d0f0      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c4e:	4b28      	ldr	r3, [pc, #160]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c56:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d035      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d02e      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c6c:	4b20      	ldr	r3, [pc, #128]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c74:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c76:	4b1e      	ldr	r3, [pc, #120]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7a:	4a1d      	ldr	r2, [pc, #116]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c80:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c82:	4b1b      	ldr	r3, [pc, #108]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c86:	4a1a      	ldr	r2, [pc, #104]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003c8e:	4a18      	ldr	r2, [pc, #96]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c94:	4b16      	ldr	r3, [pc, #88]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c98:	f003 0301 	and.w	r3, r3, #1
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d114      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ca0:	f7fe fa82 	bl	80021a8 <HAL_GetTick>
 8003ca4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ca6:	e00a      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ca8:	f7fe fa7e 	bl	80021a8 <HAL_GetTick>
 8003cac:	4602      	mov	r2, r0
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	1ad3      	subs	r3, r2, r3
 8003cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e317      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cbe:	4b0c      	ldr	r3, [pc, #48]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0ee      	beq.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cd6:	d111      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003cd8:	4b05      	ldr	r3, [pc, #20]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003ce4:	4b04      	ldr	r3, [pc, #16]	; (8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ce6:	400b      	ands	r3, r1
 8003ce8:	4901      	ldr	r1, [pc, #4]	; (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	608b      	str	r3, [r1, #8]
 8003cee:	e00b      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003cf0:	40023800 	.word	0x40023800
 8003cf4:	40007000 	.word	0x40007000
 8003cf8:	0ffffcff 	.word	0x0ffffcff
 8003cfc:	4bb0      	ldr	r3, [pc, #704]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	4aaf      	ldr	r2, [pc, #700]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d02:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003d06:	6093      	str	r3, [r2, #8]
 8003d08:	4bad      	ldr	r3, [pc, #692]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d14:	49aa      	ldr	r1, [pc, #680]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0310 	and.w	r3, r3, #16
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d010      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003d26:	4ba6      	ldr	r3, [pc, #664]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d2c:	4aa4      	ldr	r2, [pc, #656]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d32:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003d36:	4ba2      	ldr	r3, [pc, #648]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d38:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d40:	499f      	ldr	r1, [pc, #636]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d54:	4b9a      	ldr	r3, [pc, #616]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d62:	4997      	ldr	r1, [pc, #604]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d76:	4b92      	ldr	r3, [pc, #584]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d84:	498e      	ldr	r1, [pc, #568]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d00a      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003d98:	4b89      	ldr	r3, [pc, #548]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003da6:	4986      	ldr	r1, [pc, #536]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00a      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003dba:	4b81      	ldr	r3, [pc, #516]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc8:	497d      	ldr	r1, [pc, #500]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00a      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ddc:	4b78      	ldr	r3, [pc, #480]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003de2:	f023 0203 	bic.w	r2, r3, #3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dea:	4975      	ldr	r1, [pc, #468]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003dec:	4313      	orrs	r3, r2
 8003dee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d00a      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003dfe:	4b70      	ldr	r3, [pc, #448]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e04:	f023 020c 	bic.w	r2, r3, #12
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e0c:	496c      	ldr	r1, [pc, #432]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00a      	beq.n	8003e36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003e20:	4b67      	ldr	r3, [pc, #412]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e26:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2e:	4964      	ldr	r1, [pc, #400]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e30:	4313      	orrs	r3, r2
 8003e32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00a      	beq.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003e42:	4b5f      	ldr	r3, [pc, #380]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e48:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e50:	495b      	ldr	r1, [pc, #364]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00a      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003e64:	4b56      	ldr	r3, [pc, #344]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e72:	4953      	ldr	r1, [pc, #332]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e74:	4313      	orrs	r3, r2
 8003e76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00a      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003e86:	4b4e      	ldr	r3, [pc, #312]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e94:	494a      	ldr	r1, [pc, #296]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d00a      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ea8:	4b45      	ldr	r3, [pc, #276]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003eaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb6:	4942      	ldr	r1, [pc, #264]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003eca:	4b3d      	ldr	r3, [pc, #244]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ed8:	4939      	ldr	r1, [pc, #228]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003eda:	4313      	orrs	r3, r2
 8003edc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003eec:	4b34      	ldr	r3, [pc, #208]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003efa:	4931      	ldr	r1, [pc, #196]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003efc:	4313      	orrs	r3, r2
 8003efe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d011      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003f0e:	4b2c      	ldr	r3, [pc, #176]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f14:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f1c:	4928      	ldr	r1, [pc, #160]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0308 	and.w	r3, r3, #8
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d001      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f4e:	4b1c      	ldr	r3, [pc, #112]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f54:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f5c:	4918      	ldr	r1, [pc, #96]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00b      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003f70:	4b13      	ldr	r3, [pc, #76]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f80:	490f      	ldr	r1, [pc, #60]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f82:	4313      	orrs	r3, r2
 8003f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d005      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003f96:	f040 80d8 	bne.w	800414a <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003f9a:	4b09      	ldr	r3, [pc, #36]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a08      	ldr	r2, [pc, #32]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8003fa0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fa6:	f7fe f8ff 	bl	80021a8 <HAL_GetTick>
 8003faa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fac:	e00a      	b.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003fae:	f7fe f8fb 	bl	80021a8 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b64      	cmp	r3, #100	; 0x64
 8003fba:	d903      	bls.n	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e196      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8003fc0:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003fc4:	4b6c      	ldr	r3, [pc, #432]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d1ee      	bne.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d021      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d11d      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fe4:	4b64      	ldr	r3, [pc, #400]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003fe6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fea:	0c1b      	lsrs	r3, r3, #16
 8003fec:	f003 0303 	and.w	r3, r3, #3
 8003ff0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ff2:	4b61      	ldr	r3, [pc, #388]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8003ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff8:	0e1b      	lsrs	r3, r3, #24
 8003ffa:	f003 030f 	and.w	r3, r3, #15
 8003ffe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	019a      	lsls	r2, r3, #6
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	041b      	lsls	r3, r3, #16
 800400a:	431a      	orrs	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	061b      	lsls	r3, r3, #24
 8004010:	431a      	orrs	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	071b      	lsls	r3, r3, #28
 8004018:	4957      	ldr	r1, [pc, #348]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800401a:	4313      	orrs	r3, r2
 800401c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d004      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004034:	d00a      	beq.n	800404c <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800403e:	2b00      	cmp	r3, #0
 8004040:	d02e      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800404a:	d129      	bne.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800404c:	4b4a      	ldr	r3, [pc, #296]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800404e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004052:	0c1b      	lsrs	r3, r3, #16
 8004054:	f003 0303 	and.w	r3, r3, #3
 8004058:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800405a:	4b47      	ldr	r3, [pc, #284]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800405c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004060:	0f1b      	lsrs	r3, r3, #28
 8004062:	f003 0307 	and.w	r3, r3, #7
 8004066:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	019a      	lsls	r2, r3, #6
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	041b      	lsls	r3, r3, #16
 8004072:	431a      	orrs	r2, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	68db      	ldr	r3, [r3, #12]
 8004078:	061b      	lsls	r3, r3, #24
 800407a:	431a      	orrs	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	071b      	lsls	r3, r3, #28
 8004080:	493d      	ldr	r1, [pc, #244]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004088:	4b3b      	ldr	r3, [pc, #236]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800408a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800408e:	f023 021f 	bic.w	r2, r3, #31
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	3b01      	subs	r3, #1
 8004098:	4937      	ldr	r1, [pc, #220]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d01d      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80040ac:	4b32      	ldr	r3, [pc, #200]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80040ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040b2:	0e1b      	lsrs	r3, r3, #24
 80040b4:	f003 030f 	and.w	r3, r3, #15
 80040b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80040ba:	4b2f      	ldr	r3, [pc, #188]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80040bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040c0:	0f1b      	lsrs	r3, r3, #28
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	019a      	lsls	r2, r3, #6
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	041b      	lsls	r3, r3, #16
 80040d4:	431a      	orrs	r2, r3
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	061b      	lsls	r3, r3, #24
 80040da:	431a      	orrs	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	071b      	lsls	r3, r3, #28
 80040e0:	4925      	ldr	r1, [pc, #148]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d011      	beq.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	019a      	lsls	r2, r3, #6
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	041b      	lsls	r3, r3, #16
 8004100:	431a      	orrs	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	68db      	ldr	r3, [r3, #12]
 8004106:	061b      	lsls	r3, r3, #24
 8004108:	431a      	orrs	r2, r3
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	071b      	lsls	r3, r3, #28
 8004110:	4919      	ldr	r1, [pc, #100]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004112:	4313      	orrs	r3, r2
 8004114:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004118:	4b17      	ldr	r3, [pc, #92]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a16      	ldr	r2, [pc, #88]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800411e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004122:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004124:	f7fe f840 	bl	80021a8 <HAL_GetTick>
 8004128:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800412a:	e008      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800412c:	f7fe f83c 	bl	80021a8 <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b64      	cmp	r3, #100	; 0x64
 8004138:	d901      	bls.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e0d7      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800413e:	4b0e      	ldr	r3, [pc, #56]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d0f0      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	2b01      	cmp	r3, #1
 800414e:	f040 80cd 	bne.w	80042ec <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004152:	4b09      	ldr	r3, [pc, #36]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a08      	ldr	r2, [pc, #32]	; (8004178 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8004158:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800415c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800415e:	f7fe f823 	bl	80021a8 <HAL_GetTick>
 8004162:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004164:	e00a      	b.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004166:	f7fe f81f 	bl	80021a8 <HAL_GetTick>
 800416a:	4602      	mov	r2, r0
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	1ad3      	subs	r3, r2, r3
 8004170:	2b64      	cmp	r3, #100	; 0x64
 8004172:	d903      	bls.n	800417c <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004174:	2303      	movs	r3, #3
 8004176:	e0ba      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8004178:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800417c:	4b5e      	ldr	r3, [pc, #376]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004184:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004188:	d0ed      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d003      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d02e      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d12a      	bne.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041b2:	4b51      	ldr	r3, [pc, #324]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80041b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041b8:	0c1b      	lsrs	r3, r3, #16
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80041c0:	4b4d      	ldr	r3, [pc, #308]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80041c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c6:	0f1b      	lsrs	r3, r3, #28
 80041c8:	f003 0307 	and.w	r3, r3, #7
 80041cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	019a      	lsls	r2, r3, #6
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	041b      	lsls	r3, r3, #16
 80041d8:	431a      	orrs	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	061b      	lsls	r3, r3, #24
 80041e0:	431a      	orrs	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	071b      	lsls	r3, r3, #28
 80041e6:	4944      	ldr	r1, [pc, #272]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80041ee:	4b42      	ldr	r3, [pc, #264]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80041f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	3b01      	subs	r3, #1
 80041fe:	021b      	lsls	r3, r3, #8
 8004200:	493d      	ldr	r1, [pc, #244]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d022      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004218:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800421c:	d11d      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800421e:	4b36      	ldr	r3, [pc, #216]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004224:	0e1b      	lsrs	r3, r3, #24
 8004226:	f003 030f 	and.w	r3, r3, #15
 800422a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800422c:	4b32      	ldr	r3, [pc, #200]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004232:	0f1b      	lsrs	r3, r3, #28
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	019a      	lsls	r2, r3, #6
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a1b      	ldr	r3, [r3, #32]
 8004244:	041b      	lsls	r3, r3, #16
 8004246:	431a      	orrs	r2, r3
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	061b      	lsls	r3, r3, #24
 800424c:	431a      	orrs	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	071b      	lsls	r3, r3, #28
 8004252:	4929      	ldr	r1, [pc, #164]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0308 	and.w	r3, r3, #8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d028      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004266:	4b24      	ldr	r3, [pc, #144]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	0e1b      	lsrs	r3, r3, #24
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004274:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427a:	0c1b      	lsrs	r3, r3, #16
 800427c:	f003 0303 	and.w	r3, r3, #3
 8004280:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695b      	ldr	r3, [r3, #20]
 8004286:	019a      	lsls	r2, r3, #6
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	431a      	orrs	r2, r3
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	061b      	lsls	r3, r3, #24
 8004292:	431a      	orrs	r2, r3
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69db      	ldr	r3, [r3, #28]
 8004298:	071b      	lsls	r3, r3, #28
 800429a:	4917      	ldr	r1, [pc, #92]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800429c:	4313      	orrs	r3, r2
 800429e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80042a2:	4b15      	ldr	r3, [pc, #84]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80042a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80042a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b0:	4911      	ldr	r1, [pc, #68]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80042b2:	4313      	orrs	r3, r2
 80042b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80042b8:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a0e      	ldr	r2, [pc, #56]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80042be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042c4:	f7fd ff70 	bl	80021a8 <HAL_GetTick>
 80042c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042ca:	e008      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80042cc:	f7fd ff6c 	bl	80021a8 <HAL_GetTick>
 80042d0:	4602      	mov	r2, r0
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	1ad3      	subs	r3, r2, r3
 80042d6:	2b64      	cmp	r3, #100	; 0x64
 80042d8:	d901      	bls.n	80042de <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80042da:	2303      	movs	r3, #3
 80042dc:	e007      	b.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80042de:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042ea:	d1ef      	bne.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3720      	adds	r7, #32
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40023800 	.word	0x40023800

080042fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b082      	sub	sp, #8
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d101      	bne.n	800430e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e01d      	b.n	800434a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fd fdd6 	bl	8001ed4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2202      	movs	r2, #2
 800432c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3304      	adds	r3, #4
 8004338:	4619      	mov	r1, r3
 800433a:	4610      	mov	r0, r2
 800433c:	f000 fa3c 	bl	80047b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
	...

08004354 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2202      	movs	r2, #2
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	689a      	ldr	r2, [r3, #8]
 800436a:	4b0e      	ldr	r3, [pc, #56]	; (80043a4 <HAL_TIM_Base_Start+0x50>)
 800436c:	4013      	ands	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b06      	cmp	r3, #6
 8004374:	d00b      	beq.n	800438e <HAL_TIM_Base_Start+0x3a>
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800437c:	d007      	beq.n	800438e <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f042 0201 	orr.w	r2, r2, #1
 800438c:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3714      	adds	r7, #20
 800439c:	46bd      	mov	sp, r7
 800439e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a2:	4770      	bx	lr
 80043a4:	00010007 	.word	0x00010007

080043a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e01d      	b.n	80043f6 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f815 	bl	80043fe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3304      	adds	r3, #4
 80043e4:	4619      	mov	r1, r3
 80043e6:	4610      	mov	r0, r2
 80043e8:	f000 f9e6 	bl	80047b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043f4:	2300      	movs	r3, #0
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3708      	adds	r7, #8
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80043fe:	b480      	push	{r7}
 8004400:	b083      	sub	sp, #12
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004406:	bf00      	nop
 8004408:	370c      	adds	r7, #12
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
	...

08004414 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800442a:	2302      	movs	r3, #2
 800442c:	e105      	b.n	800463a <HAL_TIM_PWM_ConfigChannel+0x226>
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	2201      	movs	r2, #1
 8004432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2202      	movs	r2, #2
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2b14      	cmp	r3, #20
 8004442:	f200 80f0 	bhi.w	8004626 <HAL_TIM_PWM_ConfigChannel+0x212>
 8004446:	a201      	add	r2, pc, #4	; (adr r2, 800444c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	080044a1 	.word	0x080044a1
 8004450:	08004627 	.word	0x08004627
 8004454:	08004627 	.word	0x08004627
 8004458:	08004627 	.word	0x08004627
 800445c:	080044e1 	.word	0x080044e1
 8004460:	08004627 	.word	0x08004627
 8004464:	08004627 	.word	0x08004627
 8004468:	08004627 	.word	0x08004627
 800446c:	08004523 	.word	0x08004523
 8004470:	08004627 	.word	0x08004627
 8004474:	08004627 	.word	0x08004627
 8004478:	08004627 	.word	0x08004627
 800447c:	08004563 	.word	0x08004563
 8004480:	08004627 	.word	0x08004627
 8004484:	08004627 	.word	0x08004627
 8004488:	08004627 	.word	0x08004627
 800448c:	080045a5 	.word	0x080045a5
 8004490:	08004627 	.word	0x08004627
 8004494:	08004627 	.word	0x08004627
 8004498:	08004627 	.word	0x08004627
 800449c:	080045e5 	.word	0x080045e5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68b9      	ldr	r1, [r7, #8]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f000 fa26 	bl	80048f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699a      	ldr	r2, [r3, #24]
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f042 0208 	orr.w	r2, r2, #8
 80044ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699a      	ldr	r2, [r3, #24]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0204 	bic.w	r2, r2, #4
 80044ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	6999      	ldr	r1, [r3, #24]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	691a      	ldr	r2, [r3, #16]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	430a      	orrs	r2, r1
 80044dc:	619a      	str	r2, [r3, #24]
      break;
 80044de:	e0a3      	b.n	8004628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	68b9      	ldr	r1, [r7, #8]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f000 fa78 	bl	80049dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699a      	ldr	r2, [r3, #24]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800450a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	6999      	ldr	r1, [r3, #24]
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	021a      	lsls	r2, r3, #8
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	619a      	str	r2, [r3, #24]
      break;
 8004520:	e082      	b.n	8004628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68b9      	ldr	r1, [r7, #8]
 8004528:	4618      	mov	r0, r3
 800452a:	f000 facf 	bl	8004acc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	69da      	ldr	r2, [r3, #28]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0208 	orr.w	r2, r2, #8
 800453c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	69da      	ldr	r2, [r3, #28]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0204 	bic.w	r2, r2, #4
 800454c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	69d9      	ldr	r1, [r3, #28]
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	430a      	orrs	r2, r1
 800455e:	61da      	str	r2, [r3, #28]
      break;
 8004560:	e062      	b.n	8004628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	68b9      	ldr	r1, [r7, #8]
 8004568:	4618      	mov	r0, r3
 800456a:	f000 fb25 	bl	8004bb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	69da      	ldr	r2, [r3, #28]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800457c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	69da      	ldr	r2, [r3, #28]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800458c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	69d9      	ldr	r1, [r3, #28]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	021a      	lsls	r2, r3, #8
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	430a      	orrs	r2, r1
 80045a0:	61da      	str	r2, [r3, #28]
      break;
 80045a2:	e041      	b.n	8004628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68b9      	ldr	r1, [r7, #8]
 80045aa:	4618      	mov	r0, r3
 80045ac:	f000 fb5c 	bl	8004c68 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f042 0208 	orr.w	r2, r2, #8
 80045be:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0204 	bic.w	r2, r2, #4
 80045ce:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	691a      	ldr	r2, [r3, #16]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	430a      	orrs	r2, r1
 80045e0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80045e2:	e021      	b.n	8004628 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68b9      	ldr	r1, [r7, #8]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f000 fb8e 	bl	8004d0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800460e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	021a      	lsls	r2, r3, #8
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	430a      	orrs	r2, r1
 8004622:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004624:	e000      	b.n	8004628 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8004626:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004638:	2300      	movs	r3, #0
}
 800463a:	4618      	mov	r0, r3
 800463c:	3710      	adds	r7, #16
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop

08004644 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_TIM_ConfigClockSource+0x18>
 8004658:	2302      	movs	r3, #2
 800465a:	e0a6      	b.n	80047aa <HAL_TIM_ConfigClockSource+0x166>
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2202      	movs	r2, #2
 8004668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4b4f      	ldr	r3, [pc, #316]	; (80047b4 <HAL_TIM_ConfigClockSource+0x170>)
 8004678:	4013      	ands	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004682:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	2b40      	cmp	r3, #64	; 0x40
 8004692:	d067      	beq.n	8004764 <HAL_TIM_ConfigClockSource+0x120>
 8004694:	2b40      	cmp	r3, #64	; 0x40
 8004696:	d80b      	bhi.n	80046b0 <HAL_TIM_ConfigClockSource+0x6c>
 8004698:	2b10      	cmp	r3, #16
 800469a:	d073      	beq.n	8004784 <HAL_TIM_ConfigClockSource+0x140>
 800469c:	2b10      	cmp	r3, #16
 800469e:	d802      	bhi.n	80046a6 <HAL_TIM_ConfigClockSource+0x62>
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d06f      	beq.n	8004784 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80046a4:	e078      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046a6:	2b20      	cmp	r3, #32
 80046a8:	d06c      	beq.n	8004784 <HAL_TIM_ConfigClockSource+0x140>
 80046aa:	2b30      	cmp	r3, #48	; 0x30
 80046ac:	d06a      	beq.n	8004784 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80046ae:	e073      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046b0:	2b70      	cmp	r3, #112	; 0x70
 80046b2:	d00d      	beq.n	80046d0 <HAL_TIM_ConfigClockSource+0x8c>
 80046b4:	2b70      	cmp	r3, #112	; 0x70
 80046b6:	d804      	bhi.n	80046c2 <HAL_TIM_ConfigClockSource+0x7e>
 80046b8:	2b50      	cmp	r3, #80	; 0x50
 80046ba:	d033      	beq.n	8004724 <HAL_TIM_ConfigClockSource+0xe0>
 80046bc:	2b60      	cmp	r3, #96	; 0x60
 80046be:	d041      	beq.n	8004744 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80046c0:	e06a      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80046c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046c6:	d066      	beq.n	8004796 <HAL_TIM_ConfigClockSource+0x152>
 80046c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046cc:	d017      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0xba>
      break;
 80046ce:	e063      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6818      	ldr	r0, [r3, #0]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	6899      	ldr	r1, [r3, #8]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	68db      	ldr	r3, [r3, #12]
 80046e0:	f000 fbe2 	bl	8004ea8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046f2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	609a      	str	r2, [r3, #8]
      break;
 80046fc:	e04c      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6899      	ldr	r1, [r3, #8]
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f000 fbcb 	bl	8004ea8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	689a      	ldr	r2, [r3, #8]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004720:	609a      	str	r2, [r3, #8]
      break;
 8004722:	e039      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6818      	ldr	r0, [r3, #0]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	6859      	ldr	r1, [r3, #4]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	461a      	mov	r2, r3
 8004732:	f000 fb3f 	bl	8004db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2150      	movs	r1, #80	; 0x50
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fb98 	bl	8004e72 <TIM_ITRx_SetConfig>
      break;
 8004742:	e029      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6818      	ldr	r0, [r3, #0]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	6859      	ldr	r1, [r3, #4]
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	461a      	mov	r2, r3
 8004752:	f000 fb5e 	bl	8004e12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2160      	movs	r1, #96	; 0x60
 800475c:	4618      	mov	r0, r3
 800475e:	f000 fb88 	bl	8004e72 <TIM_ITRx_SetConfig>
      break;
 8004762:	e019      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6818      	ldr	r0, [r3, #0]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	6859      	ldr	r1, [r3, #4]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	68db      	ldr	r3, [r3, #12]
 8004770:	461a      	mov	r2, r3
 8004772:	f000 fb1f 	bl	8004db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2140      	movs	r1, #64	; 0x40
 800477c:	4618      	mov	r0, r3
 800477e:	f000 fb78 	bl	8004e72 <TIM_ITRx_SetConfig>
      break;
 8004782:	e009      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4619      	mov	r1, r3
 800478e:	4610      	mov	r0, r2
 8004790:	f000 fb6f 	bl	8004e72 <TIM_ITRx_SetConfig>
      break;
 8004794:	e000      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004796:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
 80047b2:	bf00      	nop
 80047b4:	fffeff88 	.word	0xfffeff88

080047b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	4a40      	ldr	r2, [pc, #256]	; (80048cc <TIM_Base_SetConfig+0x114>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d013      	beq.n	80047f8 <TIM_Base_SetConfig+0x40>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d6:	d00f      	beq.n	80047f8 <TIM_Base_SetConfig+0x40>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a3d      	ldr	r2, [pc, #244]	; (80048d0 <TIM_Base_SetConfig+0x118>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d00b      	beq.n	80047f8 <TIM_Base_SetConfig+0x40>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a3c      	ldr	r2, [pc, #240]	; (80048d4 <TIM_Base_SetConfig+0x11c>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d007      	beq.n	80047f8 <TIM_Base_SetConfig+0x40>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a3b      	ldr	r2, [pc, #236]	; (80048d8 <TIM_Base_SetConfig+0x120>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d003      	beq.n	80047f8 <TIM_Base_SetConfig+0x40>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a3a      	ldr	r2, [pc, #232]	; (80048dc <TIM_Base_SetConfig+0x124>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d108      	bne.n	800480a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	4313      	orrs	r3, r2
 8004808:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a2f      	ldr	r2, [pc, #188]	; (80048cc <TIM_Base_SetConfig+0x114>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d02b      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004818:	d027      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a2c      	ldr	r2, [pc, #176]	; (80048d0 <TIM_Base_SetConfig+0x118>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d023      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a2b      	ldr	r2, [pc, #172]	; (80048d4 <TIM_Base_SetConfig+0x11c>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d01f      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	4a2a      	ldr	r2, [pc, #168]	; (80048d8 <TIM_Base_SetConfig+0x120>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d01b      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a29      	ldr	r2, [pc, #164]	; (80048dc <TIM_Base_SetConfig+0x124>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d017      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a28      	ldr	r2, [pc, #160]	; (80048e0 <TIM_Base_SetConfig+0x128>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d013      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a27      	ldr	r2, [pc, #156]	; (80048e4 <TIM_Base_SetConfig+0x12c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00f      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a26      	ldr	r2, [pc, #152]	; (80048e8 <TIM_Base_SetConfig+0x130>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d00b      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a25      	ldr	r2, [pc, #148]	; (80048ec <TIM_Base_SetConfig+0x134>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d007      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a24      	ldr	r2, [pc, #144]	; (80048f0 <TIM_Base_SetConfig+0x138>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d003      	beq.n	800486a <TIM_Base_SetConfig+0xb2>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	4a23      	ldr	r2, [pc, #140]	; (80048f4 <TIM_Base_SetConfig+0x13c>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d108      	bne.n	800487c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004870:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	68fa      	ldr	r2, [r7, #12]
 8004878:	4313      	orrs	r3, r2
 800487a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	4a0a      	ldr	r2, [pc, #40]	; (80048cc <TIM_Base_SetConfig+0x114>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d003      	beq.n	80048b0 <TIM_Base_SetConfig+0xf8>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a0c      	ldr	r2, [pc, #48]	; (80048dc <TIM_Base_SetConfig+0x124>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d103      	bne.n	80048b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2201      	movs	r2, #1
 80048bc:	615a      	str	r2, [r3, #20]
}
 80048be:	bf00      	nop
 80048c0:	3714      	adds	r7, #20
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	40010000 	.word	0x40010000
 80048d0:	40000400 	.word	0x40000400
 80048d4:	40000800 	.word	0x40000800
 80048d8:	40000c00 	.word	0x40000c00
 80048dc:	40010400 	.word	0x40010400
 80048e0:	40014000 	.word	0x40014000
 80048e4:	40014400 	.word	0x40014400
 80048e8:	40014800 	.word	0x40014800
 80048ec:	40001800 	.word	0x40001800
 80048f0:	40001c00 	.word	0x40001c00
 80048f4:	40002000 	.word	0x40002000

080048f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	f023 0201 	bic.w	r2, r3, #1
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	4b2b      	ldr	r3, [pc, #172]	; (80049d0 <TIM_OC1_SetConfig+0xd8>)
 8004924:	4013      	ands	r3, r2
 8004926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f023 0303 	bic.w	r3, r3, #3
 800492e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	4313      	orrs	r3, r2
 8004938:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f023 0302 	bic.w	r3, r3, #2
 8004940:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	697a      	ldr	r2, [r7, #20]
 8004948:	4313      	orrs	r3, r2
 800494a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a21      	ldr	r2, [pc, #132]	; (80049d4 <TIM_OC1_SetConfig+0xdc>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d003      	beq.n	800495c <TIM_OC1_SetConfig+0x64>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a20      	ldr	r2, [pc, #128]	; (80049d8 <TIM_OC1_SetConfig+0xe0>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d10c      	bne.n	8004976 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	f023 0308 	bic.w	r3, r3, #8
 8004962:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	4313      	orrs	r3, r2
 800496c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	f023 0304 	bic.w	r3, r3, #4
 8004974:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	4a16      	ldr	r2, [pc, #88]	; (80049d4 <TIM_OC1_SetConfig+0xdc>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d003      	beq.n	8004986 <TIM_OC1_SetConfig+0x8e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a15      	ldr	r2, [pc, #84]	; (80049d8 <TIM_OC1_SetConfig+0xe0>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d111      	bne.n	80049aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800498c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004994:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	693a      	ldr	r2, [r7, #16]
 800499c:	4313      	orrs	r3, r2
 800499e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	685a      	ldr	r2, [r3, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	621a      	str	r2, [r3, #32]
}
 80049c4:	bf00      	nop
 80049c6:	371c      	adds	r7, #28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	fffeff8f 	.word	0xfffeff8f
 80049d4:	40010000 	.word	0x40010000
 80049d8:	40010400 	.word	0x40010400

080049dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80049dc:	b480      	push	{r7}
 80049de:	b087      	sub	sp, #28
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	f023 0210 	bic.w	r2, r3, #16
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4b2e      	ldr	r3, [pc, #184]	; (8004ac0 <TIM_OC2_SetConfig+0xe4>)
 8004a08:	4013      	ands	r3, r2
 8004a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	021b      	lsls	r3, r3, #8
 8004a1a:	68fa      	ldr	r2, [r7, #12]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	f023 0320 	bic.w	r3, r3, #32
 8004a26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	697a      	ldr	r2, [r7, #20]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4a23      	ldr	r2, [pc, #140]	; (8004ac4 <TIM_OC2_SetConfig+0xe8>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d003      	beq.n	8004a44 <TIM_OC2_SetConfig+0x68>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a22      	ldr	r2, [pc, #136]	; (8004ac8 <TIM_OC2_SetConfig+0xec>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d10d      	bne.n	8004a60 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	697a      	ldr	r2, [r7, #20]
 8004a54:	4313      	orrs	r3, r2
 8004a56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	4a18      	ldr	r2, [pc, #96]	; (8004ac4 <TIM_OC2_SetConfig+0xe8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d003      	beq.n	8004a70 <TIM_OC2_SetConfig+0x94>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4a17      	ldr	r2, [pc, #92]	; (8004ac8 <TIM_OC2_SetConfig+0xec>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d113      	bne.n	8004a98 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	68fa      	ldr	r2, [r7, #12]
 8004aa2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	621a      	str	r2, [r3, #32]
}
 8004ab2:	bf00      	nop
 8004ab4:	371c      	adds	r7, #28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	feff8fff 	.word	0xfeff8fff
 8004ac4:	40010000 	.word	0x40010000
 8004ac8:	40010400 	.word	0x40010400

08004acc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b087      	sub	sp, #28
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004af4:	68fa      	ldr	r2, [r7, #12]
 8004af6:	4b2d      	ldr	r3, [pc, #180]	; (8004bac <TIM_OC3_SetConfig+0xe0>)
 8004af8:	4013      	ands	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f023 0303 	bic.w	r3, r3, #3
 8004b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	021b      	lsls	r3, r3, #8
 8004b1c:	697a      	ldr	r2, [r7, #20]
 8004b1e:	4313      	orrs	r3, r2
 8004b20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	4a22      	ldr	r2, [pc, #136]	; (8004bb0 <TIM_OC3_SetConfig+0xe4>)
 8004b26:	4293      	cmp	r3, r2
 8004b28:	d003      	beq.n	8004b32 <TIM_OC3_SetConfig+0x66>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	4a21      	ldr	r2, [pc, #132]	; (8004bb4 <TIM_OC3_SetConfig+0xe8>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d10d      	bne.n	8004b4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	021b      	lsls	r3, r3, #8
 8004b40:	697a      	ldr	r2, [r7, #20]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a17      	ldr	r2, [pc, #92]	; (8004bb0 <TIM_OC3_SetConfig+0xe4>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d003      	beq.n	8004b5e <TIM_OC3_SetConfig+0x92>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a16      	ldr	r2, [pc, #88]	; (8004bb4 <TIM_OC3_SetConfig+0xe8>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d113      	bne.n	8004b86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	011b      	lsls	r3, r3, #4
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	693a      	ldr	r2, [r7, #16]
 8004b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68fa      	ldr	r2, [r7, #12]
 8004b90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	697a      	ldr	r2, [r7, #20]
 8004b9e:	621a      	str	r2, [r3, #32]
}
 8004ba0:	bf00      	nop
 8004ba2:	371c      	adds	r7, #28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	fffeff8f 	.word	0xfffeff8f
 8004bb0:	40010000 	.word	0x40010000
 8004bb4:	40010400 	.word	0x40010400

08004bb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b087      	sub	sp, #28
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a1b      	ldr	r3, [r3, #32]
 8004bd2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	4b1e      	ldr	r3, [pc, #120]	; (8004c5c <TIM_OC4_SetConfig+0xa4>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	021b      	lsls	r3, r3, #8
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	031b      	lsls	r3, r3, #12
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	4a13      	ldr	r2, [pc, #76]	; (8004c60 <TIM_OC4_SetConfig+0xa8>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d003      	beq.n	8004c20 <TIM_OC4_SetConfig+0x68>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a12      	ldr	r2, [pc, #72]	; (8004c64 <TIM_OC4_SetConfig+0xac>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d109      	bne.n	8004c34 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c20:	697b      	ldr	r3, [r7, #20]
 8004c22:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	019b      	lsls	r3, r3, #6
 8004c2e:	697a      	ldr	r2, [r7, #20]
 8004c30:	4313      	orrs	r3, r2
 8004c32:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	693a      	ldr	r2, [r7, #16]
 8004c4c:	621a      	str	r2, [r3, #32]
}
 8004c4e:	bf00      	nop
 8004c50:	371c      	adds	r7, #28
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	feff8fff 	.word	0xfeff8fff
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40010400 	.word	0x40010400

08004c68 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b087      	sub	sp, #28
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
 8004c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	685b      	ldr	r3, [r3, #4]
 8004c88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004c90:	68fa      	ldr	r2, [r7, #12]
 8004c92:	4b1b      	ldr	r3, [pc, #108]	; (8004d00 <TIM_OC5_SetConfig+0x98>)
 8004c94:	4013      	ands	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004ca8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	041b      	lsls	r3, r3, #16
 8004cb0:	693a      	ldr	r2, [r7, #16]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a12      	ldr	r2, [pc, #72]	; (8004d04 <TIM_OC5_SetConfig+0x9c>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d003      	beq.n	8004cc6 <TIM_OC5_SetConfig+0x5e>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a11      	ldr	r2, [pc, #68]	; (8004d08 <TIM_OC5_SetConfig+0xa0>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d109      	bne.n	8004cda <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ccc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	021b      	lsls	r3, r3, #8
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	693a      	ldr	r2, [r7, #16]
 8004cf2:	621a      	str	r2, [r3, #32]
}
 8004cf4:	bf00      	nop
 8004cf6:	371c      	adds	r7, #28
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	fffeff8f 	.word	0xfffeff8f
 8004d04:	40010000 	.word	0x40010000
 8004d08:	40010400 	.word	0x40010400

08004d0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b087      	sub	sp, #28
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a1b      	ldr	r3, [r3, #32]
 8004d26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4b1c      	ldr	r3, [pc, #112]	; (8004da8 <TIM_OC6_SetConfig+0x9c>)
 8004d38:	4013      	ands	r3, r2
 8004d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	021b      	lsls	r3, r3, #8
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4313      	orrs	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004d48:	693b      	ldr	r3, [r7, #16]
 8004d4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004d4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	051b      	lsls	r3, r3, #20
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a13      	ldr	r2, [pc, #76]	; (8004dac <TIM_OC6_SetConfig+0xa0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <TIM_OC6_SetConfig+0x60>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a12      	ldr	r2, [pc, #72]	; (8004db0 <TIM_OC6_SetConfig+0xa4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d109      	bne.n	8004d80 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	029b      	lsls	r3, r3, #10
 8004d7a:	697a      	ldr	r2, [r7, #20]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	685a      	ldr	r2, [r3, #4]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	621a      	str	r2, [r3, #32]
}
 8004d9a:	bf00      	nop
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	feff8fff 	.word	0xfeff8fff
 8004dac:	40010000 	.word	0x40010000
 8004db0:	40010400 	.word	0x40010400

08004db4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b087      	sub	sp, #28
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	f023 0201 	bic.w	r2, r3, #1
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	011b      	lsls	r3, r3, #4
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	4313      	orrs	r3, r2
 8004de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	f023 030a 	bic.w	r3, r3, #10
 8004df0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	693a      	ldr	r2, [r7, #16]
 8004dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	621a      	str	r2, [r3, #32]
}
 8004e06:	bf00      	nop
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b087      	sub	sp, #28
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	f023 0210 	bic.w	r2, r3, #16
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e3c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	031b      	lsls	r3, r3, #12
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4313      	orrs	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e4e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	697a      	ldr	r2, [r7, #20]
 8004e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	621a      	str	r2, [r3, #32]
}
 8004e66:	bf00      	nop
 8004e68:	371c      	adds	r7, #28
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b085      	sub	sp, #20
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	f043 0307 	orr.w	r3, r3, #7
 8004e94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	609a      	str	r2, [r3, #8]
}
 8004e9c:	bf00      	nop
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b087      	sub	sp, #28
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ec2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	021a      	lsls	r2, r3, #8
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	431a      	orrs	r2, r3
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	609a      	str	r2, [r3, #8]
}
 8004edc:	bf00      	nop
 8004ede:	371c      	adds	r7, #28
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d101      	bne.n	8004f00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004efc:	2302      	movs	r3, #2
 8004efe:	e06d      	b.n	8004fdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a30      	ldr	r2, [pc, #192]	; (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d004      	beq.n	8004f34 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a2f      	ldr	r2, [pc, #188]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d108      	bne.n	8004f46 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f3a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	68fa      	ldr	r2, [r7, #12]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f4c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68fa      	ldr	r2, [r7, #12]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	68fa      	ldr	r2, [r7, #12]
 8004f5e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a20      	ldr	r2, [pc, #128]	; (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d022      	beq.n	8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f72:	d01d      	beq.n	8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1d      	ldr	r2, [pc, #116]	; (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d018      	beq.n	8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1c      	ldr	r2, [pc, #112]	; (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d013      	beq.n	8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a1a      	ldr	r2, [pc, #104]	; (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d00e      	beq.n	8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a15      	ldr	r2, [pc, #84]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d009      	beq.n	8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a16      	ldr	r2, [pc, #88]	; (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d004      	beq.n	8004fb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a15      	ldr	r2, [pc, #84]	; (8005000 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d10c      	bne.n	8004fca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fb6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2201      	movs	r2, #1
 8004fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fda:	2300      	movs	r3, #0
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3714      	adds	r7, #20
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe6:	4770      	bx	lr
 8004fe8:	40010000 	.word	0x40010000
 8004fec:	40010400 	.word	0x40010400
 8004ff0:	40000400 	.word	0x40000400
 8004ff4:	40000800 	.word	0x40000800
 8004ff8:	40000c00 	.word	0x40000c00
 8004ffc:	40014000 	.word	0x40014000
 8005000:	40001800 	.word	0x40001800

08005004 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800500e:	2300      	movs	r3, #0
 8005010:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005018:	2b01      	cmp	r3, #1
 800501a:	d101      	bne.n	8005020 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800501c:	2302      	movs	r3, #2
 800501e:	e065      	b.n	80050ec <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2201      	movs	r2, #1
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	4313      	orrs	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	691b      	ldr	r3, [r3, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	4313      	orrs	r3, r2
 800507a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005086:	4313      	orrs	r3, r2
 8005088:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	699b      	ldr	r3, [r3, #24]
 8005094:	041b      	lsls	r3, r3, #16
 8005096:	4313      	orrs	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a16      	ldr	r2, [pc, #88]	; (80050f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d004      	beq.n	80050ae <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a14      	ldr	r2, [pc, #80]	; (80050fc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d115      	bne.n	80050da <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	051b      	lsls	r3, r3, #20
 80050ba:	4313      	orrs	r3, r2
 80050bc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	69db      	ldr	r3, [r3, #28]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3714      	adds	r7, #20
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	40010000 	.word	0x40010000
 80050fc:	40010400 	.word	0x40010400

08005100 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e040      	b.n	8005194 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005116:	2b00      	cmp	r3, #0
 8005118:	d106      	bne.n	8005128 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7fc ff0a 	bl	8001f3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2224      	movs	r2, #36	; 0x24
 800512c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 0201 	bic.w	r2, r2, #1
 800513c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f82c 	bl	800519c <UART_SetConfig>
 8005144:	4603      	mov	r3, r0
 8005146:	2b01      	cmp	r3, #1
 8005148:	d101      	bne.n	800514e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800514a:	2301      	movs	r3, #1
 800514c:	e022      	b.n	8005194 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f000 faca 	bl	80056f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800516a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800517a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	681a      	ldr	r2, [r3, #0]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f042 0201 	orr.w	r2, r2, #1
 800518a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 fb51 	bl	8005834 <UART_CheckIdleState>
 8005192:	4603      	mov	r3, r0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3708      	adds	r7, #8
 8005198:	46bd      	mov	sp, r7
 800519a:	bd80      	pop	{r7, pc}

0800519c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b088      	sub	sp, #32
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80051a8:	2300      	movs	r3, #0
 80051aa:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	431a      	orrs	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	69db      	ldr	r3, [r3, #28]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	4bb1      	ldr	r3, [pc, #708]	; (8005490 <UART_SetConfig+0x2f4>)
 80051cc:	4013      	ands	r3, r2
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	6812      	ldr	r2, [r2, #0]
 80051d2:	6939      	ldr	r1, [r7, #16]
 80051d4:	430b      	orrs	r3, r1
 80051d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	68da      	ldr	r2, [r3, #12]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	693a      	ldr	r2, [r7, #16]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	430a      	orrs	r2, r1
 8005210:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a9f      	ldr	r2, [pc, #636]	; (8005494 <UART_SetConfig+0x2f8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d121      	bne.n	8005260 <UART_SetConfig+0xc4>
 800521c:	4b9e      	ldr	r3, [pc, #632]	; (8005498 <UART_SetConfig+0x2fc>)
 800521e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	2b03      	cmp	r3, #3
 8005228:	d816      	bhi.n	8005258 <UART_SetConfig+0xbc>
 800522a:	a201      	add	r2, pc, #4	; (adr r2, 8005230 <UART_SetConfig+0x94>)
 800522c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005230:	08005241 	.word	0x08005241
 8005234:	0800524d 	.word	0x0800524d
 8005238:	08005247 	.word	0x08005247
 800523c:	08005253 	.word	0x08005253
 8005240:	2301      	movs	r3, #1
 8005242:	77fb      	strb	r3, [r7, #31]
 8005244:	e151      	b.n	80054ea <UART_SetConfig+0x34e>
 8005246:	2302      	movs	r3, #2
 8005248:	77fb      	strb	r3, [r7, #31]
 800524a:	e14e      	b.n	80054ea <UART_SetConfig+0x34e>
 800524c:	2304      	movs	r3, #4
 800524e:	77fb      	strb	r3, [r7, #31]
 8005250:	e14b      	b.n	80054ea <UART_SetConfig+0x34e>
 8005252:	2308      	movs	r3, #8
 8005254:	77fb      	strb	r3, [r7, #31]
 8005256:	e148      	b.n	80054ea <UART_SetConfig+0x34e>
 8005258:	2310      	movs	r3, #16
 800525a:	77fb      	strb	r3, [r7, #31]
 800525c:	bf00      	nop
 800525e:	e144      	b.n	80054ea <UART_SetConfig+0x34e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a8d      	ldr	r2, [pc, #564]	; (800549c <UART_SetConfig+0x300>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d134      	bne.n	80052d4 <UART_SetConfig+0x138>
 800526a:	4b8b      	ldr	r3, [pc, #556]	; (8005498 <UART_SetConfig+0x2fc>)
 800526c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005270:	f003 030c 	and.w	r3, r3, #12
 8005274:	2b0c      	cmp	r3, #12
 8005276:	d829      	bhi.n	80052cc <UART_SetConfig+0x130>
 8005278:	a201      	add	r2, pc, #4	; (adr r2, 8005280 <UART_SetConfig+0xe4>)
 800527a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527e:	bf00      	nop
 8005280:	080052b5 	.word	0x080052b5
 8005284:	080052cd 	.word	0x080052cd
 8005288:	080052cd 	.word	0x080052cd
 800528c:	080052cd 	.word	0x080052cd
 8005290:	080052c1 	.word	0x080052c1
 8005294:	080052cd 	.word	0x080052cd
 8005298:	080052cd 	.word	0x080052cd
 800529c:	080052cd 	.word	0x080052cd
 80052a0:	080052bb 	.word	0x080052bb
 80052a4:	080052cd 	.word	0x080052cd
 80052a8:	080052cd 	.word	0x080052cd
 80052ac:	080052cd 	.word	0x080052cd
 80052b0:	080052c7 	.word	0x080052c7
 80052b4:	2300      	movs	r3, #0
 80052b6:	77fb      	strb	r3, [r7, #31]
 80052b8:	e117      	b.n	80054ea <UART_SetConfig+0x34e>
 80052ba:	2302      	movs	r3, #2
 80052bc:	77fb      	strb	r3, [r7, #31]
 80052be:	e114      	b.n	80054ea <UART_SetConfig+0x34e>
 80052c0:	2304      	movs	r3, #4
 80052c2:	77fb      	strb	r3, [r7, #31]
 80052c4:	e111      	b.n	80054ea <UART_SetConfig+0x34e>
 80052c6:	2308      	movs	r3, #8
 80052c8:	77fb      	strb	r3, [r7, #31]
 80052ca:	e10e      	b.n	80054ea <UART_SetConfig+0x34e>
 80052cc:	2310      	movs	r3, #16
 80052ce:	77fb      	strb	r3, [r7, #31]
 80052d0:	bf00      	nop
 80052d2:	e10a      	b.n	80054ea <UART_SetConfig+0x34e>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a71      	ldr	r2, [pc, #452]	; (80054a0 <UART_SetConfig+0x304>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d120      	bne.n	8005320 <UART_SetConfig+0x184>
 80052de:	4b6e      	ldr	r3, [pc, #440]	; (8005498 <UART_SetConfig+0x2fc>)
 80052e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052e8:	2b10      	cmp	r3, #16
 80052ea:	d00f      	beq.n	800530c <UART_SetConfig+0x170>
 80052ec:	2b10      	cmp	r3, #16
 80052ee:	d802      	bhi.n	80052f6 <UART_SetConfig+0x15a>
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d005      	beq.n	8005300 <UART_SetConfig+0x164>
 80052f4:	e010      	b.n	8005318 <UART_SetConfig+0x17c>
 80052f6:	2b20      	cmp	r3, #32
 80052f8:	d005      	beq.n	8005306 <UART_SetConfig+0x16a>
 80052fa:	2b30      	cmp	r3, #48	; 0x30
 80052fc:	d009      	beq.n	8005312 <UART_SetConfig+0x176>
 80052fe:	e00b      	b.n	8005318 <UART_SetConfig+0x17c>
 8005300:	2300      	movs	r3, #0
 8005302:	77fb      	strb	r3, [r7, #31]
 8005304:	e0f1      	b.n	80054ea <UART_SetConfig+0x34e>
 8005306:	2302      	movs	r3, #2
 8005308:	77fb      	strb	r3, [r7, #31]
 800530a:	e0ee      	b.n	80054ea <UART_SetConfig+0x34e>
 800530c:	2304      	movs	r3, #4
 800530e:	77fb      	strb	r3, [r7, #31]
 8005310:	e0eb      	b.n	80054ea <UART_SetConfig+0x34e>
 8005312:	2308      	movs	r3, #8
 8005314:	77fb      	strb	r3, [r7, #31]
 8005316:	e0e8      	b.n	80054ea <UART_SetConfig+0x34e>
 8005318:	2310      	movs	r3, #16
 800531a:	77fb      	strb	r3, [r7, #31]
 800531c:	bf00      	nop
 800531e:	e0e4      	b.n	80054ea <UART_SetConfig+0x34e>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a5f      	ldr	r2, [pc, #380]	; (80054a4 <UART_SetConfig+0x308>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d120      	bne.n	800536c <UART_SetConfig+0x1d0>
 800532a:	4b5b      	ldr	r3, [pc, #364]	; (8005498 <UART_SetConfig+0x2fc>)
 800532c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005330:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005334:	2b40      	cmp	r3, #64	; 0x40
 8005336:	d00f      	beq.n	8005358 <UART_SetConfig+0x1bc>
 8005338:	2b40      	cmp	r3, #64	; 0x40
 800533a:	d802      	bhi.n	8005342 <UART_SetConfig+0x1a6>
 800533c:	2b00      	cmp	r3, #0
 800533e:	d005      	beq.n	800534c <UART_SetConfig+0x1b0>
 8005340:	e010      	b.n	8005364 <UART_SetConfig+0x1c8>
 8005342:	2b80      	cmp	r3, #128	; 0x80
 8005344:	d005      	beq.n	8005352 <UART_SetConfig+0x1b6>
 8005346:	2bc0      	cmp	r3, #192	; 0xc0
 8005348:	d009      	beq.n	800535e <UART_SetConfig+0x1c2>
 800534a:	e00b      	b.n	8005364 <UART_SetConfig+0x1c8>
 800534c:	2300      	movs	r3, #0
 800534e:	77fb      	strb	r3, [r7, #31]
 8005350:	e0cb      	b.n	80054ea <UART_SetConfig+0x34e>
 8005352:	2302      	movs	r3, #2
 8005354:	77fb      	strb	r3, [r7, #31]
 8005356:	e0c8      	b.n	80054ea <UART_SetConfig+0x34e>
 8005358:	2304      	movs	r3, #4
 800535a:	77fb      	strb	r3, [r7, #31]
 800535c:	e0c5      	b.n	80054ea <UART_SetConfig+0x34e>
 800535e:	2308      	movs	r3, #8
 8005360:	77fb      	strb	r3, [r7, #31]
 8005362:	e0c2      	b.n	80054ea <UART_SetConfig+0x34e>
 8005364:	2310      	movs	r3, #16
 8005366:	77fb      	strb	r3, [r7, #31]
 8005368:	bf00      	nop
 800536a:	e0be      	b.n	80054ea <UART_SetConfig+0x34e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a4d      	ldr	r2, [pc, #308]	; (80054a8 <UART_SetConfig+0x30c>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d124      	bne.n	80053c0 <UART_SetConfig+0x224>
 8005376:	4b48      	ldr	r3, [pc, #288]	; (8005498 <UART_SetConfig+0x2fc>)
 8005378:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800537c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005380:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005384:	d012      	beq.n	80053ac <UART_SetConfig+0x210>
 8005386:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800538a:	d802      	bhi.n	8005392 <UART_SetConfig+0x1f6>
 800538c:	2b00      	cmp	r3, #0
 800538e:	d007      	beq.n	80053a0 <UART_SetConfig+0x204>
 8005390:	e012      	b.n	80053b8 <UART_SetConfig+0x21c>
 8005392:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005396:	d006      	beq.n	80053a6 <UART_SetConfig+0x20a>
 8005398:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800539c:	d009      	beq.n	80053b2 <UART_SetConfig+0x216>
 800539e:	e00b      	b.n	80053b8 <UART_SetConfig+0x21c>
 80053a0:	2300      	movs	r3, #0
 80053a2:	77fb      	strb	r3, [r7, #31]
 80053a4:	e0a1      	b.n	80054ea <UART_SetConfig+0x34e>
 80053a6:	2302      	movs	r3, #2
 80053a8:	77fb      	strb	r3, [r7, #31]
 80053aa:	e09e      	b.n	80054ea <UART_SetConfig+0x34e>
 80053ac:	2304      	movs	r3, #4
 80053ae:	77fb      	strb	r3, [r7, #31]
 80053b0:	e09b      	b.n	80054ea <UART_SetConfig+0x34e>
 80053b2:	2308      	movs	r3, #8
 80053b4:	77fb      	strb	r3, [r7, #31]
 80053b6:	e098      	b.n	80054ea <UART_SetConfig+0x34e>
 80053b8:	2310      	movs	r3, #16
 80053ba:	77fb      	strb	r3, [r7, #31]
 80053bc:	bf00      	nop
 80053be:	e094      	b.n	80054ea <UART_SetConfig+0x34e>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a39      	ldr	r2, [pc, #228]	; (80054ac <UART_SetConfig+0x310>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d124      	bne.n	8005414 <UART_SetConfig+0x278>
 80053ca:	4b33      	ldr	r3, [pc, #204]	; (8005498 <UART_SetConfig+0x2fc>)
 80053cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80053d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053d8:	d012      	beq.n	8005400 <UART_SetConfig+0x264>
 80053da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053de:	d802      	bhi.n	80053e6 <UART_SetConfig+0x24a>
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <UART_SetConfig+0x258>
 80053e4:	e012      	b.n	800540c <UART_SetConfig+0x270>
 80053e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053ea:	d006      	beq.n	80053fa <UART_SetConfig+0x25e>
 80053ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80053f0:	d009      	beq.n	8005406 <UART_SetConfig+0x26a>
 80053f2:	e00b      	b.n	800540c <UART_SetConfig+0x270>
 80053f4:	2301      	movs	r3, #1
 80053f6:	77fb      	strb	r3, [r7, #31]
 80053f8:	e077      	b.n	80054ea <UART_SetConfig+0x34e>
 80053fa:	2302      	movs	r3, #2
 80053fc:	77fb      	strb	r3, [r7, #31]
 80053fe:	e074      	b.n	80054ea <UART_SetConfig+0x34e>
 8005400:	2304      	movs	r3, #4
 8005402:	77fb      	strb	r3, [r7, #31]
 8005404:	e071      	b.n	80054ea <UART_SetConfig+0x34e>
 8005406:	2308      	movs	r3, #8
 8005408:	77fb      	strb	r3, [r7, #31]
 800540a:	e06e      	b.n	80054ea <UART_SetConfig+0x34e>
 800540c:	2310      	movs	r3, #16
 800540e:	77fb      	strb	r3, [r7, #31]
 8005410:	bf00      	nop
 8005412:	e06a      	b.n	80054ea <UART_SetConfig+0x34e>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a25      	ldr	r2, [pc, #148]	; (80054b0 <UART_SetConfig+0x314>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d124      	bne.n	8005468 <UART_SetConfig+0x2cc>
 800541e:	4b1e      	ldr	r3, [pc, #120]	; (8005498 <UART_SetConfig+0x2fc>)
 8005420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005424:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005428:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542c:	d012      	beq.n	8005454 <UART_SetConfig+0x2b8>
 800542e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005432:	d802      	bhi.n	800543a <UART_SetConfig+0x29e>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d007      	beq.n	8005448 <UART_SetConfig+0x2ac>
 8005438:	e012      	b.n	8005460 <UART_SetConfig+0x2c4>
 800543a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800543e:	d006      	beq.n	800544e <UART_SetConfig+0x2b2>
 8005440:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005444:	d009      	beq.n	800545a <UART_SetConfig+0x2be>
 8005446:	e00b      	b.n	8005460 <UART_SetConfig+0x2c4>
 8005448:	2300      	movs	r3, #0
 800544a:	77fb      	strb	r3, [r7, #31]
 800544c:	e04d      	b.n	80054ea <UART_SetConfig+0x34e>
 800544e:	2302      	movs	r3, #2
 8005450:	77fb      	strb	r3, [r7, #31]
 8005452:	e04a      	b.n	80054ea <UART_SetConfig+0x34e>
 8005454:	2304      	movs	r3, #4
 8005456:	77fb      	strb	r3, [r7, #31]
 8005458:	e047      	b.n	80054ea <UART_SetConfig+0x34e>
 800545a:	2308      	movs	r3, #8
 800545c:	77fb      	strb	r3, [r7, #31]
 800545e:	e044      	b.n	80054ea <UART_SetConfig+0x34e>
 8005460:	2310      	movs	r3, #16
 8005462:	77fb      	strb	r3, [r7, #31]
 8005464:	bf00      	nop
 8005466:	e040      	b.n	80054ea <UART_SetConfig+0x34e>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a11      	ldr	r2, [pc, #68]	; (80054b4 <UART_SetConfig+0x318>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d139      	bne.n	80054e6 <UART_SetConfig+0x34a>
 8005472:	4b09      	ldr	r3, [pc, #36]	; (8005498 <UART_SetConfig+0x2fc>)
 8005474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005478:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800547c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005480:	d027      	beq.n	80054d2 <UART_SetConfig+0x336>
 8005482:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005486:	d817      	bhi.n	80054b8 <UART_SetConfig+0x31c>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d01c      	beq.n	80054c6 <UART_SetConfig+0x32a>
 800548c:	e027      	b.n	80054de <UART_SetConfig+0x342>
 800548e:	bf00      	nop
 8005490:	efff69f3 	.word	0xefff69f3
 8005494:	40011000 	.word	0x40011000
 8005498:	40023800 	.word	0x40023800
 800549c:	40004400 	.word	0x40004400
 80054a0:	40004800 	.word	0x40004800
 80054a4:	40004c00 	.word	0x40004c00
 80054a8:	40005000 	.word	0x40005000
 80054ac:	40011400 	.word	0x40011400
 80054b0:	40007800 	.word	0x40007800
 80054b4:	40007c00 	.word	0x40007c00
 80054b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054bc:	d006      	beq.n	80054cc <UART_SetConfig+0x330>
 80054be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80054c2:	d009      	beq.n	80054d8 <UART_SetConfig+0x33c>
 80054c4:	e00b      	b.n	80054de <UART_SetConfig+0x342>
 80054c6:	2300      	movs	r3, #0
 80054c8:	77fb      	strb	r3, [r7, #31]
 80054ca:	e00e      	b.n	80054ea <UART_SetConfig+0x34e>
 80054cc:	2302      	movs	r3, #2
 80054ce:	77fb      	strb	r3, [r7, #31]
 80054d0:	e00b      	b.n	80054ea <UART_SetConfig+0x34e>
 80054d2:	2304      	movs	r3, #4
 80054d4:	77fb      	strb	r3, [r7, #31]
 80054d6:	e008      	b.n	80054ea <UART_SetConfig+0x34e>
 80054d8:	2308      	movs	r3, #8
 80054da:	77fb      	strb	r3, [r7, #31]
 80054dc:	e005      	b.n	80054ea <UART_SetConfig+0x34e>
 80054de:	2310      	movs	r3, #16
 80054e0:	77fb      	strb	r3, [r7, #31]
 80054e2:	bf00      	nop
 80054e4:	e001      	b.n	80054ea <UART_SetConfig+0x34e>
 80054e6:	2310      	movs	r3, #16
 80054e8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	69db      	ldr	r3, [r3, #28]
 80054ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054f2:	d17f      	bne.n	80055f4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80054f4:	7ffb      	ldrb	r3, [r7, #31]
 80054f6:	2b08      	cmp	r3, #8
 80054f8:	d85c      	bhi.n	80055b4 <UART_SetConfig+0x418>
 80054fa:	a201      	add	r2, pc, #4	; (adr r2, 8005500 <UART_SetConfig+0x364>)
 80054fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005500:	08005525 	.word	0x08005525
 8005504:	08005545 	.word	0x08005545
 8005508:	08005565 	.word	0x08005565
 800550c:	080055b5 	.word	0x080055b5
 8005510:	0800557d 	.word	0x0800557d
 8005514:	080055b5 	.word	0x080055b5
 8005518:	080055b5 	.word	0x080055b5
 800551c:	080055b5 	.word	0x080055b5
 8005520:	0800559d 	.word	0x0800559d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005524:	f7fe fad4 	bl	8003ad0 <HAL_RCC_GetPCLK1Freq>
 8005528:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	005a      	lsls	r2, r3, #1
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	085b      	lsrs	r3, r3, #1
 8005534:	441a      	add	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	fbb2 f3f3 	udiv	r3, r2, r3
 800553e:	b29b      	uxth	r3, r3
 8005540:	61bb      	str	r3, [r7, #24]
        break;
 8005542:	e03a      	b.n	80055ba <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005544:	f7fe fad8 	bl	8003af8 <HAL_RCC_GetPCLK2Freq>
 8005548:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	005a      	lsls	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	085b      	lsrs	r3, r3, #1
 8005554:	441a      	add	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	fbb2 f3f3 	udiv	r3, r2, r3
 800555e:	b29b      	uxth	r3, r3
 8005560:	61bb      	str	r3, [r7, #24]
        break;
 8005562:	e02a      	b.n	80055ba <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	085a      	lsrs	r2, r3, #1
 800556a:	4b5f      	ldr	r3, [pc, #380]	; (80056e8 <UART_SetConfig+0x54c>)
 800556c:	4413      	add	r3, r2
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	6852      	ldr	r2, [r2, #4]
 8005572:	fbb3 f3f2 	udiv	r3, r3, r2
 8005576:	b29b      	uxth	r3, r3
 8005578:	61bb      	str	r3, [r7, #24]
        break;
 800557a:	e01e      	b.n	80055ba <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800557c:	f7fe f9ea 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 8005580:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	005a      	lsls	r2, r3, #1
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	085b      	lsrs	r3, r3, #1
 800558c:	441a      	add	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	fbb2 f3f3 	udiv	r3, r2, r3
 8005596:	b29b      	uxth	r3, r3
 8005598:	61bb      	str	r3, [r7, #24]
        break;
 800559a:	e00e      	b.n	80055ba <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	085b      	lsrs	r3, r3, #1
 80055a2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	61bb      	str	r3, [r7, #24]
        break;
 80055b2:	e002      	b.n	80055ba <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	75fb      	strb	r3, [r7, #23]
        break;
 80055b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	2b0f      	cmp	r3, #15
 80055be:	d916      	bls.n	80055ee <UART_SetConfig+0x452>
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055c6:	d212      	bcs.n	80055ee <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	b29b      	uxth	r3, r3
 80055cc:	f023 030f 	bic.w	r3, r3, #15
 80055d0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	085b      	lsrs	r3, r3, #1
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	b29a      	uxth	r2, r3
 80055de:	897b      	ldrh	r3, [r7, #10]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	897a      	ldrh	r2, [r7, #10]
 80055ea:	60da      	str	r2, [r3, #12]
 80055ec:	e070      	b.n	80056d0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	75fb      	strb	r3, [r7, #23]
 80055f2:	e06d      	b.n	80056d0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80055f4:	7ffb      	ldrb	r3, [r7, #31]
 80055f6:	2b08      	cmp	r3, #8
 80055f8:	d859      	bhi.n	80056ae <UART_SetConfig+0x512>
 80055fa:	a201      	add	r2, pc, #4	; (adr r2, 8005600 <UART_SetConfig+0x464>)
 80055fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005600:	08005625 	.word	0x08005625
 8005604:	08005643 	.word	0x08005643
 8005608:	08005661 	.word	0x08005661
 800560c:	080056af 	.word	0x080056af
 8005610:	08005679 	.word	0x08005679
 8005614:	080056af 	.word	0x080056af
 8005618:	080056af 	.word	0x080056af
 800561c:	080056af 	.word	0x080056af
 8005620:	08005697 	.word	0x08005697
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005624:	f7fe fa54 	bl	8003ad0 <HAL_RCC_GetPCLK1Freq>
 8005628:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	085a      	lsrs	r2, r3, #1
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	441a      	add	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	fbb2 f3f3 	udiv	r3, r2, r3
 800563c:	b29b      	uxth	r3, r3
 800563e:	61bb      	str	r3, [r7, #24]
        break;
 8005640:	e038      	b.n	80056b4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005642:	f7fe fa59 	bl	8003af8 <HAL_RCC_GetPCLK2Freq>
 8005646:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	085a      	lsrs	r2, r3, #1
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	441a      	add	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	fbb2 f3f3 	udiv	r3, r2, r3
 800565a:	b29b      	uxth	r3, r3
 800565c:	61bb      	str	r3, [r7, #24]
        break;
 800565e:	e029      	b.n	80056b4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	685b      	ldr	r3, [r3, #4]
 8005664:	085a      	lsrs	r2, r3, #1
 8005666:	4b21      	ldr	r3, [pc, #132]	; (80056ec <UART_SetConfig+0x550>)
 8005668:	4413      	add	r3, r2
 800566a:	687a      	ldr	r2, [r7, #4]
 800566c:	6852      	ldr	r2, [r2, #4]
 800566e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005672:	b29b      	uxth	r3, r3
 8005674:	61bb      	str	r3, [r7, #24]
        break;
 8005676:	e01d      	b.n	80056b4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005678:	f7fe f96c 	bl	8003954 <HAL_RCC_GetSysClockFreq>
 800567c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	085a      	lsrs	r2, r3, #1
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	441a      	add	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005690:	b29b      	uxth	r3, r3
 8005692:	61bb      	str	r3, [r7, #24]
        break;
 8005694:	e00e      	b.n	80056b4 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	085b      	lsrs	r3, r3, #1
 800569c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	61bb      	str	r3, [r7, #24]
        break;
 80056ac:	e002      	b.n	80056b4 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	75fb      	strb	r3, [r7, #23]
        break;
 80056b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	2b0f      	cmp	r3, #15
 80056b8:	d908      	bls.n	80056cc <UART_SetConfig+0x530>
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056c0:	d204      	bcs.n	80056cc <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	60da      	str	r2, [r3, #12]
 80056ca:	e001      	b.n	80056d0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80056dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3720      	adds	r7, #32
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	01e84800 	.word	0x01e84800
 80056ec:	00f42400 	.word	0x00f42400

080056f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00a      	beq.n	800571a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800571e:	f003 0302 	and.w	r3, r3, #2
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00a      	beq.n	800573c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	685b      	ldr	r3, [r3, #4]
 800572c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	430a      	orrs	r2, r1
 800573a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	d00a      	beq.n	800575e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	430a      	orrs	r2, r1
 800575c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005762:	f003 0308 	and.w	r3, r3, #8
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00a      	beq.n	8005780 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685b      	ldr	r3, [r3, #4]
 8005770:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	430a      	orrs	r2, r1
 800577e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005784:	f003 0310 	and.w	r3, r3, #16
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00a      	beq.n	80057a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	430a      	orrs	r2, r1
 80057a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	430a      	orrs	r2, r1
 80057c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d01a      	beq.n	8005806 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	430a      	orrs	r2, r1
 80057e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057ee:	d10a      	bne.n	8005806 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	430a      	orrs	r2, r1
 8005804:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800580e:	2b00      	cmp	r3, #0
 8005810:	d00a      	beq.n	8005828 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	605a      	str	r2, [r3, #4]
  }
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b086      	sub	sp, #24
 8005838:	af02      	add	r7, sp, #8
 800583a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2200      	movs	r2, #0
 8005840:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005842:	f7fc fcb1 	bl	80021a8 <HAL_GetTick>
 8005846:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0308 	and.w	r3, r3, #8
 8005852:	2b08      	cmp	r3, #8
 8005854:	d10e      	bne.n	8005874 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005856:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800585a:	9300      	str	r3, [sp, #0]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f000 f814 	bl	8005892 <UART_WaitOnFlagUntilTimeout>
 800586a:	4603      	mov	r3, r0
 800586c:	2b00      	cmp	r3, #0
 800586e:	d001      	beq.n	8005874 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005870:	2303      	movs	r3, #3
 8005872:	e00a      	b.n	800588a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2220      	movs	r2, #32
 8005878:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2220      	movs	r2, #32
 800587e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3710      	adds	r7, #16
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005892:	b580      	push	{r7, lr}
 8005894:	b084      	sub	sp, #16
 8005896:	af00      	add	r7, sp, #0
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	603b      	str	r3, [r7, #0]
 800589e:	4613      	mov	r3, r2
 80058a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058a2:	e05d      	b.n	8005960 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058aa:	d059      	beq.n	8005960 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ac:	f7fc fc7c 	bl	80021a8 <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	69ba      	ldr	r2, [r7, #24]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d302      	bcc.n	80058c2 <UART_WaitOnFlagUntilTimeout+0x30>
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d11b      	bne.n	80058fa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689a      	ldr	r2, [r3, #8]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f022 0201 	bic.w	r2, r2, #1
 80058e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2220      	movs	r2, #32
 80058e6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2220      	movs	r2, #32
 80058ec:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80058f6:	2303      	movs	r3, #3
 80058f8:	e042      	b.n	8005980 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d02b      	beq.n	8005960 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005916:	d123      	bne.n	8005960 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005920:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005930:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689a      	ldr	r2, [r3, #8]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0201 	bic.w	r2, r2, #1
 8005940:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2220      	movs	r2, #32
 8005946:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2220      	movs	r2, #32
 8005952:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e00f      	b.n	8005980 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69da      	ldr	r2, [r3, #28]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	4013      	ands	r3, r2
 800596a:	68ba      	ldr	r2, [r7, #8]
 800596c:	429a      	cmp	r2, r3
 800596e:	bf0c      	ite	eq
 8005970:	2301      	moveq	r3, #1
 8005972:	2300      	movne	r3, #0
 8005974:	b2db      	uxtb	r3, r3
 8005976:	461a      	mov	r2, r3
 8005978:	79fb      	ldrb	r3, [r7, #7]
 800597a:	429a      	cmp	r2, r3
 800597c:	d092      	beq.n	80058a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800597e:	2300      	movs	r3, #0
}
 8005980:	4618      	mov	r0, r3
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <__errno>:
 8005988:	4b01      	ldr	r3, [pc, #4]	; (8005990 <__errno+0x8>)
 800598a:	6818      	ldr	r0, [r3, #0]
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	2000001c 	.word	0x2000001c

08005994 <__libc_init_array>:
 8005994:	b570      	push	{r4, r5, r6, lr}
 8005996:	4e0d      	ldr	r6, [pc, #52]	; (80059cc <__libc_init_array+0x38>)
 8005998:	4c0d      	ldr	r4, [pc, #52]	; (80059d0 <__libc_init_array+0x3c>)
 800599a:	1ba4      	subs	r4, r4, r6
 800599c:	10a4      	asrs	r4, r4, #2
 800599e:	2500      	movs	r5, #0
 80059a0:	42a5      	cmp	r5, r4
 80059a2:	d109      	bne.n	80059b8 <__libc_init_array+0x24>
 80059a4:	4e0b      	ldr	r6, [pc, #44]	; (80059d4 <__libc_init_array+0x40>)
 80059a6:	4c0c      	ldr	r4, [pc, #48]	; (80059d8 <__libc_init_array+0x44>)
 80059a8:	f000 ff14 	bl	80067d4 <_init>
 80059ac:	1ba4      	subs	r4, r4, r6
 80059ae:	10a4      	asrs	r4, r4, #2
 80059b0:	2500      	movs	r5, #0
 80059b2:	42a5      	cmp	r5, r4
 80059b4:	d105      	bne.n	80059c2 <__libc_init_array+0x2e>
 80059b6:	bd70      	pop	{r4, r5, r6, pc}
 80059b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059bc:	4798      	blx	r3
 80059be:	3501      	adds	r5, #1
 80059c0:	e7ee      	b.n	80059a0 <__libc_init_array+0xc>
 80059c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80059c6:	4798      	blx	r3
 80059c8:	3501      	adds	r5, #1
 80059ca:	e7f2      	b.n	80059b2 <__libc_init_array+0x1e>
 80059cc:	0804f158 	.word	0x0804f158
 80059d0:	0804f158 	.word	0x0804f158
 80059d4:	0804f158 	.word	0x0804f158
 80059d8:	0804f15c 	.word	0x0804f15c

080059dc <memcpy>:
 80059dc:	b510      	push	{r4, lr}
 80059de:	1e43      	subs	r3, r0, #1
 80059e0:	440a      	add	r2, r1
 80059e2:	4291      	cmp	r1, r2
 80059e4:	d100      	bne.n	80059e8 <memcpy+0xc>
 80059e6:	bd10      	pop	{r4, pc}
 80059e8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059f0:	e7f7      	b.n	80059e2 <memcpy+0x6>

080059f2 <memset>:
 80059f2:	4402      	add	r2, r0
 80059f4:	4603      	mov	r3, r0
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d100      	bne.n	80059fc <memset+0xa>
 80059fa:	4770      	bx	lr
 80059fc:	f803 1b01 	strb.w	r1, [r3], #1
 8005a00:	e7f9      	b.n	80059f6 <memset+0x4>
	...

08005a04 <tanf>:
 8005a04:	ee10 3a10 	vmov	r3, s0
 8005a08:	b507      	push	{r0, r1, r2, lr}
 8005a0a:	4a10      	ldr	r2, [pc, #64]	; (8005a4c <tanf+0x48>)
 8005a0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a10:	4293      	cmp	r3, r2
 8005a12:	dc05      	bgt.n	8005a20 <tanf+0x1c>
 8005a14:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8005a50 <tanf+0x4c>
 8005a18:	2001      	movs	r0, #1
 8005a1a:	f000 fd3f 	bl	800649c <__kernel_tanf>
 8005a1e:	e004      	b.n	8005a2a <tanf+0x26>
 8005a20:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005a24:	db04      	blt.n	8005a30 <tanf+0x2c>
 8005a26:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005a2a:	b003      	add	sp, #12
 8005a2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005a30:	4668      	mov	r0, sp
 8005a32:	f000 f985 	bl	8005d40 <__ieee754_rem_pio2f>
 8005a36:	0040      	lsls	r0, r0, #1
 8005a38:	f000 0002 	and.w	r0, r0, #2
 8005a3c:	f1c0 0001 	rsb	r0, r0, #1
 8005a40:	eddd 0a01 	vldr	s1, [sp, #4]
 8005a44:	ed9d 0a00 	vldr	s0, [sp]
 8005a48:	e7e7      	b.n	8005a1a <tanf+0x16>
 8005a4a:	bf00      	nop
 8005a4c:	3f490fda 	.word	0x3f490fda
 8005a50:	00000000 	.word	0x00000000

08005a54 <fmod>:
 8005a54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005a58:	ed2d 8b02 	vpush	{d8}
 8005a5c:	b08b      	sub	sp, #44	; 0x2c
 8005a5e:	ec55 4b10 	vmov	r4, r5, d0
 8005a62:	ec57 6b11 	vmov	r6, r7, d1
 8005a66:	f000 f859 	bl	8005b1c <__ieee754_fmod>
 8005a6a:	4b2a      	ldr	r3, [pc, #168]	; (8005b14 <fmod+0xc0>)
 8005a6c:	eeb0 8a40 	vmov.f32	s16, s0
 8005a70:	eef0 8a60 	vmov.f32	s17, s1
 8005a74:	f993 8000 	ldrsb.w	r8, [r3]
 8005a78:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005a7c:	d030      	beq.n	8005ae0 <fmod+0x8c>
 8005a7e:	4632      	mov	r2, r6
 8005a80:	463b      	mov	r3, r7
 8005a82:	4630      	mov	r0, r6
 8005a84:	4639      	mov	r1, r7
 8005a86:	f7fb f815 	bl	8000ab4 <__aeabi_dcmpun>
 8005a8a:	bb48      	cbnz	r0, 8005ae0 <fmod+0x8c>
 8005a8c:	4622      	mov	r2, r4
 8005a8e:	462b      	mov	r3, r5
 8005a90:	4620      	mov	r0, r4
 8005a92:	4629      	mov	r1, r5
 8005a94:	f7fb f80e 	bl	8000ab4 <__aeabi_dcmpun>
 8005a98:	4681      	mov	r9, r0
 8005a9a:	bb08      	cbnz	r0, 8005ae0 <fmod+0x8c>
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	4639      	mov	r1, r7
 8005aa4:	f7fa ffd4 	bl	8000a50 <__aeabi_dcmpeq>
 8005aa8:	b1d0      	cbz	r0, 8005ae0 <fmod+0x8c>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	9300      	str	r3, [sp, #0]
 8005aae:	4b1a      	ldr	r3, [pc, #104]	; (8005b18 <fmod+0xc4>)
 8005ab0:	9301      	str	r3, [sp, #4]
 8005ab2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005ab6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005aba:	f8cd 9020 	str.w	r9, [sp, #32]
 8005abe:	f1b8 0f00 	cmp.w	r8, #0
 8005ac2:	d116      	bne.n	8005af2 <fmod+0x9e>
 8005ac4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005ac8:	4668      	mov	r0, sp
 8005aca:	f000 fdcb 	bl	8006664 <matherr>
 8005ace:	b1d8      	cbz	r0, 8005b08 <fmod+0xb4>
 8005ad0:	9b08      	ldr	r3, [sp, #32]
 8005ad2:	b11b      	cbz	r3, 8005adc <fmod+0x88>
 8005ad4:	f7ff ff58 	bl	8005988 <__errno>
 8005ad8:	9b08      	ldr	r3, [sp, #32]
 8005ada:	6003      	str	r3, [r0, #0]
 8005adc:	ed9d 8b06 	vldr	d8, [sp, #24]
 8005ae0:	eeb0 0a48 	vmov.f32	s0, s16
 8005ae4:	eef0 0a68 	vmov.f32	s1, s17
 8005ae8:	b00b      	add	sp, #44	; 0x2c
 8005aea:	ecbd 8b02 	vpop	{d8}
 8005aee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005af2:	2200      	movs	r2, #0
 8005af4:	2300      	movs	r3, #0
 8005af6:	4610      	mov	r0, r2
 8005af8:	4619      	mov	r1, r3
 8005afa:	f7fa fe6b 	bl	80007d4 <__aeabi_ddiv>
 8005afe:	f1b8 0f02 	cmp.w	r8, #2
 8005b02:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b06:	d1df      	bne.n	8005ac8 <fmod+0x74>
 8005b08:	f7ff ff3e 	bl	8005988 <__errno>
 8005b0c:	2321      	movs	r3, #33	; 0x21
 8005b0e:	6003      	str	r3, [r0, #0]
 8005b10:	e7de      	b.n	8005ad0 <fmod+0x7c>
 8005b12:	bf00      	nop
 8005b14:	20000080 	.word	0x20000080
 8005b18:	0804ed68 	.word	0x0804ed68

08005b1c <__ieee754_fmod>:
 8005b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b20:	ec53 2b11 	vmov	r2, r3, d1
 8005b24:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8005b28:	ea5e 0402 	orrs.w	r4, lr, r2
 8005b2c:	ec51 0b10 	vmov	r0, r1, d0
 8005b30:	461e      	mov	r6, r3
 8005b32:	ee11 5a10 	vmov	r5, s2
 8005b36:	4694      	mov	ip, r2
 8005b38:	d00c      	beq.n	8005b54 <__ieee754_fmod+0x38>
 8005b3a:	4c7a      	ldr	r4, [pc, #488]	; (8005d24 <__ieee754_fmod+0x208>)
 8005b3c:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
 8005b40:	45a0      	cmp	r8, r4
 8005b42:	4689      	mov	r9, r1
 8005b44:	dc06      	bgt.n	8005b54 <__ieee754_fmod+0x38>
 8005b46:	4254      	negs	r4, r2
 8005b48:	4314      	orrs	r4, r2
 8005b4a:	4f77      	ldr	r7, [pc, #476]	; (8005d28 <__ieee754_fmod+0x20c>)
 8005b4c:	ea4e 74d4 	orr.w	r4, lr, r4, lsr #31
 8005b50:	42bc      	cmp	r4, r7
 8005b52:	d909      	bls.n	8005b68 <__ieee754_fmod+0x4c>
 8005b54:	f7fa fd14 	bl	8000580 <__aeabi_dmul>
 8005b58:	4602      	mov	r2, r0
 8005b5a:	460b      	mov	r3, r1
 8005b5c:	f7fa fe3a 	bl	80007d4 <__aeabi_ddiv>
 8005b60:	ec41 0b10 	vmov	d0, r0, r1
 8005b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b68:	45f0      	cmp	r8, lr
 8005b6a:	ee10 2a10 	vmov	r2, s0
 8005b6e:	4607      	mov	r7, r0
 8005b70:	f001 4400 	and.w	r4, r1, #2147483648	; 0x80000000
 8005b74:	dc0a      	bgt.n	8005b8c <__ieee754_fmod+0x70>
 8005b76:	dbf3      	blt.n	8005b60 <__ieee754_fmod+0x44>
 8005b78:	42a8      	cmp	r0, r5
 8005b7a:	d3f1      	bcc.n	8005b60 <__ieee754_fmod+0x44>
 8005b7c:	d106      	bne.n	8005b8c <__ieee754_fmod+0x70>
 8005b7e:	496b      	ldr	r1, [pc, #428]	; (8005d2c <__ieee754_fmod+0x210>)
 8005b80:	0fe4      	lsrs	r4, r4, #31
 8005b82:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 8005b86:	e9d4 0100 	ldrd	r0, r1, [r4]
 8005b8a:	e7e9      	b.n	8005b60 <__ieee754_fmod+0x44>
 8005b8c:	4b68      	ldr	r3, [pc, #416]	; (8005d30 <__ieee754_fmod+0x214>)
 8005b8e:	4598      	cmp	r8, r3
 8005b90:	dc49      	bgt.n	8005c26 <__ieee754_fmod+0x10a>
 8005b92:	f1b8 0f00 	cmp.w	r8, #0
 8005b96:	d13d      	bne.n	8005c14 <__ieee754_fmod+0xf8>
 8005b98:	4866      	ldr	r0, [pc, #408]	; (8005d34 <__ieee754_fmod+0x218>)
 8005b9a:	4611      	mov	r1, r2
 8005b9c:	2900      	cmp	r1, #0
 8005b9e:	dc36      	bgt.n	8005c0e <__ieee754_fmod+0xf2>
 8005ba0:	459e      	cmp	lr, r3
 8005ba2:	dc51      	bgt.n	8005c48 <__ieee754_fmod+0x12c>
 8005ba4:	f1be 0f00 	cmp.w	lr, #0
 8005ba8:	d145      	bne.n	8005c36 <__ieee754_fmod+0x11a>
 8005baa:	4b62      	ldr	r3, [pc, #392]	; (8005d34 <__ieee754_fmod+0x218>)
 8005bac:	4629      	mov	r1, r5
 8005bae:	2900      	cmp	r1, #0
 8005bb0:	dc3e      	bgt.n	8005c30 <__ieee754_fmod+0x114>
 8005bb2:	4961      	ldr	r1, [pc, #388]	; (8005d38 <__ieee754_fmod+0x21c>)
 8005bb4:	4288      	cmp	r0, r1
 8005bb6:	db4c      	blt.n	8005c52 <__ieee754_fmod+0x136>
 8005bb8:	f3c9 0113 	ubfx	r1, r9, #0, #20
 8005bbc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8005bc0:	4a5d      	ldr	r2, [pc, #372]	; (8005d38 <__ieee754_fmod+0x21c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	db59      	blt.n	8005c7a <__ieee754_fmod+0x15e>
 8005bc6:	f3c6 0613 	ubfx	r6, r6, #0, #20
 8005bca:	f446 1680 	orr.w	r6, r6, #1048576	; 0x100000
 8005bce:	1ac0      	subs	r0, r0, r3
 8005bd0:	1b8a      	subs	r2, r1, r6
 8005bd2:	eba7 050c 	sub.w	r5, r7, ip
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d166      	bne.n	8005ca8 <__ieee754_fmod+0x18c>
 8005bda:	4567      	cmp	r7, ip
 8005bdc:	bf38      	it	cc
 8005bde:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8005be2:	2a00      	cmp	r2, #0
 8005be4:	bfbc      	itt	lt
 8005be6:	463d      	movlt	r5, r7
 8005be8:	460a      	movlt	r2, r1
 8005bea:	ea52 0105 	orrs.w	r1, r2, r5
 8005bee:	d0c6      	beq.n	8005b7e <__ieee754_fmod+0x62>
 8005bf0:	494f      	ldr	r1, [pc, #316]	; (8005d30 <__ieee754_fmod+0x214>)
 8005bf2:	428a      	cmp	r2, r1
 8005bf4:	dd6d      	ble.n	8005cd2 <__ieee754_fmod+0x1b6>
 8005bf6:	4950      	ldr	r1, [pc, #320]	; (8005d38 <__ieee754_fmod+0x21c>)
 8005bf8:	428b      	cmp	r3, r1
 8005bfa:	db70      	blt.n	8005cde <__ieee754_fmod+0x1c2>
 8005bfc:	f5a2 1280 	sub.w	r2, r2, #1048576	; 0x100000
 8005c00:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8005c04:	4314      	orrs	r4, r2
 8005c06:	ea44 5103 	orr.w	r1, r4, r3, lsl #20
 8005c0a:	4628      	mov	r0, r5
 8005c0c:	e7a8      	b.n	8005b60 <__ieee754_fmod+0x44>
 8005c0e:	3801      	subs	r0, #1
 8005c10:	0049      	lsls	r1, r1, #1
 8005c12:	e7c3      	b.n	8005b9c <__ieee754_fmod+0x80>
 8005c14:	4848      	ldr	r0, [pc, #288]	; (8005d38 <__ieee754_fmod+0x21c>)
 8005c16:	ea4f 21c8 	mov.w	r1, r8, lsl #11
 8005c1a:	0049      	lsls	r1, r1, #1
 8005c1c:	2900      	cmp	r1, #0
 8005c1e:	f100 30ff 	add.w	r0, r0, #4294967295
 8005c22:	dcfa      	bgt.n	8005c1a <__ieee754_fmod+0xfe>
 8005c24:	e7bc      	b.n	8005ba0 <__ieee754_fmod+0x84>
 8005c26:	ea4f 5028 	mov.w	r0, r8, asr #20
 8005c2a:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8005c2e:	e7b7      	b.n	8005ba0 <__ieee754_fmod+0x84>
 8005c30:	3b01      	subs	r3, #1
 8005c32:	0049      	lsls	r1, r1, #1
 8005c34:	e7bb      	b.n	8005bae <__ieee754_fmod+0x92>
 8005c36:	4b40      	ldr	r3, [pc, #256]	; (8005d38 <__ieee754_fmod+0x21c>)
 8005c38:	ea4f 21ce 	mov.w	r1, lr, lsl #11
 8005c3c:	0049      	lsls	r1, r1, #1
 8005c3e:	2900      	cmp	r1, #0
 8005c40:	f103 33ff 	add.w	r3, r3, #4294967295
 8005c44:	dcfa      	bgt.n	8005c3c <__ieee754_fmod+0x120>
 8005c46:	e7b4      	b.n	8005bb2 <__ieee754_fmod+0x96>
 8005c48:	ea4f 532e 	mov.w	r3, lr, asr #20
 8005c4c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005c50:	e7af      	b.n	8005bb2 <__ieee754_fmod+0x96>
 8005c52:	1a0f      	subs	r7, r1, r0
 8005c54:	2f1f      	cmp	r7, #31
 8005c56:	dc0a      	bgt.n	8005c6e <__ieee754_fmod+0x152>
 8005c58:	f200 411e 	addw	r1, r0, #1054	; 0x41e
 8005c5c:	fa08 f807 	lsl.w	r8, r8, r7
 8005c60:	fa22 f101 	lsr.w	r1, r2, r1
 8005c64:	ea41 0108 	orr.w	r1, r1, r8
 8005c68:	fa02 f707 	lsl.w	r7, r2, r7
 8005c6c:	e7a8      	b.n	8005bc0 <__ieee754_fmod+0xa4>
 8005c6e:	4933      	ldr	r1, [pc, #204]	; (8005d3c <__ieee754_fmod+0x220>)
 8005c70:	1a09      	subs	r1, r1, r0
 8005c72:	fa02 f101 	lsl.w	r1, r2, r1
 8005c76:	2700      	movs	r7, #0
 8005c78:	e7a2      	b.n	8005bc0 <__ieee754_fmod+0xa4>
 8005c7a:	eba2 0c03 	sub.w	ip, r2, r3
 8005c7e:	f1bc 0f1f 	cmp.w	ip, #31
 8005c82:	dc0a      	bgt.n	8005c9a <__ieee754_fmod+0x17e>
 8005c84:	f203 461e 	addw	r6, r3, #1054	; 0x41e
 8005c88:	fa0e fe0c 	lsl.w	lr, lr, ip
 8005c8c:	fa25 f606 	lsr.w	r6, r5, r6
 8005c90:	ea46 060e 	orr.w	r6, r6, lr
 8005c94:	fa05 fc0c 	lsl.w	ip, r5, ip
 8005c98:	e799      	b.n	8005bce <__ieee754_fmod+0xb2>
 8005c9a:	4e28      	ldr	r6, [pc, #160]	; (8005d3c <__ieee754_fmod+0x220>)
 8005c9c:	1af6      	subs	r6, r6, r3
 8005c9e:	fa05 f606 	lsl.w	r6, r5, r6
 8005ca2:	f04f 0c00 	mov.w	ip, #0
 8005ca6:	e792      	b.n	8005bce <__ieee754_fmod+0xb2>
 8005ca8:	4567      	cmp	r7, ip
 8005caa:	bf38      	it	cc
 8005cac:	f102 32ff 	addcc.w	r2, r2, #4294967295
 8005cb0:	2a00      	cmp	r2, #0
 8005cb2:	da05      	bge.n	8005cc0 <__ieee754_fmod+0x1a4>
 8005cb4:	0ffa      	lsrs	r2, r7, #31
 8005cb6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005cba:	007f      	lsls	r7, r7, #1
 8005cbc:	3801      	subs	r0, #1
 8005cbe:	e787      	b.n	8005bd0 <__ieee754_fmod+0xb4>
 8005cc0:	ea52 0105 	orrs.w	r1, r2, r5
 8005cc4:	f43f af5b 	beq.w	8005b7e <__ieee754_fmod+0x62>
 8005cc8:	0fe9      	lsrs	r1, r5, #31
 8005cca:	eb01 0142 	add.w	r1, r1, r2, lsl #1
 8005cce:	006f      	lsls	r7, r5, #1
 8005cd0:	e7f4      	b.n	8005cbc <__ieee754_fmod+0x1a0>
 8005cd2:	0fe8      	lsrs	r0, r5, #31
 8005cd4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8005cd8:	006d      	lsls	r5, r5, #1
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	e789      	b.n	8005bf2 <__ieee754_fmod+0xd6>
 8005cde:	1ac9      	subs	r1, r1, r3
 8005ce0:	2914      	cmp	r1, #20
 8005ce2:	dc0a      	bgt.n	8005cfa <__ieee754_fmod+0x1de>
 8005ce4:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cec:	40cd      	lsrs	r5, r1
 8005cee:	432b      	orrs	r3, r5
 8005cf0:	410a      	asrs	r2, r1
 8005cf2:	ea42 0104 	orr.w	r1, r2, r4
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	e732      	b.n	8005b60 <__ieee754_fmod+0x44>
 8005cfa:	291f      	cmp	r1, #31
 8005cfc:	dc07      	bgt.n	8005d0e <__ieee754_fmod+0x1f2>
 8005cfe:	f203 431e 	addw	r3, r3, #1054	; 0x41e
 8005d02:	40cd      	lsrs	r5, r1
 8005d04:	fa02 f303 	lsl.w	r3, r2, r3
 8005d08:	432b      	orrs	r3, r5
 8005d0a:	4622      	mov	r2, r4
 8005d0c:	e7f1      	b.n	8005cf2 <__ieee754_fmod+0x1d6>
 8005d0e:	f1c3 437f 	rsb	r3, r3, #4278190080	; 0xff000000
 8005d12:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8005d16:	f503 437b 	add.w	r3, r3, #64256	; 0xfb00
 8005d1a:	33e2      	adds	r3, #226	; 0xe2
 8005d1c:	fa42 f303 	asr.w	r3, r2, r3
 8005d20:	e7f3      	b.n	8005d0a <__ieee754_fmod+0x1ee>
 8005d22:	bf00      	nop
 8005d24:	7fefffff 	.word	0x7fefffff
 8005d28:	7ff00000 	.word	0x7ff00000
 8005d2c:	0804ed70 	.word	0x0804ed70
 8005d30:	000fffff 	.word	0x000fffff
 8005d34:	fffffbed 	.word	0xfffffbed
 8005d38:	fffffc02 	.word	0xfffffc02
 8005d3c:	fffffbe2 	.word	0xfffffbe2

08005d40 <__ieee754_rem_pio2f>:
 8005d40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005d42:	ee10 6a10 	vmov	r6, s0
 8005d46:	4b86      	ldr	r3, [pc, #536]	; (8005f60 <__ieee754_rem_pio2f+0x220>)
 8005d48:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8005d4c:	429c      	cmp	r4, r3
 8005d4e:	b087      	sub	sp, #28
 8005d50:	4605      	mov	r5, r0
 8005d52:	dc05      	bgt.n	8005d60 <__ieee754_rem_pio2f+0x20>
 8005d54:	2300      	movs	r3, #0
 8005d56:	ed85 0a00 	vstr	s0, [r5]
 8005d5a:	6043      	str	r3, [r0, #4]
 8005d5c:	2000      	movs	r0, #0
 8005d5e:	e020      	b.n	8005da2 <__ieee754_rem_pio2f+0x62>
 8005d60:	4b80      	ldr	r3, [pc, #512]	; (8005f64 <__ieee754_rem_pio2f+0x224>)
 8005d62:	429c      	cmp	r4, r3
 8005d64:	dc38      	bgt.n	8005dd8 <__ieee754_rem_pio2f+0x98>
 8005d66:	2e00      	cmp	r6, #0
 8005d68:	f024 040f 	bic.w	r4, r4, #15
 8005d6c:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8005f68 <__ieee754_rem_pio2f+0x228>
 8005d70:	4b7e      	ldr	r3, [pc, #504]	; (8005f6c <__ieee754_rem_pio2f+0x22c>)
 8005d72:	dd18      	ble.n	8005da6 <__ieee754_rem_pio2f+0x66>
 8005d74:	429c      	cmp	r4, r3
 8005d76:	ee70 7a47 	vsub.f32	s15, s0, s14
 8005d7a:	bf09      	itett	eq
 8005d7c:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 8005f70 <__ieee754_rem_pio2f+0x230>
 8005d80:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8005f74 <__ieee754_rem_pio2f+0x234>
 8005d84:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8005d88:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8005f78 <__ieee754_rem_pio2f+0x238>
 8005d8c:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005d90:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005d94:	edc0 6a00 	vstr	s13, [r0]
 8005d98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d9c:	edc0 7a01 	vstr	s15, [r0, #4]
 8005da0:	2001      	movs	r0, #1
 8005da2:	b007      	add	sp, #28
 8005da4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005da6:	429c      	cmp	r4, r3
 8005da8:	ee70 7a07 	vadd.f32	s15, s0, s14
 8005dac:	bf09      	itett	eq
 8005dae:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 8005f70 <__ieee754_rem_pio2f+0x230>
 8005db2:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8005f74 <__ieee754_rem_pio2f+0x234>
 8005db6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8005dba:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8005f78 <__ieee754_rem_pio2f+0x238>
 8005dbe:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005dc2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005dc6:	edc0 6a00 	vstr	s13, [r0]
 8005dca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dce:	edc0 7a01 	vstr	s15, [r0, #4]
 8005dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8005dd6:	e7e4      	b.n	8005da2 <__ieee754_rem_pio2f+0x62>
 8005dd8:	4b68      	ldr	r3, [pc, #416]	; (8005f7c <__ieee754_rem_pio2f+0x23c>)
 8005dda:	429c      	cmp	r4, r3
 8005ddc:	dc71      	bgt.n	8005ec2 <__ieee754_rem_pio2f+0x182>
 8005dde:	f000 fc43 	bl	8006668 <fabsf>
 8005de2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8005f80 <__ieee754_rem_pio2f+0x240>
 8005de6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005dea:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005df2:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 8005df6:	ee17 0a90 	vmov	r0, s15
 8005dfa:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8005f68 <__ieee754_rem_pio2f+0x228>
 8005dfe:	eeb1 7a46 	vneg.f32	s14, s12
 8005e02:	eea7 0a27 	vfma.f32	s0, s14, s15
 8005e06:	281f      	cmp	r0, #31
 8005e08:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8005f74 <__ieee754_rem_pio2f+0x234>
 8005e0c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8005e10:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005e14:	ee16 3a90 	vmov	r3, s13
 8005e18:	dc1c      	bgt.n	8005e54 <__ieee754_rem_pio2f+0x114>
 8005e1a:	1e47      	subs	r7, r0, #1
 8005e1c:	4959      	ldr	r1, [pc, #356]	; (8005f84 <__ieee754_rem_pio2f+0x244>)
 8005e1e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8005e22:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 8005e26:	428a      	cmp	r2, r1
 8005e28:	d014      	beq.n	8005e54 <__ieee754_rem_pio2f+0x114>
 8005e2a:	602b      	str	r3, [r5, #0]
 8005e2c:	ed95 7a00 	vldr	s14, [r5]
 8005e30:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005e34:	2e00      	cmp	r6, #0
 8005e36:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005e3a:	ed85 0a01 	vstr	s0, [r5, #4]
 8005e3e:	dab0      	bge.n	8005da2 <__ieee754_rem_pio2f+0x62>
 8005e40:	eeb1 7a47 	vneg.f32	s14, s14
 8005e44:	eeb1 0a40 	vneg.f32	s0, s0
 8005e48:	ed85 7a00 	vstr	s14, [r5]
 8005e4c:	ed85 0a01 	vstr	s0, [r5, #4]
 8005e50:	4240      	negs	r0, r0
 8005e52:	e7a6      	b.n	8005da2 <__ieee754_rem_pio2f+0x62>
 8005e54:	15e4      	asrs	r4, r4, #23
 8005e56:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005e5a:	1aa2      	subs	r2, r4, r2
 8005e5c:	2a08      	cmp	r2, #8
 8005e5e:	dde4      	ble.n	8005e2a <__ieee754_rem_pio2f+0xea>
 8005e60:	eddf 7a43 	vldr	s15, [pc, #268]	; 8005f70 <__ieee754_rem_pio2f+0x230>
 8005e64:	eef0 6a40 	vmov.f32	s13, s0
 8005e68:	eee7 6a27 	vfma.f32	s13, s14, s15
 8005e6c:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005e70:	eea7 0a27 	vfma.f32	s0, s14, s15
 8005e74:	eddf 7a40 	vldr	s15, [pc, #256]	; 8005f78 <__ieee754_rem_pio2f+0x238>
 8005e78:	ee96 0a27 	vfnms.f32	s0, s12, s15
 8005e7c:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8005e80:	eef0 7a40 	vmov.f32	s15, s0
 8005e84:	ee15 3a90 	vmov	r3, s11
 8005e88:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005e8c:	1aa4      	subs	r4, r4, r2
 8005e8e:	2c19      	cmp	r4, #25
 8005e90:	dc04      	bgt.n	8005e9c <__ieee754_rem_pio2f+0x15c>
 8005e92:	edc5 5a00 	vstr	s11, [r5]
 8005e96:	eeb0 0a66 	vmov.f32	s0, s13
 8005e9a:	e7c7      	b.n	8005e2c <__ieee754_rem_pio2f+0xec>
 8005e9c:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8005f88 <__ieee754_rem_pio2f+0x248>
 8005ea0:	eeb0 0a66 	vmov.f32	s0, s13
 8005ea4:	eea7 0a25 	vfma.f32	s0, s14, s11
 8005ea8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005eac:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005eb0:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005f8c <__ieee754_rem_pio2f+0x24c>
 8005eb4:	eed6 7a07 	vfnms.f32	s15, s12, s14
 8005eb8:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005ebc:	ed85 7a00 	vstr	s14, [r5]
 8005ec0:	e7b4      	b.n	8005e2c <__ieee754_rem_pio2f+0xec>
 8005ec2:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005ec6:	db06      	blt.n	8005ed6 <__ieee754_rem_pio2f+0x196>
 8005ec8:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005ecc:	edc0 7a01 	vstr	s15, [r0, #4]
 8005ed0:	edc0 7a00 	vstr	s15, [r0]
 8005ed4:	e742      	b.n	8005d5c <__ieee754_rem_pio2f+0x1c>
 8005ed6:	15e2      	asrs	r2, r4, #23
 8005ed8:	3a86      	subs	r2, #134	; 0x86
 8005eda:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 8005ede:	ee07 3a90 	vmov	s15, r3
 8005ee2:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005ee6:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8005f90 <__ieee754_rem_pio2f+0x250>
 8005eea:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005eee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ef2:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005ef6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005efa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005efe:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005f02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f06:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005f0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005f0e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f16:	edcd 7a05 	vstr	s15, [sp, #20]
 8005f1a:	d11e      	bne.n	8005f5a <__ieee754_rem_pio2f+0x21a>
 8005f1c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005f20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f24:	bf0c      	ite	eq
 8005f26:	2301      	moveq	r3, #1
 8005f28:	2302      	movne	r3, #2
 8005f2a:	491a      	ldr	r1, [pc, #104]	; (8005f94 <__ieee754_rem_pio2f+0x254>)
 8005f2c:	9101      	str	r1, [sp, #4]
 8005f2e:	2102      	movs	r1, #2
 8005f30:	9100      	str	r1, [sp, #0]
 8005f32:	a803      	add	r0, sp, #12
 8005f34:	4629      	mov	r1, r5
 8005f36:	f000 f82f 	bl	8005f98 <__kernel_rem_pio2f>
 8005f3a:	2e00      	cmp	r6, #0
 8005f3c:	f6bf af31 	bge.w	8005da2 <__ieee754_rem_pio2f+0x62>
 8005f40:	edd5 7a00 	vldr	s15, [r5]
 8005f44:	eef1 7a67 	vneg.f32	s15, s15
 8005f48:	edc5 7a00 	vstr	s15, [r5]
 8005f4c:	edd5 7a01 	vldr	s15, [r5, #4]
 8005f50:	eef1 7a67 	vneg.f32	s15, s15
 8005f54:	edc5 7a01 	vstr	s15, [r5, #4]
 8005f58:	e77a      	b.n	8005e50 <__ieee754_rem_pio2f+0x110>
 8005f5a:	2303      	movs	r3, #3
 8005f5c:	e7e5      	b.n	8005f2a <__ieee754_rem_pio2f+0x1ea>
 8005f5e:	bf00      	nop
 8005f60:	3f490fd8 	.word	0x3f490fd8
 8005f64:	4016cbe3 	.word	0x4016cbe3
 8005f68:	3fc90f80 	.word	0x3fc90f80
 8005f6c:	3fc90fd0 	.word	0x3fc90fd0
 8005f70:	37354400 	.word	0x37354400
 8005f74:	37354443 	.word	0x37354443
 8005f78:	2e85a308 	.word	0x2e85a308
 8005f7c:	43490f80 	.word	0x43490f80
 8005f80:	3f22f984 	.word	0x3f22f984
 8005f84:	0804ed80 	.word	0x0804ed80
 8005f88:	2e85a300 	.word	0x2e85a300
 8005f8c:	248d3132 	.word	0x248d3132
 8005f90:	43800000 	.word	0x43800000
 8005f94:	0804ee00 	.word	0x0804ee00

08005f98 <__kernel_rem_pio2f>:
 8005f98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f9c:	ed2d 8b04 	vpush	{d8-d9}
 8005fa0:	b0d7      	sub	sp, #348	; 0x15c
 8005fa2:	469b      	mov	fp, r3
 8005fa4:	460e      	mov	r6, r1
 8005fa6:	4bbe      	ldr	r3, [pc, #760]	; (80062a0 <__kernel_rem_pio2f+0x308>)
 8005fa8:	9964      	ldr	r1, [sp, #400]	; 0x190
 8005faa:	9002      	str	r0, [sp, #8]
 8005fac:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 8005fb0:	9865      	ldr	r0, [sp, #404]	; 0x194
 8005fb2:	ed9f 7abf 	vldr	s14, [pc, #764]	; 80062b0 <__kernel_rem_pio2f+0x318>
 8005fb6:	1ed1      	subs	r1, r2, #3
 8005fb8:	2308      	movs	r3, #8
 8005fba:	fb91 f1f3 	sdiv	r1, r1, r3
 8005fbe:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8005fc2:	f10b 3aff 	add.w	sl, fp, #4294967295
 8005fc6:	1c4c      	adds	r4, r1, #1
 8005fc8:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 8005fcc:	eba1 050a 	sub.w	r5, r1, sl
 8005fd0:	aa1a      	add	r2, sp, #104	; 0x68
 8005fd2:	eb09 070a 	add.w	r7, r9, sl
 8005fd6:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 8005fda:	4696      	mov	lr, r2
 8005fdc:	2300      	movs	r3, #0
 8005fde:	42bb      	cmp	r3, r7
 8005fe0:	dd0f      	ble.n	8006002 <__kernel_rem_pio2f+0x6a>
 8005fe2:	af42      	add	r7, sp, #264	; 0x108
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	454a      	cmp	r2, r9
 8005fe8:	dc27      	bgt.n	800603a <__kernel_rem_pio2f+0xa2>
 8005fea:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 8005fee:	eb0b 0302 	add.w	r3, fp, r2
 8005ff2:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8005ff6:	9d02      	ldr	r5, [sp, #8]
 8005ff8:	eddf 7aad 	vldr	s15, [pc, #692]	; 80062b0 <__kernel_rem_pio2f+0x318>
 8005ffc:	f04f 0c00 	mov.w	ip, #0
 8006000:	e015      	b.n	800602e <__kernel_rem_pio2f+0x96>
 8006002:	42dd      	cmn	r5, r3
 8006004:	bf5d      	ittte	pl
 8006006:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800600a:	ee07 2a90 	vmovpl	s15, r2
 800600e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8006012:	eef0 7a47 	vmovmi.f32	s15, s14
 8006016:	ecee 7a01 	vstmia	lr!, {s15}
 800601a:	3301      	adds	r3, #1
 800601c:	e7df      	b.n	8005fde <__kernel_rem_pio2f+0x46>
 800601e:	ecf5 6a01 	vldmia	r5!, {s13}
 8006022:	ed33 7a01 	vldmdb	r3!, {s14}
 8006026:	eee6 7a87 	vfma.f32	s15, s13, s14
 800602a:	f10c 0c01 	add.w	ip, ip, #1
 800602e:	45d4      	cmp	ip, sl
 8006030:	ddf5      	ble.n	800601e <__kernel_rem_pio2f+0x86>
 8006032:	ece7 7a01 	vstmia	r7!, {s15}
 8006036:	3201      	adds	r2, #1
 8006038:	e7d5      	b.n	8005fe6 <__kernel_rem_pio2f+0x4e>
 800603a:	ab06      	add	r3, sp, #24
 800603c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8006040:	9304      	str	r3, [sp, #16]
 8006042:	eddf 8a9a 	vldr	s17, [pc, #616]	; 80062ac <__kernel_rem_pio2f+0x314>
 8006046:	ed9f 9a98 	vldr	s18, [pc, #608]	; 80062a8 <__kernel_rem_pio2f+0x310>
 800604a:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800604e:	9303      	str	r3, [sp, #12]
 8006050:	464d      	mov	r5, r9
 8006052:	ab56      	add	r3, sp, #344	; 0x158
 8006054:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 8006058:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800605c:	3f01      	subs	r7, #1
 800605e:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 8006062:	00bf      	lsls	r7, r7, #2
 8006064:	ab56      	add	r3, sp, #344	; 0x158
 8006066:	19da      	adds	r2, r3, r7
 8006068:	3a4c      	subs	r2, #76	; 0x4c
 800606a:	2300      	movs	r3, #0
 800606c:	1ae9      	subs	r1, r5, r3
 800606e:	2900      	cmp	r1, #0
 8006070:	dc4c      	bgt.n	800610c <__kernel_rem_pio2f+0x174>
 8006072:	4620      	mov	r0, r4
 8006074:	f000 fb42 	bl	80066fc <scalbnf>
 8006078:	eeb0 8a40 	vmov.f32	s16, s0
 800607c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8006080:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006084:	f000 faf8 	bl	8006678 <floorf>
 8006088:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800608c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8006090:	2c00      	cmp	r4, #0
 8006092:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8006096:	edcd 7a01 	vstr	s15, [sp, #4]
 800609a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800609e:	ee38 8a67 	vsub.f32	s16, s16, s15
 80060a2:	dd48      	ble.n	8006136 <__kernel_rem_pio2f+0x19e>
 80060a4:	1e69      	subs	r1, r5, #1
 80060a6:	ab06      	add	r3, sp, #24
 80060a8:	f1c4 0008 	rsb	r0, r4, #8
 80060ac:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 80060b0:	9a01      	ldr	r2, [sp, #4]
 80060b2:	fa4c f300 	asr.w	r3, ip, r0
 80060b6:	441a      	add	r2, r3
 80060b8:	4083      	lsls	r3, r0
 80060ba:	9201      	str	r2, [sp, #4]
 80060bc:	ebac 0203 	sub.w	r2, ip, r3
 80060c0:	ab06      	add	r3, sp, #24
 80060c2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 80060c6:	f1c4 0307 	rsb	r3, r4, #7
 80060ca:	fa42 f803 	asr.w	r8, r2, r3
 80060ce:	f1b8 0f00 	cmp.w	r8, #0
 80060d2:	dd41      	ble.n	8006158 <__kernel_rem_pio2f+0x1c0>
 80060d4:	9b01      	ldr	r3, [sp, #4]
 80060d6:	2000      	movs	r0, #0
 80060d8:	3301      	adds	r3, #1
 80060da:	9301      	str	r3, [sp, #4]
 80060dc:	4601      	mov	r1, r0
 80060de:	4285      	cmp	r5, r0
 80060e0:	dc6d      	bgt.n	80061be <__kernel_rem_pio2f+0x226>
 80060e2:	2c00      	cmp	r4, #0
 80060e4:	dd04      	ble.n	80060f0 <__kernel_rem_pio2f+0x158>
 80060e6:	2c01      	cmp	r4, #1
 80060e8:	d07e      	beq.n	80061e8 <__kernel_rem_pio2f+0x250>
 80060ea:	2c02      	cmp	r4, #2
 80060ec:	f000 8086 	beq.w	80061fc <__kernel_rem_pio2f+0x264>
 80060f0:	f1b8 0f02 	cmp.w	r8, #2
 80060f4:	d130      	bne.n	8006158 <__kernel_rem_pio2f+0x1c0>
 80060f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80060fa:	ee30 8a48 	vsub.f32	s16, s0, s16
 80060fe:	b359      	cbz	r1, 8006158 <__kernel_rem_pio2f+0x1c0>
 8006100:	4620      	mov	r0, r4
 8006102:	f000 fafb 	bl	80066fc <scalbnf>
 8006106:	ee38 8a40 	vsub.f32	s16, s16, s0
 800610a:	e025      	b.n	8006158 <__kernel_rem_pio2f+0x1c0>
 800610c:	ee60 7a28 	vmul.f32	s15, s0, s17
 8006110:	a806      	add	r0, sp, #24
 8006112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800611a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800611e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006122:	ee10 1a10 	vmov	r1, s0
 8006126:	ed32 0a01 	vldmdb	r2!, {s0}
 800612a:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800612e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006132:	3301      	adds	r3, #1
 8006134:	e79a      	b.n	800606c <__kernel_rem_pio2f+0xd4>
 8006136:	d106      	bne.n	8006146 <__kernel_rem_pio2f+0x1ae>
 8006138:	1e6b      	subs	r3, r5, #1
 800613a:	aa06      	add	r2, sp, #24
 800613c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006140:	ea4f 2822 	mov.w	r8, r2, asr #8
 8006144:	e7c3      	b.n	80060ce <__kernel_rem_pio2f+0x136>
 8006146:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800614a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800614e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006152:	da31      	bge.n	80061b8 <__kernel_rem_pio2f+0x220>
 8006154:	f04f 0800 	mov.w	r8, #0
 8006158:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800615c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006160:	f040 80a8 	bne.w	80062b4 <__kernel_rem_pio2f+0x31c>
 8006164:	1e6b      	subs	r3, r5, #1
 8006166:	4618      	mov	r0, r3
 8006168:	2200      	movs	r2, #0
 800616a:	4548      	cmp	r0, r9
 800616c:	da4d      	bge.n	800620a <__kernel_rem_pio2f+0x272>
 800616e:	2a00      	cmp	r2, #0
 8006170:	f000 8087 	beq.w	8006282 <__kernel_rem_pio2f+0x2ea>
 8006174:	aa06      	add	r2, sp, #24
 8006176:	3c08      	subs	r4, #8
 8006178:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800617c:	2900      	cmp	r1, #0
 800617e:	f000 808d 	beq.w	800629c <__kernel_rem_pio2f+0x304>
 8006182:	4620      	mov	r0, r4
 8006184:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006188:	9302      	str	r3, [sp, #8]
 800618a:	f000 fab7 	bl	80066fc <scalbnf>
 800618e:	9b02      	ldr	r3, [sp, #8]
 8006190:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80062ac <__kernel_rem_pio2f+0x314>
 8006194:	0099      	lsls	r1, r3, #2
 8006196:	aa42      	add	r2, sp, #264	; 0x108
 8006198:	1850      	adds	r0, r2, r1
 800619a:	1d05      	adds	r5, r0, #4
 800619c:	461c      	mov	r4, r3
 800619e:	2c00      	cmp	r4, #0
 80061a0:	f280 80b8 	bge.w	8006314 <__kernel_rem_pio2f+0x37c>
 80061a4:	2500      	movs	r5, #0
 80061a6:	1b5c      	subs	r4, r3, r5
 80061a8:	2c00      	cmp	r4, #0
 80061aa:	f2c0 80d8 	blt.w	800635e <__kernel_rem_pio2f+0x3c6>
 80061ae:	4f3d      	ldr	r7, [pc, #244]	; (80062a4 <__kernel_rem_pio2f+0x30c>)
 80061b0:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80062b0 <__kernel_rem_pio2f+0x318>
 80061b4:	2400      	movs	r4, #0
 80061b6:	e0c6      	b.n	8006346 <__kernel_rem_pio2f+0x3ae>
 80061b8:	f04f 0802 	mov.w	r8, #2
 80061bc:	e78a      	b.n	80060d4 <__kernel_rem_pio2f+0x13c>
 80061be:	ab06      	add	r3, sp, #24
 80061c0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80061c4:	b949      	cbnz	r1, 80061da <__kernel_rem_pio2f+0x242>
 80061c6:	b12b      	cbz	r3, 80061d4 <__kernel_rem_pio2f+0x23c>
 80061c8:	aa06      	add	r2, sp, #24
 80061ca:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80061ce:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80061d2:	2301      	movs	r3, #1
 80061d4:	3001      	adds	r0, #1
 80061d6:	4619      	mov	r1, r3
 80061d8:	e781      	b.n	80060de <__kernel_rem_pio2f+0x146>
 80061da:	aa06      	add	r2, sp, #24
 80061dc:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 80061e0:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80061e4:	460b      	mov	r3, r1
 80061e6:	e7f5      	b.n	80061d4 <__kernel_rem_pio2f+0x23c>
 80061e8:	1e68      	subs	r0, r5, #1
 80061ea:	ab06      	add	r3, sp, #24
 80061ec:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80061f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061f4:	aa06      	add	r2, sp, #24
 80061f6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 80061fa:	e779      	b.n	80060f0 <__kernel_rem_pio2f+0x158>
 80061fc:	1e68      	subs	r0, r5, #1
 80061fe:	ab06      	add	r3, sp, #24
 8006200:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8006204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006208:	e7f4      	b.n	80061f4 <__kernel_rem_pio2f+0x25c>
 800620a:	a906      	add	r1, sp, #24
 800620c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006210:	3801      	subs	r0, #1
 8006212:	430a      	orrs	r2, r1
 8006214:	e7a9      	b.n	800616a <__kernel_rem_pio2f+0x1d2>
 8006216:	f10c 0c01 	add.w	ip, ip, #1
 800621a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800621e:	2a00      	cmp	r2, #0
 8006220:	d0f9      	beq.n	8006216 <__kernel_rem_pio2f+0x27e>
 8006222:	eb0b 0305 	add.w	r3, fp, r5
 8006226:	aa1a      	add	r2, sp, #104	; 0x68
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	1898      	adds	r0, r3, r2
 800622c:	3004      	adds	r0, #4
 800622e:	1c69      	adds	r1, r5, #1
 8006230:	3704      	adds	r7, #4
 8006232:	2200      	movs	r2, #0
 8006234:	4465      	add	r5, ip
 8006236:	9005      	str	r0, [sp, #20]
 8006238:	428d      	cmp	r5, r1
 800623a:	f6ff af0a 	blt.w	8006052 <__kernel_rem_pio2f+0xba>
 800623e:	a81a      	add	r0, sp, #104	; 0x68
 8006240:	eb02 0c03 	add.w	ip, r2, r3
 8006244:	4484      	add	ip, r0
 8006246:	9803      	ldr	r0, [sp, #12]
 8006248:	f8dd e008 	ldr.w	lr, [sp, #8]
 800624c:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 8006250:	9001      	str	r0, [sp, #4]
 8006252:	ee07 0a90 	vmov	s15, r0
 8006256:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800625a:	9805      	ldr	r0, [sp, #20]
 800625c:	edcc 7a00 	vstr	s15, [ip]
 8006260:	eddf 7a13 	vldr	s15, [pc, #76]	; 80062b0 <__kernel_rem_pio2f+0x318>
 8006264:	eb00 0802 	add.w	r8, r0, r2
 8006268:	f04f 0c00 	mov.w	ip, #0
 800626c:	45d4      	cmp	ip, sl
 800626e:	dd0c      	ble.n	800628a <__kernel_rem_pio2f+0x2f2>
 8006270:	eb02 0c07 	add.w	ip, r2, r7
 8006274:	a842      	add	r0, sp, #264	; 0x108
 8006276:	4484      	add	ip, r0
 8006278:	edcc 7a01 	vstr	s15, [ip, #4]
 800627c:	3101      	adds	r1, #1
 800627e:	3204      	adds	r2, #4
 8006280:	e7da      	b.n	8006238 <__kernel_rem_pio2f+0x2a0>
 8006282:	9b04      	ldr	r3, [sp, #16]
 8006284:	f04f 0c01 	mov.w	ip, #1
 8006288:	e7c7      	b.n	800621a <__kernel_rem_pio2f+0x282>
 800628a:	ecfe 6a01 	vldmia	lr!, {s13}
 800628e:	ed38 7a01 	vldmdb	r8!, {s14}
 8006292:	f10c 0c01 	add.w	ip, ip, #1
 8006296:	eee6 7a87 	vfma.f32	s15, s13, s14
 800629a:	e7e7      	b.n	800626c <__kernel_rem_pio2f+0x2d4>
 800629c:	3b01      	subs	r3, #1
 800629e:	e769      	b.n	8006174 <__kernel_rem_pio2f+0x1dc>
 80062a0:	0804f144 	.word	0x0804f144
 80062a4:	0804f118 	.word	0x0804f118
 80062a8:	43800000 	.word	0x43800000
 80062ac:	3b800000 	.word	0x3b800000
 80062b0:	00000000 	.word	0x00000000
 80062b4:	4260      	negs	r0, r4
 80062b6:	eeb0 0a48 	vmov.f32	s0, s16
 80062ba:	f000 fa1f 	bl	80066fc <scalbnf>
 80062be:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80062a8 <__kernel_rem_pio2f+0x310>
 80062c2:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80062c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ca:	db1a      	blt.n	8006302 <__kernel_rem_pio2f+0x36a>
 80062cc:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80062ac <__kernel_rem_pio2f+0x314>
 80062d0:	ee60 7a27 	vmul.f32	s15, s0, s15
 80062d4:	aa06      	add	r2, sp, #24
 80062d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062da:	a906      	add	r1, sp, #24
 80062dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062e0:	3408      	adds	r4, #8
 80062e2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80062e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80062ee:	ee10 3a10 	vmov	r3, s0
 80062f2:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80062f6:	1c6b      	adds	r3, r5, #1
 80062f8:	ee17 2a90 	vmov	r2, s15
 80062fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006300:	e73f      	b.n	8006182 <__kernel_rem_pio2f+0x1ea>
 8006302:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006306:	aa06      	add	r2, sp, #24
 8006308:	ee10 3a10 	vmov	r3, s0
 800630c:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8006310:	462b      	mov	r3, r5
 8006312:	e736      	b.n	8006182 <__kernel_rem_pio2f+0x1ea>
 8006314:	aa06      	add	r2, sp, #24
 8006316:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800631a:	9202      	str	r2, [sp, #8]
 800631c:	ee07 2a90 	vmov	s15, r2
 8006320:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006324:	3c01      	subs	r4, #1
 8006326:	ee67 7a80 	vmul.f32	s15, s15, s0
 800632a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800632e:	ed65 7a01 	vstmdb	r5!, {s15}
 8006332:	e734      	b.n	800619e <__kernel_rem_pio2f+0x206>
 8006334:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 8006338:	ecf7 6a01 	vldmia	r7!, {s13}
 800633c:	ed9c 7a00 	vldr	s14, [ip]
 8006340:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006344:	3401      	adds	r4, #1
 8006346:	454c      	cmp	r4, r9
 8006348:	dc01      	bgt.n	800634e <__kernel_rem_pio2f+0x3b6>
 800634a:	42a5      	cmp	r5, r4
 800634c:	daf2      	bge.n	8006334 <__kernel_rem_pio2f+0x39c>
 800634e:	aa56      	add	r2, sp, #344	; 0x158
 8006350:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 8006354:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 8006358:	3501      	adds	r5, #1
 800635a:	3804      	subs	r0, #4
 800635c:	e723      	b.n	80061a6 <__kernel_rem_pio2f+0x20e>
 800635e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8006360:	2a03      	cmp	r2, #3
 8006362:	d84d      	bhi.n	8006400 <__kernel_rem_pio2f+0x468>
 8006364:	e8df f002 	tbb	[pc, r2]
 8006368:	021f1f3e 	.word	0x021f1f3e
 800636c:	aa56      	add	r2, sp, #344	; 0x158
 800636e:	4411      	add	r1, r2
 8006370:	399c      	subs	r1, #156	; 0x9c
 8006372:	4608      	mov	r0, r1
 8006374:	461c      	mov	r4, r3
 8006376:	2c00      	cmp	r4, #0
 8006378:	dc5f      	bgt.n	800643a <__kernel_rem_pio2f+0x4a2>
 800637a:	4608      	mov	r0, r1
 800637c:	461c      	mov	r4, r3
 800637e:	2c01      	cmp	r4, #1
 8006380:	dc6b      	bgt.n	800645a <__kernel_rem_pio2f+0x4c2>
 8006382:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 80062b0 <__kernel_rem_pio2f+0x318>
 8006386:	2b01      	cmp	r3, #1
 8006388:	dc77      	bgt.n	800647a <__kernel_rem_pio2f+0x4e2>
 800638a:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800638e:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8006392:	f1b8 0f00 	cmp.w	r8, #0
 8006396:	d176      	bne.n	8006486 <__kernel_rem_pio2f+0x4ee>
 8006398:	edc6 6a00 	vstr	s13, [r6]
 800639c:	ed86 7a01 	vstr	s14, [r6, #4]
 80063a0:	edc6 7a02 	vstr	s15, [r6, #8]
 80063a4:	e02c      	b.n	8006400 <__kernel_rem_pio2f+0x468>
 80063a6:	aa56      	add	r2, sp, #344	; 0x158
 80063a8:	4411      	add	r1, r2
 80063aa:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 80062b0 <__kernel_rem_pio2f+0x318>
 80063ae:	399c      	subs	r1, #156	; 0x9c
 80063b0:	4618      	mov	r0, r3
 80063b2:	2800      	cmp	r0, #0
 80063b4:	da32      	bge.n	800641c <__kernel_rem_pio2f+0x484>
 80063b6:	f1b8 0f00 	cmp.w	r8, #0
 80063ba:	d035      	beq.n	8006428 <__kernel_rem_pio2f+0x490>
 80063bc:	eef1 7a47 	vneg.f32	s15, s14
 80063c0:	edc6 7a00 	vstr	s15, [r6]
 80063c4:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 80063c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80063cc:	a82f      	add	r0, sp, #188	; 0xbc
 80063ce:	2101      	movs	r1, #1
 80063d0:	428b      	cmp	r3, r1
 80063d2:	da2c      	bge.n	800642e <__kernel_rem_pio2f+0x496>
 80063d4:	f1b8 0f00 	cmp.w	r8, #0
 80063d8:	d001      	beq.n	80063de <__kernel_rem_pio2f+0x446>
 80063da:	eef1 7a67 	vneg.f32	s15, s15
 80063de:	edc6 7a01 	vstr	s15, [r6, #4]
 80063e2:	e00d      	b.n	8006400 <__kernel_rem_pio2f+0x468>
 80063e4:	aa56      	add	r2, sp, #344	; 0x158
 80063e6:	4411      	add	r1, r2
 80063e8:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 80062b0 <__kernel_rem_pio2f+0x318>
 80063ec:	399c      	subs	r1, #156	; 0x9c
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	da0e      	bge.n	8006410 <__kernel_rem_pio2f+0x478>
 80063f2:	f1b8 0f00 	cmp.w	r8, #0
 80063f6:	d001      	beq.n	80063fc <__kernel_rem_pio2f+0x464>
 80063f8:	eef1 7a67 	vneg.f32	s15, s15
 80063fc:	edc6 7a00 	vstr	s15, [r6]
 8006400:	9b01      	ldr	r3, [sp, #4]
 8006402:	f003 0007 	and.w	r0, r3, #7
 8006406:	b057      	add	sp, #348	; 0x15c
 8006408:	ecbd 8b04 	vpop	{d8-d9}
 800640c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006410:	ed31 7a01 	vldmdb	r1!, {s14}
 8006414:	3b01      	subs	r3, #1
 8006416:	ee77 7a87 	vadd.f32	s15, s15, s14
 800641a:	e7e8      	b.n	80063ee <__kernel_rem_pio2f+0x456>
 800641c:	ed71 7a01 	vldmdb	r1!, {s15}
 8006420:	3801      	subs	r0, #1
 8006422:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006426:	e7c4      	b.n	80063b2 <__kernel_rem_pio2f+0x41a>
 8006428:	eef0 7a47 	vmov.f32	s15, s14
 800642c:	e7c8      	b.n	80063c0 <__kernel_rem_pio2f+0x428>
 800642e:	ecb0 7a01 	vldmia	r0!, {s14}
 8006432:	3101      	adds	r1, #1
 8006434:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006438:	e7ca      	b.n	80063d0 <__kernel_rem_pio2f+0x438>
 800643a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800643e:	ed70 6a01 	vldmdb	r0!, {s13}
 8006442:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006446:	3c01      	subs	r4, #1
 8006448:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800644c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8006450:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006454:	edc0 7a00 	vstr	s15, [r0]
 8006458:	e78d      	b.n	8006376 <__kernel_rem_pio2f+0x3de>
 800645a:	ed50 7a02 	vldr	s15, [r0, #-8]
 800645e:	ed70 6a01 	vldmdb	r0!, {s13}
 8006462:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006466:	3c01      	subs	r4, #1
 8006468:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800646c:	ed00 7a01 	vstr	s14, [r0, #-4]
 8006470:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006474:	edc0 7a00 	vstr	s15, [r0]
 8006478:	e781      	b.n	800637e <__kernel_rem_pio2f+0x3e6>
 800647a:	ed31 7a01 	vldmdb	r1!, {s14}
 800647e:	3b01      	subs	r3, #1
 8006480:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006484:	e77f      	b.n	8006386 <__kernel_rem_pio2f+0x3ee>
 8006486:	eef1 6a66 	vneg.f32	s13, s13
 800648a:	eeb1 7a47 	vneg.f32	s14, s14
 800648e:	edc6 6a00 	vstr	s13, [r6]
 8006492:	ed86 7a01 	vstr	s14, [r6, #4]
 8006496:	eef1 7a67 	vneg.f32	s15, s15
 800649a:	e781      	b.n	80063a0 <__kernel_rem_pio2f+0x408>

0800649c <__kernel_tanf>:
 800649c:	b508      	push	{r3, lr}
 800649e:	ee10 3a10 	vmov	r3, s0
 80064a2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80064a6:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 80064aa:	eef0 7a40 	vmov.f32	s15, s0
 80064ae:	da17      	bge.n	80064e0 <__kernel_tanf+0x44>
 80064b0:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 80064b4:	ee17 1a10 	vmov	r1, s14
 80064b8:	bb41      	cbnz	r1, 800650c <__kernel_tanf+0x70>
 80064ba:	1c43      	adds	r3, r0, #1
 80064bc:	4313      	orrs	r3, r2
 80064be:	d108      	bne.n	80064d2 <__kernel_tanf+0x36>
 80064c0:	f000 f8d2 	bl	8006668 <fabsf>
 80064c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064c8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80064cc:	eeb0 0a67 	vmov.f32	s0, s15
 80064d0:	bd08      	pop	{r3, pc}
 80064d2:	2801      	cmp	r0, #1
 80064d4:	d0fa      	beq.n	80064cc <__kernel_tanf+0x30>
 80064d6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80064da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80064de:	e7f5      	b.n	80064cc <__kernel_tanf+0x30>
 80064e0:	494e      	ldr	r1, [pc, #312]	; (800661c <__kernel_tanf+0x180>)
 80064e2:	428a      	cmp	r2, r1
 80064e4:	dd12      	ble.n	800650c <__kernel_tanf+0x70>
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8006620 <__kernel_tanf+0x184>
 80064ec:	bfb8      	it	lt
 80064ee:	eef1 7a40 	vneglt.f32	s15, s0
 80064f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064f6:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8006624 <__kernel_tanf+0x188>
 80064fa:	bfb8      	it	lt
 80064fc:	eef1 0a60 	vneglt.f32	s1, s1
 8006500:	ee77 0a60 	vsub.f32	s1, s14, s1
 8006504:	ee70 7aa7 	vadd.f32	s15, s1, s15
 8006508:	eddf 0a47 	vldr	s1, [pc, #284]	; 8006628 <__kernel_tanf+0x18c>
 800650c:	ed9f 6a47 	vldr	s12, [pc, #284]	; 800662c <__kernel_tanf+0x190>
 8006510:	eddf 5a47 	vldr	s11, [pc, #284]	; 8006630 <__kernel_tanf+0x194>
 8006514:	ed9f 5a47 	vldr	s10, [pc, #284]	; 8006634 <__kernel_tanf+0x198>
 8006518:	4940      	ldr	r1, [pc, #256]	; (800661c <__kernel_tanf+0x180>)
 800651a:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800651e:	428a      	cmp	r2, r1
 8006520:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8006524:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8006528:	eee7 5a06 	vfma.f32	s11, s14, s12
 800652c:	ed9f 6a42 	vldr	s12, [pc, #264]	; 8006638 <__kernel_tanf+0x19c>
 8006530:	eea5 6a87 	vfma.f32	s12, s11, s14
 8006534:	eddf 5a41 	vldr	s11, [pc, #260]	; 800663c <__kernel_tanf+0x1a0>
 8006538:	eee6 5a07 	vfma.f32	s11, s12, s14
 800653c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8006640 <__kernel_tanf+0x1a4>
 8006540:	eea5 6a87 	vfma.f32	s12, s11, s14
 8006544:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006644 <__kernel_tanf+0x1a8>
 8006548:	eee6 5a07 	vfma.f32	s11, s12, s14
 800654c:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 8006648 <__kernel_tanf+0x1ac>
 8006550:	eea7 6a05 	vfma.f32	s12, s14, s10
 8006554:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800664c <__kernel_tanf+0x1b0>
 8006558:	eea6 5a07 	vfma.f32	s10, s12, s14
 800655c:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 8006650 <__kernel_tanf+0x1b4>
 8006560:	eea5 6a07 	vfma.f32	s12, s10, s14
 8006564:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 8006654 <__kernel_tanf+0x1b8>
 8006568:	eea6 5a07 	vfma.f32	s10, s12, s14
 800656c:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 8006658 <__kernel_tanf+0x1bc>
 8006570:	eea5 6a07 	vfma.f32	s12, s10, s14
 8006574:	eeb0 7a46 	vmov.f32	s14, s12
 8006578:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800657c:	eeb0 6a60 	vmov.f32	s12, s1
 8006580:	eea7 6a24 	vfma.f32	s12, s14, s9
 8006584:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800665c <__kernel_tanf+0x1c0>
 8006588:	eee6 0a26 	vfma.f32	s1, s12, s13
 800658c:	eee4 0a87 	vfma.f32	s1, s9, s14
 8006590:	ee77 6aa0 	vadd.f32	s13, s15, s1
 8006594:	dd1d      	ble.n	80065d2 <__kernel_tanf+0x136>
 8006596:	ee07 0a10 	vmov	s14, r0
 800659a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800659e:	ee66 5aa6 	vmul.f32	s11, s13, s13
 80065a2:	ee76 6a87 	vadd.f32	s13, s13, s14
 80065a6:	179b      	asrs	r3, r3, #30
 80065a8:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 80065ac:	f003 0302 	and.w	r3, r3, #2
 80065b0:	f1c3 0301 	rsb	r3, r3, #1
 80065b4:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80065b8:	ee76 0a60 	vsub.f32	s1, s12, s1
 80065bc:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80065c0:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80065c4:	ee07 3a90 	vmov	s15, r3
 80065c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065d0:	e77c      	b.n	80064cc <__kernel_tanf+0x30>
 80065d2:	2801      	cmp	r0, #1
 80065d4:	d01f      	beq.n	8006616 <__kernel_tanf+0x17a>
 80065d6:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80065da:	eec7 5a26 	vdiv.f32	s11, s14, s13
 80065de:	4b20      	ldr	r3, [pc, #128]	; (8006660 <__kernel_tanf+0x1c4>)
 80065e0:	ee16 2a90 	vmov	r2, s13
 80065e4:	401a      	ands	r2, r3
 80065e6:	ee06 2a10 	vmov	s12, r2
 80065ea:	ee15 2a90 	vmov	r2, s11
 80065ee:	4013      	ands	r3, r2
 80065f0:	ee07 3a10 	vmov	s14, r3
 80065f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80065f8:	eee6 6a07 	vfma.f32	s13, s12, s14
 80065fc:	ee76 7a67 	vsub.f32	s15, s12, s15
 8006600:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8006604:	eef0 7a66 	vmov.f32	s15, s13
 8006608:	eee7 7a20 	vfma.f32	s15, s14, s1
 800660c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8006610:	eef0 7a47 	vmov.f32	s15, s14
 8006614:	e75a      	b.n	80064cc <__kernel_tanf+0x30>
 8006616:	eef0 7a66 	vmov.f32	s15, s13
 800661a:	e757      	b.n	80064cc <__kernel_tanf+0x30>
 800661c:	3f2ca13f 	.word	0x3f2ca13f
 8006620:	3f490fda 	.word	0x3f490fda
 8006624:	33222168 	.word	0x33222168
 8006628:	00000000 	.word	0x00000000
 800662c:	37d95384 	.word	0x37d95384
 8006630:	3895c07a 	.word	0x3895c07a
 8006634:	b79bae5f 	.word	0xb79bae5f
 8006638:	398137b9 	.word	0x398137b9
 800663c:	3abede48 	.word	0x3abede48
 8006640:	3c11371f 	.word	0x3c11371f
 8006644:	3d5d0dd1 	.word	0x3d5d0dd1
 8006648:	38a3f445 	.word	0x38a3f445
 800664c:	3a1a26c8 	.word	0x3a1a26c8
 8006650:	3b6b6916 	.word	0x3b6b6916
 8006654:	3cb327a4 	.word	0x3cb327a4
 8006658:	3e088889 	.word	0x3e088889
 800665c:	3eaaaaab 	.word	0x3eaaaaab
 8006660:	fffff000 	.word	0xfffff000

08006664 <matherr>:
 8006664:	2000      	movs	r0, #0
 8006666:	4770      	bx	lr

08006668 <fabsf>:
 8006668:	ee10 3a10 	vmov	r3, s0
 800666c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006670:	ee00 3a10 	vmov	s0, r3
 8006674:	4770      	bx	lr
	...

08006678 <floorf>:
 8006678:	ee10 3a10 	vmov	r3, s0
 800667c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006680:	0dca      	lsrs	r2, r1, #23
 8006682:	3a7f      	subs	r2, #127	; 0x7f
 8006684:	2a16      	cmp	r2, #22
 8006686:	dc2a      	bgt.n	80066de <floorf+0x66>
 8006688:	2a00      	cmp	r2, #0
 800668a:	da11      	bge.n	80066b0 <floorf+0x38>
 800668c:	eddf 7a18 	vldr	s15, [pc, #96]	; 80066f0 <floorf+0x78>
 8006690:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006694:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800669c:	dd05      	ble.n	80066aa <floorf+0x32>
 800669e:	2b00      	cmp	r3, #0
 80066a0:	da23      	bge.n	80066ea <floorf+0x72>
 80066a2:	4a14      	ldr	r2, [pc, #80]	; (80066f4 <floorf+0x7c>)
 80066a4:	2900      	cmp	r1, #0
 80066a6:	bf18      	it	ne
 80066a8:	4613      	movne	r3, r2
 80066aa:	ee00 3a10 	vmov	s0, r3
 80066ae:	4770      	bx	lr
 80066b0:	4911      	ldr	r1, [pc, #68]	; (80066f8 <floorf+0x80>)
 80066b2:	4111      	asrs	r1, r2
 80066b4:	420b      	tst	r3, r1
 80066b6:	d0fa      	beq.n	80066ae <floorf+0x36>
 80066b8:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80066f0 <floorf+0x78>
 80066bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80066c0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80066c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c8:	ddef      	ble.n	80066aa <floorf+0x32>
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	bfbe      	ittt	lt
 80066ce:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80066d2:	fa40 f202 	asrlt.w	r2, r0, r2
 80066d6:	189b      	addlt	r3, r3, r2
 80066d8:	ea23 0301 	bic.w	r3, r3, r1
 80066dc:	e7e5      	b.n	80066aa <floorf+0x32>
 80066de:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80066e2:	d3e4      	bcc.n	80066ae <floorf+0x36>
 80066e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80066e8:	4770      	bx	lr
 80066ea:	2300      	movs	r3, #0
 80066ec:	e7dd      	b.n	80066aa <floorf+0x32>
 80066ee:	bf00      	nop
 80066f0:	7149f2ca 	.word	0x7149f2ca
 80066f4:	bf800000 	.word	0xbf800000
 80066f8:	007fffff 	.word	0x007fffff

080066fc <scalbnf>:
 80066fc:	b508      	push	{r3, lr}
 80066fe:	ee10 2a10 	vmov	r2, s0
 8006702:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 8006706:	ed2d 8b02 	vpush	{d8}
 800670a:	eef0 0a40 	vmov.f32	s1, s0
 800670e:	d004      	beq.n	800671a <scalbnf+0x1e>
 8006710:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006714:	d306      	bcc.n	8006724 <scalbnf+0x28>
 8006716:	ee70 0a00 	vadd.f32	s1, s0, s0
 800671a:	ecbd 8b02 	vpop	{d8}
 800671e:	eeb0 0a60 	vmov.f32	s0, s1
 8006722:	bd08      	pop	{r3, pc}
 8006724:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006728:	d21c      	bcs.n	8006764 <scalbnf+0x68>
 800672a:	4b1f      	ldr	r3, [pc, #124]	; (80067a8 <scalbnf+0xac>)
 800672c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80067ac <scalbnf+0xb0>
 8006730:	4298      	cmp	r0, r3
 8006732:	ee60 0a27 	vmul.f32	s1, s0, s15
 8006736:	db10      	blt.n	800675a <scalbnf+0x5e>
 8006738:	ee10 2a90 	vmov	r2, s1
 800673c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 8006740:	3b19      	subs	r3, #25
 8006742:	4403      	add	r3, r0
 8006744:	2bfe      	cmp	r3, #254	; 0xfe
 8006746:	dd0f      	ble.n	8006768 <scalbnf+0x6c>
 8006748:	ed9f 8a19 	vldr	s16, [pc, #100]	; 80067b0 <scalbnf+0xb4>
 800674c:	eeb0 0a48 	vmov.f32	s0, s16
 8006750:	f000 f834 	bl	80067bc <copysignf>
 8006754:	ee60 0a08 	vmul.f32	s1, s0, s16
 8006758:	e7df      	b.n	800671a <scalbnf+0x1e>
 800675a:	eddf 7a16 	vldr	s15, [pc, #88]	; 80067b4 <scalbnf+0xb8>
 800675e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8006762:	e7da      	b.n	800671a <scalbnf+0x1e>
 8006764:	0ddb      	lsrs	r3, r3, #23
 8006766:	e7ec      	b.n	8006742 <scalbnf+0x46>
 8006768:	2b00      	cmp	r3, #0
 800676a:	dd06      	ble.n	800677a <scalbnf+0x7e>
 800676c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8006770:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8006774:	ee00 3a90 	vmov	s1, r3
 8006778:	e7cf      	b.n	800671a <scalbnf+0x1e>
 800677a:	f113 0f16 	cmn.w	r3, #22
 800677e:	da06      	bge.n	800678e <scalbnf+0x92>
 8006780:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006784:	4298      	cmp	r0, r3
 8006786:	dcdf      	bgt.n	8006748 <scalbnf+0x4c>
 8006788:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 80067b4 <scalbnf+0xb8>
 800678c:	e7de      	b.n	800674c <scalbnf+0x50>
 800678e:	3319      	adds	r3, #25
 8006790:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8006794:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8006798:	eddf 7a07 	vldr	s15, [pc, #28]	; 80067b8 <scalbnf+0xbc>
 800679c:	ee07 3a10 	vmov	s14, r3
 80067a0:	ee67 0a27 	vmul.f32	s1, s14, s15
 80067a4:	e7b9      	b.n	800671a <scalbnf+0x1e>
 80067a6:	bf00      	nop
 80067a8:	ffff3cb0 	.word	0xffff3cb0
 80067ac:	4c000000 	.word	0x4c000000
 80067b0:	7149f2ca 	.word	0x7149f2ca
 80067b4:	0da24260 	.word	0x0da24260
 80067b8:	33000000 	.word	0x33000000

080067bc <copysignf>:
 80067bc:	ee10 3a10 	vmov	r3, s0
 80067c0:	ee10 2a90 	vmov	r2, s1
 80067c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067c8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80067cc:	4313      	orrs	r3, r2
 80067ce:	ee00 3a10 	vmov	s0, r3
 80067d2:	4770      	bx	lr

080067d4 <_init>:
 80067d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d6:	bf00      	nop
 80067d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067da:	bc08      	pop	{r3}
 80067dc:	469e      	mov	lr, r3
 80067de:	4770      	bx	lr

080067e0 <_fini>:
 80067e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067e2:	bf00      	nop
 80067e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067e6:	bc08      	pop	{r3}
 80067e8:	469e      	mov	lr, r3
 80067ea:	4770      	bx	lr
