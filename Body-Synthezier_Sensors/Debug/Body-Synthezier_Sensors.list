
Body-Synthezier_Sensors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005fd4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  080061a4  080061a4  000161a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080063a8  080063a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080063a8  080063a8  000163a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080063b0  080063b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080063b0  080063b0  000163b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080063b4  080063b4  000163b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080063b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002184  20000070  08006428  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021f4  08006428  000221f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001273c  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026a4  00000000  00000000  000327dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d50  00000000  00000000  00034e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ca0  00000000  00000000  00035bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a03  00000000  00000000  00036870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b5f  00000000  00000000  0005a273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfc6a  00000000  00000000  0006add2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013aa3c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f74  00000000  00000000  0013aa90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800618c 	.word	0x0800618c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	0800618c 	.word	0x0800618c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <MPU6050_init>:

#include "MPU6050_GY521.h"



MPU6050_STATUS MPU6050_init(I2C_HandleTypeDef* __hi2c, MPU6050_Data* Sensor_Data_pointer, MPU6050_ACCL_RES accl_resolution, MPU6050_GYRO_RES gyro_resolution, uint8_t samplerate){
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b08a      	sub	sp, #40	; 0x28
 80005ac:	af04      	add	r7, sp, #16
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	4611      	mov	r1, r2
 80005b4:	461a      	mov	r2, r3
 80005b6:	460b      	mov	r3, r1
 80005b8:	71fb      	strb	r3, [r7, #7]
 80005ba:	4613      	mov	r3, r2
 80005bc:	71bb      	strb	r3, [r7, #6]

	uint8_t Data=0x00;
 80005be:	2300      	movs	r3, #0
 80005c0:	75fb      	strb	r3, [r7, #23]
	MPU6050_hi2c = __hi2c;
 80005c2:	4aa6      	ldr	r2, [pc, #664]	; (800085c <MPU6050_init+0x2b4>)
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	6013      	str	r3, [r2, #0]
	Sensor_Data = Sensor_Data_pointer;
 80005c8:	4aa5      	ldr	r2, [pc, #660]	; (8000860 <MPU6050_init+0x2b8>)
 80005ca:	68bb      	ldr	r3, [r7, #8]
 80005cc:	6013      	str	r3, [r2, #0]
	printf("MPU6050 init beginn\r\n");
 80005ce:	48a5      	ldr	r0, [pc, #660]	; (8000864 <MPU6050_init+0x2bc>)
 80005d0:	f004 fe96 	bl	8005300 <puts>
	//Check if device is ready: Let LED blink 3 times if yes
	if((HAL_I2C_IsDeviceReady(MPU6050_hi2c, MPU6050_ADDR, 2, 20)) != HAL_OK){
 80005d4:	4ba1      	ldr	r3, [pc, #644]	; (800085c <MPU6050_init+0x2b4>)
 80005d6:	6818      	ldr	r0, [r3, #0]
 80005d8:	2314      	movs	r3, #20
 80005da:	2202      	movs	r2, #2
 80005dc:	21d0      	movs	r1, #208	; 0xd0
 80005de:	f002 fd2b 	bl	8003038 <HAL_I2C_IsDeviceReady>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d004      	beq.n	80005f2 <MPU6050_init+0x4a>
		printf("MPU 6050 No Connection\r\n");
 80005e8:	489f      	ldr	r0, [pc, #636]	; (8000868 <MPU6050_init+0x2c0>)
 80005ea:	f004 fe89 	bl	8005300 <puts>
		return MPU6050_Status_Notconnected;
 80005ee:	2304      	movs	r3, #4
 80005f0:	e12f      	b.n	8000852 <MPU6050_init+0x2aa>
	}



	//check WHO_AM_I: If answer is I_AM toggle LED
	HAL_I2C_Mem_Read(MPU6050_hi2c, MPU6050_ADDR, MPU6050_WHO_AM_I_REG, 1, &Data, 1, 1000);
 80005f2:	4b9a      	ldr	r3, [pc, #616]	; (800085c <MPU6050_init+0x2b4>)
 80005f4:	6818      	ldr	r0, [r3, #0]
 80005f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005fa:	9302      	str	r3, [sp, #8]
 80005fc:	2301      	movs	r3, #1
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	f107 0317 	add.w	r3, r7, #23
 8000604:	9300      	str	r3, [sp, #0]
 8000606:	2301      	movs	r3, #1
 8000608:	2275      	movs	r2, #117	; 0x75
 800060a:	21d0      	movs	r1, #208	; 0xd0
 800060c:	f002 faee 	bl	8002bec <HAL_I2C_Mem_Read>

	if ((Data =! MPU6050_I_AM)) // if-statement is 1 if MPU is present
 8000610:	2300      	movs	r3, #0
 8000612:	75fb      	strb	r3, [r7, #23]
	}



	// wake sensor
	Data=0x00;
 8000614:	2300      	movs	r3, #0
 8000616:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR, MPU6050_PWR_MGMT_1_REG, 1, &Data, 1, 1000)!=HAL_OK)
 8000618:	4b90      	ldr	r3, [pc, #576]	; (800085c <MPU6050_init+0x2b4>)
 800061a:	6818      	ldr	r0, [r3, #0]
 800061c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000620:	9302      	str	r3, [sp, #8]
 8000622:	2301      	movs	r3, #1
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	f107 0317 	add.w	r3, r7, #23
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2301      	movs	r3, #1
 800062e:	226b      	movs	r2, #107	; 0x6b
 8000630:	21d0      	movs	r1, #208	; 0xd0
 8000632:	f002 f9e1 	bl	80029f8 <HAL_I2C_Mem_Write>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MPU6050_init+0x98>
	{
		return MPU6050_Status_Invalid;
 800063c:	2305      	movs	r3, #5
 800063e:	e108      	b.n	8000852 <MPU6050_init+0x2aa>
	}


	// Config range/resolution Gyroscope
	Data = 0xE0 | (gyro_resolution<<3);
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	00db      	lsls	r3, r3, #3
 8000644:	b25b      	sxtb	r3, r3
 8000646:	f063 031f 	orn	r3, r3, #31
 800064a:	b25b      	sxtb	r3, r3
 800064c:	b2db      	uxtb	r3, r3
 800064e:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR, MPU6050_GYRO_CONFIG_REG, 1, &Data, 1, 1000) != HAL_OK){
 8000650:	4b82      	ldr	r3, [pc, #520]	; (800085c <MPU6050_init+0x2b4>)
 8000652:	6818      	ldr	r0, [r3, #0]
 8000654:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000658:	9302      	str	r3, [sp, #8]
 800065a:	2301      	movs	r3, #1
 800065c:	9301      	str	r3, [sp, #4]
 800065e:	f107 0317 	add.w	r3, r7, #23
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2301      	movs	r3, #1
 8000666:	221b      	movs	r2, #27
 8000668:	21d0      	movs	r1, #208	; 0xd0
 800066a:	f002 f9c5 	bl	80029f8 <HAL_I2C_Mem_Write>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MPU6050_init+0xd0>
		return MPU6050_Status_Error;
 8000674:	2302      	movs	r3, #2
 8000676:	e0ec      	b.n	8000852 <MPU6050_init+0x2aa>
	}
	//for normalization of Gyroscope range
	switch (gyro_resolution){
 8000678:	79bb      	ldrb	r3, [r7, #6]
 800067a:	2b03      	cmp	r3, #3
 800067c:	d81e      	bhi.n	80006bc <MPU6050_init+0x114>
 800067e:	a201      	add	r2, pc, #4	; (adr r2, 8000684 <MPU6050_init+0xdc>)
 8000680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000684:	08000695 	.word	0x08000695
 8000688:	0800069f 	.word	0x0800069f
 800068c:	080006a9 	.word	0x080006a9
 8000690:	080006b3 	.word	0x080006b3
	case MPU6050_GYRO_250deg:
		Sensor_Data->Gyro_mult = MPU6050_GYRO_SENS_250;
 8000694:	4b72      	ldr	r3, [pc, #456]	; (8000860 <MPU6050_init+0x2b8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a74      	ldr	r2, [pc, #464]	; (800086c <MPU6050_init+0x2c4>)
 800069a:	619a      	str	r2, [r3, #24]
		break;
 800069c:	e00e      	b.n	80006bc <MPU6050_init+0x114>
	case MPU6050_GYRO_500deg:
		Sensor_Data->Gyro_mult = MPU6050_GYRO_SENS_500;
 800069e:	4b70      	ldr	r3, [pc, #448]	; (8000860 <MPU6050_init+0x2b8>)
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	4a73      	ldr	r2, [pc, #460]	; (8000870 <MPU6050_init+0x2c8>)
 80006a4:	619a      	str	r2, [r3, #24]
		break;
 80006a6:	e009      	b.n	80006bc <MPU6050_init+0x114>
	case MPU6050_GYRO_1000deg:
		Sensor_Data->Gyro_mult = MPU6050_GYRO_SENS_1000;
 80006a8:	4b6d      	ldr	r3, [pc, #436]	; (8000860 <MPU6050_init+0x2b8>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a71      	ldr	r2, [pc, #452]	; (8000874 <MPU6050_init+0x2cc>)
 80006ae:	619a      	str	r2, [r3, #24]
		break;
 80006b0:	e004      	b.n	80006bc <MPU6050_init+0x114>
	case MPU6050_GYRO_2000deg:
		Sensor_Data->Gyro_mult = MPU6050_GYRO_SENS_2000;
 80006b2:	4b6b      	ldr	r3, [pc, #428]	; (8000860 <MPU6050_init+0x2b8>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a70      	ldr	r2, [pc, #448]	; (8000878 <MPU6050_init+0x2d0>)
 80006b8:	619a      	str	r2, [r3, #24]
		break;
 80006ba:	bf00      	nop
	}


	// Config range/resolution of Accelerometer
	Data = 0xE0 | (accl_resolution<<3);
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	00db      	lsls	r3, r3, #3
 80006c0:	b25b      	sxtb	r3, r3
 80006c2:	f063 031f 	orn	r3, r3, #31
 80006c6:	b25b      	sxtb	r3, r3
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR, MPU6050_ACCL_CONFIG_REG, 1, &Data, 1, 1000) != HAL_OK){
 80006cc:	4b63      	ldr	r3, [pc, #396]	; (800085c <MPU6050_init+0x2b4>)
 80006ce:	6818      	ldr	r0, [r3, #0]
 80006d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d4:	9302      	str	r3, [sp, #8]
 80006d6:	2301      	movs	r3, #1
 80006d8:	9301      	str	r3, [sp, #4]
 80006da:	f107 0317 	add.w	r3, r7, #23
 80006de:	9300      	str	r3, [sp, #0]
 80006e0:	2301      	movs	r3, #1
 80006e2:	221c      	movs	r2, #28
 80006e4:	21d0      	movs	r1, #208	; 0xd0
 80006e6:	f002 f987 	bl	80029f8 <HAL_I2C_Mem_Write>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MPU6050_init+0x14c>
		return MPU6050_Status_Error;
 80006f0:	2302      	movs	r3, #2
 80006f2:	e0ae      	b.n	8000852 <MPU6050_init+0x2aa>
	}

	switch(accl_resolution){
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b03      	cmp	r3, #3
 80006f8:	d822      	bhi.n	8000740 <MPU6050_init+0x198>
 80006fa:	a201      	add	r2, pc, #4	; (adr r2, 8000700 <MPU6050_init+0x158>)
 80006fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000700:	08000711 	.word	0x08000711
 8000704:	0800071d 	.word	0x0800071d
 8000708:	08000729 	.word	0x08000729
 800070c:	08000735 	.word	0x08000735
	case MPU6050_ACCL_2G:
		Sensor_Data->Accl_mult = MPU6050_ACCL_SENS_2;
 8000710:	4b53      	ldr	r3, [pc, #332]	; (8000860 <MPU6050_init+0x2b8>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f04f 5262 	mov.w	r2, #947912704	; 0x38800000
 8000718:	645a      	str	r2, [r3, #68]	; 0x44
		break;
 800071a:	e011      	b.n	8000740 <MPU6050_init+0x198>
	case MPU6050_ACCL_4G:
		Sensor_Data->Accl_mult = MPU6050_ACCL_SENS_4;
 800071c:	4b50      	ldr	r3, [pc, #320]	; (8000860 <MPU6050_init+0x2b8>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	f04f 5264 	mov.w	r2, #956301312	; 0x39000000
 8000724:	645a      	str	r2, [r3, #68]	; 0x44
		break;
 8000726:	e00b      	b.n	8000740 <MPU6050_init+0x198>
	case MPU6050_ACCL_8G:
		Sensor_Data->Accl_mult = MPU6050_ACCL_SENS_8;
 8000728:	4b4d      	ldr	r3, [pc, #308]	; (8000860 <MPU6050_init+0x2b8>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	f04f 5266 	mov.w	r2, #964689920	; 0x39800000
 8000730:	645a      	str	r2, [r3, #68]	; 0x44
		break;
 8000732:	e005      	b.n	8000740 <MPU6050_init+0x198>
	case MPU6050_ACCL_16G:
		Sensor_Data->Accl_mult = MPU6050_ACCL_SENS_16;
 8000734:	4b4a      	ldr	r3, [pc, #296]	; (8000860 <MPU6050_init+0x2b8>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f04f 5268 	mov.w	r2, #973078528	; 0x3a000000
 800073c:	645a      	str	r2, [r3, #68]	; 0x44
		break;
 800073e:	bf00      	nop
	}


	// Config Sample Rate: Sample Rate=8/(1+Data)
	Data=samplerate;
 8000740:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000744:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR, MPU6050_SMPLRT_DIV_REG, 1, &Data, 1, 1000) != HAL_OK){
 8000746:	4b45      	ldr	r3, [pc, #276]	; (800085c <MPU6050_init+0x2b4>)
 8000748:	6818      	ldr	r0, [r3, #0]
 800074a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800074e:	9302      	str	r3, [sp, #8]
 8000750:	2301      	movs	r3, #1
 8000752:	9301      	str	r3, [sp, #4]
 8000754:	f107 0317 	add.w	r3, r7, #23
 8000758:	9300      	str	r3, [sp, #0]
 800075a:	2301      	movs	r3, #1
 800075c:	2219      	movs	r2, #25
 800075e:	21d0      	movs	r1, #208	; 0xd0
 8000760:	f002 f94a 	bl	80029f8 <HAL_I2C_Mem_Write>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <MPU6050_init+0x1c6>
		return MPU6050_Status_Error;
 800076a:	2302      	movs	r3, #2
 800076c:	e071      	b.n	8000852 <MPU6050_init+0x2aa>
	}

	//Set Gyroscope offset to zero
	Sensor_Data->Gx_offset = 0;
 800076e:	4b3c      	ldr	r3, [pc, #240]	; (8000860 <MPU6050_init+0x2b8>)
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	2200      	movs	r2, #0
 8000774:	80da      	strh	r2, [r3, #6]
	Sensor_Data->Gy_offset = 0;
 8000776:	4b3a      	ldr	r3, [pc, #232]	; (8000860 <MPU6050_init+0x2b8>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	2200      	movs	r2, #0
 800077c:	811a      	strh	r2, [r3, #8]
	Sensor_Data->Gz_offset = 0;
 800077e:	4b38      	ldr	r3, [pc, #224]	; (8000860 <MPU6050_init+0x2b8>)
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	2200      	movs	r2, #0
 8000784:	815a      	strh	r2, [r3, #10]

	//Set Accelerometer offset to zero
	Sensor_Data->Ax_offset = 0;
 8000786:	4b36      	ldr	r3, [pc, #216]	; (8000860 <MPU6050_init+0x2b8>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2200      	movs	r2, #0
 800078c:	869a      	strh	r2, [r3, #52]	; 0x34
	Sensor_Data->Ay_offset = 0;
 800078e:	4b34      	ldr	r3, [pc, #208]	; (8000860 <MPU6050_init+0x2b8>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	2200      	movs	r2, #0
 8000794:	86da      	strh	r2, [r3, #54]	; 0x36
	Sensor_Data->Az_offset = 0;
 8000796:	4b32      	ldr	r3, [pc, #200]	; (8000860 <MPU6050_init+0x2b8>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	2200      	movs	r2, #0
 800079c:	871a      	strh	r2, [r3, #56]	; 0x38

	//	//Set User Controll, Enable FIFO
	Data = MPU6050_USR_CRTL_FIFO_EN;
 800079e:	2340      	movs	r3, #64	; 0x40
 80007a0:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR, MPU6050_USR_CRTL_REG, 1, &Data, 1, 1000) != HAL_OK){
 80007a2:	4b2e      	ldr	r3, [pc, #184]	; (800085c <MPU6050_init+0x2b4>)
 80007a4:	6818      	ldr	r0, [r3, #0]
 80007a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007aa:	9302      	str	r3, [sp, #8]
 80007ac:	2301      	movs	r3, #1
 80007ae:	9301      	str	r3, [sp, #4]
 80007b0:	f107 0317 	add.w	r3, r7, #23
 80007b4:	9300      	str	r3, [sp, #0]
 80007b6:	2301      	movs	r3, #1
 80007b8:	226a      	movs	r2, #106	; 0x6a
 80007ba:	21d0      	movs	r1, #208	; 0xd0
 80007bc:	f002 f91c 	bl	80029f8 <HAL_I2C_Mem_Write>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MPU6050_init+0x222>
		return MPU6050_Status_Error;
 80007c6:	2302      	movs	r3, #2
 80007c8:	e043      	b.n	8000852 <MPU6050_init+0x2aa>
	}
	HAL_I2C_Mem_Read(MPU6050_hi2c, MPU6050_ADDR, MPU6050_USR_CRTL_REG, 1, &Data, 1, 1000);
 80007ca:	4b24      	ldr	r3, [pc, #144]	; (800085c <MPU6050_init+0x2b4>)
 80007cc:	6818      	ldr	r0, [r3, #0]
 80007ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007d2:	9302      	str	r3, [sp, #8]
 80007d4:	2301      	movs	r3, #1
 80007d6:	9301      	str	r3, [sp, #4]
 80007d8:	f107 0317 	add.w	r3, r7, #23
 80007dc:	9300      	str	r3, [sp, #0]
 80007de:	2301      	movs	r3, #1
 80007e0:	226a      	movs	r2, #106	; 0x6a
 80007e2:	21d0      	movs	r1, #208	; 0xd0
 80007e4:	f002 fa02 	bl	8002bec <HAL_I2C_Mem_Read>
	printf("MPU6050_USR_CRTL_REG: %i\r\n",Data);
 80007e8:	7dfb      	ldrb	r3, [r7, #23]
 80007ea:	4619      	mov	r1, r3
 80007ec:	4823      	ldr	r0, [pc, #140]	; (800087c <MPU6050_init+0x2d4>)
 80007ee:	f004 fd01 	bl	80051f4 <iprintf>
	// Interruppt Enable
	Data = MPU6050_INT_EN_DATA_RDY;
 80007f2:	2301      	movs	r3, #1
 80007f4:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR,MPU6050_RA_INT_ENABLE, 1, &Data, 1, 1000) != HAL_OK){
 80007f6:	4b19      	ldr	r3, [pc, #100]	; (800085c <MPU6050_init+0x2b4>)
 80007f8:	6818      	ldr	r0, [r3, #0]
 80007fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007fe:	9302      	str	r3, [sp, #8]
 8000800:	2301      	movs	r3, #1
 8000802:	9301      	str	r3, [sp, #4]
 8000804:	f107 0317 	add.w	r3, r7, #23
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	2301      	movs	r3, #1
 800080c:	2238      	movs	r2, #56	; 0x38
 800080e:	21d0      	movs	r1, #208	; 0xd0
 8000810:	f002 f8f2 	bl	80029f8 <HAL_I2C_Mem_Write>
 8000814:	4603      	mov	r3, r0
 8000816:	2b00      	cmp	r3, #0
 8000818:	d001      	beq.n	800081e <MPU6050_init+0x276>
		return MPU6050_Status_Error;
 800081a:	2302      	movs	r3, #2
 800081c:	e019      	b.n	8000852 <MPU6050_init+0x2aa>
	}


	//determines which sensor measurements are loaded into the FIFO buffer
	//	Data = MPU6050_FIFO_EN_ACCEL | MPU6050_FIFO_EN_ZG | MPU6050_FIFO_EN_YG | MPU6050_FIFO_EN_XG;
	Data = 0x00;
 800081e:	2300      	movs	r3, #0
 8000820:	75fb      	strb	r3, [r7, #23]
	if(HAL_I2C_Mem_Write(MPU6050_hi2c, MPU6050_ADDR, MPU6050_FIFO_DATA_REG, 1, &Data, 1, 1000) != HAL_OK){
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MPU6050_init+0x2b4>)
 8000824:	6818      	ldr	r0, [r3, #0]
 8000826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082a:	9302      	str	r3, [sp, #8]
 800082c:	2301      	movs	r3, #1
 800082e:	9301      	str	r3, [sp, #4]
 8000830:	f107 0317 	add.w	r3, r7, #23
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	2301      	movs	r3, #1
 8000838:	2274      	movs	r2, #116	; 0x74
 800083a:	21d0      	movs	r1, #208	; 0xd0
 800083c:	f002 f8dc 	bl	80029f8 <HAL_I2C_Mem_Write>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MPU6050_init+0x2a2>
		return MPU6050_Status_Error;
 8000846:	2302      	movs	r3, #2
 8000848:	e003      	b.n	8000852 <MPU6050_init+0x2aa>
	}
	printf("MPU6050 init end\r\n");
 800084a:	480d      	ldr	r0, [pc, #52]	; (8000880 <MPU6050_init+0x2d8>)
 800084c:	f004 fd58 	bl	8005300 <puts>
	return MPU6050_Status_OK;
 8000850:	2300      	movs	r3, #0

	MoveDetected = false;
	MovementUP = false;
	MovementDOWN = false;

}
 8000852:	4618      	mov	r0, r3
 8000854:	3718      	adds	r7, #24
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	2000201c 	.word	0x2000201c
 8000860:	20002014 	.word	0x20002014
 8000864:	080061a4 	.word	0x080061a4
 8000868:	080061bc 	.word	0x080061bc
 800086c:	3bfa232d 	.word	0x3bfa232d
 8000870:	3c7a232d 	.word	0x3c7a232d
 8000874:	3cf9c190 	.word	0x3cf9c190
 8000878:	3d79c190 	.word	0x3d79c190
 800087c:	080061d4 	.word	0x080061d4
 8000880:	080061f0 	.word	0x080061f0

08000884 <MPU6050_Read_Accl>:




MPU6050_STATUS MPU6050_Read_Accl(){
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af04      	add	r7, sp, #16

	uint8_t Rec_Data[6];

	// Read 6Bytes (2byte per axis) starting from ACCL_XOUT_H register
	if(HAL_I2C_Mem_Read (MPU6050_hi2c, MPU6050_ADDR, MPU6050_ACCL_XOUT_H_REG, 1, Rec_Data, 6, 1000) != HAL_OK){
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <MPU6050_Read_Accl+0xa8>)
 800088c:	6818      	ldr	r0, [r3, #0]
 800088e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000892:	9302      	str	r3, [sp, #8]
 8000894:	2306      	movs	r3, #6
 8000896:	9301      	str	r3, [sp, #4]
 8000898:	463b      	mov	r3, r7
 800089a:	9300      	str	r3, [sp, #0]
 800089c:	2301      	movs	r3, #1
 800089e:	223b      	movs	r2, #59	; 0x3b
 80008a0:	21d0      	movs	r1, #208	; 0xd0
 80008a2:	f002 f9a3 	bl	8002bec <HAL_I2C_Mem_Read>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MPU6050_Read_Accl+0x2c>
		return MPU6050_Status_Error;
 80008ac:	2302      	movs	r3, #2
 80008ae:	e039      	b.n	8000924 <MPU6050_Read_Accl+0xa0>
	}

	// Data for all axis comes as 6Byte array, in the following it is filled into one 16-bit array for each axis
	Sensor_Data->Accl_X = (int16_t)(Rec_Data[0]<<8 | Rec_Data[1]) - Sensor_Data->Ax_offset;
 80008b0:	783b      	ldrb	r3, [r7, #0]
 80008b2:	021b      	lsls	r3, r3, #8
 80008b4:	b21a      	sxth	r2, r3
 80008b6:	787b      	ldrb	r3, [r7, #1]
 80008b8:	b21b      	sxth	r3, r3
 80008ba:	4313      	orrs	r3, r2
 80008bc:	b21b      	sxth	r3, r3
 80008be:	b29a      	uxth	r2, r3
 80008c0:	4b1b      	ldr	r3, [pc, #108]	; (8000930 <MPU6050_Read_Accl+0xac>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 80008c8:	b29b      	uxth	r3, r3
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	b29a      	uxth	r2, r3
 80008ce:	4b18      	ldr	r3, [pc, #96]	; (8000930 <MPU6050_Read_Accl+0xac>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	b212      	sxth	r2, r2
 80008d4:	851a      	strh	r2, [r3, #40]	; 0x28
	Sensor_Data->Accl_Y = (int16_t)(Rec_Data[2]<<8 | Rec_Data[3]) - Sensor_Data->Ay_offset;
 80008d6:	78bb      	ldrb	r3, [r7, #2]
 80008d8:	021b      	lsls	r3, r3, #8
 80008da:	b21a      	sxth	r2, r3
 80008dc:	78fb      	ldrb	r3, [r7, #3]
 80008de:	b21b      	sxth	r3, r3
 80008e0:	4313      	orrs	r3, r2
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	b29a      	uxth	r2, r3
 80008e6:	4b12      	ldr	r3, [pc, #72]	; (8000930 <MPU6050_Read_Accl+0xac>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80008ee:	b29b      	uxth	r3, r3
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MPU6050_Read_Accl+0xac>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	b212      	sxth	r2, r2
 80008fa:	855a      	strh	r2, [r3, #42]	; 0x2a
	Sensor_Data->Accl_Z = (int16_t)(Rec_Data[4]<<8 | Rec_Data[5]) - Sensor_Data->Az_offset;
 80008fc:	793b      	ldrb	r3, [r7, #4]
 80008fe:	021b      	lsls	r3, r3, #8
 8000900:	b21a      	sxth	r2, r3
 8000902:	797b      	ldrb	r3, [r7, #5]
 8000904:	b21b      	sxth	r3, r3
 8000906:	4313      	orrs	r3, r2
 8000908:	b21b      	sxth	r3, r3
 800090a:	b29a      	uxth	r2, r3
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MPU6050_Read_Accl+0xac>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8000914:	b29b      	uxth	r3, r3
 8000916:	1ad3      	subs	r3, r2, r3
 8000918:	b29a      	uxth	r2, r3
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <MPU6050_Read_Accl+0xac>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	b212      	sxth	r2, r2
 8000920:	859a      	strh	r2, [r3, #44]	; 0x2c

	return MPU6050_Read_OK;
 8000922:	2301      	movs	r3, #1
}
 8000924:	4618      	mov	r0, r3
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000201c 	.word	0x2000201c
 8000930:	20002014 	.word	0x20002014

08000934 <MPU6050_Read_Sensor>:


	return MPU6050_Read_OK;
}

MPU6050_STATUS MPU6050_Read_Sensor(){
 8000934:	b580      	push	{r7, lr}
 8000936:	b088      	sub	sp, #32
 8000938:	af04      	add	r7, sp, #16

	uint8_t Rec_Data[14];

	// Read 6Bytes (2byte per axis) starting from ACCL_XOUT_H register
	if (HAL_I2C_Mem_Read (MPU6050_hi2c, MPU6050_ADDR, MPU6050_ACCL_XOUT_H_REG, 1, Rec_Data, 14, 1000) != HAL_OK ){
 800093a:	4b49      	ldr	r3, [pc, #292]	; (8000a60 <MPU6050_Read_Sensor+0x12c>)
 800093c:	6818      	ldr	r0, [r3, #0]
 800093e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000942:	9302      	str	r3, [sp, #8]
 8000944:	230e      	movs	r3, #14
 8000946:	9301      	str	r3, [sp, #4]
 8000948:	463b      	mov	r3, r7
 800094a:	9300      	str	r3, [sp, #0]
 800094c:	2301      	movs	r3, #1
 800094e:	223b      	movs	r2, #59	; 0x3b
 8000950:	21d0      	movs	r1, #208	; 0xd0
 8000952:	f002 f94b 	bl	8002bec <HAL_I2C_Mem_Read>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MPU6050_Read_Sensor+0x2c>
		return MPU6050_Status_Error;
 800095c:	2302      	movs	r3, #2
 800095e:	e07a      	b.n	8000a56 <MPU6050_Read_Sensor+0x122>
	}
	// Get time of new Measurement and safe time of last measurement
	Sensor_Data->Gyro_time	=	DWT->CYCCNT;
 8000960:	4b40      	ldr	r3, [pc, #256]	; (8000a64 <MPU6050_Read_Sensor+0x130>)
 8000962:	685a      	ldr	r2, [r3, #4]
 8000964:	4b40      	ldr	r3, [pc, #256]	; (8000a68 <MPU6050_Read_Sensor+0x134>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	615a      	str	r2, [r3, #20]
	DWT->CYCCNT				=	0;
 800096a:	4b3e      	ldr	r3, [pc, #248]	; (8000a64 <MPU6050_Read_Sensor+0x130>)
 800096c:	2200      	movs	r2, #0
 800096e:	605a      	str	r2, [r3, #4]
	// Data for all axis comes as 6Byte array, in the following it is filled into one 16-bit array for each axis
	Sensor_Data->Accl_X = (int16_t)(Rec_Data[0]<<8 | Rec_Data[1]) - Sensor_Data->Ax_offset;
 8000970:	783b      	ldrb	r3, [r7, #0]
 8000972:	021b      	lsls	r3, r3, #8
 8000974:	b21a      	sxth	r2, r3
 8000976:	787b      	ldrb	r3, [r7, #1]
 8000978:	b21b      	sxth	r3, r3
 800097a:	4313      	orrs	r3, r2
 800097c:	b21b      	sxth	r3, r3
 800097e:	b29a      	uxth	r2, r3
 8000980:	4b39      	ldr	r3, [pc, #228]	; (8000a68 <MPU6050_Read_Sensor+0x134>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8000988:	b29b      	uxth	r3, r3
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	b29a      	uxth	r2, r3
 800098e:	4b36      	ldr	r3, [pc, #216]	; (8000a68 <MPU6050_Read_Sensor+0x134>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	b212      	sxth	r2, r2
 8000994:	851a      	strh	r2, [r3, #40]	; 0x28
	Sensor_Data->Accl_Y = (int16_t)(Rec_Data[2]<<8 | Rec_Data[3]) - Sensor_Data->Ay_offset;
 8000996:	78bb      	ldrb	r3, [r7, #2]
 8000998:	021b      	lsls	r3, r3, #8
 800099a:	b21a      	sxth	r2, r3
 800099c:	78fb      	ldrb	r3, [r7, #3]
 800099e:	b21b      	sxth	r3, r3
 80009a0:	4313      	orrs	r3, r2
 80009a2:	b21b      	sxth	r3, r3
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	4b30      	ldr	r3, [pc, #192]	; (8000a68 <MPU6050_Read_Sensor+0x134>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	1ad3      	subs	r3, r2, r3
 80009b2:	b29a      	uxth	r2, r3
 80009b4:	4b2c      	ldr	r3, [pc, #176]	; (8000a68 <MPU6050_Read_Sensor+0x134>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	b212      	sxth	r2, r2
 80009ba:	855a      	strh	r2, [r3, #42]	; 0x2a
	Sensor_Data->Accl_Z = (int16_t)(Rec_Data[4]<<8 | Rec_Data[5]) - Sensor_Data->Az_offset;
 80009bc:	793b      	ldrb	r3, [r7, #4]
 80009be:	021b      	lsls	r3, r3, #8
 80009c0:	b21a      	sxth	r2, r3
 80009c2:	797b      	ldrb	r3, [r7, #5]
 80009c4:	b21b      	sxth	r3, r3
 80009c6:	4313      	orrs	r3, r2
 80009c8:	b21b      	sxth	r3, r3
 80009ca:	b29a      	uxth	r2, r3
 80009cc:	4b26      	ldr	r3, [pc, #152]	; (8000a68 <MPU6050_Read_Sensor+0x134>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80009d4:	b29b      	uxth	r3, r3
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	b29a      	uxth	r2, r3
 80009da:	4b23      	ldr	r3, [pc, #140]	; (8000a68 <MPU6050_Read_Sensor+0x134>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	b212      	sxth	r2, r2
 80009e0:	859a      	strh	r2, [r3, #44]	; 0x2c
	// Data for all axis comes as 6Byte array, in the following it is filled into one 16-bit array for each axis
	Sensor_Data->Gyro_X = (int16_t)(Rec_Data[8]<<8 | Rec_Data[9]) - Sensor_Data->Gx_offset;
 80009e2:	7a3b      	ldrb	r3, [r7, #8]
 80009e4:	021b      	lsls	r3, r3, #8
 80009e6:	b21a      	sxth	r2, r3
 80009e8:	7a7b      	ldrb	r3, [r7, #9]
 80009ea:	b21b      	sxth	r3, r3
 80009ec:	4313      	orrs	r3, r2
 80009ee:	b21b      	sxth	r3, r3
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	4b1d      	ldr	r3, [pc, #116]	; (8000a68 <MPU6050_Read_Sensor+0x134>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80009fa:	b29b      	uxth	r3, r3
 80009fc:	1ad3      	subs	r3, r2, r3
 80009fe:	b29a      	uxth	r2, r3
 8000a00:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <MPU6050_Read_Sensor+0x134>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	b212      	sxth	r2, r2
 8000a06:	801a      	strh	r2, [r3, #0]
	Sensor_Data->Gyro_Y = (int16_t)(Rec_Data[10]<<8 | Rec_Data[11]) - Sensor_Data->Gy_offset;
 8000a08:	7abb      	ldrb	r3, [r7, #10]
 8000a0a:	021b      	lsls	r3, r3, #8
 8000a0c:	b21a      	sxth	r2, r3
 8000a0e:	7afb      	ldrb	r3, [r7, #11]
 8000a10:	b21b      	sxth	r3, r3
 8000a12:	4313      	orrs	r3, r2
 8000a14:	b21b      	sxth	r3, r3
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	4b13      	ldr	r3, [pc, #76]	; (8000a68 <MPU6050_Read_Sensor+0x134>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000a20:	b29b      	uxth	r3, r3
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	b29a      	uxth	r2, r3
 8000a26:	4b10      	ldr	r3, [pc, #64]	; (8000a68 <MPU6050_Read_Sensor+0x134>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	b212      	sxth	r2, r2
 8000a2c:	805a      	strh	r2, [r3, #2]
	Sensor_Data->Gyro_Z = (int16_t)(Rec_Data[12]<<8 | Rec_Data[13]) - Sensor_Data->Gz_offset;
 8000a2e:	7b3b      	ldrb	r3, [r7, #12]
 8000a30:	021b      	lsls	r3, r3, #8
 8000a32:	b21a      	sxth	r2, r3
 8000a34:	7b7b      	ldrb	r3, [r7, #13]
 8000a36:	b21b      	sxth	r3, r3
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	b21b      	sxth	r3, r3
 8000a3c:	b29a      	uxth	r2, r3
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <MPU6050_Read_Sensor+0x134>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000a46:	b29b      	uxth	r3, r3
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	b29a      	uxth	r2, r3
 8000a4c:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MPU6050_Read_Sensor+0x134>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	b212      	sxth	r2, r2
 8000a52:	809a      	strh	r2, [r3, #4]

	return MPU6050_Read_OK;
 8000a54:	2301      	movs	r3, #1
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3710      	adds	r7, #16
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	2000201c 	.word	0x2000201c
 8000a64:	e0001000 	.word	0xe0001000
 8000a68:	20002014 	.word	0x20002014

08000a6c <MPU6050_Calculate_Mean>:


MPU6050_STATUS MPU6050_Calculate_Mean(){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	; 0x30
 8000a70:	af00      	add	r7, sp, #0
	// Temp memory to sum up values for mean calculation
	// Gyroscope
	int32_t Gx_mean_tempbuffer	=	0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
	int32_t Gy_mean_tempbuffer	=	0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
	int32_t Gz_mean_tempbuffer	=	0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
	// Accelerometer
	int32_t Ax_mean_tempbuffer	=	0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
	int32_t Ay_mean_tempbuffer	=	0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
	int32_t Az_mean_tempbuffer	=	0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61bb      	str	r3, [r7, #24]
	// First measurements have to be skipped
	int n_skipping		=	100;
 8000a8a:	2364      	movs	r3, #100	; 0x64
 8000a8c:	613b      	str	r3, [r7, #16]
	int n_measurements 	=	500;
 8000a8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a92:	60fb      	str	r3, [r7, #12]
	//	int n_skipping		=	10;
	//	int n_measurements 	=	100;
	for (int i=n_skipping; i < n_measurements + n_skipping; i++){
 8000a94:	693b      	ldr	r3, [r7, #16]
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	e04f      	b.n	8000b3a <MPU6050_Calculate_Mean+0xce>
		// Read Data

		// from Gyroscope
		if (MPU6050_Read_Sensor(Sensor_Data) != MPU6050_Read_OK){
 8000a9a:	4b45      	ldr	r3, [pc, #276]	; (8000bb0 <MPU6050_Calculate_Mean+0x144>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f7ff ff48 	bl	8000934 <MPU6050_Read_Sensor>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d001      	beq.n	8000aae <MPU6050_Calculate_Mean+0x42>
			return MPU6050_Status_Error;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	e07c      	b.n	8000ba8 <MPU6050_Calculate_Mean+0x13c>
		}
		int16_t Gx = Sensor_Data	->	Gyro_X;
 8000aae:	4b40      	ldr	r3, [pc, #256]	; (8000bb0 <MPU6050_Calculate_Mean+0x144>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	881b      	ldrh	r3, [r3, #0]
 8000ab4:	817b      	strh	r3, [r7, #10]
		int16_t Gy = Sensor_Data	->	Gyro_Y;
 8000ab6:	4b3e      	ldr	r3, [pc, #248]	; (8000bb0 <MPU6050_Calculate_Mean+0x144>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	885b      	ldrh	r3, [r3, #2]
 8000abc:	813b      	strh	r3, [r7, #8]
		int16_t Gz = Sensor_Data	->	Gyro_Z;
 8000abe:	4b3c      	ldr	r3, [pc, #240]	; (8000bb0 <MPU6050_Calculate_Mean+0x144>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	889b      	ldrh	r3, [r3, #4]
 8000ac4:	80fb      	strh	r3, [r7, #6]
		// from Accelerometer
		if (MPU6050_Read_Accl(Sensor_Data) != MPU6050_Read_OK){
 8000ac6:	4b3a      	ldr	r3, [pc, #232]	; (8000bb0 <MPU6050_Calculate_Mean+0x144>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff feda 	bl	8000884 <MPU6050_Read_Accl>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d001      	beq.n	8000ada <MPU6050_Calculate_Mean+0x6e>
			return MPU6050_Status_Error;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	e066      	b.n	8000ba8 <MPU6050_Calculate_Mean+0x13c>
		}
		int16_t Ax = Sensor_Data	->	Accl_X;
 8000ada:	4b35      	ldr	r3, [pc, #212]	; (8000bb0 <MPU6050_Calculate_Mean+0x144>)
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000ae0:	80bb      	strh	r3, [r7, #4]
		int16_t Ay = Sensor_Data	->	Accl_Y;
 8000ae2:	4b33      	ldr	r3, [pc, #204]	; (8000bb0 <MPU6050_Calculate_Mean+0x144>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000ae8:	807b      	strh	r3, [r7, #2]
		int16_t Az = Sensor_Data	->	Accl_Z;
 8000aea:	4b31      	ldr	r3, [pc, #196]	; (8000bb0 <MPU6050_Calculate_Mean+0x144>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000af0:	803b      	strh	r3, [r7, #0]
		// sum it up
		Gx_mean_tempbuffer	+=	Gx;
 8000af2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000af6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000af8:	4413      	add	r3, r2
 8000afa:	62fb      	str	r3, [r7, #44]	; 0x2c
		Gy_mean_tempbuffer	+=	Gy;
 8000afc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8000b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b02:	4413      	add	r3, r2
 8000b04:	62bb      	str	r3, [r7, #40]	; 0x28
		Gz_mean_tempbuffer	+=	Gz;
 8000b06:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b0c:	4413      	add	r3, r2
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
		Ax_mean_tempbuffer	+=	Ax;
 8000b10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000b14:	6a3a      	ldr	r2, [r7, #32]
 8000b16:	4413      	add	r3, r2
 8000b18:	623b      	str	r3, [r7, #32]
		Ay_mean_tempbuffer	+=	Ay;
 8000b1a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000b1e:	69fa      	ldr	r2, [r7, #28]
 8000b20:	4413      	add	r3, r2
 8000b22:	61fb      	str	r3, [r7, #28]
		Az_mean_tempbuffer	+=	Az;
 8000b24:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000b28:	69ba      	ldr	r2, [r7, #24]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	61bb      	str	r3, [r7, #24]
		// Wait to prevent double measurements
		HAL_Delay(2);
 8000b2e:	2002      	movs	r0, #2
 8000b30:	f000 ffe4 	bl	8001afc <HAL_Delay>
	for (int i=n_skipping; i < n_measurements + n_skipping; i++){
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	3301      	adds	r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	693b      	ldr	r3, [r7, #16]
 8000b3e:	4413      	add	r3, r2
 8000b40:	697a      	ldr	r2, [r7, #20]
 8000b42:	429a      	cmp	r2, r3
 8000b44:	dba9      	blt.n	8000a9a <MPU6050_Calculate_Mean+0x2e>
	}

	//Save offset to Sensor_Data
	//Gyroscope offset
	Sensor_Data->Gx_mean=Gx_mean_tempbuffer/n_measurements;
 8000b46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	fb92 f2f3 	sdiv	r2, r2, r3
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MPU6050_Calculate_Mean+0x144>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	b212      	sxth	r2, r2
 8000b54:	819a      	strh	r2, [r3, #12]
	Sensor_Data->Gy_mean=Gy_mean_tempbuffer/n_measurements;
 8000b56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	fb92 f2f3 	sdiv	r2, r2, r3
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MPU6050_Calculate_Mean+0x144>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	b212      	sxth	r2, r2
 8000b64:	81da      	strh	r2, [r3, #14]
	Sensor_Data->Gz_mean=Gz_mean_tempbuffer/n_measurements;
 8000b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	fb92 f2f3 	sdiv	r2, r2, r3
 8000b6e:	4b10      	ldr	r3, [pc, #64]	; (8000bb0 <MPU6050_Calculate_Mean+0x144>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	b212      	sxth	r2, r2
 8000b74:	821a      	strh	r2, [r3, #16]
	//Accelerometer offset
	Sensor_Data->Ax_mean=Ax_mean_tempbuffer/n_measurements;
 8000b76:	6a3a      	ldr	r2, [r7, #32]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	fb92 f2f3 	sdiv	r2, r2, r3
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MPU6050_Calculate_Mean+0x144>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	b212      	sxth	r2, r2
 8000b84:	875a      	strh	r2, [r3, #58]	; 0x3a
	Sensor_Data->Ay_mean=Ay_mean_tempbuffer/n_measurements;
 8000b86:	69fa      	ldr	r2, [r7, #28]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	fb92 f2f3 	sdiv	r2, r2, r3
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <MPU6050_Calculate_Mean+0x144>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	b212      	sxth	r2, r2
 8000b94:	879a      	strh	r2, [r3, #60]	; 0x3c
	Sensor_Data->Az_mean=Az_mean_tempbuffer/n_measurements;
 8000b96:	69ba      	ldr	r2, [r7, #24]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	fb92 f2f3 	sdiv	r2, r2, r3
 8000b9e:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <MPU6050_Calculate_Mean+0x144>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	b212      	sxth	r2, r2
 8000ba4:	87da      	strh	r2, [r3, #62]	; 0x3e

	return MPU6050_Read_OK;
 8000ba6:	2301      	movs	r3, #1
}
 8000ba8:	4618      	mov	r0, r3
 8000baa:	3730      	adds	r7, #48	; 0x30
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20002014 	.word	0x20002014

08000bb4 <MPU6050_Calibrate>:

MPU6050_STATUS MPU6050_Calibrate(){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0

	// gravitational constant depending on accelerometer resolution
	int16_t gravitation	= (int16_t)((float)1 / Sensor_Data -> Accl_mult);
 8000bba:	4b93      	ldr	r3, [pc, #588]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8000bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000bc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000bca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000bce:	ee17 3a90 	vmov	r3, s15
 8000bd2:	807b      	strh	r3, [r7, #2]
	// allowed deviation from mean for raw data from sensors
	int8_t	gyro_tolerance  = 1;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	707b      	strb	r3, [r7, #1]
	int8_t	accl_tolerance  = 5;
 8000bd8:	2305      	movs	r3, #5
 8000bda:	703b      	strb	r3, [r7, #0]

	// Set offset Initially (offset is subtracted from future measurements)
	Sensor_Data -> Gx_offset		=	Sensor_Data -> Gx_mean;
 8000bdc:	4b8a      	ldr	r3, [pc, #552]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b89      	ldr	r3, [pc, #548]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8000be8:	80da      	strh	r2, [r3, #6]
	Sensor_Data -> Gy_offset		=	Sensor_Data -> Gy_mean;
 8000bea:	4b87      	ldr	r3, [pc, #540]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	4b86      	ldr	r3, [pc, #536]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 8000bf6:	811a      	strh	r2, [r3, #8]
	Sensor_Data -> Gz_offset		=	Sensor_Data -> Gz_mean;
 8000bf8:	4b83      	ldr	r3, [pc, #524]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000bfa:	681a      	ldr	r2, [r3, #0]
 8000bfc:	4b82      	ldr	r3, [pc, #520]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8000c04:	815a      	strh	r2, [r3, #10]
	Sensor_Data -> Ax_offset		=	Sensor_Data -> Ax_mean;
 8000c06:	4b80      	ldr	r3, [pc, #512]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4b7f      	ldr	r3, [pc, #508]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f9b2 203a 	ldrsh.w	r2, [r2, #58]	; 0x3a
 8000c12:	869a      	strh	r2, [r3, #52]	; 0x34
	Sensor_Data -> Ay_offset		=	Sensor_Data -> Ay_mean;
 8000c14:	4b7c      	ldr	r3, [pc, #496]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b7b      	ldr	r3, [pc, #492]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	f9b2 203c 	ldrsh.w	r2, [r2, #60]	; 0x3c
 8000c20:	86da      	strh	r2, [r3, #54]	; 0x36
	Sensor_Data -> Az_offset		=	(Sensor_Data -> Az_mean) + gravitation;
 8000c22:	4b79      	ldr	r3, [pc, #484]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8000c2a:	b29a      	uxth	r2, r3
 8000c2c:	887b      	ldrh	r3, [r7, #2]
 8000c2e:	4413      	add	r3, r2
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	4b75      	ldr	r3, [pc, #468]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	b212      	sxth	r2, r2
 8000c38:	871a      	strh	r2, [r3, #56]	; 0x38

	// Indicator for correct calibration of all axis
	int calibrated = 0;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
	while(calibrated <= 6){
 8000c3e:	e0d9      	b.n	8000df4 <MPU6050_Calibrate+0x240>
		printf("%i\n\r",calibrated );
 8000c40:	6879      	ldr	r1, [r7, #4]
 8000c42:	4872      	ldr	r0, [pc, #456]	; (8000e0c <MPU6050_Calibrate+0x258>)
 8000c44:	f004 fad6 	bl	80051f4 <iprintf>
		// Calculate means of sensors
		if (MPU6050_Calculate_Mean(Sensor_Data)!= MPU6050_Read_OK){
 8000c48:	4b6f      	ldr	r3, [pc, #444]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f7ff ff0d 	bl	8000a6c <MPU6050_Calculate_Mean>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d001      	beq.n	8000c5c <MPU6050_Calibrate+0xa8>
			return MPU6050_Status_Error;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	e0d0      	b.n	8000dfe <MPU6050_Calibrate+0x24a>
		}
		// Validate or Update Calibration
		// Gyroscope X Y Z
		if (abs(Sensor_Data -> Gx_mean)<gyro_tolerance) calibrated++;
 8000c5c:	4b6a      	ldr	r3, [pc, #424]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	bfb8      	it	lt
 8000c68:	425b      	neglt	r3, r3
 8000c6a:	b29b      	uxth	r3, r3
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000c72:	429a      	cmp	r2, r3
 8000c74:	da03      	bge.n	8000c7e <MPU6050_Calibrate+0xca>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3301      	adds	r3, #1
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	e00f      	b.n	8000c9e <MPU6050_Calibrate+0xea>
		else Sensor_Data -> Gx_offset		=	(Sensor_Data -> Gx_offset)	+	(Sensor_Data -> Gx_mean);
 8000c7e:	4b62      	ldr	r3, [pc, #392]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	4b5f      	ldr	r3, [pc, #380]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8000c90:	b29b      	uxth	r3, r3
 8000c92:	4413      	add	r3, r2
 8000c94:	b29a      	uxth	r2, r3
 8000c96:	4b5c      	ldr	r3, [pc, #368]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	b212      	sxth	r2, r2
 8000c9c:	80da      	strh	r2, [r3, #6]

		if (abs(Sensor_Data -> Gy_mean)<gyro_tolerance) calibrated++;
 8000c9e:	4b5a      	ldr	r3, [pc, #360]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	bfb8      	it	lt
 8000caa:	425b      	neglt	r3, r3
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	da03      	bge.n	8000cc0 <MPU6050_Calibrate+0x10c>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	607b      	str	r3, [r7, #4]
 8000cbe:	e00f      	b.n	8000ce0 <MPU6050_Calibrate+0x12c>
		else Sensor_Data -> Gy_offset		=	(Sensor_Data -> Gy_offset)	+	(Sensor_Data -> Gy_mean);
 8000cc0:	4b51      	ldr	r3, [pc, #324]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	4b4f      	ldr	r3, [pc, #316]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	4413      	add	r3, r2
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	4b4b      	ldr	r3, [pc, #300]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	b212      	sxth	r2, r2
 8000cde:	811a      	strh	r2, [r3, #8]

		if (abs(Sensor_Data -> Gz_mean)<gyro_tolerance) calibrated++;
 8000ce0:	4b49      	ldr	r3, [pc, #292]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	bfb8      	it	lt
 8000cec:	425b      	neglt	r3, r3
 8000cee:	b29b      	uxth	r3, r3
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	da03      	bge.n	8000d02 <MPU6050_Calibrate+0x14e>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	607b      	str	r3, [r7, #4]
 8000d00:	e00f      	b.n	8000d22 <MPU6050_Calibrate+0x16e>
		else Sensor_Data -> Gz_offset		=	(Sensor_Data -> Gz_offset)	+	(Sensor_Data -> Gz_mean);
 8000d02:	4b41      	ldr	r3, [pc, #260]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	4b3e      	ldr	r3, [pc, #248]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000d14:	b29b      	uxth	r3, r3
 8000d16:	4413      	add	r3, r2
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	4b3b      	ldr	r3, [pc, #236]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	b212      	sxth	r2, r2
 8000d20:	815a      	strh	r2, [r3, #10]
		// Accelerometer X Y Z
		if (abs(Sensor_Data -> Ax_mean)<accl_tolerance) calibrated++;
 8000d22:	4b39      	ldr	r3, [pc, #228]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	bfb8      	it	lt
 8000d2e:	425b      	neglt	r3, r3
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	461a      	mov	r2, r3
 8000d34:	f997 3000 	ldrsb.w	r3, [r7]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	da03      	bge.n	8000d44 <MPU6050_Calibrate+0x190>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3301      	adds	r3, #1
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	e00f      	b.n	8000d64 <MPU6050_Calibrate+0x1b0>
		else Sensor_Data -> Ax_offset		=	(Sensor_Data -> Ax_offset)	+	(Sensor_Data -> Ax_mean);
 8000d44:	4b30      	ldr	r3, [pc, #192]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	; 0x34
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	4b2e      	ldr	r3, [pc, #184]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	4413      	add	r3, r2
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	4b2a      	ldr	r3, [pc, #168]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	b212      	sxth	r2, r2
 8000d62:	869a      	strh	r2, [r3, #52]	; 0x34

		if (abs(Sensor_Data -> Ay_mean)<accl_tolerance) calibrated++;
 8000d64:	4b28      	ldr	r3, [pc, #160]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	bfb8      	it	lt
 8000d70:	425b      	neglt	r3, r3
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	461a      	mov	r2, r3
 8000d76:	f997 3000 	ldrsb.w	r3, [r7]
 8000d7a:	429a      	cmp	r2, r3
 8000d7c:	da03      	bge.n	8000d86 <MPU6050_Calibrate+0x1d2>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	3301      	adds	r3, #1
 8000d82:	607b      	str	r3, [r7, #4]
 8000d84:	e00f      	b.n	8000da6 <MPU6050_Calibrate+0x1f2>
		else Sensor_Data -> Ay_offset		=	(Sensor_Data -> Ay_offset)	+	(Sensor_Data -> Ay_mean);
 8000d86:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f9b3 3036 	ldrsh.w	r3, [r3, #54]	; 0x36
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	4413      	add	r3, r2
 8000d9c:	b29a      	uxth	r2, r3
 8000d9e:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	b212      	sxth	r2, r2
 8000da4:	86da      	strh	r2, [r3, #54]	; 0x36

		if ((abs((Sensor_Data -> Az_mean) - gravitation)) <accl_tolerance) calibrated++;
 8000da6:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8000dae:	461a      	mov	r2, r3
 8000db0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000dba:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000dbe:	f997 3000 	ldrsb.w	r3, [r7]
 8000dc2:	429a      	cmp	r2, r3
 8000dc4:	da03      	bge.n	8000dce <MPU6050_Calibrate+0x21a>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	3301      	adds	r3, #1
 8000dca:	607b      	str	r3, [r7, #4]
 8000dcc:	e012      	b.n	8000df4 <MPU6050_Calibrate+0x240>
		else Sensor_Data -> Az_offset		=	(Sensor_Data -> Az_offset)	+	((Sensor_Data -> Az_mean) - gravitation);
 8000dce:	4b0e      	ldr	r3, [pc, #56]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8000dd6:	b29a      	uxth	r2, r3
 8000dd8:	4b0b      	ldr	r3, [pc, #44]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8000de0:	b299      	uxth	r1, r3
 8000de2:	887b      	ldrh	r3, [r7, #2]
 8000de4:	1acb      	subs	r3, r1, r3
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	4413      	add	r3, r2
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <MPU6050_Calibrate+0x254>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	b212      	sxth	r2, r2
 8000df2:	871a      	strh	r2, [r3, #56]	; 0x38
	while(calibrated <= 6){
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	f77f af22 	ble.w	8000c40 <MPU6050_Calibrate+0x8c>

	}
	return MPU6050_Read_OK;
 8000dfc:	2301      	movs	r3, #1
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20002014 	.word	0x20002014
 8000e0c:	08006204 	.word	0x08006204

08000e10 <MPU6050_Detect_Movement>:
//int16_t HighMovement, LowMovement;
//int16_t Threshold = 1000;
//int16_t Az_mean;
//Acc_z_mean = MPU6050_Calculate_Mean(Sensor_Data->Accl_Z);

MPU6050_STATUS MPU6050_Detect_Movement(){
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b088      	sub	sp, #32
 8000e14:	af04      	add	r7, sp, #16

	MeanValue_x = 0;
 8000e16:	4b9f      	ldr	r3, [pc, #636]	; (8001094 <MPU6050_Detect_Movement+0x284>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	601a      	str	r2, [r3, #0]
	MeanValue_z = 0;
 8000e1c:	4b9e      	ldr	r3, [pc, #632]	; (8001098 <MPU6050_Detect_Movement+0x288>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
	MovementUP = false;
 8000e22:	4b9e      	ldr	r3, [pc, #632]	; (800109c <MPU6050_Detect_Movement+0x28c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	701a      	strb	r2, [r3, #0]
	MovementDOWN = false;
 8000e28:	4b9d      	ldr	r3, [pc, #628]	; (80010a0 <MPU6050_Detect_Movement+0x290>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
	MovementLEFT = false;
 8000e2e:	4b9d      	ldr	r3, [pc, #628]	; (80010a4 <MPU6050_Detect_Movement+0x294>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
	MovementRIGHT = false;
 8000e34:	4b9c      	ldr	r3, [pc, #624]	; (80010a8 <MPU6050_Detect_Movement+0x298>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	701a      	strb	r2, [r3, #0]

	// BEGIN: Of CounterClause

	if(MoveDetected) {
 8000e3a:	4b9c      	ldr	r3, [pc, #624]	; (80010ac <MPU6050_Detect_Movement+0x29c>)
 8000e3c:	781b      	ldrb	r3, [r3, #0]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d004      	beq.n	8000e4c <MPU6050_Detect_Movement+0x3c>

		BreakCounter++;
 8000e42:	4b9b      	ldr	r3, [pc, #620]	; (80010b0 <MPU6050_Detect_Movement+0x2a0>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	3301      	adds	r3, #1
 8000e48:	4a99      	ldr	r2, [pc, #612]	; (80010b0 <MPU6050_Detect_Movement+0x2a0>)
 8000e4a:	6013      	str	r3, [r2, #0]
	}
	if(BreakCounter == Pause) {
 8000e4c:	4b98      	ldr	r3, [pc, #608]	; (80010b0 <MPU6050_Detect_Movement+0x2a0>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b98      	ldr	r3, [pc, #608]	; (80010b4 <MPU6050_Detect_Movement+0x2a4>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d105      	bne.n	8000e64 <MPU6050_Detect_Movement+0x54>

		BreakCounter = 0;
 8000e58:	4b95      	ldr	r3, [pc, #596]	; (80010b0 <MPU6050_Detect_Movement+0x2a0>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
		MoveDetected = false;
 8000e5e:	4b93      	ldr	r3, [pc, #588]	; (80010ac <MPU6050_Detect_Movement+0x29c>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	701a      	strb	r2, [r3, #0]
	}
	if(!MoveDetected) {
 8000e64:	4b91      	ldr	r3, [pc, #580]	; (80010ac <MPU6050_Detect_Movement+0x29c>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	f083 0301 	eor.w	r3, r3, #1
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 810b 	beq.w	800108a <MPU6050_Detect_Movement+0x27a>


		for(int i = 0; i < BLOCKSIZE; i++) {
 8000e74:	2300      	movs	r3, #0
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	e04f      	b.n	8000f1a <MPU6050_Detect_Movement+0x10a>

			// Read 2000 * 6Bytes (2byte per axis) starting from ACCL_XOUT_H register
			if (HAL_I2C_Mem_Read (MPU6050_hi2c, MPU6050_ADDR, MPU6050_ACCL_XOUT_H_REG, 1, Buffer_RawData, RAWBLOCKSIZE, 1000) != HAL_OK ){
 8000e7a:	4b8f      	ldr	r3, [pc, #572]	; (80010b8 <MPU6050_Detect_Movement+0x2a8>)
 8000e7c:	6818      	ldr	r0, [r3, #0]
 8000e7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e82:	9302      	str	r3, [sp, #8]
 8000e84:	2306      	movs	r3, #6
 8000e86:	9301      	str	r3, [sp, #4]
 8000e88:	4b8c      	ldr	r3, [pc, #560]	; (80010bc <MPU6050_Detect_Movement+0x2ac>)
 8000e8a:	9300      	str	r3, [sp, #0]
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	223b      	movs	r2, #59	; 0x3b
 8000e90:	21d0      	movs	r1, #208	; 0xd0
 8000e92:	f001 feab 	bl	8002bec <HAL_I2C_Mem_Read>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MPU6050_Detect_Movement+0x90>
				return MPU6050_Status_Error;
 8000e9c:	2302      	movs	r3, #2
 8000e9e:	e0f5      	b.n	800108c <MPU6050_Detect_Movement+0x27c>
			}

			Buffer_ProcessedData_z[i] = (int16_t)(Buffer_RawData[4]<<8 | Buffer_RawData[5]); // Für die z-Achse
 8000ea0:	4b86      	ldr	r3, [pc, #536]	; (80010bc <MPU6050_Detect_Movement+0x2ac>)
 8000ea2:	791b      	ldrb	r3, [r3, #4]
 8000ea4:	021b      	lsls	r3, r3, #8
 8000ea6:	b21a      	sxth	r2, r3
 8000ea8:	4b84      	ldr	r3, [pc, #528]	; (80010bc <MPU6050_Detect_Movement+0x2ac>)
 8000eaa:	795b      	ldrb	r3, [r3, #5]
 8000eac:	b21b      	sxth	r3, r3
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	b219      	sxth	r1, r3
 8000eb2:	4a83      	ldr	r2, [pc, #524]	; (80010c0 <MPU6050_Detect_Movement+0x2b0>)
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			Buffer_ProcessedData_x[i] = (int16_t)(Buffer_RawData[0]<<8 | Buffer_RawData[1]); // Für die x-Achse
 8000eba:	4b80      	ldr	r3, [pc, #512]	; (80010bc <MPU6050_Detect_Movement+0x2ac>)
 8000ebc:	781b      	ldrb	r3, [r3, #0]
 8000ebe:	021b      	lsls	r3, r3, #8
 8000ec0:	b21a      	sxth	r2, r3
 8000ec2:	4b7e      	ldr	r3, [pc, #504]	; (80010bc <MPU6050_Detect_Movement+0x2ac>)
 8000ec4:	785b      	ldrb	r3, [r3, #1]
 8000ec6:	b21b      	sxth	r3, r3
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	b219      	sxth	r1, r3
 8000ecc:	4a7d      	ldr	r2, [pc, #500]	; (80010c4 <MPU6050_Detect_Movement+0x2b4>)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]


			debug_x = Buffer_ProcessedData_x[i];
 8000ed4:	4a7b      	ldr	r2, [pc, #492]	; (80010c4 <MPU6050_Detect_Movement+0x2b4>)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8000edc:	4b7a      	ldr	r3, [pc, #488]	; (80010c8 <MPU6050_Detect_Movement+0x2b8>)
 8000ede:	801a      	strh	r2, [r3, #0]
			debug_z = Buffer_ProcessedData_z[i];
 8000ee0:	4a77      	ldr	r2, [pc, #476]	; (80010c0 <MPU6050_Detect_Movement+0x2b0>)
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	f932 2013 	ldrsh.w	r2, [r2, r3, lsl #1]
 8000ee8:	4b78      	ldr	r3, [pc, #480]	; (80010cc <MPU6050_Detect_Movement+0x2bc>)
 8000eea:	801a      	strh	r2, [r3, #0]

			//		printf("Acc_x: %i\r\n", debug_x);

			MeanValue_x += (int32_t)Buffer_ProcessedData_x[i];
 8000eec:	4a75      	ldr	r2, [pc, #468]	; (80010c4 <MPU6050_Detect_Movement+0x2b4>)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	4b67      	ldr	r3, [pc, #412]	; (8001094 <MPU6050_Detect_Movement+0x284>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4413      	add	r3, r2
 8000efc:	4a65      	ldr	r2, [pc, #404]	; (8001094 <MPU6050_Detect_Movement+0x284>)
 8000efe:	6013      	str	r3, [r2, #0]
			MeanValue_z += (int32_t)Buffer_ProcessedData_z[i];
 8000f00:	4a6f      	ldr	r2, [pc, #444]	; (80010c0 <MPU6050_Detect_Movement+0x2b0>)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b63      	ldr	r3, [pc, #396]	; (8001098 <MPU6050_Detect_Movement+0x288>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a61      	ldr	r2, [pc, #388]	; (8001098 <MPU6050_Detect_Movement+0x288>)
 8000f12:	6013      	str	r3, [r2, #0]
		for(int i = 0; i < BLOCKSIZE; i++) {
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3301      	adds	r3, #1
 8000f18:	60fb      	str	r3, [r7, #12]
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000f20:	dbab      	blt.n	8000e7a <MPU6050_Detect_Movement+0x6a>
		}

		MeanValue_x = MeanValue_x / (int32_t)BLOCKSIZE;
 8000f22:	4b5c      	ldr	r3, [pc, #368]	; (8001094 <MPU6050_Detect_Movement+0x284>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a6a      	ldr	r2, [pc, #424]	; (80010d0 <MPU6050_Detect_Movement+0x2c0>)
 8000f28:	fb82 1203 	smull	r1, r2, r2, r3
 8000f2c:	11d2      	asrs	r2, r2, #7
 8000f2e:	17db      	asrs	r3, r3, #31
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	4a58      	ldr	r2, [pc, #352]	; (8001094 <MPU6050_Detect_Movement+0x284>)
 8000f34:	6013      	str	r3, [r2, #0]
		MeanValue_z = MeanValue_z / (int32_t)BLOCKSIZE;
 8000f36:	4b58      	ldr	r3, [pc, #352]	; (8001098 <MPU6050_Detect_Movement+0x288>)
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	4a65      	ldr	r2, [pc, #404]	; (80010d0 <MPU6050_Detect_Movement+0x2c0>)
 8000f3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000f40:	11d2      	asrs	r2, r2, #7
 8000f42:	17db      	asrs	r3, r3, #31
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	4a54      	ldr	r2, [pc, #336]	; (8001098 <MPU6050_Detect_Movement+0x288>)
 8000f48:	6013      	str	r3, [r2, #0]


//		printf("MEAN: %i\r\n", MeanValue_x);

		for(int i = 0; i < BLOCKSIZE; i++) {
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	e042      	b.n	8000fd6 <MPU6050_Detect_Movement+0x1c6>

			Buffer_ProcessedData_z[i] = Buffer_ProcessedData_z[i] - (int16_t)MeanValue_z;
 8000f50:	4a5b      	ldr	r2, [pc, #364]	; (80010c0 <MPU6050_Detect_Movement+0x2b0>)
 8000f52:	68bb      	ldr	r3, [r7, #8]
 8000f54:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	4b4f      	ldr	r3, [pc, #316]	; (8001098 <MPU6050_Detect_Movement+0x288>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	b29b      	uxth	r3, r3
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	b29b      	uxth	r3, r3
 8000f64:	b219      	sxth	r1, r3
 8000f66:	4a56      	ldr	r2, [pc, #344]	; (80010c0 <MPU6050_Detect_Movement+0x2b0>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if(Buffer_ProcessedData_z[i] > THRESHOLD_Z){
 8000f6e:	4a54      	ldr	r2, [pc, #336]	; (80010c0 <MPU6050_Detect_Movement+0x2b0>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000f76:	f5b3 7f61 	cmp.w	r3, #900	; 0x384
 8000f7a:	dd0d      	ble.n	8000f98 <MPU6050_Detect_Movement+0x188>

				MovementUP = true;
 8000f7c:	4b47      	ldr	r3, [pc, #284]	; (800109c <MPU6050_Detect_Movement+0x28c>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
				MoveDetected = true;
 8000f82:	4b4a      	ldr	r3, [pc, #296]	; (80010ac <MPU6050_Detect_Movement+0x29c>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]
				printf("UP: %i\r\n", Buffer_ProcessedData_z[i]);
 8000f88:	4a4d      	ldr	r2, [pc, #308]	; (80010c0 <MPU6050_Detect_Movement+0x2b0>)
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000f90:	4619      	mov	r1, r3
 8000f92:	4850      	ldr	r0, [pc, #320]	; (80010d4 <MPU6050_Detect_Movement+0x2c4>)
 8000f94:	f004 f92e 	bl	80051f4 <iprintf>
			}
			if(Buffer_ProcessedData_z[i] < -THRESHOLD_Z){
 8000f98:	4a49      	ldr	r2, [pc, #292]	; (80010c0 <MPU6050_Detect_Movement+0x2b0>)
 8000f9a:	68bb      	ldr	r3, [r7, #8]
 8000f9c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000fa0:	f513 7f61 	cmn.w	r3, #900	; 0x384
 8000fa4:	da0d      	bge.n	8000fc2 <MPU6050_Detect_Movement+0x1b2>

				MovementDOWN = true;
 8000fa6:	4b3e      	ldr	r3, [pc, #248]	; (80010a0 <MPU6050_Detect_Movement+0x290>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	701a      	strb	r2, [r3, #0]
				MoveDetected = true;
 8000fac:	4b3f      	ldr	r3, [pc, #252]	; (80010ac <MPU6050_Detect_Movement+0x29c>)
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
				printf("DOWN: %i\r\n", Buffer_ProcessedData_z[i]);
 8000fb2:	4a43      	ldr	r2, [pc, #268]	; (80010c0 <MPU6050_Detect_Movement+0x2b0>)
 8000fb4:	68bb      	ldr	r3, [r7, #8]
 8000fb6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4846      	ldr	r0, [pc, #280]	; (80010d8 <MPU6050_Detect_Movement+0x2c8>)
 8000fbe:	f004 f919 	bl	80051f4 <iprintf>
			}

			if(MoveDetected) i = BLOCKSIZE - 1;
 8000fc2:	4b3a      	ldr	r3, [pc, #232]	; (80010ac <MPU6050_Detect_Movement+0x29c>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d002      	beq.n	8000fd0 <MPU6050_Detect_Movement+0x1c0>
 8000fca:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8000fce:	60bb      	str	r3, [r7, #8]
		for(int i = 0; i < BLOCKSIZE; i++) {
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000fdc:	dbb8      	blt.n	8000f50 <MPU6050_Detect_Movement+0x140>
			//} // END: Of CounterClause

		}


		for(int i = 0; i < BLOCKSIZE; i++) {
 8000fde:	2300      	movs	r3, #0
 8000fe0:	607b      	str	r3, [r7, #4]
 8000fe2:	e04e      	b.n	8001082 <MPU6050_Detect_Movement+0x272>

			Buffer_ProcessedData_x[i] = Buffer_ProcessedData_x[i] - (int16_t)MeanValue_x;
 8000fe4:	4a37      	ldr	r2, [pc, #220]	; (80010c4 <MPU6050_Detect_Movement+0x2b4>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	4b29      	ldr	r3, [pc, #164]	; (8001094 <MPU6050_Detect_Movement+0x284>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	b219      	sxth	r1, r3
 8000ffa:	4a32      	ldr	r2, [pc, #200]	; (80010c4 <MPU6050_Detect_Movement+0x2b4>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

			if(Buffer_ProcessedData_x[i] > THRESHOLD_X && debug_x > THRESHOLD_X ){
 8001002:	4a30      	ldr	r2, [pc, #192]	; (80010c4 <MPU6050_Detect_Movement+0x2b4>)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800100a:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800100e:	dd13      	ble.n	8001038 <MPU6050_Detect_Movement+0x228>
 8001010:	4b2d      	ldr	r3, [pc, #180]	; (80010c8 <MPU6050_Detect_Movement+0x2b8>)
 8001012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001016:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800101a:	dd0d      	ble.n	8001038 <MPU6050_Detect_Movement+0x228>

				MovementLEFT = true;
 800101c:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MPU6050_Detect_Movement+0x294>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
				MoveDetected = true;
 8001022:	4b22      	ldr	r3, [pc, #136]	; (80010ac <MPU6050_Detect_Movement+0x29c>)
 8001024:	2201      	movs	r2, #1
 8001026:	701a      	strb	r2, [r3, #0]
				printf("LEFT: %i\r\n", Buffer_ProcessedData_x[i]);
 8001028:	4a26      	ldr	r2, [pc, #152]	; (80010c4 <MPU6050_Detect_Movement+0x2b4>)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001030:	4619      	mov	r1, r3
 8001032:	482a      	ldr	r0, [pc, #168]	; (80010dc <MPU6050_Detect_Movement+0x2cc>)
 8001034:	f004 f8de 	bl	80051f4 <iprintf>
			}
			if(Buffer_ProcessedData_x[i] < -THRESHOLD_X && debug_x > - THRESHOLD_X){
 8001038:	4a22      	ldr	r2, [pc, #136]	; (80010c4 <MPU6050_Detect_Movement+0x2b4>)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001040:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 8001044:	da13      	bge.n	800106e <MPU6050_Detect_Movement+0x25e>
 8001046:	4b20      	ldr	r3, [pc, #128]	; (80010c8 <MPU6050_Detect_Movement+0x2b8>)
 8001048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800104c:	f513 7fc8 	cmn.w	r3, #400	; 0x190
 8001050:	dd0d      	ble.n	800106e <MPU6050_Detect_Movement+0x25e>

				MovementDOWN = true;
 8001052:	4b13      	ldr	r3, [pc, #76]	; (80010a0 <MPU6050_Detect_Movement+0x290>)
 8001054:	2201      	movs	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
				MoveDetected = true;
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MPU6050_Detect_Movement+0x29c>)
 800105a:	2201      	movs	r2, #1
 800105c:	701a      	strb	r2, [r3, #0]
				printf("RIGHT: %i\r\n", Buffer_ProcessedData_x[i]);
 800105e:	4a19      	ldr	r2, [pc, #100]	; (80010c4 <MPU6050_Detect_Movement+0x2b4>)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8001066:	4619      	mov	r1, r3
 8001068:	481d      	ldr	r0, [pc, #116]	; (80010e0 <MPU6050_Detect_Movement+0x2d0>)
 800106a:	f004 f8c3 	bl	80051f4 <iprintf>
			}

			if(MoveDetected) i = BLOCKSIZE - 1;
 800106e:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MPU6050_Detect_Movement+0x29c>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <MPU6050_Detect_Movement+0x26c>
 8001076:	f240 73cf 	movw	r3, #1999	; 0x7cf
 800107a:	607b      	str	r3, [r7, #4]
		for(int i = 0; i < BLOCKSIZE; i++) {
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3301      	adds	r3, #1
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001088:	dbac      	blt.n	8000fe4 <MPU6050_Detect_Movement+0x1d4>



	// MISSING: Write into synchbuffer for sending to other uC

	return MPU6050_Status_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	20002004 	.word	0x20002004
 8001098:	20001048 	.word	0x20001048
 800109c:	20001050 	.word	0x20001050
 80010a0:	20002018 	.word	0x20002018
 80010a4:	20002019 	.word	0x20002019
 80010a8:	20001054 	.word	0x20001054
 80010ac:	2000105a 	.word	0x2000105a
 80010b0:	2000104c 	.word	0x2000104c
 80010b4:	20001040 	.word	0x20001040
 80010b8:	2000201c 	.word	0x2000201c
 80010bc:	20001ffc 	.word	0x20001ffc
 80010c0:	2000105c 	.word	0x2000105c
 80010c4:	2000009c 	.word	0x2000009c
 80010c8:	20001052 	.word	0x20001052
 80010cc:	20001044 	.word	0x20001044
 80010d0:	10624dd3 	.word	0x10624dd3
 80010d4:	08006218 	.word	0x08006218
 80010d8:	08006224 	.word	0x08006224
 80010dc:	08006230 	.word	0x08006230
 80010e0:	0800623c 	.word	0x0800623c

080010e4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b09c      	sub	sp, #112	; 0x70
 80010e8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80010ea:	f000 fc95 	bl	8001a18 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80010ee:	f000 f879 	bl	80011e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80010f2:	f000 f997 	bl	8001424 <MX_GPIO_Init>
	MX_DMA_Init();
 80010f6:	f000 f96d 	bl	80013d4 <MX_DMA_Init>
	MX_SPI1_Init();
 80010fa:	f000 f90f 	bl	800131c <MX_SPI1_Init>
	MX_USART2_UART_Init();
 80010fe:	f000 f93f 	bl	8001380 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8001102:	f000 f8dd 	bl	80012c0 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	for (int i =0;i<BUFFERSIZE;i++){
 8001106:	2300      	movs	r3, #0
 8001108:	667b      	str	r3, [r7, #100]	; 0x64
 800110a:	e00c      	b.n	8001126 <main+0x42>
		pTxData[i] = 0;
 800110c:	4a2d      	ldr	r2, [pc, #180]	; (80011c4 <main+0xe0>)
 800110e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001110:	4413      	add	r3, r2
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
		pRxData[i] = 0;
 8001116:	4a2c      	ldr	r2, [pc, #176]	; (80011c8 <main+0xe4>)
 8001118:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800111a:	4413      	add	r3, r2
 800111c:	2200      	movs	r2, #0
 800111e:	701a      	strb	r2, [r3, #0]
	for (int i =0;i<BUFFERSIZE;i++){
 8001120:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001122:	3301      	adds	r3, #1
 8001124:	667b      	str	r3, [r7, #100]	; 0x64
 8001126:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001128:	2b07      	cmp	r3, #7
 800112a:	d9ef      	bls.n	800110c <main+0x28>
	}

	//Gyros Init
	MPU6050_Data gyro_data;
	MPU6050_STATUS gyro_status = MPU6050_init(&hi2c1, &gyro_data, MPU6050_ACCL_16G, MPU6050_GYRO_2000deg, MPU6050_SampleRate_2KHz);
 800112c:	1d39      	adds	r1, r7, #4
 800112e:	2303      	movs	r3, #3
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2303      	movs	r3, #3
 8001134:	2203      	movs	r2, #3
 8001136:	4825      	ldr	r0, [pc, #148]	; (80011cc <main+0xe8>)
 8001138:	f7ff fa36 	bl	80005a8 <MPU6050_init>
 800113c:	4603      	mov	r3, r0
 800113e:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
	if (gyro_status != MPU6050_Status_OK){
 8001142:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001146:	2b00      	cmp	r3, #0
 8001148:	d002      	beq.n	8001150 <main+0x6c>
		SyncBuffer.gyro_initilized = false;
 800114a:	4b21      	ldr	r3, [pc, #132]	; (80011d0 <main+0xec>)
 800114c:	2200      	movs	r2, #0
 800114e:	70da      	strb	r2, [r3, #3]
	}
	if ( MPU6050_Calibrate(&gyro_data) == MPU6050_Read_OK){
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff fd2e 	bl	8000bb4 <MPU6050_Calibrate>
 8001158:	4603      	mov	r3, r0
 800115a:	2b01      	cmp	r3, #1
 800115c:	d106      	bne.n	800116c <main+0x88>
		printf("MPU6050 calibrated\r\n");
 800115e:	481d      	ldr	r0, [pc, #116]	; (80011d4 <main+0xf0>)
 8001160:	f004 f8ce 	bl	8005300 <puts>
		SyncBuffer.gyro_initilized =true;
 8001164:	4b1a      	ldr	r3, [pc, #104]	; (80011d0 <main+0xec>)
 8001166:	2201      	movs	r2, #1
 8001168:	70da      	strb	r2, [r3, #3]
 800116a:	e005      	b.n	8001178 <main+0x94>
	}

	else{
		SyncBuffer.gyro_initilized = false;
 800116c:	4b18      	ldr	r3, [pc, #96]	; (80011d0 <main+0xec>)
 800116e:	2200      	movs	r2, #0
 8001170:	70da      	strb	r2, [r3, #3]
		printf("MPU6050 Error\r\n");
 8001172:	4819      	ldr	r0, [pc, #100]	; (80011d8 <main+0xf4>)
 8001174:	f004 f8c4 	bl	8005300 <puts>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	HAL_SPI_TransmitReceive_DMA(&hspi1, pTxData, pRxData, BUFFERSIZE);
 8001178:	2308      	movs	r3, #8
 800117a:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <main+0xe4>)
 800117c:	4911      	ldr	r1, [pc, #68]	; (80011c4 <main+0xe0>)
 800117e:	4817      	ldr	r0, [pc, #92]	; (80011dc <main+0xf8>)
 8001180:	f003 f9d8 	bl	8004534 <HAL_SPI_TransmitReceive_DMA>


	while (1){

		if(SyncBuffer.gyro_initilized == true){
 8001184:	4b12      	ldr	r3, [pc, #72]	; (80011d0 <main+0xec>)
 8001186:	78db      	ldrb	r3, [r3, #3]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d10c      	bne.n	80011a6 <main+0xc2>
			//			Acc_y = Sensor_Data->Accl_Y;

//						Acc_z = Sensor_Data->Accl_Z;
//						printf("Ax: %i\r\n", Acc_x);

						MPU6050_Detect_Movement();
 800118c:	f7ff fe40 	bl	8000e10 <MPU6050_Detect_Movement>

			if(MoveDetected){
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <main+0xfc>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d006      	beq.n	80011a6 <main+0xc2>

				HAL_Delay(800);
 8001198:	f44f 7048 	mov.w	r0, #800	; 0x320
 800119c:	f000 fcae 	bl	8001afc <HAL_Delay>
				MoveDetected = false;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <main+0xfc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a6:	b672      	cpsid	i
}
 80011a8:	bf00      	nop
			//		SyncBuffer.tilt_detecded  = MPU6050_detectTilt();
		}


		__disable_irq();
		memcpy((void*)pTxData,(void*)&SyncBuffer, BUFFERSIZE);
 80011aa:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <main+0xe0>)
 80011ac:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <main+0xec>)
 80011ae:	6811      	ldr	r1, [r2, #0]
 80011b0:	6852      	ldr	r2, [r2, #4]
 80011b2:	6019      	str	r1, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 80011b6:	b662      	cpsie	i
}
 80011b8:	bf00      	nop
		__enable_irq();

		HAL_Delay(100);
 80011ba:	2064      	movs	r0, #100	; 0x64
 80011bc:	f000 fc9e 	bl	8001afc <HAL_Delay>
		if(SyncBuffer.gyro_initilized == true){
 80011c0:	e7e0      	b.n	8001184 <main+0xa0>
 80011c2:	bf00      	nop
 80011c4:	20002028 	.word	0x20002028
 80011c8:	20002008 	.word	0x20002008
 80011cc:	20002030 	.word	0x20002030
 80011d0:	20002020 	.word	0x20002020
 80011d4:	080062cc 	.word	0x080062cc
 80011d8:	080062e0 	.word	0x080062e0
 80011dc:	20002084 	.word	0x20002084
 80011e0:	2000105a 	.word	0x2000105a

080011e4 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b094      	sub	sp, #80	; 0x50
 80011e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 031c 	add.w	r3, r7, #28
 80011ee:	2234      	movs	r2, #52	; 0x34
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f003 fff6 	bl	80051e4 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	4b2a      	ldr	r3, [pc, #168]	; (80012b8 <SystemClock_Config+0xd4>)
 800120e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001210:	4a29      	ldr	r2, [pc, #164]	; (80012b8 <SystemClock_Config+0xd4>)
 8001212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001216:	6413      	str	r3, [r2, #64]	; 0x40
 8001218:	4b27      	ldr	r3, [pc, #156]	; (80012b8 <SystemClock_Config+0xd4>)
 800121a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001220:	607b      	str	r3, [r7, #4]
 8001222:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001224:	2300      	movs	r3, #0
 8001226:	603b      	str	r3, [r7, #0]
 8001228:	4b24      	ldr	r3, [pc, #144]	; (80012bc <SystemClock_Config+0xd8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001230:	4a22      	ldr	r2, [pc, #136]	; (80012bc <SystemClock_Config+0xd8>)
 8001232:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001236:	6013      	str	r3, [r2, #0]
 8001238:	4b20      	ldr	r3, [pc, #128]	; (80012bc <SystemClock_Config+0xd8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001240:	603b      	str	r3, [r7, #0]
 8001242:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001244:	2302      	movs	r3, #2
 8001246:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001248:	2301      	movs	r3, #1
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800124c:	2310      	movs	r3, #16
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001250:	2302      	movs	r3, #2
 8001252:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001254:	2300      	movs	r3, #0
 8001256:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 16;
 8001258:	2310      	movs	r3, #16
 800125a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 336;
 800125c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001260:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001262:	2304      	movs	r3, #4
 8001264:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001266:	2302      	movs	r3, #2
 8001268:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 800126a:	2302      	movs	r3, #2
 800126c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	4618      	mov	r0, r3
 8001274:	f002 fe36 	bl	8003ee4 <HAL_RCC_OscConfig>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 800127e:	f000 f95d 	bl	800153c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001282:	230f      	movs	r3, #15
 8001284:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001286:	2302      	movs	r3, #2
 8001288:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800128e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001292:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001298:	f107 0308 	add.w	r3, r7, #8
 800129c:	2102      	movs	r1, #2
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 fb54 	bl	800394c <HAL_RCC_ClockConfig>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <SystemClock_Config+0xca>
	{
		Error_Handler();
 80012aa:	f000 f947 	bl	800153c <Error_Handler>
	}
}
 80012ae:	bf00      	nop
 80012b0:	3750      	adds	r7, #80	; 0x50
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40007000 	.word	0x40007000

080012c0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80012c4:	4b12      	ldr	r3, [pc, #72]	; (8001310 <MX_I2C1_Init+0x50>)
 80012c6:	4a13      	ldr	r2, [pc, #76]	; (8001314 <MX_I2C1_Init+0x54>)
 80012c8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_I2C1_Init+0x50>)
 80012cc:	4a12      	ldr	r2, [pc, #72]	; (8001318 <MX_I2C1_Init+0x58>)
 80012ce:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012d0:	4b0f      	ldr	r3, [pc, #60]	; (8001310 <MX_I2C1_Init+0x50>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80012d6:	4b0e      	ldr	r3, [pc, #56]	; (8001310 <MX_I2C1_Init+0x50>)
 80012d8:	2200      	movs	r2, #0
 80012da:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012dc:	4b0c      	ldr	r3, [pc, #48]	; (8001310 <MX_I2C1_Init+0x50>)
 80012de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012e2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012e4:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <MX_I2C1_Init+0x50>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80012ea:	4b09      	ldr	r3, [pc, #36]	; (8001310 <MX_I2C1_Init+0x50>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012f0:	4b07      	ldr	r3, [pc, #28]	; (8001310 <MX_I2C1_Init+0x50>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012f6:	4b06      	ldr	r3, [pc, #24]	; (8001310 <MX_I2C1_Init+0x50>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012fc:	4804      	ldr	r0, [pc, #16]	; (8001310 <MX_I2C1_Init+0x50>)
 80012fe:	f001 fa37 	bl	8002770 <HAL_I2C_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001308:	f000 f918 	bl	800153c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20002030 	.word	0x20002030
 8001314:	40005400 	.word	0x40005400
 8001318:	00061a80 	.word	0x00061a80

0800131c <MX_SPI1_Init>:
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001320:	4b15      	ldr	r3, [pc, #84]	; (8001378 <MX_SPI1_Init+0x5c>)
 8001322:	4a16      	ldr	r2, [pc, #88]	; (800137c <MX_SPI1_Init+0x60>)
 8001324:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001326:	4b14      	ldr	r3, [pc, #80]	; (8001378 <MX_SPI1_Init+0x5c>)
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800132c:	4b12      	ldr	r3, [pc, #72]	; (8001378 <MX_SPI1_Init+0x5c>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001332:	4b11      	ldr	r3, [pc, #68]	; (8001378 <MX_SPI1_Init+0x5c>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <MX_SPI1_Init+0x5c>)
 800133a:	2202      	movs	r2, #2
 800133c:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800133e:	4b0e      	ldr	r3, [pc, #56]	; (8001378 <MX_SPI1_Init+0x5c>)
 8001340:	2200      	movs	r2, #0
 8001342:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001344:	4b0c      	ldr	r3, [pc, #48]	; (8001378 <MX_SPI1_Init+0x5c>)
 8001346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800134a:	619a      	str	r2, [r3, #24]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800134c:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <MX_SPI1_Init+0x5c>)
 800134e:	2200      	movs	r2, #0
 8001350:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <MX_SPI1_Init+0x5c>)
 8001354:	2200      	movs	r2, #0
 8001356:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <MX_SPI1_Init+0x5c>)
 800135a:	2200      	movs	r2, #0
 800135c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 800135e:	4b06      	ldr	r3, [pc, #24]	; (8001378 <MX_SPI1_Init+0x5c>)
 8001360:	220a      	movs	r2, #10
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001364:	4804      	ldr	r0, [pc, #16]	; (8001378 <MX_SPI1_Init+0x5c>)
 8001366:	f003 f85b 	bl	8004420 <HAL_SPI_Init>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <MX_SPI1_Init+0x58>
	{
		Error_Handler();
 8001370:	f000 f8e4 	bl	800153c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001374:	bf00      	nop
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20002084 	.word	0x20002084
 800137c:	40013000 	.word	0x40013000

08001380 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 8001386:	4a12      	ldr	r2, [pc, #72]	; (80013d0 <MX_USART2_UART_Init+0x50>)
 8001388:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800138a:	4b10      	ldr	r3, [pc, #64]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 800138c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001390:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001392:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 800139a:	2200      	movs	r2, #0
 800139c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800139e:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 80013a6:	220c      	movs	r2, #12
 80013a8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013aa:	4b08      	ldr	r3, [pc, #32]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80013b6:	4805      	ldr	r0, [pc, #20]	; (80013cc <MX_USART2_UART_Init+0x4c>)
 80013b8:	f003 fbf8 	bl	8004bac <HAL_UART_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80013c2:	f000 f8bb 	bl	800153c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	200020dc 	.word	0x200020dc
 80013d0:	40004400 	.word	0x40004400

080013d4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <MX_DMA_Init+0x4c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <MX_DMA_Init+0x4c>)
 80013e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <MX_DMA_Init+0x4c>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	2038      	movs	r0, #56	; 0x38
 80013fc:	f000 fc7d 	bl	8001cfa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001400:	2038      	movs	r0, #56	; 0x38
 8001402:	f000 fc96 	bl	8001d32 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	2100      	movs	r1, #0
 800140a:	203b      	movs	r0, #59	; 0x3b
 800140c:	f000 fc75 	bl	8001cfa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001410:	203b      	movs	r0, #59	; 0x3b
 8001412:	f000 fc8e 	bl	8001d32 <HAL_NVIC_EnableIRQ>

}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40023800 	.word	0x40023800

08001424 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08a      	sub	sp, #40	; 0x28
 8001428:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142a:	f107 0314 	add.w	r3, r7, #20
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]
 8001434:	609a      	str	r2, [r3, #8]
 8001436:	60da      	str	r2, [r3, #12]
 8001438:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	4b23      	ldr	r3, [pc, #140]	; (80014cc <MX_GPIO_Init+0xa8>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a22      	ldr	r2, [pc, #136]	; (80014cc <MX_GPIO_Init+0xa8>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b20      	ldr	r3, [pc, #128]	; (80014cc <MX_GPIO_Init+0xa8>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	613b      	str	r3, [r7, #16]
 8001454:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	4b1c      	ldr	r3, [pc, #112]	; (80014cc <MX_GPIO_Init+0xa8>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a1b      	ldr	r2, [pc, #108]	; (80014cc <MX_GPIO_Init+0xa8>)
 8001460:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b19      	ldr	r3, [pc, #100]	; (80014cc <MX_GPIO_Init+0xa8>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <MX_GPIO_Init+0xa8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a14      	ldr	r2, [pc, #80]	; (80014cc <MX_GPIO_Init+0xa8>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b12      	ldr	r3, [pc, #72]	; (80014cc <MX_GPIO_Init+0xa8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	607b      	str	r3, [r7, #4]
 8001492:	4b0e      	ldr	r3, [pc, #56]	; (80014cc <MX_GPIO_Init+0xa8>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a0d      	ldr	r2, [pc, #52]	; (80014cc <MX_GPIO_Init+0xa8>)
 8001498:	f043 0302 	orr.w	r3, r3, #2
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_GPIO_Init+0xa8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0302 	and.w	r3, r3, #2
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80014aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014b0:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <MX_GPIO_Init+0xac>)
 80014b2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b4:	2300      	movs	r3, #0
 80014b6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014b8:	f107 0314 	add.w	r3, r7, #20
 80014bc:	4619      	mov	r1, r3
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_GPIO_Init+0xb0>)
 80014c0:	f000 ffc2 	bl	8002448 <HAL_GPIO_Init>

}
 80014c4:	bf00      	nop
 80014c6:	3728      	adds	r7, #40	; 0x28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	40023800 	.word	0x40023800
 80014d0:	10210000 	.word	0x10210000
 80014d4:	40020800 	.word	0x40020800

080014d8 <__io_putchar>:

/* USER CODE BEGIN 4 */
//printf()
int __io_putchar(int ch)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
	uint8_t c[1];
	c[0] = ch & 0x00FF;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	733b      	strb	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, &*c, 1, 10);
 80014e6:	f107 010c 	add.w	r1, r7, #12
 80014ea:	230a      	movs	r3, #10
 80014ec:	2201      	movs	r2, #1
 80014ee:	4804      	ldr	r0, [pc, #16]	; (8001500 <__io_putchar+0x28>)
 80014f0:	f003 fba9 	bl	8004c46 <HAL_UART_Transmit>
	return ch;
 80014f4:	687b      	ldr	r3, [r7, #4]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	200020dc 	.word	0x200020dc

08001504 <_write>:

int _write(int file,char *ptr, int len)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	60f8      	str	r0, [r7, #12]
 800150c:	60b9      	str	r1, [r7, #8]
 800150e:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for(DataIdx= 0; DataIdx< len; DataIdx++)
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
 8001514:	e009      	b.n	800152a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	1c5a      	adds	r2, r3, #1
 800151a:	60ba      	str	r2, [r7, #8]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff ffda 	bl	80014d8 <__io_putchar>
	for(DataIdx= 0; DataIdx< len; DataIdx++)
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	3301      	adds	r3, #1
 8001528:	617b      	str	r3, [r7, #20]
 800152a:	697a      	ldr	r2, [r7, #20]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	429a      	cmp	r2, r3
 8001530:	dbf1      	blt.n	8001516 <_write+0x12>
	}
	return len;
 8001532:	687b      	ldr	r3, [r7, #4]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3718      	adds	r7, #24
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001540:	b672      	cpsid	i
}
 8001542:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001544:	e7fe      	b.n	8001544 <Error_Handler+0x8>
	...

08001548 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <HAL_MspInit+0x4c>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001556:	4a0f      	ldr	r2, [pc, #60]	; (8001594 <HAL_MspInit+0x4c>)
 8001558:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800155c:	6453      	str	r3, [r2, #68]	; 0x44
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <HAL_MspInit+0x4c>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001562:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_MspInit+0x4c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	4a08      	ldr	r2, [pc, #32]	; (8001594 <HAL_MspInit+0x4c>)
 8001574:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001578:	6413      	str	r3, [r2, #64]	; 0x40
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_MspInit+0x4c>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001586:	2007      	movs	r0, #7
 8001588:	f000 fbac 	bl	8001ce4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158c:	bf00      	nop
 800158e:	3708      	adds	r7, #8
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40023800 	.word	0x40023800

08001598 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a19      	ldr	r2, [pc, #100]	; (800161c <HAL_I2C_MspInit+0x84>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d12c      	bne.n	8001614 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b18      	ldr	r3, [pc, #96]	; (8001620 <HAL_I2C_MspInit+0x88>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_I2C_MspInit+0x88>)
 80015c4:	f043 0302 	orr.w	r3, r3, #2
 80015c8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_I2C_MspInit+0x88>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	f003 0302 	and.w	r3, r3, #2
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80015dc:	2312      	movs	r3, #18
 80015de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e4:	2303      	movs	r3, #3
 80015e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015e8:	2304      	movs	r3, #4
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ec:	f107 0314 	add.w	r3, r7, #20
 80015f0:	4619      	mov	r1, r3
 80015f2:	480c      	ldr	r0, [pc, #48]	; (8001624 <HAL_I2C_MspInit+0x8c>)
 80015f4:	f000 ff28 	bl	8002448 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015f8:	2300      	movs	r3, #0
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_I2C_MspInit+0x88>)
 80015fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001600:	4a07      	ldr	r2, [pc, #28]	; (8001620 <HAL_I2C_MspInit+0x88>)
 8001602:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001606:	6413      	str	r3, [r2, #64]	; 0x40
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <HAL_I2C_MspInit+0x88>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	; 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40005400 	.word	0x40005400
 8001620:	40023800 	.word	0x40023800
 8001624:	40020400 	.word	0x40020400

08001628 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	; 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001630:	f107 0314 	add.w	r3, r7, #20
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]
 800163e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a48      	ldr	r2, [pc, #288]	; (8001768 <HAL_SPI_MspInit+0x140>)
 8001646:	4293      	cmp	r3, r2
 8001648:	f040 808a 	bne.w	8001760 <HAL_SPI_MspInit+0x138>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800164c:	2300      	movs	r3, #0
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	4b46      	ldr	r3, [pc, #280]	; (800176c <HAL_SPI_MspInit+0x144>)
 8001652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001654:	4a45      	ldr	r2, [pc, #276]	; (800176c <HAL_SPI_MspInit+0x144>)
 8001656:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800165a:	6453      	str	r3, [r2, #68]	; 0x44
 800165c:	4b43      	ldr	r3, [pc, #268]	; (800176c <HAL_SPI_MspInit+0x144>)
 800165e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001660:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001664:	613b      	str	r3, [r7, #16]
 8001666:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	2300      	movs	r3, #0
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	4b3f      	ldr	r3, [pc, #252]	; (800176c <HAL_SPI_MspInit+0x144>)
 800166e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001670:	4a3e      	ldr	r2, [pc, #248]	; (800176c <HAL_SPI_MspInit+0x144>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6313      	str	r3, [r2, #48]	; 0x30
 8001678:	4b3c      	ldr	r3, [pc, #240]	; (800176c <HAL_SPI_MspInit+0x144>)
 800167a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167c:	f003 0301 	and.w	r3, r3, #1
 8001680:	60fb      	str	r3, [r7, #12]
 8001682:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001684:	23e0      	movs	r3, #224	; 0xe0
 8001686:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001694:	2305      	movs	r3, #5
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4834      	ldr	r0, [pc, #208]	; (8001770 <HAL_SPI_MspInit+0x148>)
 80016a0:	f000 fed2 	bl	8002448 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80016a4:	4b33      	ldr	r3, [pc, #204]	; (8001774 <HAL_SPI_MspInit+0x14c>)
 80016a6:	4a34      	ldr	r2, [pc, #208]	; (8001778 <HAL_SPI_MspInit+0x150>)
 80016a8:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80016aa:	4b32      	ldr	r3, [pc, #200]	; (8001774 <HAL_SPI_MspInit+0x14c>)
 80016ac:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80016b0:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016b2:	4b30      	ldr	r3, [pc, #192]	; (8001774 <HAL_SPI_MspInit+0x14c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b8:	4b2e      	ldr	r3, [pc, #184]	; (8001774 <HAL_SPI_MspInit+0x14c>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016be:	4b2d      	ldr	r3, [pc, #180]	; (8001774 <HAL_SPI_MspInit+0x14c>)
 80016c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016c4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016c6:	4b2b      	ldr	r3, [pc, #172]	; (8001774 <HAL_SPI_MspInit+0x14c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016cc:	4b29      	ldr	r3, [pc, #164]	; (8001774 <HAL_SPI_MspInit+0x14c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80016d2:	4b28      	ldr	r3, [pc, #160]	; (8001774 <HAL_SPI_MspInit+0x14c>)
 80016d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016d8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016da:	4b26      	ldr	r3, [pc, #152]	; (8001774 <HAL_SPI_MspInit+0x14c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016e0:	4b24      	ldr	r3, [pc, #144]	; (8001774 <HAL_SPI_MspInit+0x14c>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80016e6:	4823      	ldr	r0, [pc, #140]	; (8001774 <HAL_SPI_MspInit+0x14c>)
 80016e8:	f000 fb3e 	bl	8001d68 <HAL_DMA_Init>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80016f2:	f7ff ff23 	bl	800153c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a1e      	ldr	r2, [pc, #120]	; (8001774 <HAL_SPI_MspInit+0x14c>)
 80016fa:	64da      	str	r2, [r3, #76]	; 0x4c
 80016fc:	4a1d      	ldr	r2, [pc, #116]	; (8001774 <HAL_SPI_MspInit+0x14c>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001702:	4b1e      	ldr	r3, [pc, #120]	; (800177c <HAL_SPI_MspInit+0x154>)
 8001704:	4a1e      	ldr	r2, [pc, #120]	; (8001780 <HAL_SPI_MspInit+0x158>)
 8001706:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001708:	4b1c      	ldr	r3, [pc, #112]	; (800177c <HAL_SPI_MspInit+0x154>)
 800170a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800170e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001710:	4b1a      	ldr	r3, [pc, #104]	; (800177c <HAL_SPI_MspInit+0x154>)
 8001712:	2240      	movs	r2, #64	; 0x40
 8001714:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001716:	4b19      	ldr	r3, [pc, #100]	; (800177c <HAL_SPI_MspInit+0x154>)
 8001718:	2200      	movs	r2, #0
 800171a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800171c:	4b17      	ldr	r3, [pc, #92]	; (800177c <HAL_SPI_MspInit+0x154>)
 800171e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001722:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001724:	4b15      	ldr	r3, [pc, #84]	; (800177c <HAL_SPI_MspInit+0x154>)
 8001726:	2200      	movs	r2, #0
 8001728:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <HAL_SPI_MspInit+0x154>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_CIRCULAR;
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_SPI_MspInit+0x154>)
 8001732:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001736:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001738:	4b10      	ldr	r3, [pc, #64]	; (800177c <HAL_SPI_MspInit+0x154>)
 800173a:	2200      	movs	r2, #0
 800173c:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800173e:	4b0f      	ldr	r3, [pc, #60]	; (800177c <HAL_SPI_MspInit+0x154>)
 8001740:	2200      	movs	r2, #0
 8001742:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <HAL_SPI_MspInit+0x154>)
 8001746:	f000 fb0f 	bl	8001d68 <HAL_DMA_Init>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <HAL_SPI_MspInit+0x12c>
    {
      Error_Handler();
 8001750:	f7ff fef4 	bl	800153c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	4a09      	ldr	r2, [pc, #36]	; (800177c <HAL_SPI_MspInit+0x154>)
 8001758:	649a      	str	r2, [r3, #72]	; 0x48
 800175a:	4a08      	ldr	r2, [pc, #32]	; (800177c <HAL_SPI_MspInit+0x154>)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001760:	bf00      	nop
 8001762:	3728      	adds	r7, #40	; 0x28
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	40013000 	.word	0x40013000
 800176c:	40023800 	.word	0x40023800
 8001770:	40020000 	.word	0x40020000
 8001774:	20002120 	.word	0x20002120
 8001778:	40026410 	.word	0x40026410
 800177c:	20002180 	.word	0x20002180
 8001780:	40026458 	.word	0x40026458

08001784 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b08a      	sub	sp, #40	; 0x28
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800178c:	f107 0314 	add.w	r3, r7, #20
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	609a      	str	r2, [r3, #8]
 8001798:	60da      	str	r2, [r3, #12]
 800179a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a19      	ldr	r2, [pc, #100]	; (8001808 <HAL_UART_MspInit+0x84>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d12b      	bne.n	80017fe <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	613b      	str	r3, [r7, #16]
 80017aa:	4b18      	ldr	r3, [pc, #96]	; (800180c <HAL_UART_MspInit+0x88>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ae:	4a17      	ldr	r2, [pc, #92]	; (800180c <HAL_UART_MspInit+0x88>)
 80017b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b4:	6413      	str	r3, [r2, #64]	; 0x40
 80017b6:	4b15      	ldr	r3, [pc, #84]	; (800180c <HAL_UART_MspInit+0x88>)
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
 80017c6:	4b11      	ldr	r3, [pc, #68]	; (800180c <HAL_UART_MspInit+0x88>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ca:	4a10      	ldr	r2, [pc, #64]	; (800180c <HAL_UART_MspInit+0x88>)
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	6313      	str	r3, [r2, #48]	; 0x30
 80017d2:	4b0e      	ldr	r3, [pc, #56]	; (800180c <HAL_UART_MspInit+0x88>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	f003 0301 	and.w	r3, r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017de:	230c      	movs	r3, #12
 80017e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e2:	2302      	movs	r3, #2
 80017e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ea:	2303      	movs	r3, #3
 80017ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017ee:	2307      	movs	r3, #7
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	4805      	ldr	r0, [pc, #20]	; (8001810 <HAL_UART_MspInit+0x8c>)
 80017fa:	f000 fe25 	bl	8002448 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017fe:	bf00      	nop
 8001800:	3728      	adds	r7, #40	; 0x28
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	40004400 	.word	0x40004400
 800180c:	40023800 	.word	0x40023800
 8001810:	40020000 	.word	0x40020000

08001814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <NMI_Handler+0x4>

0800181a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800181e:	e7fe      	b.n	800181e <HardFault_Handler+0x4>

08001820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001824:	e7fe      	b.n	8001824 <MemManage_Handler+0x4>

08001826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <BusFault_Handler+0x4>

0800182c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <UsageFault_Handler+0x4>

08001832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr

08001840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800184e:	b480      	push	{r7}
 8001850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001852:	bf00      	nop
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr

0800185c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001860:	f000 f92c 	bl	8001abc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}

08001868 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800186c:	4802      	ldr	r0, [pc, #8]	; (8001878 <DMA2_Stream0_IRQHandler+0x10>)
 800186e:	f000 fb81 	bl	8001f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20002120 	.word	0x20002120

0800187c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001880:	4802      	ldr	r0, [pc, #8]	; (800188c <DMA2_Stream3_IRQHandler+0x10>)
 8001882:	f000 fb77 	bl	8001f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001886:	bf00      	nop
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	20002180 	.word	0x20002180

08001890 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
 80018a0:	e00a      	b.n	80018b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80018a2:	f3af 8000 	nop.w
 80018a6:	4601      	mov	r1, r0
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	60ba      	str	r2, [r7, #8]
 80018ae:	b2ca      	uxtb	r2, r1
 80018b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3301      	adds	r3, #1
 80018b6:	617b      	str	r3, [r7, #20]
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	429a      	cmp	r2, r3
 80018be:	dbf0      	blt.n	80018a2 <_read+0x12>
	}

return len;
 80018c0:	687b      	ldr	r3, [r7, #4]
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3718      	adds	r7, #24
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <_close>:
	}
	return len;
}

int _close(int file)
{
 80018ca:	b480      	push	{r7}
 80018cc:	b083      	sub	sp, #12
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
	return -1;
 80018d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018e2:	b480      	push	{r7}
 80018e4:	b083      	sub	sp, #12
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80018ec:	683b      	ldr	r3, [r7, #0]
 80018ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018f2:	605a      	str	r2, [r3, #4]
	return 0;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr

08001902 <_isatty>:

int _isatty(int file)
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
	return 1;
 800190a:	2301      	movs	r3, #1
}
 800190c:	4618      	mov	r0, r3
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr

08001918 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	60f8      	str	r0, [r7, #12]
 8001920:	60b9      	str	r1, [r7, #8]
 8001922:	607a      	str	r2, [r7, #4]
	return 0;
 8001924:	2300      	movs	r3, #0
}
 8001926:	4618      	mov	r0, r3
 8001928:	3714      	adds	r7, #20
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
	...

08001934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800193c:	4a14      	ldr	r2, [pc, #80]	; (8001990 <_sbrk+0x5c>)
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <_sbrk+0x60>)
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001948:	4b13      	ldr	r3, [pc, #76]	; (8001998 <_sbrk+0x64>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d102      	bne.n	8001956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <_sbrk+0x64>)
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <_sbrk+0x68>)
 8001954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	429a      	cmp	r2, r3
 8001962:	d207      	bcs.n	8001974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001964:	f003 fc14 	bl	8005190 <__errno>
 8001968:	4603      	mov	r3, r0
 800196a:	220c      	movs	r2, #12
 800196c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800196e:	f04f 33ff 	mov.w	r3, #4294967295
 8001972:	e009      	b.n	8001988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001974:	4b08      	ldr	r3, [pc, #32]	; (8001998 <_sbrk+0x64>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800197a:	4b07      	ldr	r3, [pc, #28]	; (8001998 <_sbrk+0x64>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4413      	add	r3, r2
 8001982:	4a05      	ldr	r2, [pc, #20]	; (8001998 <_sbrk+0x64>)
 8001984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001986:	68fb      	ldr	r3, [r7, #12]
}
 8001988:	4618      	mov	r0, r3
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20020000 	.word	0x20020000
 8001994:	00000400 	.word	0x00000400
 8001998:	2000008c 	.word	0x2000008c
 800199c:	200021f8 	.word	0x200021f8

080019a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <SystemInit+0x20>)
 80019a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <SystemInit+0x20>)
 80019ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019b4:	bf00      	nop
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000ed00 	.word	0xe000ed00

080019c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019c8:	480d      	ldr	r0, [pc, #52]	; (8001a00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ca:	490e      	ldr	r1, [pc, #56]	; (8001a04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019cc:	4a0e      	ldr	r2, [pc, #56]	; (8001a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d0:	e002      	b.n	80019d8 <LoopCopyDataInit>

080019d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019d6:	3304      	adds	r3, #4

080019d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019dc:	d3f9      	bcc.n	80019d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019de:	4a0b      	ldr	r2, [pc, #44]	; (8001a0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019e0:	4c0b      	ldr	r4, [pc, #44]	; (8001a10 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e4:	e001      	b.n	80019ea <LoopFillZerobss>

080019e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019e8:	3204      	adds	r2, #4

080019ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019ec:	d3fb      	bcc.n	80019e6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019ee:	f7ff ffd7 	bl	80019a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019f2:	f003 fbd3 	bl	800519c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019f6:	f7ff fb75 	bl	80010e4 <main>
  bx  lr    
 80019fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80019fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a04:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a08:	080063b8 	.word	0x080063b8
  ldr r2, =_sbss
 8001a0c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a10:	200021f4 	.word	0x200021f4

08001a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a14:	e7fe      	b.n	8001a14 <ADC_IRQHandler>
	...

08001a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a1c:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <HAL_Init+0x40>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0d      	ldr	r2, [pc, #52]	; (8001a58 <HAL_Init+0x40>)
 8001a22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_Init+0x40>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <HAL_Init+0x40>)
 8001a2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a07      	ldr	r2, [pc, #28]	; (8001a58 <HAL_Init+0x40>)
 8001a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a40:	2003      	movs	r0, #3
 8001a42:	f000 f94f 	bl	8001ce4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a46:	2000      	movs	r0, #0
 8001a48:	f000 f808 	bl	8001a5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a4c:	f7ff fd7c 	bl	8001548 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40023c00 	.word	0x40023c00

08001a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a64:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <HAL_InitTick+0x54>)
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_InitTick+0x58>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f967 	bl	8001d4e <HAL_SYSTICK_Config>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e00e      	b.n	8001aa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d80a      	bhi.n	8001aa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a90:	2200      	movs	r2, #0
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	f04f 30ff 	mov.w	r0, #4294967295
 8001a98:	f000 f92f 	bl	8001cfa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a9c:	4a06      	ldr	r2, [pc, #24]	; (8001ab8 <HAL_InitTick+0x5c>)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	e000      	b.n	8001aa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3708      	adds	r7, #8
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000008 	.word	0x20000008
 8001ab8:	20000004 	.word	0x20000004

08001abc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_IncTick+0x20>)
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_IncTick+0x24>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4413      	add	r3, r2
 8001acc:	4a04      	ldr	r2, [pc, #16]	; (8001ae0 <HAL_IncTick+0x24>)
 8001ace:	6013      	str	r3, [r2, #0]
}
 8001ad0:	bf00      	nop
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	20000008 	.word	0x20000008
 8001ae0:	200021e0 	.word	0x200021e0

08001ae4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <HAL_GetTick+0x14>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	200021e0 	.word	0x200021e0

08001afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b04:	f7ff ffee 	bl	8001ae4 <HAL_GetTick>
 8001b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b14:	d005      	beq.n	8001b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b16:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <HAL_Delay+0x44>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	461a      	mov	r2, r3
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4413      	add	r3, r2
 8001b20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b22:	bf00      	nop
 8001b24:	f7ff ffde 	bl	8001ae4 <HAL_GetTick>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	1ad3      	subs	r3, r2, r3
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d8f7      	bhi.n	8001b24 <HAL_Delay+0x28>
  {
  }
}
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20000008 	.word	0x20000008

08001b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <__NVIC_SetPriorityGrouping+0x44>)
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b5a:	68ba      	ldr	r2, [r7, #8]
 8001b5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b60:	4013      	ands	r3, r2
 8001b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b76:	4a04      	ldr	r2, [pc, #16]	; (8001b88 <__NVIC_SetPriorityGrouping+0x44>)
 8001b78:	68bb      	ldr	r3, [r7, #8]
 8001b7a:	60d3      	str	r3, [r2, #12]
}
 8001b7c:	bf00      	nop
 8001b7e:	3714      	adds	r7, #20
 8001b80:	46bd      	mov	sp, r7
 8001b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b90:	4b04      	ldr	r3, [pc, #16]	; (8001ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	0a1b      	lsrs	r3, r3, #8
 8001b96:	f003 0307 	and.w	r3, r3, #7
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	db0b      	blt.n	8001bd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	f003 021f 	and.w	r2, r3, #31
 8001bc0:	4907      	ldr	r1, [pc, #28]	; (8001be0 <__NVIC_EnableIRQ+0x38>)
 8001bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc6:	095b      	lsrs	r3, r3, #5
 8001bc8:	2001      	movs	r0, #1
 8001bca:	fa00 f202 	lsl.w	r2, r0, r2
 8001bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000e100 	.word	0xe000e100

08001be4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	6039      	str	r1, [r7, #0]
 8001bee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	db0a      	blt.n	8001c0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	490c      	ldr	r1, [pc, #48]	; (8001c30 <__NVIC_SetPriority+0x4c>)
 8001bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c02:	0112      	lsls	r2, r2, #4
 8001c04:	b2d2      	uxtb	r2, r2
 8001c06:	440b      	add	r3, r1
 8001c08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c0c:	e00a      	b.n	8001c24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	b2da      	uxtb	r2, r3
 8001c12:	4908      	ldr	r1, [pc, #32]	; (8001c34 <__NVIC_SetPriority+0x50>)
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	3b04      	subs	r3, #4
 8001c1c:	0112      	lsls	r2, r2, #4
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	440b      	add	r3, r1
 8001c22:	761a      	strb	r2, [r3, #24]
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr
 8001c30:	e000e100 	.word	0xe000e100
 8001c34:	e000ed00 	.word	0xe000ed00

08001c38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b089      	sub	sp, #36	; 0x24
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 0307 	and.w	r3, r3, #7
 8001c4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f1c3 0307 	rsb	r3, r3, #7
 8001c52:	2b04      	cmp	r3, #4
 8001c54:	bf28      	it	cs
 8001c56:	2304      	movcs	r3, #4
 8001c58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3304      	adds	r3, #4
 8001c5e:	2b06      	cmp	r3, #6
 8001c60:	d902      	bls.n	8001c68 <NVIC_EncodePriority+0x30>
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	3b03      	subs	r3, #3
 8001c66:	e000      	b.n	8001c6a <NVIC_EncodePriority+0x32>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43da      	mvns	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	401a      	ands	r2, r3
 8001c7c:	697b      	ldr	r3, [r7, #20]
 8001c7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c80:	f04f 31ff 	mov.w	r1, #4294967295
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa01 f303 	lsl.w	r3, r1, r3
 8001c8a:	43d9      	mvns	r1, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c90:	4313      	orrs	r3, r2
         );
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3724      	adds	r7, #36	; 0x24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cb0:	d301      	bcc.n	8001cb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00f      	b.n	8001cd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb6:	4a0a      	ldr	r2, [pc, #40]	; (8001ce0 <SysTick_Config+0x40>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cbe:	210f      	movs	r1, #15
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f7ff ff8e 	bl	8001be4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <SysTick_Config+0x40>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cce:	4b04      	ldr	r3, [pc, #16]	; (8001ce0 <SysTick_Config+0x40>)
 8001cd0:	2207      	movs	r2, #7
 8001cd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	e000e010 	.word	0xe000e010

08001ce4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f7ff ff29 	bl	8001b44 <__NVIC_SetPriorityGrouping>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	4603      	mov	r3, r0
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
 8001d06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d0c:	f7ff ff3e 	bl	8001b8c <__NVIC_GetPriorityGrouping>
 8001d10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	68b9      	ldr	r1, [r7, #8]
 8001d16:	6978      	ldr	r0, [r7, #20]
 8001d18:	f7ff ff8e 	bl	8001c38 <NVIC_EncodePriority>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d22:	4611      	mov	r1, r2
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff5d 	bl	8001be4 <__NVIC_SetPriority>
}
 8001d2a:	bf00      	nop
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff ff31 	bl	8001ba8 <__NVIC_EnableIRQ>
}
 8001d46:	bf00      	nop
 8001d48:	3708      	adds	r7, #8
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}

08001d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d4e:	b580      	push	{r7, lr}
 8001d50:	b082      	sub	sp, #8
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ffa2 	bl	8001ca0 <SysTick_Config>
 8001d5c:	4603      	mov	r3, r0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
	...

08001d68 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d70:	2300      	movs	r3, #0
 8001d72:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d74:	f7ff feb6 	bl	8001ae4 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d101      	bne.n	8001d84 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	e099      	b.n	8001eb8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f022 0201 	bic.w	r2, r2, #1
 8001da2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001da4:	e00f      	b.n	8001dc6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001da6:	f7ff fe9d 	bl	8001ae4 <HAL_GetTick>
 8001daa:	4602      	mov	r2, r0
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	1ad3      	subs	r3, r2, r3
 8001db0:	2b05      	cmp	r3, #5
 8001db2:	d908      	bls.n	8001dc6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2220      	movs	r2, #32
 8001db8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e078      	b.n	8001eb8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1e8      	bne.n	8001da6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ddc:	697a      	ldr	r2, [r7, #20]
 8001dde:	4b38      	ldr	r3, [pc, #224]	; (8001ec0 <HAL_DMA_Init+0x158>)
 8001de0:	4013      	ands	r3, r2
 8001de2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	699b      	ldr	r3, [r3, #24]
 8001e04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1c:	2b04      	cmp	r3, #4
 8001e1e:	d107      	bne.n	8001e30 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	697a      	ldr	r2, [r7, #20]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	697a      	ldr	r2, [r7, #20]
 8001e36:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	695b      	ldr	r3, [r3, #20]
 8001e3e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	f023 0307 	bic.w	r3, r3, #7
 8001e46:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	697a      	ldr	r2, [r7, #20]
 8001e4e:	4313      	orrs	r3, r2
 8001e50:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d117      	bne.n	8001e8a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00e      	beq.n	8001e8a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 fa6f 	bl	8002350 <DMA_CheckFifoParam>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d008      	beq.n	8001e8a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2240      	movs	r2, #64	; 0x40
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e86:	2301      	movs	r3, #1
 8001e88:	e016      	b.n	8001eb8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 fa26 	bl	80022e4 <DMA_CalcBaseAndBitshift>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea0:	223f      	movs	r2, #63	; 0x3f
 8001ea2:	409a      	lsls	r2, r3
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	f010803f 	.word	0xf010803f

08001ec4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
 8001ed0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d101      	bne.n	8001eea <HAL_DMA_Start_IT+0x26>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e040      	b.n	8001f6c <HAL_DMA_Start_IT+0xa8>
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	2201      	movs	r2, #1
 8001eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d12f      	bne.n	8001f5e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2202      	movs	r2, #2
 8001f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68b9      	ldr	r1, [r7, #8]
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f000 f9b8 	bl	8002288 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f1c:	223f      	movs	r2, #63	; 0x3f
 8001f1e:	409a      	lsls	r2, r3
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f042 0216 	orr.w	r2, r2, #22
 8001f32:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d007      	beq.n	8001f4c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f042 0208 	orr.w	r2, r2, #8
 8001f4a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	e005      	b.n	8001f6a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f66:	2302      	movs	r3, #2
 8001f68:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3718      	adds	r7, #24
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f80:	4b92      	ldr	r3, [pc, #584]	; (80021cc <HAL_DMA_IRQHandler+0x258>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a92      	ldr	r2, [pc, #584]	; (80021d0 <HAL_DMA_IRQHandler+0x25c>)
 8001f86:	fba2 2303 	umull	r2, r3, r2, r3
 8001f8a:	0a9b      	lsrs	r3, r3, #10
 8001f8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9e:	2208      	movs	r2, #8
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d01a      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0304 	and.w	r3, r3, #4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d013      	beq.n	8001fe0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0204 	bic.w	r2, r2, #4
 8001fc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fcc:	2208      	movs	r2, #8
 8001fce:	409a      	lsls	r2, r3
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fd8:	f043 0201 	orr.w	r2, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	409a      	lsls	r2, r3
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	4013      	ands	r3, r2
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d012      	beq.n	8002016 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	695b      	ldr	r3, [r3, #20]
 8001ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d00b      	beq.n	8002016 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002002:	2201      	movs	r2, #1
 8002004:	409a      	lsls	r2, r3
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800200e:	f043 0202 	orr.w	r2, r3, #2
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800201a:	2204      	movs	r2, #4
 800201c:	409a      	lsls	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d012      	beq.n	800204c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00b      	beq.n	800204c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002038:	2204      	movs	r2, #4
 800203a:	409a      	lsls	r2, r3
 800203c:	693b      	ldr	r3, [r7, #16]
 800203e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002044:	f043 0204 	orr.w	r2, r3, #4
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002050:	2210      	movs	r2, #16
 8002052:	409a      	lsls	r2, r3
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	4013      	ands	r3, r2
 8002058:	2b00      	cmp	r3, #0
 800205a:	d043      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d03c      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	2210      	movs	r2, #16
 8002070:	409a      	lsls	r2, r3
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d018      	beq.n	80020b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d108      	bne.n	80020a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	2b00      	cmp	r3, #0
 8002098:	d024      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4798      	blx	r3
 80020a2:	e01f      	b.n	80020e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d01b      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	4798      	blx	r3
 80020b4:	e016      	b.n	80020e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d107      	bne.n	80020d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0208 	bic.w	r2, r2, #8
 80020d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e8:	2220      	movs	r2, #32
 80020ea:	409a      	lsls	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	4013      	ands	r3, r2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f000 808e 	beq.w	8002212 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	f000 8086 	beq.w	8002212 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800210a:	2220      	movs	r2, #32
 800210c:	409a      	lsls	r2, r3
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b05      	cmp	r3, #5
 800211c:	d136      	bne.n	800218c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f022 0216 	bic.w	r2, r2, #22
 800212c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	695a      	ldr	r2, [r3, #20]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800213c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	2b00      	cmp	r3, #0
 8002144:	d103      	bne.n	800214e <HAL_DMA_IRQHandler+0x1da>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800214a:	2b00      	cmp	r3, #0
 800214c:	d007      	beq.n	800215e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0208 	bic.w	r2, r2, #8
 800215c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002162:	223f      	movs	r2, #63	; 0x3f
 8002164:	409a      	lsls	r2, r3
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800217e:	2b00      	cmp	r3, #0
 8002180:	d07d      	beq.n	800227e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	4798      	blx	r3
        }
        return;
 800218a:	e078      	b.n	800227e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d01c      	beq.n	80021d4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d108      	bne.n	80021ba <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d030      	beq.n	8002212 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	4798      	blx	r3
 80021b8:	e02b      	b.n	8002212 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d027      	beq.n	8002212 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	4798      	blx	r3
 80021ca:	e022      	b.n	8002212 <HAL_DMA_IRQHandler+0x29e>
 80021cc:	20000000 	.word	0x20000000
 80021d0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10f      	bne.n	8002202 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0210 	bic.w	r2, r2, #16
 80021f0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2200      	movs	r2, #0
 80021f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002206:	2b00      	cmp	r3, #0
 8002208:	d003      	beq.n	8002212 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002216:	2b00      	cmp	r3, #0
 8002218:	d032      	beq.n	8002280 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d022      	beq.n	800226c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2205      	movs	r2, #5
 800222a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0201 	bic.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	3301      	adds	r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	429a      	cmp	r2, r3
 8002248:	d307      	bcc.n	800225a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d1f2      	bne.n	800223e <HAL_DMA_IRQHandler+0x2ca>
 8002258:	e000      	b.n	800225c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800225a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2200      	movs	r2, #0
 8002260:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	4798      	blx	r3
 800227c:	e000      	b.n	8002280 <HAL_DMA_IRQHandler+0x30c>
        return;
 800227e:	bf00      	nop
    }
  }
}
 8002280:	3718      	adds	r7, #24
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop

08002288 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
 8002294:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022a4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	683a      	ldr	r2, [r7, #0]
 80022ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	2b40      	cmp	r3, #64	; 0x40
 80022b4:	d108      	bne.n	80022c8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	68ba      	ldr	r2, [r7, #8]
 80022c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022c6:	e007      	b.n	80022d8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	60da      	str	r2, [r3, #12]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b085      	sub	sp, #20
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	3b10      	subs	r3, #16
 80022f4:	4a14      	ldr	r2, [pc, #80]	; (8002348 <DMA_CalcBaseAndBitshift+0x64>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	091b      	lsrs	r3, r3, #4
 80022fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80022fe:	4a13      	ldr	r2, [pc, #76]	; (800234c <DMA_CalcBaseAndBitshift+0x68>)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4413      	add	r3, r2
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d909      	bls.n	8002326 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800231a:	f023 0303 	bic.w	r3, r3, #3
 800231e:	1d1a      	adds	r2, r3, #4
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	659a      	str	r2, [r3, #88]	; 0x58
 8002324:	e007      	b.n	8002336 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800232e:	f023 0303 	bic.w	r3, r3, #3
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800233a:	4618      	mov	r0, r3
 800233c:	3714      	adds	r7, #20
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	aaaaaaab 	.word	0xaaaaaaab
 800234c:	08006308 	.word	0x08006308

08002350 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002358:	2300      	movs	r3, #0
 800235a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002360:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	699b      	ldr	r3, [r3, #24]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d11f      	bne.n	80023aa <DMA_CheckFifoParam+0x5a>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d856      	bhi.n	800241e <DMA_CheckFifoParam+0xce>
 8002370:	a201      	add	r2, pc, #4	; (adr r2, 8002378 <DMA_CheckFifoParam+0x28>)
 8002372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002376:	bf00      	nop
 8002378:	08002389 	.word	0x08002389
 800237c:	0800239b 	.word	0x0800239b
 8002380:	08002389 	.word	0x08002389
 8002384:	0800241f 	.word	0x0800241f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d046      	beq.n	8002422 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002398:	e043      	b.n	8002422 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023a2:	d140      	bne.n	8002426 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a8:	e03d      	b.n	8002426 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b2:	d121      	bne.n	80023f8 <DMA_CheckFifoParam+0xa8>
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	d837      	bhi.n	800242a <DMA_CheckFifoParam+0xda>
 80023ba:	a201      	add	r2, pc, #4	; (adr r2, 80023c0 <DMA_CheckFifoParam+0x70>)
 80023bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c0:	080023d1 	.word	0x080023d1
 80023c4:	080023d7 	.word	0x080023d7
 80023c8:	080023d1 	.word	0x080023d1
 80023cc:	080023e9 	.word	0x080023e9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	73fb      	strb	r3, [r7, #15]
      break;
 80023d4:	e030      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d025      	beq.n	800242e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e6:	e022      	b.n	800242e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023f0:	d11f      	bne.n	8002432 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80023f6:	e01c      	b.n	8002432 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d903      	bls.n	8002406 <DMA_CheckFifoParam+0xb6>
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d003      	beq.n	800240c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002404:	e018      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	73fb      	strb	r3, [r7, #15]
      break;
 800240a:	e015      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d00e      	beq.n	8002436 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      break;
 800241c:	e00b      	b.n	8002436 <DMA_CheckFifoParam+0xe6>
      break;
 800241e:	bf00      	nop
 8002420:	e00a      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002422:	bf00      	nop
 8002424:	e008      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002426:	bf00      	nop
 8002428:	e006      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 800242a:	bf00      	nop
 800242c:	e004      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 800242e:	bf00      	nop
 8002430:	e002      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;   
 8002432:	bf00      	nop
 8002434:	e000      	b.n	8002438 <DMA_CheckFifoParam+0xe8>
      break;
 8002436:	bf00      	nop
    }
  } 
  
  return status; 
 8002438:	7bfb      	ldrb	r3, [r7, #15]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3714      	adds	r7, #20
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop

08002448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002448:	b480      	push	{r7}
 800244a:	b089      	sub	sp, #36	; 0x24
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002456:	2300      	movs	r3, #0
 8002458:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800245e:	2300      	movs	r3, #0
 8002460:	61fb      	str	r3, [r7, #28]
 8002462:	e165      	b.n	8002730 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002464:	2201      	movs	r2, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	697a      	ldr	r2, [r7, #20]
 8002474:	4013      	ands	r3, r2
 8002476:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002478:	693a      	ldr	r2, [r7, #16]
 800247a:	697b      	ldr	r3, [r7, #20]
 800247c:	429a      	cmp	r2, r3
 800247e:	f040 8154 	bne.w	800272a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	2b01      	cmp	r3, #1
 800248c:	d005      	beq.n	800249a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002496:	2b02      	cmp	r3, #2
 8002498:	d130      	bne.n	80024fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	2203      	movs	r2, #3
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	69fb      	ldr	r3, [r7, #28]
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024d0:	2201      	movs	r2, #1
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	43db      	mvns	r3, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4013      	ands	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	091b      	lsrs	r3, r3, #4
 80024e6:	f003 0201 	and.w	r2, r3, #1
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	2b03      	cmp	r3, #3
 8002506:	d017      	beq.n	8002538 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	689a      	ldr	r2, [r3, #8]
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	005b      	lsls	r3, r3, #1
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4313      	orrs	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d123      	bne.n	800258c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002544:	69fb      	ldr	r3, [r7, #28]
 8002546:	08da      	lsrs	r2, r3, #3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	3208      	adds	r2, #8
 800254c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002550:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	f003 0307 	and.w	r3, r3, #7
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	220f      	movs	r2, #15
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	fa02 f303 	lsl.w	r3, r2, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4313      	orrs	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	08da      	lsrs	r2, r3, #3
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	3208      	adds	r2, #8
 8002586:	69b9      	ldr	r1, [r7, #24]
 8002588:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	2203      	movs	r2, #3
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f003 0203 	and.w	r2, r3, #3
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	005b      	lsls	r3, r3, #1
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	69ba      	ldr	r2, [r7, #24]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f000 80ae 	beq.w	800272a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b5d      	ldr	r3, [pc, #372]	; (8002748 <HAL_GPIO_Init+0x300>)
 80025d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025d6:	4a5c      	ldr	r2, [pc, #368]	; (8002748 <HAL_GPIO_Init+0x300>)
 80025d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025dc:	6453      	str	r3, [r2, #68]	; 0x44
 80025de:	4b5a      	ldr	r3, [pc, #360]	; (8002748 <HAL_GPIO_Init+0x300>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025ea:	4a58      	ldr	r2, [pc, #352]	; (800274c <HAL_GPIO_Init+0x304>)
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	089b      	lsrs	r3, r3, #2
 80025f0:	3302      	adds	r3, #2
 80025f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f003 0303 	and.w	r3, r3, #3
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	220f      	movs	r2, #15
 8002602:	fa02 f303 	lsl.w	r3, r2, r3
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4f      	ldr	r2, [pc, #316]	; (8002750 <HAL_GPIO_Init+0x308>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d025      	beq.n	8002662 <HAL_GPIO_Init+0x21a>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4e      	ldr	r2, [pc, #312]	; (8002754 <HAL_GPIO_Init+0x30c>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01f      	beq.n	800265e <HAL_GPIO_Init+0x216>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4d      	ldr	r2, [pc, #308]	; (8002758 <HAL_GPIO_Init+0x310>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d019      	beq.n	800265a <HAL_GPIO_Init+0x212>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4c      	ldr	r2, [pc, #304]	; (800275c <HAL_GPIO_Init+0x314>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d013      	beq.n	8002656 <HAL_GPIO_Init+0x20e>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a4b      	ldr	r2, [pc, #300]	; (8002760 <HAL_GPIO_Init+0x318>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00d      	beq.n	8002652 <HAL_GPIO_Init+0x20a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a4a      	ldr	r2, [pc, #296]	; (8002764 <HAL_GPIO_Init+0x31c>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d007      	beq.n	800264e <HAL_GPIO_Init+0x206>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a49      	ldr	r2, [pc, #292]	; (8002768 <HAL_GPIO_Init+0x320>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d101      	bne.n	800264a <HAL_GPIO_Init+0x202>
 8002646:	2306      	movs	r3, #6
 8002648:	e00c      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 800264a:	2307      	movs	r3, #7
 800264c:	e00a      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 800264e:	2305      	movs	r3, #5
 8002650:	e008      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 8002652:	2304      	movs	r3, #4
 8002654:	e006      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 8002656:	2303      	movs	r3, #3
 8002658:	e004      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 800265a:	2302      	movs	r3, #2
 800265c:	e002      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <HAL_GPIO_Init+0x21c>
 8002662:	2300      	movs	r3, #0
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	f002 0203 	and.w	r2, r2, #3
 800266a:	0092      	lsls	r2, r2, #2
 800266c:	4093      	lsls	r3, r2
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4313      	orrs	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002674:	4935      	ldr	r1, [pc, #212]	; (800274c <HAL_GPIO_Init+0x304>)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	089b      	lsrs	r3, r3, #2
 800267a:	3302      	adds	r3, #2
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002682:	4b3a      	ldr	r3, [pc, #232]	; (800276c <HAL_GPIO_Init+0x324>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	43db      	mvns	r3, r3
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	4013      	ands	r3, r2
 8002690:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026a6:	4a31      	ldr	r2, [pc, #196]	; (800276c <HAL_GPIO_Init+0x324>)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80026ac:	4b2f      	ldr	r3, [pc, #188]	; (800276c <HAL_GPIO_Init+0x324>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	43db      	mvns	r3, r3
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	4013      	ands	r3, r2
 80026ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d003      	beq.n	80026d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026c8:	69ba      	ldr	r2, [r7, #24]
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026d0:	4a26      	ldr	r2, [pc, #152]	; (800276c <HAL_GPIO_Init+0x324>)
 80026d2:	69bb      	ldr	r3, [r7, #24]
 80026d4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026d6:	4b25      	ldr	r3, [pc, #148]	; (800276c <HAL_GPIO_Init+0x324>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026fa:	4a1c      	ldr	r2, [pc, #112]	; (800276c <HAL_GPIO_Init+0x324>)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002700:	4b1a      	ldr	r3, [pc, #104]	; (800276c <HAL_GPIO_Init+0x324>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002724:	4a11      	ldr	r2, [pc, #68]	; (800276c <HAL_GPIO_Init+0x324>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3301      	adds	r3, #1
 800272e:	61fb      	str	r3, [r7, #28]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	2b0f      	cmp	r3, #15
 8002734:	f67f ae96 	bls.w	8002464 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002738:	bf00      	nop
 800273a:	bf00      	nop
 800273c:	3724      	adds	r7, #36	; 0x24
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40023800 	.word	0x40023800
 800274c:	40013800 	.word	0x40013800
 8002750:	40020000 	.word	0x40020000
 8002754:	40020400 	.word	0x40020400
 8002758:	40020800 	.word	0x40020800
 800275c:	40020c00 	.word	0x40020c00
 8002760:	40021000 	.word	0x40021000
 8002764:	40021400 	.word	0x40021400
 8002768:	40021800 	.word	0x40021800
 800276c:	40013c00 	.word	0x40013c00

08002770 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b084      	sub	sp, #16
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e12b      	b.n	80029da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d106      	bne.n	800279c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7fe fefe 	bl	8001598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2224      	movs	r2, #36	; 0x24
 80027a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0201 	bic.w	r2, r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	681a      	ldr	r2, [r3, #0]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80027d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80027d4:	f001 f9ac 	bl	8003b30 <HAL_RCC_GetPCLK1Freq>
 80027d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	4a81      	ldr	r2, [pc, #516]	; (80029e4 <HAL_I2C_Init+0x274>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d807      	bhi.n	80027f4 <HAL_I2C_Init+0x84>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4a80      	ldr	r2, [pc, #512]	; (80029e8 <HAL_I2C_Init+0x278>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	bf94      	ite	ls
 80027ec:	2301      	movls	r3, #1
 80027ee:	2300      	movhi	r3, #0
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	e006      	b.n	8002802 <HAL_I2C_Init+0x92>
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	4a7d      	ldr	r2, [pc, #500]	; (80029ec <HAL_I2C_Init+0x27c>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	bf94      	ite	ls
 80027fc:	2301      	movls	r3, #1
 80027fe:	2300      	movhi	r3, #0
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d001      	beq.n	800280a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e0e7      	b.n	80029da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4a78      	ldr	r2, [pc, #480]	; (80029f0 <HAL_I2C_Init+0x280>)
 800280e:	fba2 2303 	umull	r2, r3, r2, r3
 8002812:	0c9b      	lsrs	r3, r3, #18
 8002814:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	430a      	orrs	r2, r1
 8002828:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	6a1b      	ldr	r3, [r3, #32]
 8002830:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	4a6a      	ldr	r2, [pc, #424]	; (80029e4 <HAL_I2C_Init+0x274>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d802      	bhi.n	8002844 <HAL_I2C_Init+0xd4>
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	3301      	adds	r3, #1
 8002842:	e009      	b.n	8002858 <HAL_I2C_Init+0xe8>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800284a:	fb02 f303 	mul.w	r3, r2, r3
 800284e:	4a69      	ldr	r2, [pc, #420]	; (80029f4 <HAL_I2C_Init+0x284>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	099b      	lsrs	r3, r3, #6
 8002856:	3301      	adds	r3, #1
 8002858:	687a      	ldr	r2, [r7, #4]
 800285a:	6812      	ldr	r2, [r2, #0]
 800285c:	430b      	orrs	r3, r1
 800285e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	69db      	ldr	r3, [r3, #28]
 8002866:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800286a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	495c      	ldr	r1, [pc, #368]	; (80029e4 <HAL_I2C_Init+0x274>)
 8002874:	428b      	cmp	r3, r1
 8002876:	d819      	bhi.n	80028ac <HAL_I2C_Init+0x13c>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	1e59      	subs	r1, r3, #1
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	fbb1 f3f3 	udiv	r3, r1, r3
 8002886:	1c59      	adds	r1, r3, #1
 8002888:	f640 73fc 	movw	r3, #4092	; 0xffc
 800288c:	400b      	ands	r3, r1
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00a      	beq.n	80028a8 <HAL_I2C_Init+0x138>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1e59      	subs	r1, r3, #1
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fbb1 f3f3 	udiv	r3, r1, r3
 80028a0:	3301      	adds	r3, #1
 80028a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028a6:	e051      	b.n	800294c <HAL_I2C_Init+0x1dc>
 80028a8:	2304      	movs	r3, #4
 80028aa:	e04f      	b.n	800294c <HAL_I2C_Init+0x1dc>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d111      	bne.n	80028d8 <HAL_I2C_Init+0x168>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1e58      	subs	r0, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6859      	ldr	r1, [r3, #4]
 80028bc:	460b      	mov	r3, r1
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	440b      	add	r3, r1
 80028c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c6:	3301      	adds	r3, #1
 80028c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	bf0c      	ite	eq
 80028d0:	2301      	moveq	r3, #1
 80028d2:	2300      	movne	r3, #0
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	e012      	b.n	80028fe <HAL_I2C_Init+0x18e>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1e58      	subs	r0, r3, #1
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6859      	ldr	r1, [r3, #4]
 80028e0:	460b      	mov	r3, r1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	0099      	lsls	r1, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ee:	3301      	adds	r3, #1
 80028f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	bf0c      	ite	eq
 80028f8:	2301      	moveq	r3, #1
 80028fa:	2300      	movne	r3, #0
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d001      	beq.n	8002906 <HAL_I2C_Init+0x196>
 8002902:	2301      	movs	r3, #1
 8002904:	e022      	b.n	800294c <HAL_I2C_Init+0x1dc>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10e      	bne.n	800292c <HAL_I2C_Init+0x1bc>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1e58      	subs	r0, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	460b      	mov	r3, r1
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	440b      	add	r3, r1
 800291c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002920:	3301      	adds	r3, #1
 8002922:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002926:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800292a:	e00f      	b.n	800294c <HAL_I2C_Init+0x1dc>
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	1e58      	subs	r0, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6859      	ldr	r1, [r3, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	0099      	lsls	r1, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002942:	3301      	adds	r3, #1
 8002944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002948:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800294c:	6879      	ldr	r1, [r7, #4]
 800294e:	6809      	ldr	r1, [r1, #0]
 8002950:	4313      	orrs	r3, r2
 8002952:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69da      	ldr	r2, [r3, #28]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	431a      	orrs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800297a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	6911      	ldr	r1, [r2, #16]
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	68d2      	ldr	r2, [r2, #12]
 8002986:	4311      	orrs	r1, r2
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	6812      	ldr	r2, [r2, #0]
 800298c:	430b      	orrs	r3, r1
 800298e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	695a      	ldr	r2, [r3, #20]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f042 0201 	orr.w	r2, r2, #1
 80029ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	000186a0 	.word	0x000186a0
 80029e8:	001e847f 	.word	0x001e847f
 80029ec:	003d08ff 	.word	0x003d08ff
 80029f0:	431bde83 	.word	0x431bde83
 80029f4:	10624dd3 	.word	0x10624dd3

080029f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	4608      	mov	r0, r1
 8002a02:	4611      	mov	r1, r2
 8002a04:	461a      	mov	r2, r3
 8002a06:	4603      	mov	r3, r0
 8002a08:	817b      	strh	r3, [r7, #10]
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	813b      	strh	r3, [r7, #8]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a12:	f7ff f867 	bl	8001ae4 <HAL_GetTick>
 8002a16:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	f040 80d9 	bne.w	8002bd8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	2319      	movs	r3, #25
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	496d      	ldr	r1, [pc, #436]	; (8002be4 <HAL_I2C_Mem_Write+0x1ec>)
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f000 fdad 	bl	8003590 <I2C_WaitOnFlagUntilTimeout>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	e0cc      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_I2C_Mem_Write+0x56>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e0c5      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d007      	beq.n	8002a74 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a82:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2221      	movs	r2, #33	; 0x21
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2240      	movs	r2, #64	; 0x40
 8002a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6a3a      	ldr	r2, [r7, #32]
 8002a9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aaa:	b29a      	uxth	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4a4d      	ldr	r2, [pc, #308]	; (8002be8 <HAL_I2C_Mem_Write+0x1f0>)
 8002ab4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002ab6:	88f8      	ldrh	r0, [r7, #6]
 8002ab8:	893a      	ldrh	r2, [r7, #8]
 8002aba:	8979      	ldrh	r1, [r7, #10]
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	9301      	str	r3, [sp, #4]
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	9300      	str	r3, [sp, #0]
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 fbe4 	bl	8003294 <I2C_RequestMemoryWrite>
 8002acc:	4603      	mov	r3, r0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d052      	beq.n	8002b78 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e081      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad6:	697a      	ldr	r2, [r7, #20]
 8002ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ada:	68f8      	ldr	r0, [r7, #12]
 8002adc:	f000 fe2e 	bl	800373c <I2C_WaitOnTXEFlagUntilTimeout>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00d      	beq.n	8002b02 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	2b04      	cmp	r3, #4
 8002aec:	d107      	bne.n	8002afe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e06b      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b06:	781a      	ldrb	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	1c5a      	adds	r2, r3, #1
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b28:	b29b      	uxth	r3, r3
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d11b      	bne.n	8002b78 <HAL_I2C_Mem_Write+0x180>
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d017      	beq.n	8002b78 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	781a      	ldrb	r2, [r3, #0]
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1aa      	bne.n	8002ad6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b84:	68f8      	ldr	r0, [r7, #12]
 8002b86:	f000 fe1a 	bl	80037be <I2C_WaitOnBTFFlagUntilTimeout>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d00d      	beq.n	8002bac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d107      	bne.n	8002ba8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ba6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e016      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e000      	b.n	8002bda <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
  }
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3718      	adds	r7, #24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	00100002 	.word	0x00100002
 8002be8:	ffff0000 	.word	0xffff0000

08002bec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b08c      	sub	sp, #48	; 0x30
 8002bf0:	af02      	add	r7, sp, #8
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	4608      	mov	r0, r1
 8002bf6:	4611      	mov	r1, r2
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	817b      	strh	r3, [r7, #10]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	813b      	strh	r3, [r7, #8]
 8002c02:	4613      	mov	r3, r2
 8002c04:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c06:	f7fe ff6d 	bl	8001ae4 <HAL_GetTick>
 8002c0a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	2b20      	cmp	r3, #32
 8002c16:	f040 8208 	bne.w	800302a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	9300      	str	r3, [sp, #0]
 8002c1e:	2319      	movs	r3, #25
 8002c20:	2201      	movs	r2, #1
 8002c22:	497b      	ldr	r1, [pc, #492]	; (8002e10 <HAL_I2C_Mem_Read+0x224>)
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 fcb3 	bl	8003590 <I2C_WaitOnFlagUntilTimeout>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002c30:	2302      	movs	r3, #2
 8002c32:	e1fb      	b.n	800302c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_I2C_Mem_Read+0x56>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e1f4      	b.n	800302c <HAL_I2C_Mem_Read+0x440>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d007      	beq.n	8002c68 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c76:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2222      	movs	r2, #34	; 0x22
 8002c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2240      	movs	r2, #64	; 0x40
 8002c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c98:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	4a5b      	ldr	r2, [pc, #364]	; (8002e14 <HAL_I2C_Mem_Read+0x228>)
 8002ca8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002caa:	88f8      	ldrh	r0, [r7, #6]
 8002cac:	893a      	ldrh	r2, [r7, #8]
 8002cae:	8979      	ldrh	r1, [r7, #10]
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	9301      	str	r3, [sp, #4]
 8002cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	4603      	mov	r3, r0
 8002cba:	68f8      	ldr	r0, [r7, #12]
 8002cbc:	f000 fb80 	bl	80033c0 <I2C_RequestMemoryRead>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e1b0      	b.n	800302c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d113      	bne.n	8002cfa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	623b      	str	r3, [r7, #32]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	623b      	str	r3, [r7, #32]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	699b      	ldr	r3, [r3, #24]
 8002ce4:	623b      	str	r3, [r7, #32]
 8002ce6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	e184      	b.n	8003004 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d11b      	bne.n	8002d3a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d10:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d12:	2300      	movs	r3, #0
 8002d14:	61fb      	str	r3, [r7, #28]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	61fb      	str	r3, [r7, #28]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	61fb      	str	r3, [r7, #28]
 8002d26:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d36:	601a      	str	r2, [r3, #0]
 8002d38:	e164      	b.n	8003004 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d11b      	bne.n	8002d7a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d50:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681a      	ldr	r2, [r3, #0]
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d62:	2300      	movs	r3, #0
 8002d64:	61bb      	str	r3, [r7, #24]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	695b      	ldr	r3, [r3, #20]
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	61bb      	str	r3, [r7, #24]
 8002d76:	69bb      	ldr	r3, [r7, #24]
 8002d78:	e144      	b.n	8003004 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	617b      	str	r3, [r7, #20]
 8002d8e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d90:	e138      	b.n	8003004 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d96:	2b03      	cmp	r3, #3
 8002d98:	f200 80f1 	bhi.w	8002f7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d123      	bne.n	8002dec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002da4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002da6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002da8:	68f8      	ldr	r0, [r7, #12]
 8002daa:	f000 fd49 	bl	8003840 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e139      	b.n	800302c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691a      	ldr	r2, [r3, #16]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	1c5a      	adds	r2, r3, #1
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dd4:	3b01      	subs	r3, #1
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	3b01      	subs	r3, #1
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002dea:	e10b      	b.n	8003004 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d14e      	bne.n	8002e92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	9300      	str	r3, [sp, #0]
 8002df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	4906      	ldr	r1, [pc, #24]	; (8002e18 <HAL_I2C_Mem_Read+0x22c>)
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 fbc6 	bl	8003590 <I2C_WaitOnFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d008      	beq.n	8002e1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e10e      	b.n	800302c <HAL_I2C_Mem_Read+0x440>
 8002e0e:	bf00      	nop
 8002e10:	00100002 	.word	0x00100002
 8002e14:	ffff0000 	.word	0xffff0000
 8002e18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	691a      	ldr	r2, [r3, #16]
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e36:	b2d2      	uxtb	r2, r2
 8002e38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3e:	1c5a      	adds	r2, r3, #1
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	691a      	ldr	r2, [r3, #16]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	b29a      	uxth	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e90:	e0b8      	b.n	8003004 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e98:	2200      	movs	r2, #0
 8002e9a:	4966      	ldr	r1, [pc, #408]	; (8003034 <HAL_I2C_Mem_Read+0x448>)
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f000 fb77 	bl	8003590 <I2C_WaitOnFlagUntilTimeout>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0bf      	b.n	800302c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	1c5a      	adds	r2, r3, #1
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	b29a      	uxth	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	494f      	ldr	r1, [pc, #316]	; (8003034 <HAL_I2C_Mem_Read+0x448>)
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 fb49 	bl	8003590 <I2C_WaitOnFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e091      	b.n	800302c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	691a      	ldr	r2, [r3, #16]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2a:	1c5a      	adds	r2, r3, #1
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f34:	3b01      	subs	r3, #1
 8002f36:	b29a      	uxth	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f40:	b29b      	uxth	r3, r3
 8002f42:	3b01      	subs	r3, #1
 8002f44:	b29a      	uxth	r2, r3
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691a      	ldr	r2, [r3, #16]
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	b2d2      	uxtb	r2, r2
 8002f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	1c5a      	adds	r2, r3, #1
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f66:	3b01      	subs	r3, #1
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f7c:	e042      	b.n	8003004 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fc5c 	bl	8003840 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e04c      	b.n	800302c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	691a      	ldr	r2, [r3, #16]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	b2d2      	uxtb	r2, r2
 8002f9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa4:	1c5a      	adds	r2, r3, #1
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	b29a      	uxth	r2, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	3b01      	subs	r3, #1
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f003 0304 	and.w	r3, r3, #4
 8002fce:	2b04      	cmp	r3, #4
 8002fd0:	d118      	bne.n	8003004 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	b2d2      	uxtb	r2, r2
 8002fde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	1c5a      	adds	r2, r3, #1
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	b29a      	uxth	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003008:	2b00      	cmp	r3, #0
 800300a:	f47f aec2 	bne.w	8002d92 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	e000      	b.n	800302c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800302a:	2302      	movs	r3, #2
  }
}
 800302c:	4618      	mov	r0, r3
 800302e:	3728      	adds	r7, #40	; 0x28
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	00010004 	.word	0x00010004

08003038 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b08a      	sub	sp, #40	; 0x28
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	607a      	str	r2, [r7, #4]
 8003042:	603b      	str	r3, [r7, #0]
 8003044:	460b      	mov	r3, r1
 8003046:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003048:	f7fe fd4c 	bl	8001ae4 <HAL_GetTick>
 800304c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 800304e:	2301      	movs	r3, #1
 8003050:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b20      	cmp	r3, #32
 800305c:	f040 8111 	bne.w	8003282 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	2319      	movs	r3, #25
 8003066:	2201      	movs	r2, #1
 8003068:	4988      	ldr	r1, [pc, #544]	; (800328c <HAL_I2C_IsDeviceReady+0x254>)
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 fa90 	bl	8003590 <I2C_WaitOnFlagUntilTimeout>
 8003070:	4603      	mov	r3, r0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d001      	beq.n	800307a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003076:	2302      	movs	r3, #2
 8003078:	e104      	b.n	8003284 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003080:	2b01      	cmp	r3, #1
 8003082:	d101      	bne.n	8003088 <HAL_I2C_IsDeviceReady+0x50>
 8003084:	2302      	movs	r3, #2
 8003086:	e0fd      	b.n	8003284 <HAL_I2C_IsDeviceReady+0x24c>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0301 	and.w	r3, r3, #1
 800309a:	2b01      	cmp	r3, #1
 800309c:	d007      	beq.n	80030ae <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f042 0201 	orr.w	r2, r2, #1
 80030ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030bc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2224      	movs	r2, #36	; 0x24
 80030c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	4a70      	ldr	r2, [pc, #448]	; (8003290 <HAL_I2C_IsDeviceReady+0x258>)
 80030d0:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 fa4e 	bl	8003590 <I2C_WaitOnFlagUntilTimeout>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00d      	beq.n	8003116 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003104:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003108:	d103      	bne.n	8003112 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003110:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e0b6      	b.n	8003284 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003116:	897b      	ldrh	r3, [r7, #10]
 8003118:	b2db      	uxtb	r3, r3
 800311a:	461a      	mov	r2, r3
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003124:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003126:	f7fe fcdd 	bl	8001ae4 <HAL_GetTick>
 800312a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b02      	cmp	r3, #2
 8003138:	bf0c      	ite	eq
 800313a:	2301      	moveq	r3, #1
 800313c:	2300      	movne	r3, #0
 800313e:	b2db      	uxtb	r3, r3
 8003140:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	695b      	ldr	r3, [r3, #20]
 8003148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800314c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003150:	bf0c      	ite	eq
 8003152:	2301      	moveq	r3, #1
 8003154:	2300      	movne	r3, #0
 8003156:	b2db      	uxtb	r3, r3
 8003158:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800315a:	e025      	b.n	80031a8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800315c:	f7fe fcc2 	bl	8001ae4 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	683a      	ldr	r2, [r7, #0]
 8003168:	429a      	cmp	r2, r3
 800316a:	d302      	bcc.n	8003172 <HAL_I2C_IsDeviceReady+0x13a>
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d103      	bne.n	800317a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	22a0      	movs	r2, #160	; 0xa0
 8003176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b02      	cmp	r3, #2
 8003186:	bf0c      	ite	eq
 8003188:	2301      	moveq	r3, #1
 800318a:	2300      	movne	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800319a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800319e:	bf0c      	ite	eq
 80031a0:	2301      	moveq	r3, #1
 80031a2:	2300      	movne	r3, #0
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2ba0      	cmp	r3, #160	; 0xa0
 80031b2:	d005      	beq.n	80031c0 <HAL_I2C_IsDeviceReady+0x188>
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d102      	bne.n	80031c0 <HAL_I2C_IsDeviceReady+0x188>
 80031ba:	7dbb      	ldrb	r3, [r7, #22]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0cd      	beq.n	800315c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d129      	bne.n	800322a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031e4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	613b      	str	r3, [r7, #16]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	699b      	ldr	r3, [r3, #24]
 80031f8:	613b      	str	r3, [r7, #16]
 80031fa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	9300      	str	r3, [sp, #0]
 8003200:	2319      	movs	r3, #25
 8003202:	2201      	movs	r2, #1
 8003204:	4921      	ldr	r1, [pc, #132]	; (800328c <HAL_I2C_IsDeviceReady+0x254>)
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f9c2 	bl	8003590 <I2C_WaitOnFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e036      	b.n	8003284 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003226:	2300      	movs	r3, #0
 8003228:	e02c      	b.n	8003284 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003238:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003242:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	2319      	movs	r3, #25
 800324a:	2201      	movs	r2, #1
 800324c:	490f      	ldr	r1, [pc, #60]	; (800328c <HAL_I2C_IsDeviceReady+0x254>)
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 f99e 	bl	8003590 <I2C_WaitOnFlagUntilTimeout>
 8003254:	4603      	mov	r3, r0
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e012      	b.n	8003284 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	3301      	adds	r3, #1
 8003262:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	429a      	cmp	r2, r3
 800326a:	f4ff af32 	bcc.w	80030d2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2220      	movs	r2, #32
 8003272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003282:	2302      	movs	r3, #2
  }
}
 8003284:	4618      	mov	r0, r3
 8003286:	3720      	adds	r7, #32
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	00100002 	.word	0x00100002
 8003290:	ffff0000 	.word	0xffff0000

08003294 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b088      	sub	sp, #32
 8003298:	af02      	add	r7, sp, #8
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	4608      	mov	r0, r1
 800329e:	4611      	mov	r1, r2
 80032a0:	461a      	mov	r2, r3
 80032a2:	4603      	mov	r3, r0
 80032a4:	817b      	strh	r3, [r7, #10]
 80032a6:	460b      	mov	r3, r1
 80032a8:	813b      	strh	r3, [r7, #8]
 80032aa:	4613      	mov	r3, r2
 80032ac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80032bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	6a3b      	ldr	r3, [r7, #32]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f960 	bl	8003590 <I2C_WaitOnFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00d      	beq.n	80032f2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032e4:	d103      	bne.n	80032ee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e05f      	b.n	80033b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032f2:	897b      	ldrh	r3, [r7, #10]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	461a      	mov	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003300:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	6a3a      	ldr	r2, [r7, #32]
 8003306:	492d      	ldr	r1, [pc, #180]	; (80033bc <I2C_RequestMemoryWrite+0x128>)
 8003308:	68f8      	ldr	r0, [r7, #12]
 800330a:	f000 f998 	bl	800363e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d001      	beq.n	8003318 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e04c      	b.n	80033b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	617b      	str	r3, [r7, #20]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800332e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003330:	6a39      	ldr	r1, [r7, #32]
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	f000 fa02 	bl	800373c <I2C_WaitOnTXEFlagUntilTimeout>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d00d      	beq.n	800335a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	2b04      	cmp	r3, #4
 8003344:	d107      	bne.n	8003356 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003354:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e02b      	b.n	80033b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800335a:	88fb      	ldrh	r3, [r7, #6]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d105      	bne.n	800336c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003360:	893b      	ldrh	r3, [r7, #8]
 8003362:	b2da      	uxtb	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	611a      	str	r2, [r3, #16]
 800336a:	e021      	b.n	80033b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800336c:	893b      	ldrh	r3, [r7, #8]
 800336e:	0a1b      	lsrs	r3, r3, #8
 8003370:	b29b      	uxth	r3, r3
 8003372:	b2da      	uxtb	r2, r3
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800337a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800337c:	6a39      	ldr	r1, [r7, #32]
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f9dc 	bl	800373c <I2C_WaitOnTXEFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00d      	beq.n	80033a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338e:	2b04      	cmp	r3, #4
 8003390:	d107      	bne.n	80033a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e005      	b.n	80033b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80033a6:	893b      	ldrh	r3, [r7, #8]
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	00010002 	.word	0x00010002

080033c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b088      	sub	sp, #32
 80033c4:	af02      	add	r7, sp, #8
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	4608      	mov	r0, r1
 80033ca:	4611      	mov	r1, r2
 80033cc:	461a      	mov	r2, r3
 80033ce:	4603      	mov	r3, r0
 80033d0:	817b      	strh	r3, [r7, #10]
 80033d2:	460b      	mov	r3, r1
 80033d4:	813b      	strh	r3, [r7, #8]
 80033d6:	4613      	mov	r3, r2
 80033d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	6a3b      	ldr	r3, [r7, #32]
 8003400:	2200      	movs	r2, #0
 8003402:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003406:	68f8      	ldr	r0, [r7, #12]
 8003408:	f000 f8c2 	bl	8003590 <I2C_WaitOnFlagUntilTimeout>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d00d      	beq.n	800342e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003420:	d103      	bne.n	800342a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003428:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e0aa      	b.n	8003584 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800342e:	897b      	ldrh	r3, [r7, #10]
 8003430:	b2db      	uxtb	r3, r3
 8003432:	461a      	mov	r2, r3
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800343c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	6a3a      	ldr	r2, [r7, #32]
 8003442:	4952      	ldr	r1, [pc, #328]	; (800358c <I2C_RequestMemoryRead+0x1cc>)
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f000 f8fa 	bl	800363e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800344a:	4603      	mov	r3, r0
 800344c:	2b00      	cmp	r3, #0
 800344e:	d001      	beq.n	8003454 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e097      	b.n	8003584 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	617b      	str	r3, [r7, #20]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	617b      	str	r3, [r7, #20]
 8003468:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800346a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800346c:	6a39      	ldr	r1, [r7, #32]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f964 	bl	800373c <I2C_WaitOnTXEFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00d      	beq.n	8003496 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347e:	2b04      	cmp	r3, #4
 8003480:	d107      	bne.n	8003492 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003490:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e076      	b.n	8003584 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003496:	88fb      	ldrh	r3, [r7, #6]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d105      	bne.n	80034a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800349c:	893b      	ldrh	r3, [r7, #8]
 800349e:	b2da      	uxtb	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	611a      	str	r2, [r3, #16]
 80034a6:	e021      	b.n	80034ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80034a8:	893b      	ldrh	r3, [r7, #8]
 80034aa:	0a1b      	lsrs	r3, r3, #8
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b8:	6a39      	ldr	r1, [r7, #32]
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f93e 	bl	800373c <I2C_WaitOnTXEFlagUntilTimeout>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00d      	beq.n	80034e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ca:	2b04      	cmp	r3, #4
 80034cc:	d107      	bne.n	80034de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e050      	b.n	8003584 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034e2:	893b      	ldrh	r3, [r7, #8]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ee:	6a39      	ldr	r1, [r7, #32]
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f923 	bl	800373c <I2C_WaitOnTXEFlagUntilTimeout>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d00d      	beq.n	8003518 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003500:	2b04      	cmp	r3, #4
 8003502:	d107      	bne.n	8003514 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003512:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e035      	b.n	8003584 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003526:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352a:	9300      	str	r3, [sp, #0]
 800352c:	6a3b      	ldr	r3, [r7, #32]
 800352e:	2200      	movs	r2, #0
 8003530:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f82b 	bl	8003590 <I2C_WaitOnFlagUntilTimeout>
 800353a:	4603      	mov	r3, r0
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00d      	beq.n	800355c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800354a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800354e:	d103      	bne.n	8003558 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003556:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003558:	2303      	movs	r3, #3
 800355a:	e013      	b.n	8003584 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800355c:	897b      	ldrh	r3, [r7, #10]
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f043 0301 	orr.w	r3, r3, #1
 8003564:	b2da      	uxtb	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	6a3a      	ldr	r2, [r7, #32]
 8003570:	4906      	ldr	r1, [pc, #24]	; (800358c <I2C_RequestMemoryRead+0x1cc>)
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f863 	bl	800363e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e000      	b.n	8003584 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3718      	adds	r7, #24
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	00010002 	.word	0x00010002

08003590 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	60f8      	str	r0, [r7, #12]
 8003598:	60b9      	str	r1, [r7, #8]
 800359a:	603b      	str	r3, [r7, #0]
 800359c:	4613      	mov	r3, r2
 800359e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035a0:	e025      	b.n	80035ee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a8:	d021      	beq.n	80035ee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035aa:	f7fe fa9b 	bl	8001ae4 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d302      	bcc.n	80035c0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d116      	bne.n	80035ee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2220      	movs	r2, #32
 80035ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035da:	f043 0220 	orr.w	r2, r3, #32
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e023      	b.n	8003636 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	0c1b      	lsrs	r3, r3, #16
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d10d      	bne.n	8003614 <I2C_WaitOnFlagUntilTimeout+0x84>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	695b      	ldr	r3, [r3, #20]
 80035fe:	43da      	mvns	r2, r3
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	4013      	ands	r3, r2
 8003604:	b29b      	uxth	r3, r3
 8003606:	2b00      	cmp	r3, #0
 8003608:	bf0c      	ite	eq
 800360a:	2301      	moveq	r3, #1
 800360c:	2300      	movne	r3, #0
 800360e:	b2db      	uxtb	r3, r3
 8003610:	461a      	mov	r2, r3
 8003612:	e00c      	b.n	800362e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	699b      	ldr	r3, [r3, #24]
 800361a:	43da      	mvns	r2, r3
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4013      	ands	r3, r2
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	bf0c      	ite	eq
 8003626:	2301      	moveq	r3, #1
 8003628:	2300      	movne	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	461a      	mov	r2, r3
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	429a      	cmp	r2, r3
 8003632:	d0b6      	beq.n	80035a2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b084      	sub	sp, #16
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
 800364a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800364c:	e051      	b.n	80036f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003658:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800365c:	d123      	bne.n	80036a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800366c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003676:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2200      	movs	r2, #0
 800367c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003692:	f043 0204 	orr.w	r2, r3, #4
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e046      	b.n	8003734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ac:	d021      	beq.n	80036f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ae:	f7fe fa19 	bl	8001ae4 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d302      	bcc.n	80036c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d116      	bne.n	80036f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2220      	movs	r2, #32
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036de:	f043 0220 	orr.w	r2, r3, #32
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e020      	b.n	8003734 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	0c1b      	lsrs	r3, r3, #16
 80036f6:	b2db      	uxtb	r3, r3
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d10c      	bne.n	8003716 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	43da      	mvns	r2, r3
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	4013      	ands	r3, r2
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	bf14      	ite	ne
 800370e:	2301      	movne	r3, #1
 8003710:	2300      	moveq	r3, #0
 8003712:	b2db      	uxtb	r3, r3
 8003714:	e00b      	b.n	800372e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	43da      	mvns	r2, r3
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4013      	ands	r3, r2
 8003722:	b29b      	uxth	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	bf14      	ite	ne
 8003728:	2301      	movne	r3, #1
 800372a:	2300      	moveq	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	d18d      	bne.n	800364e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003732:	2300      	movs	r3, #0
}
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003748:	e02d      	b.n	80037a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f8ce 	bl	80038ec <I2C_IsAcknowledgeFailed>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e02d      	b.n	80037b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003760:	d021      	beq.n	80037a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003762:	f7fe f9bf 	bl	8001ae4 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	429a      	cmp	r2, r3
 8003770:	d302      	bcc.n	8003778 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d116      	bne.n	80037a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2220      	movs	r2, #32
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003792:	f043 0220 	orr.w	r2, r3, #32
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e007      	b.n	80037b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037b0:	2b80      	cmp	r3, #128	; 0x80
 80037b2:	d1ca      	bne.n	800374a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80037ca:	e02d      	b.n	8003828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f000 f88d 	bl	80038ec <I2C_IsAcknowledgeFailed>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e02d      	b.n	8003838 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e2:	d021      	beq.n	8003828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e4:	f7fe f97e 	bl	8001ae4 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d302      	bcc.n	80037fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d116      	bne.n	8003828 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	f043 0220 	orr.w	r2, r3, #32
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e007      	b.n	8003838 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f003 0304 	and.w	r3, r3, #4
 8003832:	2b04      	cmp	r3, #4
 8003834:	d1ca      	bne.n	80037cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800384c:	e042      	b.n	80038d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
 8003854:	f003 0310 	and.w	r3, r3, #16
 8003858:	2b10      	cmp	r3, #16
 800385a:	d119      	bne.n	8003890 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f06f 0210 	mvn.w	r2, #16
 8003864:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2220      	movs	r2, #32
 8003870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e029      	b.n	80038e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003890:	f7fe f928 	bl	8001ae4 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	68ba      	ldr	r2, [r7, #8]
 800389c:	429a      	cmp	r2, r3
 800389e:	d302      	bcc.n	80038a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d116      	bne.n	80038d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2220      	movs	r2, #32
 80038b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	f043 0220 	orr.w	r2, r3, #32
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e007      	b.n	80038e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	695b      	ldr	r3, [r3, #20]
 80038da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038de:	2b40      	cmp	r3, #64	; 0x40
 80038e0:	d1b5      	bne.n	800384e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038e2:	2300      	movs	r3, #0
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3710      	adds	r7, #16
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003902:	d11b      	bne.n	800393c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800390c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2220      	movs	r2, #32
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003928:	f043 0204 	orr.w	r2, r3, #4
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	370c      	adds	r7, #12
 8003942:	46bd      	mov	sp, r7
 8003944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003948:	4770      	bx	lr
	...

0800394c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
 8003954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e0cc      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003960:	4b68      	ldr	r3, [pc, #416]	; (8003b04 <HAL_RCC_ClockConfig+0x1b8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 030f 	and.w	r3, r3, #15
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d90c      	bls.n	8003988 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396e:	4b65      	ldr	r3, [pc, #404]	; (8003b04 <HAL_RCC_ClockConfig+0x1b8>)
 8003970:	683a      	ldr	r2, [r7, #0]
 8003972:	b2d2      	uxtb	r2, r2
 8003974:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003976:	4b63      	ldr	r3, [pc, #396]	; (8003b04 <HAL_RCC_ClockConfig+0x1b8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 030f 	and.w	r3, r3, #15
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	429a      	cmp	r2, r3
 8003982:	d001      	beq.n	8003988 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	e0b8      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b00      	cmp	r3, #0
 8003992:	d020      	beq.n	80039d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d005      	beq.n	80039ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80039a0:	4b59      	ldr	r3, [pc, #356]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	4a58      	ldr	r2, [pc, #352]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80039aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0308 	and.w	r3, r3, #8
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80039b8:	4b53      	ldr	r3, [pc, #332]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 80039ba:	689b      	ldr	r3, [r3, #8]
 80039bc:	4a52      	ldr	r2, [pc, #328]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 80039be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80039c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039c4:	4b50      	ldr	r3, [pc, #320]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 80039c6:	689b      	ldr	r3, [r3, #8]
 80039c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	494d      	ldr	r1, [pc, #308]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0301 	and.w	r3, r3, #1
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d044      	beq.n	8003a6c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d107      	bne.n	80039fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039ea:	4b47      	ldr	r3, [pc, #284]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d119      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e07f      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d003      	beq.n	8003a0a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d107      	bne.n	8003a1a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a0a:	4b3f      	ldr	r3, [pc, #252]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d109      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e06f      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1a:	4b3b      	ldr	r3, [pc, #236]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0302 	and.w	r3, r3, #2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e067      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a2a:	4b37      	ldr	r3, [pc, #220]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f023 0203 	bic.w	r2, r3, #3
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	4934      	ldr	r1, [pc, #208]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a3c:	f7fe f852 	bl	8001ae4 <HAL_GetTick>
 8003a40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a42:	e00a      	b.n	8003a5a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a44:	f7fe f84e 	bl	8001ae4 <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e04f      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a5a:	4b2b      	ldr	r3, [pc, #172]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	f003 020c 	and.w	r2, r3, #12
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d1eb      	bne.n	8003a44 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a6c:	4b25      	ldr	r3, [pc, #148]	; (8003b04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 030f 	and.w	r3, r3, #15
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d20c      	bcs.n	8003a94 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7a:	4b22      	ldr	r3, [pc, #136]	; (8003b04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	b2d2      	uxtb	r2, r2
 8003a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a82:	4b20      	ldr	r3, [pc, #128]	; (8003b04 <HAL_RCC_ClockConfig+0x1b8>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	683a      	ldr	r2, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d001      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e032      	b.n	8003afa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f003 0304 	and.w	r3, r3, #4
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003aa0:	4b19      	ldr	r3, [pc, #100]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	4916      	ldr	r1, [pc, #88]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d009      	beq.n	8003ad2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003abe:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	00db      	lsls	r3, r3, #3
 8003acc:	490e      	ldr	r1, [pc, #56]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ad2:	f000 f855 	bl	8003b80 <HAL_RCC_GetSysClockFreq>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	4b0b      	ldr	r3, [pc, #44]	; (8003b08 <HAL_RCC_ClockConfig+0x1bc>)
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	f003 030f 	and.w	r3, r3, #15
 8003ae2:	490a      	ldr	r1, [pc, #40]	; (8003b0c <HAL_RCC_ClockConfig+0x1c0>)
 8003ae4:	5ccb      	ldrb	r3, [r1, r3]
 8003ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8003aea:	4a09      	ldr	r2, [pc, #36]	; (8003b10 <HAL_RCC_ClockConfig+0x1c4>)
 8003aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003aee:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <HAL_RCC_ClockConfig+0x1c8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7fd ffb2 	bl	8001a5c <HAL_InitTick>

  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
 8003b02:	bf00      	nop
 8003b04:	40023c00 	.word	0x40023c00
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	080062f0 	.word	0x080062f0
 8003b10:	20000000 	.word	0x20000000
 8003b14:	20000004 	.word	0x20000004

08003b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b1c:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	20000000 	.word	0x20000000

08003b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b34:	f7ff fff0 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	4b05      	ldr	r3, [pc, #20]	; (8003b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	0a9b      	lsrs	r3, r3, #10
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	4903      	ldr	r1, [pc, #12]	; (8003b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b46:	5ccb      	ldrb	r3, [r1, r3]
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40023800 	.word	0x40023800
 8003b54:	08006300 	.word	0x08006300

08003b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b5c:	f7ff ffdc 	bl	8003b18 <HAL_RCC_GetHCLKFreq>
 8003b60:	4602      	mov	r2, r0
 8003b62:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	0b5b      	lsrs	r3, r3, #13
 8003b68:	f003 0307 	and.w	r3, r3, #7
 8003b6c:	4903      	ldr	r1, [pc, #12]	; (8003b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b6e:	5ccb      	ldrb	r3, [r1, r3]
 8003b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	08006300 	.word	0x08006300

08003b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b84:	b088      	sub	sp, #32
 8003b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003b94:	2300      	movs	r3, #0
 8003b96:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b9c:	4bce      	ldr	r3, [pc, #824]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f003 030c 	and.w	r3, r3, #12
 8003ba4:	2b0c      	cmp	r3, #12
 8003ba6:	f200 818d 	bhi.w	8003ec4 <HAL_RCC_GetSysClockFreq+0x344>
 8003baa:	a201      	add	r2, pc, #4	; (adr r2, 8003bb0 <HAL_RCC_GetSysClockFreq+0x30>)
 8003bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb0:	08003be5 	.word	0x08003be5
 8003bb4:	08003ec5 	.word	0x08003ec5
 8003bb8:	08003ec5 	.word	0x08003ec5
 8003bbc:	08003ec5 	.word	0x08003ec5
 8003bc0:	08003beb 	.word	0x08003beb
 8003bc4:	08003ec5 	.word	0x08003ec5
 8003bc8:	08003ec5 	.word	0x08003ec5
 8003bcc:	08003ec5 	.word	0x08003ec5
 8003bd0:	08003bf1 	.word	0x08003bf1
 8003bd4:	08003ec5 	.word	0x08003ec5
 8003bd8:	08003ec5 	.word	0x08003ec5
 8003bdc:	08003ec5 	.word	0x08003ec5
 8003be0:	08003d65 	.word	0x08003d65
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be4:	4bbd      	ldr	r3, [pc, #756]	; (8003edc <HAL_RCC_GetSysClockFreq+0x35c>)
 8003be6:	61bb      	str	r3, [r7, #24]
       break;
 8003be8:	e16f      	b.n	8003eca <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bea:	4bbd      	ldr	r3, [pc, #756]	; (8003ee0 <HAL_RCC_GetSysClockFreq+0x360>)
 8003bec:	61bb      	str	r3, [r7, #24]
      break;
 8003bee:	e16c      	b.n	8003eca <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bf0:	4bb9      	ldr	r3, [pc, #740]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bf8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bfa:	4bb7      	ldr	r3, [pc, #732]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d053      	beq.n	8003cae <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c06:	4bb4      	ldr	r3, [pc, #720]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	099b      	lsrs	r3, r3, #6
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003c16:	f04f 0100 	mov.w	r1, #0
 8003c1a:	ea02 0400 	and.w	r4, r2, r0
 8003c1e:	603c      	str	r4, [r7, #0]
 8003c20:	400b      	ands	r3, r1
 8003c22:	607b      	str	r3, [r7, #4]
 8003c24:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c28:	4620      	mov	r0, r4
 8003c2a:	4629      	mov	r1, r5
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	f04f 0300 	mov.w	r3, #0
 8003c34:	014b      	lsls	r3, r1, #5
 8003c36:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003c3a:	0142      	lsls	r2, r0, #5
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4623      	mov	r3, r4
 8003c42:	1ac0      	subs	r0, r0, r3
 8003c44:	462b      	mov	r3, r5
 8003c46:	eb61 0103 	sbc.w	r1, r1, r3
 8003c4a:	f04f 0200 	mov.w	r2, #0
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	018b      	lsls	r3, r1, #6
 8003c54:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c58:	0182      	lsls	r2, r0, #6
 8003c5a:	1a12      	subs	r2, r2, r0
 8003c5c:	eb63 0301 	sbc.w	r3, r3, r1
 8003c60:	f04f 0000 	mov.w	r0, #0
 8003c64:	f04f 0100 	mov.w	r1, #0
 8003c68:	00d9      	lsls	r1, r3, #3
 8003c6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c6e:	00d0      	lsls	r0, r2, #3
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4621      	mov	r1, r4
 8003c76:	1852      	adds	r2, r2, r1
 8003c78:	4629      	mov	r1, r5
 8003c7a:	eb43 0101 	adc.w	r1, r3, r1
 8003c7e:	460b      	mov	r3, r1
 8003c80:	f04f 0000 	mov.w	r0, #0
 8003c84:	f04f 0100 	mov.w	r1, #0
 8003c88:	0259      	lsls	r1, r3, #9
 8003c8a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003c8e:	0250      	lsls	r0, r2, #9
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4610      	mov	r0, r2
 8003c96:	4619      	mov	r1, r3
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f04f 0300 	mov.w	r3, #0
 8003ca0:	f7fc fb06 	bl	80002b0 <__aeabi_uldivmod>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4613      	mov	r3, r2
 8003caa:	61fb      	str	r3, [r7, #28]
 8003cac:	e04c      	b.n	8003d48 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cae:	4b8a      	ldr	r3, [pc, #552]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	099b      	lsrs	r3, r3, #6
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	f04f 0300 	mov.w	r3, #0
 8003cba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003cbe:	f04f 0100 	mov.w	r1, #0
 8003cc2:	ea02 0a00 	and.w	sl, r2, r0
 8003cc6:	ea03 0b01 	and.w	fp, r3, r1
 8003cca:	4650      	mov	r0, sl
 8003ccc:	4659      	mov	r1, fp
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	014b      	lsls	r3, r1, #5
 8003cd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003cdc:	0142      	lsls	r2, r0, #5
 8003cde:	4610      	mov	r0, r2
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	ebb0 000a 	subs.w	r0, r0, sl
 8003ce6:	eb61 010b 	sbc.w	r1, r1, fp
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	018b      	lsls	r3, r1, #6
 8003cf4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003cf8:	0182      	lsls	r2, r0, #6
 8003cfa:	1a12      	subs	r2, r2, r0
 8003cfc:	eb63 0301 	sbc.w	r3, r3, r1
 8003d00:	f04f 0000 	mov.w	r0, #0
 8003d04:	f04f 0100 	mov.w	r1, #0
 8003d08:	00d9      	lsls	r1, r3, #3
 8003d0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d0e:	00d0      	lsls	r0, r2, #3
 8003d10:	4602      	mov	r2, r0
 8003d12:	460b      	mov	r3, r1
 8003d14:	eb12 020a 	adds.w	r2, r2, sl
 8003d18:	eb43 030b 	adc.w	r3, r3, fp
 8003d1c:	f04f 0000 	mov.w	r0, #0
 8003d20:	f04f 0100 	mov.w	r1, #0
 8003d24:	0299      	lsls	r1, r3, #10
 8003d26:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003d2a:	0290      	lsls	r0, r2, #10
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4610      	mov	r0, r2
 8003d32:	4619      	mov	r1, r3
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	461a      	mov	r2, r3
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	f7fc fab8 	bl	80002b0 <__aeabi_uldivmod>
 8003d40:	4602      	mov	r2, r0
 8003d42:	460b      	mov	r3, r1
 8003d44:	4613      	mov	r3, r2
 8003d46:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003d48:	4b63      	ldr	r3, [pc, #396]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	0c1b      	lsrs	r3, r3, #16
 8003d4e:	f003 0303 	and.w	r3, r3, #3
 8003d52:	3301      	adds	r3, #1
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003d58:	69fa      	ldr	r2, [r7, #28]
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d60:	61bb      	str	r3, [r7, #24]
      break;
 8003d62:	e0b2      	b.n	8003eca <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d64:	4b5c      	ldr	r3, [pc, #368]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d6c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d6e:	4b5a      	ldr	r3, [pc, #360]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d04d      	beq.n	8003e16 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d7a:	4b57      	ldr	r3, [pc, #348]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	099b      	lsrs	r3, r3, #6
 8003d80:	461a      	mov	r2, r3
 8003d82:	f04f 0300 	mov.w	r3, #0
 8003d86:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d8a:	f04f 0100 	mov.w	r1, #0
 8003d8e:	ea02 0800 	and.w	r8, r2, r0
 8003d92:	ea03 0901 	and.w	r9, r3, r1
 8003d96:	4640      	mov	r0, r8
 8003d98:	4649      	mov	r1, r9
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	f04f 0300 	mov.w	r3, #0
 8003da2:	014b      	lsls	r3, r1, #5
 8003da4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003da8:	0142      	lsls	r2, r0, #5
 8003daa:	4610      	mov	r0, r2
 8003dac:	4619      	mov	r1, r3
 8003dae:	ebb0 0008 	subs.w	r0, r0, r8
 8003db2:	eb61 0109 	sbc.w	r1, r1, r9
 8003db6:	f04f 0200 	mov.w	r2, #0
 8003dba:	f04f 0300 	mov.w	r3, #0
 8003dbe:	018b      	lsls	r3, r1, #6
 8003dc0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dc4:	0182      	lsls	r2, r0, #6
 8003dc6:	1a12      	subs	r2, r2, r0
 8003dc8:	eb63 0301 	sbc.w	r3, r3, r1
 8003dcc:	f04f 0000 	mov.w	r0, #0
 8003dd0:	f04f 0100 	mov.w	r1, #0
 8003dd4:	00d9      	lsls	r1, r3, #3
 8003dd6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dda:	00d0      	lsls	r0, r2, #3
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	eb12 0208 	adds.w	r2, r2, r8
 8003de4:	eb43 0309 	adc.w	r3, r3, r9
 8003de8:	f04f 0000 	mov.w	r0, #0
 8003dec:	f04f 0100 	mov.w	r1, #0
 8003df0:	0259      	lsls	r1, r3, #9
 8003df2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003df6:	0250      	lsls	r0, r2, #9
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	4619      	mov	r1, r3
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	461a      	mov	r2, r3
 8003e04:	f04f 0300 	mov.w	r3, #0
 8003e08:	f7fc fa52 	bl	80002b0 <__aeabi_uldivmod>
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4613      	mov	r3, r2
 8003e12:	61fb      	str	r3, [r7, #28]
 8003e14:	e04a      	b.n	8003eac <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e16:	4b30      	ldr	r3, [pc, #192]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	099b      	lsrs	r3, r3, #6
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	f04f 0300 	mov.w	r3, #0
 8003e22:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003e26:	f04f 0100 	mov.w	r1, #0
 8003e2a:	ea02 0400 	and.w	r4, r2, r0
 8003e2e:	ea03 0501 	and.w	r5, r3, r1
 8003e32:	4620      	mov	r0, r4
 8003e34:	4629      	mov	r1, r5
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	f04f 0300 	mov.w	r3, #0
 8003e3e:	014b      	lsls	r3, r1, #5
 8003e40:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003e44:	0142      	lsls	r2, r0, #5
 8003e46:	4610      	mov	r0, r2
 8003e48:	4619      	mov	r1, r3
 8003e4a:	1b00      	subs	r0, r0, r4
 8003e4c:	eb61 0105 	sbc.w	r1, r1, r5
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	018b      	lsls	r3, r1, #6
 8003e5a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003e5e:	0182      	lsls	r2, r0, #6
 8003e60:	1a12      	subs	r2, r2, r0
 8003e62:	eb63 0301 	sbc.w	r3, r3, r1
 8003e66:	f04f 0000 	mov.w	r0, #0
 8003e6a:	f04f 0100 	mov.w	r1, #0
 8003e6e:	00d9      	lsls	r1, r3, #3
 8003e70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e74:	00d0      	lsls	r0, r2, #3
 8003e76:	4602      	mov	r2, r0
 8003e78:	460b      	mov	r3, r1
 8003e7a:	1912      	adds	r2, r2, r4
 8003e7c:	eb45 0303 	adc.w	r3, r5, r3
 8003e80:	f04f 0000 	mov.w	r0, #0
 8003e84:	f04f 0100 	mov.w	r1, #0
 8003e88:	0299      	lsls	r1, r3, #10
 8003e8a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e8e:	0290      	lsls	r0, r2, #10
 8003e90:	4602      	mov	r2, r0
 8003e92:	460b      	mov	r3, r1
 8003e94:	4610      	mov	r0, r2
 8003e96:	4619      	mov	r1, r3
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	f04f 0300 	mov.w	r3, #0
 8003ea0:	f7fc fa06 	bl	80002b0 <__aeabi_uldivmod>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003eac:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <HAL_RCC_GetSysClockFreq+0x358>)
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	0f1b      	lsrs	r3, r3, #28
 8003eb2:	f003 0307 	and.w	r3, r3, #7
 8003eb6:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003eb8:	69fa      	ldr	r2, [r7, #28]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec0:	61bb      	str	r3, [r7, #24]
      break;
 8003ec2:	e002      	b.n	8003eca <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ec4:	4b05      	ldr	r3, [pc, #20]	; (8003edc <HAL_RCC_GetSysClockFreq+0x35c>)
 8003ec6:	61bb      	str	r3, [r7, #24]
      break;
 8003ec8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003eca:	69bb      	ldr	r3, [r7, #24]
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3720      	adds	r7, #32
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003ed6:	bf00      	nop
 8003ed8:	40023800 	.word	0x40023800
 8003edc:	00f42400 	.word	0x00f42400
 8003ee0:	007a1200 	.word	0x007a1200

08003ee4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b086      	sub	sp, #24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e28d      	b.n	8004412 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0301 	and.w	r3, r3, #1
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	f000 8083 	beq.w	800400a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f04:	4b94      	ldr	r3, [pc, #592]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f003 030c 	and.w	r3, r3, #12
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d019      	beq.n	8003f44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f10:	4b91      	ldr	r3, [pc, #580]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d106      	bne.n	8003f2a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f1c:	4b8e      	ldr	r3, [pc, #568]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f28:	d00c      	beq.n	8003f44 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f2a:	4b8b      	ldr	r3, [pc, #556]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003f32:	2b0c      	cmp	r3, #12
 8003f34:	d112      	bne.n	8003f5c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f36:	4b88      	ldr	r3, [pc, #544]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f3e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f42:	d10b      	bne.n	8003f5c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f44:	4b84      	ldr	r3, [pc, #528]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d05b      	beq.n	8004008 <HAL_RCC_OscConfig+0x124>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d157      	bne.n	8004008 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e25a      	b.n	8004412 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f64:	d106      	bne.n	8003f74 <HAL_RCC_OscConfig+0x90>
 8003f66:	4b7c      	ldr	r3, [pc, #496]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a7b      	ldr	r2, [pc, #492]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8003f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	e01d      	b.n	8003fb0 <HAL_RCC_OscConfig+0xcc>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f7c:	d10c      	bne.n	8003f98 <HAL_RCC_OscConfig+0xb4>
 8003f7e:	4b76      	ldr	r3, [pc, #472]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a75      	ldr	r2, [pc, #468]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8003f84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	4b73      	ldr	r3, [pc, #460]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a72      	ldr	r2, [pc, #456]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8003f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	e00b      	b.n	8003fb0 <HAL_RCC_OscConfig+0xcc>
 8003f98:	4b6f      	ldr	r3, [pc, #444]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a6e      	ldr	r2, [pc, #440]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8003f9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	4b6c      	ldr	r3, [pc, #432]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4a6b      	ldr	r2, [pc, #428]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8003faa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d013      	beq.n	8003fe0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb8:	f7fd fd94 	bl	8001ae4 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fc0:	f7fd fd90 	bl	8001ae4 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b64      	cmp	r3, #100	; 0x64
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e21f      	b.n	8004412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fd2:	4b61      	ldr	r3, [pc, #388]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCC_OscConfig+0xdc>
 8003fde:	e014      	b.n	800400a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fe0:	f7fd fd80 	bl	8001ae4 <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe6:	e008      	b.n	8003ffa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fe8:	f7fd fd7c 	bl	8001ae4 <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b64      	cmp	r3, #100	; 0x64
 8003ff4:	d901      	bls.n	8003ffa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e20b      	b.n	8004412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ffa:	4b57      	ldr	r3, [pc, #348]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d1f0      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x104>
 8004006:	e000      	b.n	800400a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004008:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d06f      	beq.n	80040f6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004016:	4b50      	ldr	r3, [pc, #320]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8004018:	689b      	ldr	r3, [r3, #8]
 800401a:	f003 030c 	and.w	r3, r3, #12
 800401e:	2b00      	cmp	r3, #0
 8004020:	d017      	beq.n	8004052 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004022:	4b4d      	ldr	r3, [pc, #308]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800402a:	2b08      	cmp	r3, #8
 800402c:	d105      	bne.n	800403a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800402e:	4b4a      	ldr	r3, [pc, #296]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00b      	beq.n	8004052 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800403a:	4b47      	ldr	r3, [pc, #284]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004042:	2b0c      	cmp	r3, #12
 8004044:	d11c      	bne.n	8004080 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004046:	4b44      	ldr	r3, [pc, #272]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d116      	bne.n	8004080 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004052:	4b41      	ldr	r3, [pc, #260]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d005      	beq.n	800406a <HAL_RCC_OscConfig+0x186>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d001      	beq.n	800406a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e1d3      	b.n	8004412 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800406a:	4b3b      	ldr	r3, [pc, #236]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4937      	ldr	r1, [pc, #220]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 800407a:	4313      	orrs	r3, r2
 800407c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800407e:	e03a      	b.n	80040f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	68db      	ldr	r3, [r3, #12]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d020      	beq.n	80040ca <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004088:	4b34      	ldr	r3, [pc, #208]	; (800415c <HAL_RCC_OscConfig+0x278>)
 800408a:	2201      	movs	r2, #1
 800408c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408e:	f7fd fd29 	bl	8001ae4 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004094:	e008      	b.n	80040a8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004096:	f7fd fd25 	bl	8001ae4 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e1b4      	b.n	8004412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040a8:	4b2b      	ldr	r3, [pc, #172]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0302 	and.w	r3, r3, #2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0f0      	beq.n	8004096 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040b4:	4b28      	ldr	r3, [pc, #160]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	691b      	ldr	r3, [r3, #16]
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	4925      	ldr	r1, [pc, #148]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 80040c4:	4313      	orrs	r3, r2
 80040c6:	600b      	str	r3, [r1, #0]
 80040c8:	e015      	b.n	80040f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ca:	4b24      	ldr	r3, [pc, #144]	; (800415c <HAL_RCC_OscConfig+0x278>)
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d0:	f7fd fd08 	bl	8001ae4 <HAL_GetTick>
 80040d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040d6:	e008      	b.n	80040ea <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d8:	f7fd fd04 	bl	8001ae4 <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d901      	bls.n	80040ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e193      	b.n	8004412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ea:	4b1b      	ldr	r3, [pc, #108]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0302 	and.w	r3, r3, #2
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d1f0      	bne.n	80040d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0308 	and.w	r3, r3, #8
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d036      	beq.n	8004170 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d016      	beq.n	8004138 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800410a:	4b15      	ldr	r3, [pc, #84]	; (8004160 <HAL_RCC_OscConfig+0x27c>)
 800410c:	2201      	movs	r2, #1
 800410e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004110:	f7fd fce8 	bl	8001ae4 <HAL_GetTick>
 8004114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004116:	e008      	b.n	800412a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004118:	f7fd fce4 	bl	8001ae4 <HAL_GetTick>
 800411c:	4602      	mov	r2, r0
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	2b02      	cmp	r3, #2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e173      	b.n	8004412 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800412a:	4b0b      	ldr	r3, [pc, #44]	; (8004158 <HAL_RCC_OscConfig+0x274>)
 800412c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d0f0      	beq.n	8004118 <HAL_RCC_OscConfig+0x234>
 8004136:	e01b      	b.n	8004170 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <HAL_RCC_OscConfig+0x27c>)
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800413e:	f7fd fcd1 	bl	8001ae4 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004144:	e00e      	b.n	8004164 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004146:	f7fd fccd 	bl	8001ae4 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d907      	bls.n	8004164 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e15c      	b.n	8004412 <HAL_RCC_OscConfig+0x52e>
 8004158:	40023800 	.word	0x40023800
 800415c:	42470000 	.word	0x42470000
 8004160:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004164:	4b8a      	ldr	r3, [pc, #552]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 8004166:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1ea      	bne.n	8004146 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 8097 	beq.w	80042ac <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417e:	2300      	movs	r3, #0
 8004180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004182:	4b83      	ldr	r3, [pc, #524]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800418a:	2b00      	cmp	r3, #0
 800418c:	d10f      	bne.n	80041ae <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418e:	2300      	movs	r3, #0
 8004190:	60bb      	str	r3, [r7, #8]
 8004192:	4b7f      	ldr	r3, [pc, #508]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	4a7e      	ldr	r2, [pc, #504]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 8004198:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419c:	6413      	str	r3, [r2, #64]	; 0x40
 800419e:	4b7c      	ldr	r3, [pc, #496]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a6:	60bb      	str	r3, [r7, #8]
 80041a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041aa:	2301      	movs	r3, #1
 80041ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ae:	4b79      	ldr	r3, [pc, #484]	; (8004394 <HAL_RCC_OscConfig+0x4b0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d118      	bne.n	80041ec <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ba:	4b76      	ldr	r3, [pc, #472]	; (8004394 <HAL_RCC_OscConfig+0x4b0>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a75      	ldr	r2, [pc, #468]	; (8004394 <HAL_RCC_OscConfig+0x4b0>)
 80041c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041c6:	f7fd fc8d 	bl	8001ae4 <HAL_GetTick>
 80041ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041cc:	e008      	b.n	80041e0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ce:	f7fd fc89 	bl	8001ae4 <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d901      	bls.n	80041e0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80041dc:	2303      	movs	r3, #3
 80041de:	e118      	b.n	8004412 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e0:	4b6c      	ldr	r3, [pc, #432]	; (8004394 <HAL_RCC_OscConfig+0x4b0>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d0f0      	beq.n	80041ce <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d106      	bne.n	8004202 <HAL_RCC_OscConfig+0x31e>
 80041f4:	4b66      	ldr	r3, [pc, #408]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 80041f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f8:	4a65      	ldr	r2, [pc, #404]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 80041fa:	f043 0301 	orr.w	r3, r3, #1
 80041fe:	6713      	str	r3, [r2, #112]	; 0x70
 8004200:	e01c      	b.n	800423c <HAL_RCC_OscConfig+0x358>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	2b05      	cmp	r3, #5
 8004208:	d10c      	bne.n	8004224 <HAL_RCC_OscConfig+0x340>
 800420a:	4b61      	ldr	r3, [pc, #388]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 800420c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420e:	4a60      	ldr	r2, [pc, #384]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 8004210:	f043 0304 	orr.w	r3, r3, #4
 8004214:	6713      	str	r3, [r2, #112]	; 0x70
 8004216:	4b5e      	ldr	r3, [pc, #376]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 8004218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421a:	4a5d      	ldr	r2, [pc, #372]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 800421c:	f043 0301 	orr.w	r3, r3, #1
 8004220:	6713      	str	r3, [r2, #112]	; 0x70
 8004222:	e00b      	b.n	800423c <HAL_RCC_OscConfig+0x358>
 8004224:	4b5a      	ldr	r3, [pc, #360]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 8004226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004228:	4a59      	ldr	r2, [pc, #356]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 800422a:	f023 0301 	bic.w	r3, r3, #1
 800422e:	6713      	str	r3, [r2, #112]	; 0x70
 8004230:	4b57      	ldr	r3, [pc, #348]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 8004232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004234:	4a56      	ldr	r2, [pc, #344]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 8004236:	f023 0304 	bic.w	r3, r3, #4
 800423a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d015      	beq.n	8004270 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004244:	f7fd fc4e 	bl	8001ae4 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800424a:	e00a      	b.n	8004262 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800424c:	f7fd fc4a 	bl	8001ae4 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	f241 3288 	movw	r2, #5000	; 0x1388
 800425a:	4293      	cmp	r3, r2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e0d7      	b.n	8004412 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004262:	4b4b      	ldr	r3, [pc, #300]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0ee      	beq.n	800424c <HAL_RCC_OscConfig+0x368>
 800426e:	e014      	b.n	800429a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004270:	f7fd fc38 	bl	8001ae4 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004276:	e00a      	b.n	800428e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004278:	f7fd fc34 	bl	8001ae4 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	f241 3288 	movw	r2, #5000	; 0x1388
 8004286:	4293      	cmp	r3, r2
 8004288:	d901      	bls.n	800428e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e0c1      	b.n	8004412 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800428e:	4b40      	ldr	r3, [pc, #256]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 8004290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	2b00      	cmp	r3, #0
 8004298:	d1ee      	bne.n	8004278 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800429a:	7dfb      	ldrb	r3, [r7, #23]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d105      	bne.n	80042ac <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042a0:	4b3b      	ldr	r3, [pc, #236]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 80042a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a4:	4a3a      	ldr	r2, [pc, #232]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 80042a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	699b      	ldr	r3, [r3, #24]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 80ad 	beq.w	8004410 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042b6:	4b36      	ldr	r3, [pc, #216]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	f003 030c 	and.w	r3, r3, #12
 80042be:	2b08      	cmp	r3, #8
 80042c0:	d060      	beq.n	8004384 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d145      	bne.n	8004356 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042ca:	4b33      	ldr	r3, [pc, #204]	; (8004398 <HAL_RCC_OscConfig+0x4b4>)
 80042cc:	2200      	movs	r2, #0
 80042ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d0:	f7fd fc08 	bl	8001ae4 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d8:	f7fd fc04 	bl	8001ae4 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e093      	b.n	8004412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ea:	4b29      	ldr	r3, [pc, #164]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69da      	ldr	r2, [r3, #28]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	019b      	lsls	r3, r3, #6
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	085b      	lsrs	r3, r3, #1
 800430e:	3b01      	subs	r3, #1
 8004310:	041b      	lsls	r3, r3, #16
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	061b      	lsls	r3, r3, #24
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004320:	071b      	lsls	r3, r3, #28
 8004322:	491b      	ldr	r1, [pc, #108]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 8004324:	4313      	orrs	r3, r2
 8004326:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004328:	4b1b      	ldr	r3, [pc, #108]	; (8004398 <HAL_RCC_OscConfig+0x4b4>)
 800432a:	2201      	movs	r2, #1
 800432c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432e:	f7fd fbd9 	bl	8001ae4 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004336:	f7fd fbd5 	bl	8001ae4 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e064      	b.n	8004412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004348:	4b11      	ldr	r3, [pc, #68]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f0      	beq.n	8004336 <HAL_RCC_OscConfig+0x452>
 8004354:	e05c      	b.n	8004410 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004356:	4b10      	ldr	r3, [pc, #64]	; (8004398 <HAL_RCC_OscConfig+0x4b4>)
 8004358:	2200      	movs	r2, #0
 800435a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800435c:	f7fd fbc2 	bl	8001ae4 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004364:	f7fd fbbe 	bl	8001ae4 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e04d      	b.n	8004412 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004376:	4b06      	ldr	r3, [pc, #24]	; (8004390 <HAL_RCC_OscConfig+0x4ac>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f0      	bne.n	8004364 <HAL_RCC_OscConfig+0x480>
 8004382:	e045      	b.n	8004410 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	2b01      	cmp	r3, #1
 800438a:	d107      	bne.n	800439c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e040      	b.n	8004412 <HAL_RCC_OscConfig+0x52e>
 8004390:	40023800 	.word	0x40023800
 8004394:	40007000 	.word	0x40007000
 8004398:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800439c:	4b1f      	ldr	r3, [pc, #124]	; (800441c <HAL_RCC_OscConfig+0x538>)
 800439e:	685b      	ldr	r3, [r3, #4]
 80043a0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d030      	beq.n	800440c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d129      	bne.n	800440c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d122      	bne.n	800440c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043cc:	4013      	ands	r3, r2
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d119      	bne.n	800440c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043e2:	085b      	lsrs	r3, r3, #1
 80043e4:	3b01      	subs	r3, #1
 80043e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d10f      	bne.n	800440c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d107      	bne.n	800440c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004406:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004408:	429a      	cmp	r2, r3
 800440a:	d001      	beq.n	8004410 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40023800 	.word	0x40023800

08004420 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b082      	sub	sp, #8
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e07b      	b.n	800452a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004436:	2b00      	cmp	r3, #0
 8004438:	d108      	bne.n	800444c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004442:	d009      	beq.n	8004458 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	61da      	str	r2, [r3, #28]
 800444a:	e005      	b.n	8004458 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	2200      	movs	r2, #0
 8004456:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	d106      	bne.n	8004478 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004472:	6878      	ldr	r0, [r7, #4]
 8004474:	f7fd f8d8 	bl	8001628 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2202      	movs	r2, #2
 800447c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800448e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044a0:	431a      	orrs	r2, r3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	431a      	orrs	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	699b      	ldr	r3, [r3, #24]
 80044c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044dc:	ea42 0103 	orr.w	r1, r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	430a      	orrs	r2, r1
 80044ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	0c1b      	lsrs	r3, r3, #16
 80044f6:	f003 0104 	and.w	r1, r3, #4
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	f003 0210 	and.w	r2, r3, #16
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	430a      	orrs	r2, r1
 8004508:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	69da      	ldr	r2, [r3, #28]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004518:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004528:	2300      	movs	r3, #0
}
 800452a:	4618      	mov	r0, r3
 800452c:	3708      	adds	r7, #8
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
	...

08004534 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800454c:	2b01      	cmp	r3, #1
 800454e:	d101      	bne.n	8004554 <HAL_SPI_TransmitReceive_DMA+0x20>
 8004550:	2302      	movs	r3, #2
 8004552:	e0e3      	b.n	800471c <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004562:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800456a:	7dbb      	ldrb	r3, [r7, #22]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d00d      	beq.n	800458c <HAL_SPI_TransmitReceive_DMA+0x58>
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004576:	d106      	bne.n	8004586 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d102      	bne.n	8004586 <HAL_SPI_TransmitReceive_DMA+0x52>
 8004580:	7dbb      	ldrb	r3, [r7, #22]
 8004582:	2b04      	cmp	r3, #4
 8004584:	d002      	beq.n	800458c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8004586:	2302      	movs	r3, #2
 8004588:	75fb      	strb	r3, [r7, #23]
    goto error;
 800458a:	e0c2      	b.n	8004712 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d005      	beq.n	800459e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d002      	beq.n	800459e <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004598:	887b      	ldrh	r3, [r7, #2]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d102      	bne.n	80045a4 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800459e:	2301      	movs	r3, #1
 80045a0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80045a2:	e0b6      	b.n	8004712 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	2b04      	cmp	r3, #4
 80045ae:	d003      	beq.n	80045b8 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2205      	movs	r2, #5
 80045b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	887a      	ldrh	r2, [r7, #2]
 80045c8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	887a      	ldrh	r2, [r7, #2]
 80045ce:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	887a      	ldrh	r2, [r7, #2]
 80045da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	887a      	ldrh	r2, [r7, #2]
 80045e0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2200      	movs	r2, #0
 80045e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b04      	cmp	r3, #4
 80045f8:	d108      	bne.n	800460c <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fe:	4a49      	ldr	r2, [pc, #292]	; (8004724 <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8004600:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004606:	4a48      	ldr	r2, [pc, #288]	; (8004728 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004608:	63da      	str	r2, [r3, #60]	; 0x3c
 800460a:	e007      	b.n	800461c <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004610:	4a46      	ldr	r2, [pc, #280]	; (800472c <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 8004612:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004618:	4a45      	ldr	r2, [pc, #276]	; (8004730 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 800461a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004620:	4a44      	ldr	r2, [pc, #272]	; (8004734 <HAL_SPI_TransmitReceive_DMA+0x200>)
 8004622:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004628:	2200      	movs	r2, #0
 800462a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	330c      	adds	r3, #12
 8004636:	4619      	mov	r1, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800463c:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004642:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8004644:	f7fd fc3e 	bl	8001ec4 <HAL_DMA_Start_IT>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00c      	beq.n	8004668 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004652:	f043 0210 	orr.w	r2, r3, #16
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8004666:	e054      	b.n	8004712 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0201 	orr.w	r2, r2, #1
 8004676:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467c:	2200      	movs	r2, #0
 800467e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004684:	2200      	movs	r2, #0
 8004686:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468c:	2200      	movs	r2, #0
 800468e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004694:	2200      	movs	r2, #0
 8004696:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	4619      	mov	r1, r3
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	330c      	adds	r3, #12
 80046a8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046ae:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80046b0:	f7fd fc08 	bl	8001ec4 <HAL_DMA_Start_IT>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00c      	beq.n	80046d4 <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046be:	f043 0210 	orr.w	r2, r3, #16
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80046d2:	e01e      	b.n	8004712 <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046de:	2b40      	cmp	r3, #64	; 0x40
 80046e0:	d007      	beq.n	80046f2 <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80046f0:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	685a      	ldr	r2, [r3, #4]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f042 0220 	orr.w	r2, r2, #32
 8004700:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0202 	orr.w	r2, r2, #2
 8004710:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800471a:	7dfb      	ldrb	r3, [r7, #23]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	080048d5 	.word	0x080048d5
 8004728:	0800479d 	.word	0x0800479d
 800472c:	080048f1 	.word	0x080048f1
 8004730:	08004845 	.word	0x08004845
 8004734:	0800490d 	.word	0x0800490d

08004738 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8004740:	bf00      	nop
 8004742:	370c      	adds	r7, #12
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr

0800474c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800474c:	b480      	push	{r7}
 800474e:	b083      	sub	sp, #12
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004754:	bf00      	nop
 8004756:	370c      	adds	r7, #12
 8004758:	46bd      	mov	sp, r7
 800475a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475e:	4770      	bx	lr

08004760 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8004768:	bf00      	nop
 800476a:	370c      	adds	r7, #12
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr

08004774 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004774:	b480      	push	{r7}
 8004776:	b083      	sub	sp, #12
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800477c:	bf00      	nop
 800477e:	370c      	adds	r7, #12
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004788:	b480      	push	{r7}
 800478a:	b083      	sub	sp, #12
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004790:	bf00      	nop
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047a8:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047aa:	f7fd f99b 	bl	8001ae4 <HAL_GetTick>
 80047ae:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047be:	d03b      	beq.n	8004838 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0220 	bic.w	r2, r2, #32
 80047ce:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10d      	bne.n	80047f4 <SPI_DMAReceiveCplt+0x58>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80047e0:	d108      	bne.n	80047f4 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	685a      	ldr	r2, [r3, #4]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0203 	bic.w	r2, r2, #3
 80047f0:	605a      	str	r2, [r3, #4]
 80047f2:	e007      	b.n	8004804 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0201 	bic.w	r2, r2, #1
 8004802:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	2164      	movs	r1, #100	; 0x64
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f927 	bl	8004a5c <SPI_EndRxTransaction>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d002      	beq.n	800481a <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2220      	movs	r2, #32
 8004818:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004830:	68f8      	ldr	r0, [r7, #12]
 8004832:	f7ff ffa9 	bl	8004788 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8004836:	e002      	b.n	800483e <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f7ff ff7d 	bl	8004738 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800483e:	3710      	adds	r7, #16
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}

08004844 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	60fb      	str	r3, [r7, #12]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004852:	f7fd f947 	bl	8001ae4 <HAL_GetTick>
 8004856:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004866:	d02f      	beq.n	80048c8 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685a      	ldr	r2, [r3, #4]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0220 	bic.w	r2, r2, #32
 8004876:	605a      	str	r2, [r3, #4]
      UNUSED(tmpreg);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	2164      	movs	r1, #100	; 0x64
 800487c:	68f8      	ldr	r0, [r7, #12]
 800487e:	f000 f953 	bl	8004b28 <SPI_EndRxTxTransaction>
 8004882:	4603      	mov	r3, r0
 8004884:	2b00      	cmp	r3, #0
 8004886:	d005      	beq.n	8004894 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800488c:	f043 0220 	orr.w	r2, r3, #32
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0203 	bic.w	r2, r2, #3
 80048a2:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d003      	beq.n	80048c8 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f7ff ff61 	bl	8004788 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80048c6:	e002      	b.n	80048ce <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f7ff ff3f 	bl	800474c <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e0:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f7ff ff3c 	bl	8004760 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80048e8:	bf00      	nop
 80048ea:	3710      	adds	r7, #16
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f7ff ff38 	bl	8004774 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004904:	bf00      	nop
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f022 0203 	bic.w	r2, r2, #3
 8004928:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492e:	f043 0210 	orr.w	r2, r3, #16
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800493e:	68f8      	ldr	r0, [r7, #12]
 8004940:	f7ff ff22 	bl	8004788 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004944:	bf00      	nop
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b088      	sub	sp, #32
 8004950:	af00      	add	r7, sp, #0
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	603b      	str	r3, [r7, #0]
 8004958:	4613      	mov	r3, r2
 800495a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800495c:	f7fd f8c2 	bl	8001ae4 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004964:	1a9b      	subs	r3, r3, r2
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	4413      	add	r3, r2
 800496a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800496c:	f7fd f8ba 	bl	8001ae4 <HAL_GetTick>
 8004970:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004972:	4b39      	ldr	r3, [pc, #228]	; (8004a58 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	015b      	lsls	r3, r3, #5
 8004978:	0d1b      	lsrs	r3, r3, #20
 800497a:	69fa      	ldr	r2, [r7, #28]
 800497c:	fb02 f303 	mul.w	r3, r2, r3
 8004980:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004982:	e054      	b.n	8004a2e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800498a:	d050      	beq.n	8004a2e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800498c:	f7fd f8aa 	bl	8001ae4 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	429a      	cmp	r2, r3
 800499a:	d902      	bls.n	80049a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d13d      	bne.n	8004a1e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685a      	ldr	r2, [r3, #4]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80049b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049ba:	d111      	bne.n	80049e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049c4:	d004      	beq.n	80049d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ce:	d107      	bne.n	80049e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049e8:	d10f      	bne.n	8004a0a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	681a      	ldr	r2, [r3, #0]
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a08:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e017      	b.n	8004a4e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	4013      	ands	r3, r2
 8004a38:	68ba      	ldr	r2, [r7, #8]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	bf0c      	ite	eq
 8004a3e:	2301      	moveq	r3, #1
 8004a40:	2300      	movne	r3, #0
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	461a      	mov	r2, r3
 8004a46:	79fb      	ldrb	r3, [r7, #7]
 8004a48:	429a      	cmp	r2, r3
 8004a4a:	d19b      	bne.n	8004984 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3720      	adds	r7, #32
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	20000000 	.word	0x20000000

08004a5c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b086      	sub	sp, #24
 8004a60:	af02      	add	r7, sp, #8
 8004a62:	60f8      	str	r0, [r7, #12]
 8004a64:	60b9      	str	r1, [r7, #8]
 8004a66:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a70:	d111      	bne.n	8004a96 <SPI_EndRxTransaction+0x3a>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a7a:	d004      	beq.n	8004a86 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a84:	d107      	bne.n	8004a96 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a94:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a9e:	d12a      	bne.n	8004af6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa8:	d012      	beq.n	8004ad0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	9300      	str	r3, [sp, #0]
 8004aae:	68bb      	ldr	r3, [r7, #8]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	2180      	movs	r1, #128	; 0x80
 8004ab4:	68f8      	ldr	r0, [r7, #12]
 8004ab6:	f7ff ff49 	bl	800494c <SPI_WaitFlagStateUntilTimeout>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d02d      	beq.n	8004b1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac4:	f043 0220 	orr.w	r2, r3, #32
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e026      	b.n	8004b1e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	9300      	str	r3, [sp, #0]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	2101      	movs	r1, #1
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f7ff ff36 	bl	800494c <SPI_WaitFlagStateUntilTimeout>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d01a      	beq.n	8004b1c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aea:	f043 0220 	orr.w	r2, r3, #32
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e013      	b.n	8004b1e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	2200      	movs	r2, #0
 8004afe:	2101      	movs	r1, #1
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f7ff ff23 	bl	800494c <SPI_WaitFlagStateUntilTimeout>
 8004b06:	4603      	mov	r3, r0
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d007      	beq.n	8004b1c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b10:	f043 0220 	orr.w	r2, r3, #32
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e000      	b.n	8004b1e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
	...

08004b28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b088      	sub	sp, #32
 8004b2c:	af02      	add	r7, sp, #8
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b34:	4b1b      	ldr	r3, [pc, #108]	; (8004ba4 <SPI_EndRxTxTransaction+0x7c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4a1b      	ldr	r2, [pc, #108]	; (8004ba8 <SPI_EndRxTxTransaction+0x80>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	0d5b      	lsrs	r3, r3, #21
 8004b40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004b44:	fb02 f303 	mul.w	r3, r2, r3
 8004b48:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004b52:	d112      	bne.n	8004b7a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	2180      	movs	r1, #128	; 0x80
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f7ff fef4 	bl	800494c <SPI_WaitFlagStateUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d016      	beq.n	8004b98 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b6e:	f043 0220 	orr.w	r2, r3, #32
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e00f      	b.n	8004b9a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b90:	2b80      	cmp	r3, #128	; 0x80
 8004b92:	d0f2      	beq.n	8004b7a <SPI_EndRxTxTransaction+0x52>
 8004b94:	e000      	b.n	8004b98 <SPI_EndRxTxTransaction+0x70>
        break;
 8004b96:	bf00      	nop
  }

  return HAL_OK;
 8004b98:	2300      	movs	r3, #0
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	3718      	adds	r7, #24
 8004b9e:	46bd      	mov	sp, r7
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	bf00      	nop
 8004ba4:	20000000 	.word	0x20000000
 8004ba8:	165e9f81 	.word	0x165e9f81

08004bac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e03f      	b.n	8004c3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d106      	bne.n	8004bd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7fc fdd6 	bl	8001784 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2224      	movs	r2, #36	; 0x24
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	68da      	ldr	r2, [r3, #12]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004bee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f905 	bl	8004e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	695a      	ldr	r2, [r3, #20]
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68da      	ldr	r2, [r3, #12]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2220      	movs	r2, #32
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c3c:	2300      	movs	r3, #0
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3708      	adds	r7, #8
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bd80      	pop	{r7, pc}

08004c46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c46:	b580      	push	{r7, lr}
 8004c48:	b08a      	sub	sp, #40	; 0x28
 8004c4a:	af02      	add	r7, sp, #8
 8004c4c:	60f8      	str	r0, [r7, #12]
 8004c4e:	60b9      	str	r1, [r7, #8]
 8004c50:	603b      	str	r3, [r7, #0]
 8004c52:	4613      	mov	r3, r2
 8004c54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004c56:	2300      	movs	r3, #0
 8004c58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	d17c      	bne.n	8004d60 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d002      	beq.n	8004c72 <HAL_UART_Transmit+0x2c>
 8004c6c:	88fb      	ldrh	r3, [r7, #6]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e075      	b.n	8004d62 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d101      	bne.n	8004c84 <HAL_UART_Transmit+0x3e>
 8004c80:	2302      	movs	r3, #2
 8004c82:	e06e      	b.n	8004d62 <HAL_UART_Transmit+0x11c>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2221      	movs	r2, #33	; 0x21
 8004c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004c9a:	f7fc ff23 	bl	8001ae4 <HAL_GetTick>
 8004c9e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	88fa      	ldrh	r2, [r7, #6]
 8004ca4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	88fa      	ldrh	r2, [r7, #6]
 8004caa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb4:	d108      	bne.n	8004cc8 <HAL_UART_Transmit+0x82>
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d104      	bne.n	8004cc8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	e003      	b.n	8004cd0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004cd8:	e02a      	b.n	8004d30 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	2180      	movs	r1, #128	; 0x80
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 f840 	bl	8004d6a <UART_WaitOnFlagUntilTimeout>
 8004cea:	4603      	mov	r3, r0
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004cf0:	2303      	movs	r3, #3
 8004cf2:	e036      	b.n	8004d62 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10b      	bne.n	8004d12 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	881b      	ldrh	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d08:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d0a:	69bb      	ldr	r3, [r7, #24]
 8004d0c:	3302      	adds	r3, #2
 8004d0e:	61bb      	str	r3, [r7, #24]
 8004d10:	e007      	b.n	8004d22 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	781a      	ldrb	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	3301      	adds	r3, #1
 8004d20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d26:	b29b      	uxth	r3, r3
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	b29a      	uxth	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1cf      	bne.n	8004cda <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	9300      	str	r3, [sp, #0]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	2200      	movs	r2, #0
 8004d42:	2140      	movs	r1, #64	; 0x40
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f810 	bl	8004d6a <UART_WaitOnFlagUntilTimeout>
 8004d4a:	4603      	mov	r3, r0
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d001      	beq.n	8004d54 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d50:	2303      	movs	r3, #3
 8004d52:	e006      	b.n	8004d62 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	e000      	b.n	8004d62 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004d60:	2302      	movs	r3, #2
  }
}
 8004d62:	4618      	mov	r0, r3
 8004d64:	3720      	adds	r7, #32
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bd80      	pop	{r7, pc}

08004d6a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b084      	sub	sp, #16
 8004d6e:	af00      	add	r7, sp, #0
 8004d70:	60f8      	str	r0, [r7, #12]
 8004d72:	60b9      	str	r1, [r7, #8]
 8004d74:	603b      	str	r3, [r7, #0]
 8004d76:	4613      	mov	r3, r2
 8004d78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d7a:	e02c      	b.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d7c:	69bb      	ldr	r3, [r7, #24]
 8004d7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d82:	d028      	beq.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d007      	beq.n	8004d9a <UART_WaitOnFlagUntilTimeout+0x30>
 8004d8a:	f7fc feab 	bl	8001ae4 <HAL_GetTick>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	1ad3      	subs	r3, r2, r3
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d21d      	bcs.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004da8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	695a      	ldr	r2, [r3, #20]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f022 0201 	bic.w	r2, r2, #1
 8004db8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2220      	movs	r2, #32
 8004dc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	e00f      	b.n	8004df6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4013      	ands	r3, r2
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	bf0c      	ite	eq
 8004de6:	2301      	moveq	r3, #1
 8004de8:	2300      	movne	r3, #0
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	79fb      	ldrb	r3, [r7, #7]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d0c3      	beq.n	8004d7c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
	...

08004e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e04:	b09f      	sub	sp, #124	; 0x7c
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e16:	68d9      	ldr	r1, [r3, #12]
 8004e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	ea40 0301 	orr.w	r3, r0, r1
 8004e20:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e24:	689a      	ldr	r2, [r3, #8]
 8004e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	431a      	orrs	r2, r3
 8004e2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e2e:	695b      	ldr	r3, [r3, #20]
 8004e30:	431a      	orrs	r2, r3
 8004e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e34:	69db      	ldr	r3, [r3, #28]
 8004e36:	4313      	orrs	r3, r2
 8004e38:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004e44:	f021 010c 	bic.w	r1, r1, #12
 8004e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e4e:	430b      	orrs	r3, r1
 8004e50:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e5e:	6999      	ldr	r1, [r3, #24]
 8004e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	ea40 0301 	orr.w	r3, r0, r1
 8004e68:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4bc5      	ldr	r3, [pc, #788]	; (8005184 <UART_SetConfig+0x384>)
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d004      	beq.n	8004e7e <UART_SetConfig+0x7e>
 8004e74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	4bc3      	ldr	r3, [pc, #780]	; (8005188 <UART_SetConfig+0x388>)
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d103      	bne.n	8004e86 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e7e:	f7fe fe6b 	bl	8003b58 <HAL_RCC_GetPCLK2Freq>
 8004e82:	6778      	str	r0, [r7, #116]	; 0x74
 8004e84:	e002      	b.n	8004e8c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e86:	f7fe fe53 	bl	8003b30 <HAL_RCC_GetPCLK1Freq>
 8004e8a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e8e:	69db      	ldr	r3, [r3, #28]
 8004e90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e94:	f040 80b6 	bne.w	8005004 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e9a:	461c      	mov	r4, r3
 8004e9c:	f04f 0500 	mov.w	r5, #0
 8004ea0:	4622      	mov	r2, r4
 8004ea2:	462b      	mov	r3, r5
 8004ea4:	1891      	adds	r1, r2, r2
 8004ea6:	6439      	str	r1, [r7, #64]	; 0x40
 8004ea8:	415b      	adcs	r3, r3
 8004eaa:	647b      	str	r3, [r7, #68]	; 0x44
 8004eac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004eb0:	1912      	adds	r2, r2, r4
 8004eb2:	eb45 0303 	adc.w	r3, r5, r3
 8004eb6:	f04f 0000 	mov.w	r0, #0
 8004eba:	f04f 0100 	mov.w	r1, #0
 8004ebe:	00d9      	lsls	r1, r3, #3
 8004ec0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ec4:	00d0      	lsls	r0, r2, #3
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	1911      	adds	r1, r2, r4
 8004ecc:	6639      	str	r1, [r7, #96]	; 0x60
 8004ece:	416b      	adcs	r3, r5
 8004ed0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	f04f 0300 	mov.w	r3, #0
 8004edc:	1891      	adds	r1, r2, r2
 8004ede:	63b9      	str	r1, [r7, #56]	; 0x38
 8004ee0:	415b      	adcs	r3, r3
 8004ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ee4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004ee8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004eec:	f7fb f9e0 	bl	80002b0 <__aeabi_uldivmod>
 8004ef0:	4602      	mov	r2, r0
 8004ef2:	460b      	mov	r3, r1
 8004ef4:	4ba5      	ldr	r3, [pc, #660]	; (800518c <UART_SetConfig+0x38c>)
 8004ef6:	fba3 2302 	umull	r2, r3, r3, r2
 8004efa:	095b      	lsrs	r3, r3, #5
 8004efc:	011e      	lsls	r6, r3, #4
 8004efe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f00:	461c      	mov	r4, r3
 8004f02:	f04f 0500 	mov.w	r5, #0
 8004f06:	4622      	mov	r2, r4
 8004f08:	462b      	mov	r3, r5
 8004f0a:	1891      	adds	r1, r2, r2
 8004f0c:	6339      	str	r1, [r7, #48]	; 0x30
 8004f0e:	415b      	adcs	r3, r3
 8004f10:	637b      	str	r3, [r7, #52]	; 0x34
 8004f12:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004f16:	1912      	adds	r2, r2, r4
 8004f18:	eb45 0303 	adc.w	r3, r5, r3
 8004f1c:	f04f 0000 	mov.w	r0, #0
 8004f20:	f04f 0100 	mov.w	r1, #0
 8004f24:	00d9      	lsls	r1, r3, #3
 8004f26:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004f2a:	00d0      	lsls	r0, r2, #3
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	1911      	adds	r1, r2, r4
 8004f32:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f34:	416b      	adcs	r3, r5
 8004f36:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	f04f 0300 	mov.w	r3, #0
 8004f42:	1891      	adds	r1, r2, r2
 8004f44:	62b9      	str	r1, [r7, #40]	; 0x28
 8004f46:	415b      	adcs	r3, r3
 8004f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f4e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004f52:	f7fb f9ad 	bl	80002b0 <__aeabi_uldivmod>
 8004f56:	4602      	mov	r2, r0
 8004f58:	460b      	mov	r3, r1
 8004f5a:	4b8c      	ldr	r3, [pc, #560]	; (800518c <UART_SetConfig+0x38c>)
 8004f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f60:	095b      	lsrs	r3, r3, #5
 8004f62:	2164      	movs	r1, #100	; 0x64
 8004f64:	fb01 f303 	mul.w	r3, r1, r3
 8004f68:	1ad3      	subs	r3, r2, r3
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	3332      	adds	r3, #50	; 0x32
 8004f6e:	4a87      	ldr	r2, [pc, #540]	; (800518c <UART_SetConfig+0x38c>)
 8004f70:	fba2 2303 	umull	r2, r3, r2, r3
 8004f74:	095b      	lsrs	r3, r3, #5
 8004f76:	005b      	lsls	r3, r3, #1
 8004f78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004f7c:	441e      	add	r6, r3
 8004f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f80:	4618      	mov	r0, r3
 8004f82:	f04f 0100 	mov.w	r1, #0
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	1894      	adds	r4, r2, r2
 8004f8c:	623c      	str	r4, [r7, #32]
 8004f8e:	415b      	adcs	r3, r3
 8004f90:	627b      	str	r3, [r7, #36]	; 0x24
 8004f92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f96:	1812      	adds	r2, r2, r0
 8004f98:	eb41 0303 	adc.w	r3, r1, r3
 8004f9c:	f04f 0400 	mov.w	r4, #0
 8004fa0:	f04f 0500 	mov.w	r5, #0
 8004fa4:	00dd      	lsls	r5, r3, #3
 8004fa6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004faa:	00d4      	lsls	r4, r2, #3
 8004fac:	4622      	mov	r2, r4
 8004fae:	462b      	mov	r3, r5
 8004fb0:	1814      	adds	r4, r2, r0
 8004fb2:	653c      	str	r4, [r7, #80]	; 0x50
 8004fb4:	414b      	adcs	r3, r1
 8004fb6:	657b      	str	r3, [r7, #84]	; 0x54
 8004fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	1891      	adds	r1, r2, r2
 8004fc4:	61b9      	str	r1, [r7, #24]
 8004fc6:	415b      	adcs	r3, r3
 8004fc8:	61fb      	str	r3, [r7, #28]
 8004fca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004fd2:	f7fb f96d 	bl	80002b0 <__aeabi_uldivmod>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	4b6c      	ldr	r3, [pc, #432]	; (800518c <UART_SetConfig+0x38c>)
 8004fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe0:	095b      	lsrs	r3, r3, #5
 8004fe2:	2164      	movs	r1, #100	; 0x64
 8004fe4:	fb01 f303 	mul.w	r3, r1, r3
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	3332      	adds	r3, #50	; 0x32
 8004fee:	4a67      	ldr	r2, [pc, #412]	; (800518c <UART_SetConfig+0x38c>)
 8004ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff4:	095b      	lsrs	r3, r3, #5
 8004ff6:	f003 0207 	and.w	r2, r3, #7
 8004ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4432      	add	r2, r6
 8005000:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005002:	e0b9      	b.n	8005178 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005006:	461c      	mov	r4, r3
 8005008:	f04f 0500 	mov.w	r5, #0
 800500c:	4622      	mov	r2, r4
 800500e:	462b      	mov	r3, r5
 8005010:	1891      	adds	r1, r2, r2
 8005012:	6139      	str	r1, [r7, #16]
 8005014:	415b      	adcs	r3, r3
 8005016:	617b      	str	r3, [r7, #20]
 8005018:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800501c:	1912      	adds	r2, r2, r4
 800501e:	eb45 0303 	adc.w	r3, r5, r3
 8005022:	f04f 0000 	mov.w	r0, #0
 8005026:	f04f 0100 	mov.w	r1, #0
 800502a:	00d9      	lsls	r1, r3, #3
 800502c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005030:	00d0      	lsls	r0, r2, #3
 8005032:	4602      	mov	r2, r0
 8005034:	460b      	mov	r3, r1
 8005036:	eb12 0804 	adds.w	r8, r2, r4
 800503a:	eb43 0905 	adc.w	r9, r3, r5
 800503e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4618      	mov	r0, r3
 8005044:	f04f 0100 	mov.w	r1, #0
 8005048:	f04f 0200 	mov.w	r2, #0
 800504c:	f04f 0300 	mov.w	r3, #0
 8005050:	008b      	lsls	r3, r1, #2
 8005052:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005056:	0082      	lsls	r2, r0, #2
 8005058:	4640      	mov	r0, r8
 800505a:	4649      	mov	r1, r9
 800505c:	f7fb f928 	bl	80002b0 <__aeabi_uldivmod>
 8005060:	4602      	mov	r2, r0
 8005062:	460b      	mov	r3, r1
 8005064:	4b49      	ldr	r3, [pc, #292]	; (800518c <UART_SetConfig+0x38c>)
 8005066:	fba3 2302 	umull	r2, r3, r3, r2
 800506a:	095b      	lsrs	r3, r3, #5
 800506c:	011e      	lsls	r6, r3, #4
 800506e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005070:	4618      	mov	r0, r3
 8005072:	f04f 0100 	mov.w	r1, #0
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	1894      	adds	r4, r2, r2
 800507c:	60bc      	str	r4, [r7, #8]
 800507e:	415b      	adcs	r3, r3
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005086:	1812      	adds	r2, r2, r0
 8005088:	eb41 0303 	adc.w	r3, r1, r3
 800508c:	f04f 0400 	mov.w	r4, #0
 8005090:	f04f 0500 	mov.w	r5, #0
 8005094:	00dd      	lsls	r5, r3, #3
 8005096:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800509a:	00d4      	lsls	r4, r2, #3
 800509c:	4622      	mov	r2, r4
 800509e:	462b      	mov	r3, r5
 80050a0:	1814      	adds	r4, r2, r0
 80050a2:	64bc      	str	r4, [r7, #72]	; 0x48
 80050a4:	414b      	adcs	r3, r1
 80050a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	4618      	mov	r0, r3
 80050ae:	f04f 0100 	mov.w	r1, #0
 80050b2:	f04f 0200 	mov.w	r2, #0
 80050b6:	f04f 0300 	mov.w	r3, #0
 80050ba:	008b      	lsls	r3, r1, #2
 80050bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80050c0:	0082      	lsls	r2, r0, #2
 80050c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80050c6:	f7fb f8f3 	bl	80002b0 <__aeabi_uldivmod>
 80050ca:	4602      	mov	r2, r0
 80050cc:	460b      	mov	r3, r1
 80050ce:	4b2f      	ldr	r3, [pc, #188]	; (800518c <UART_SetConfig+0x38c>)
 80050d0:	fba3 1302 	umull	r1, r3, r3, r2
 80050d4:	095b      	lsrs	r3, r3, #5
 80050d6:	2164      	movs	r1, #100	; 0x64
 80050d8:	fb01 f303 	mul.w	r3, r1, r3
 80050dc:	1ad3      	subs	r3, r2, r3
 80050de:	011b      	lsls	r3, r3, #4
 80050e0:	3332      	adds	r3, #50	; 0x32
 80050e2:	4a2a      	ldr	r2, [pc, #168]	; (800518c <UART_SetConfig+0x38c>)
 80050e4:	fba2 2303 	umull	r2, r3, r2, r3
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050ee:	441e      	add	r6, r3
 80050f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050f2:	4618      	mov	r0, r3
 80050f4:	f04f 0100 	mov.w	r1, #0
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	1894      	adds	r4, r2, r2
 80050fe:	603c      	str	r4, [r7, #0]
 8005100:	415b      	adcs	r3, r3
 8005102:	607b      	str	r3, [r7, #4]
 8005104:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005108:	1812      	adds	r2, r2, r0
 800510a:	eb41 0303 	adc.w	r3, r1, r3
 800510e:	f04f 0400 	mov.w	r4, #0
 8005112:	f04f 0500 	mov.w	r5, #0
 8005116:	00dd      	lsls	r5, r3, #3
 8005118:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800511c:	00d4      	lsls	r4, r2, #3
 800511e:	4622      	mov	r2, r4
 8005120:	462b      	mov	r3, r5
 8005122:	eb12 0a00 	adds.w	sl, r2, r0
 8005126:	eb43 0b01 	adc.w	fp, r3, r1
 800512a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	4618      	mov	r0, r3
 8005130:	f04f 0100 	mov.w	r1, #0
 8005134:	f04f 0200 	mov.w	r2, #0
 8005138:	f04f 0300 	mov.w	r3, #0
 800513c:	008b      	lsls	r3, r1, #2
 800513e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005142:	0082      	lsls	r2, r0, #2
 8005144:	4650      	mov	r0, sl
 8005146:	4659      	mov	r1, fp
 8005148:	f7fb f8b2 	bl	80002b0 <__aeabi_uldivmod>
 800514c:	4602      	mov	r2, r0
 800514e:	460b      	mov	r3, r1
 8005150:	4b0e      	ldr	r3, [pc, #56]	; (800518c <UART_SetConfig+0x38c>)
 8005152:	fba3 1302 	umull	r1, r3, r3, r2
 8005156:	095b      	lsrs	r3, r3, #5
 8005158:	2164      	movs	r1, #100	; 0x64
 800515a:	fb01 f303 	mul.w	r3, r1, r3
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	011b      	lsls	r3, r3, #4
 8005162:	3332      	adds	r3, #50	; 0x32
 8005164:	4a09      	ldr	r2, [pc, #36]	; (800518c <UART_SetConfig+0x38c>)
 8005166:	fba2 2303 	umull	r2, r3, r2, r3
 800516a:	095b      	lsrs	r3, r3, #5
 800516c:	f003 020f 	and.w	r2, r3, #15
 8005170:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4432      	add	r2, r6
 8005176:	609a      	str	r2, [r3, #8]
}
 8005178:	bf00      	nop
 800517a:	377c      	adds	r7, #124	; 0x7c
 800517c:	46bd      	mov	sp, r7
 800517e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005182:	bf00      	nop
 8005184:	40011000 	.word	0x40011000
 8005188:	40011400 	.word	0x40011400
 800518c:	51eb851f 	.word	0x51eb851f

08005190 <__errno>:
 8005190:	4b01      	ldr	r3, [pc, #4]	; (8005198 <__errno+0x8>)
 8005192:	6818      	ldr	r0, [r3, #0]
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	2000000c 	.word	0x2000000c

0800519c <__libc_init_array>:
 800519c:	b570      	push	{r4, r5, r6, lr}
 800519e:	4d0d      	ldr	r5, [pc, #52]	; (80051d4 <__libc_init_array+0x38>)
 80051a0:	4c0d      	ldr	r4, [pc, #52]	; (80051d8 <__libc_init_array+0x3c>)
 80051a2:	1b64      	subs	r4, r4, r5
 80051a4:	10a4      	asrs	r4, r4, #2
 80051a6:	2600      	movs	r6, #0
 80051a8:	42a6      	cmp	r6, r4
 80051aa:	d109      	bne.n	80051c0 <__libc_init_array+0x24>
 80051ac:	4d0b      	ldr	r5, [pc, #44]	; (80051dc <__libc_init_array+0x40>)
 80051ae:	4c0c      	ldr	r4, [pc, #48]	; (80051e0 <__libc_init_array+0x44>)
 80051b0:	f000 ffec 	bl	800618c <_init>
 80051b4:	1b64      	subs	r4, r4, r5
 80051b6:	10a4      	asrs	r4, r4, #2
 80051b8:	2600      	movs	r6, #0
 80051ba:	42a6      	cmp	r6, r4
 80051bc:	d105      	bne.n	80051ca <__libc_init_array+0x2e>
 80051be:	bd70      	pop	{r4, r5, r6, pc}
 80051c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80051c4:	4798      	blx	r3
 80051c6:	3601      	adds	r6, #1
 80051c8:	e7ee      	b.n	80051a8 <__libc_init_array+0xc>
 80051ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ce:	4798      	blx	r3
 80051d0:	3601      	adds	r6, #1
 80051d2:	e7f2      	b.n	80051ba <__libc_init_array+0x1e>
 80051d4:	080063b0 	.word	0x080063b0
 80051d8:	080063b0 	.word	0x080063b0
 80051dc:	080063b0 	.word	0x080063b0
 80051e0:	080063b4 	.word	0x080063b4

080051e4 <memset>:
 80051e4:	4402      	add	r2, r0
 80051e6:	4603      	mov	r3, r0
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d100      	bne.n	80051ee <memset+0xa>
 80051ec:	4770      	bx	lr
 80051ee:	f803 1b01 	strb.w	r1, [r3], #1
 80051f2:	e7f9      	b.n	80051e8 <memset+0x4>

080051f4 <iprintf>:
 80051f4:	b40f      	push	{r0, r1, r2, r3}
 80051f6:	4b0a      	ldr	r3, [pc, #40]	; (8005220 <iprintf+0x2c>)
 80051f8:	b513      	push	{r0, r1, r4, lr}
 80051fa:	681c      	ldr	r4, [r3, #0]
 80051fc:	b124      	cbz	r4, 8005208 <iprintf+0x14>
 80051fe:	69a3      	ldr	r3, [r4, #24]
 8005200:	b913      	cbnz	r3, 8005208 <iprintf+0x14>
 8005202:	4620      	mov	r0, r4
 8005204:	f000 fa5e 	bl	80056c4 <__sinit>
 8005208:	ab05      	add	r3, sp, #20
 800520a:	9a04      	ldr	r2, [sp, #16]
 800520c:	68a1      	ldr	r1, [r4, #8]
 800520e:	9301      	str	r3, [sp, #4]
 8005210:	4620      	mov	r0, r4
 8005212:	f000 fc2f 	bl	8005a74 <_vfiprintf_r>
 8005216:	b002      	add	sp, #8
 8005218:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800521c:	b004      	add	sp, #16
 800521e:	4770      	bx	lr
 8005220:	2000000c 	.word	0x2000000c

08005224 <_puts_r>:
 8005224:	b570      	push	{r4, r5, r6, lr}
 8005226:	460e      	mov	r6, r1
 8005228:	4605      	mov	r5, r0
 800522a:	b118      	cbz	r0, 8005234 <_puts_r+0x10>
 800522c:	6983      	ldr	r3, [r0, #24]
 800522e:	b90b      	cbnz	r3, 8005234 <_puts_r+0x10>
 8005230:	f000 fa48 	bl	80056c4 <__sinit>
 8005234:	69ab      	ldr	r3, [r5, #24]
 8005236:	68ac      	ldr	r4, [r5, #8]
 8005238:	b913      	cbnz	r3, 8005240 <_puts_r+0x1c>
 800523a:	4628      	mov	r0, r5
 800523c:	f000 fa42 	bl	80056c4 <__sinit>
 8005240:	4b2c      	ldr	r3, [pc, #176]	; (80052f4 <_puts_r+0xd0>)
 8005242:	429c      	cmp	r4, r3
 8005244:	d120      	bne.n	8005288 <_puts_r+0x64>
 8005246:	686c      	ldr	r4, [r5, #4]
 8005248:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800524a:	07db      	lsls	r3, r3, #31
 800524c:	d405      	bmi.n	800525a <_puts_r+0x36>
 800524e:	89a3      	ldrh	r3, [r4, #12]
 8005250:	0598      	lsls	r0, r3, #22
 8005252:	d402      	bmi.n	800525a <_puts_r+0x36>
 8005254:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005256:	f000 fad3 	bl	8005800 <__retarget_lock_acquire_recursive>
 800525a:	89a3      	ldrh	r3, [r4, #12]
 800525c:	0719      	lsls	r1, r3, #28
 800525e:	d51d      	bpl.n	800529c <_puts_r+0x78>
 8005260:	6923      	ldr	r3, [r4, #16]
 8005262:	b1db      	cbz	r3, 800529c <_puts_r+0x78>
 8005264:	3e01      	subs	r6, #1
 8005266:	68a3      	ldr	r3, [r4, #8]
 8005268:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800526c:	3b01      	subs	r3, #1
 800526e:	60a3      	str	r3, [r4, #8]
 8005270:	bb39      	cbnz	r1, 80052c2 <_puts_r+0x9e>
 8005272:	2b00      	cmp	r3, #0
 8005274:	da38      	bge.n	80052e8 <_puts_r+0xc4>
 8005276:	4622      	mov	r2, r4
 8005278:	210a      	movs	r1, #10
 800527a:	4628      	mov	r0, r5
 800527c:	f000 f848 	bl	8005310 <__swbuf_r>
 8005280:	3001      	adds	r0, #1
 8005282:	d011      	beq.n	80052a8 <_puts_r+0x84>
 8005284:	250a      	movs	r5, #10
 8005286:	e011      	b.n	80052ac <_puts_r+0x88>
 8005288:	4b1b      	ldr	r3, [pc, #108]	; (80052f8 <_puts_r+0xd4>)
 800528a:	429c      	cmp	r4, r3
 800528c:	d101      	bne.n	8005292 <_puts_r+0x6e>
 800528e:	68ac      	ldr	r4, [r5, #8]
 8005290:	e7da      	b.n	8005248 <_puts_r+0x24>
 8005292:	4b1a      	ldr	r3, [pc, #104]	; (80052fc <_puts_r+0xd8>)
 8005294:	429c      	cmp	r4, r3
 8005296:	bf08      	it	eq
 8005298:	68ec      	ldreq	r4, [r5, #12]
 800529a:	e7d5      	b.n	8005248 <_puts_r+0x24>
 800529c:	4621      	mov	r1, r4
 800529e:	4628      	mov	r0, r5
 80052a0:	f000 f888 	bl	80053b4 <__swsetup_r>
 80052a4:	2800      	cmp	r0, #0
 80052a6:	d0dd      	beq.n	8005264 <_puts_r+0x40>
 80052a8:	f04f 35ff 	mov.w	r5, #4294967295
 80052ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052ae:	07da      	lsls	r2, r3, #31
 80052b0:	d405      	bmi.n	80052be <_puts_r+0x9a>
 80052b2:	89a3      	ldrh	r3, [r4, #12]
 80052b4:	059b      	lsls	r3, r3, #22
 80052b6:	d402      	bmi.n	80052be <_puts_r+0x9a>
 80052b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052ba:	f000 faa2 	bl	8005802 <__retarget_lock_release_recursive>
 80052be:	4628      	mov	r0, r5
 80052c0:	bd70      	pop	{r4, r5, r6, pc}
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	da04      	bge.n	80052d0 <_puts_r+0xac>
 80052c6:	69a2      	ldr	r2, [r4, #24]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	dc06      	bgt.n	80052da <_puts_r+0xb6>
 80052cc:	290a      	cmp	r1, #10
 80052ce:	d004      	beq.n	80052da <_puts_r+0xb6>
 80052d0:	6823      	ldr	r3, [r4, #0]
 80052d2:	1c5a      	adds	r2, r3, #1
 80052d4:	6022      	str	r2, [r4, #0]
 80052d6:	7019      	strb	r1, [r3, #0]
 80052d8:	e7c5      	b.n	8005266 <_puts_r+0x42>
 80052da:	4622      	mov	r2, r4
 80052dc:	4628      	mov	r0, r5
 80052de:	f000 f817 	bl	8005310 <__swbuf_r>
 80052e2:	3001      	adds	r0, #1
 80052e4:	d1bf      	bne.n	8005266 <_puts_r+0x42>
 80052e6:	e7df      	b.n	80052a8 <_puts_r+0x84>
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	250a      	movs	r5, #10
 80052ec:	1c5a      	adds	r2, r3, #1
 80052ee:	6022      	str	r2, [r4, #0]
 80052f0:	701d      	strb	r5, [r3, #0]
 80052f2:	e7db      	b.n	80052ac <_puts_r+0x88>
 80052f4:	08006334 	.word	0x08006334
 80052f8:	08006354 	.word	0x08006354
 80052fc:	08006314 	.word	0x08006314

08005300 <puts>:
 8005300:	4b02      	ldr	r3, [pc, #8]	; (800530c <puts+0xc>)
 8005302:	4601      	mov	r1, r0
 8005304:	6818      	ldr	r0, [r3, #0]
 8005306:	f7ff bf8d 	b.w	8005224 <_puts_r>
 800530a:	bf00      	nop
 800530c:	2000000c 	.word	0x2000000c

08005310 <__swbuf_r>:
 8005310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005312:	460e      	mov	r6, r1
 8005314:	4614      	mov	r4, r2
 8005316:	4605      	mov	r5, r0
 8005318:	b118      	cbz	r0, 8005322 <__swbuf_r+0x12>
 800531a:	6983      	ldr	r3, [r0, #24]
 800531c:	b90b      	cbnz	r3, 8005322 <__swbuf_r+0x12>
 800531e:	f000 f9d1 	bl	80056c4 <__sinit>
 8005322:	4b21      	ldr	r3, [pc, #132]	; (80053a8 <__swbuf_r+0x98>)
 8005324:	429c      	cmp	r4, r3
 8005326:	d12b      	bne.n	8005380 <__swbuf_r+0x70>
 8005328:	686c      	ldr	r4, [r5, #4]
 800532a:	69a3      	ldr	r3, [r4, #24]
 800532c:	60a3      	str	r3, [r4, #8]
 800532e:	89a3      	ldrh	r3, [r4, #12]
 8005330:	071a      	lsls	r2, r3, #28
 8005332:	d52f      	bpl.n	8005394 <__swbuf_r+0x84>
 8005334:	6923      	ldr	r3, [r4, #16]
 8005336:	b36b      	cbz	r3, 8005394 <__swbuf_r+0x84>
 8005338:	6923      	ldr	r3, [r4, #16]
 800533a:	6820      	ldr	r0, [r4, #0]
 800533c:	1ac0      	subs	r0, r0, r3
 800533e:	6963      	ldr	r3, [r4, #20]
 8005340:	b2f6      	uxtb	r6, r6
 8005342:	4283      	cmp	r3, r0
 8005344:	4637      	mov	r7, r6
 8005346:	dc04      	bgt.n	8005352 <__swbuf_r+0x42>
 8005348:	4621      	mov	r1, r4
 800534a:	4628      	mov	r0, r5
 800534c:	f000 f926 	bl	800559c <_fflush_r>
 8005350:	bb30      	cbnz	r0, 80053a0 <__swbuf_r+0x90>
 8005352:	68a3      	ldr	r3, [r4, #8]
 8005354:	3b01      	subs	r3, #1
 8005356:	60a3      	str	r3, [r4, #8]
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	1c5a      	adds	r2, r3, #1
 800535c:	6022      	str	r2, [r4, #0]
 800535e:	701e      	strb	r6, [r3, #0]
 8005360:	6963      	ldr	r3, [r4, #20]
 8005362:	3001      	adds	r0, #1
 8005364:	4283      	cmp	r3, r0
 8005366:	d004      	beq.n	8005372 <__swbuf_r+0x62>
 8005368:	89a3      	ldrh	r3, [r4, #12]
 800536a:	07db      	lsls	r3, r3, #31
 800536c:	d506      	bpl.n	800537c <__swbuf_r+0x6c>
 800536e:	2e0a      	cmp	r6, #10
 8005370:	d104      	bne.n	800537c <__swbuf_r+0x6c>
 8005372:	4621      	mov	r1, r4
 8005374:	4628      	mov	r0, r5
 8005376:	f000 f911 	bl	800559c <_fflush_r>
 800537a:	b988      	cbnz	r0, 80053a0 <__swbuf_r+0x90>
 800537c:	4638      	mov	r0, r7
 800537e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005380:	4b0a      	ldr	r3, [pc, #40]	; (80053ac <__swbuf_r+0x9c>)
 8005382:	429c      	cmp	r4, r3
 8005384:	d101      	bne.n	800538a <__swbuf_r+0x7a>
 8005386:	68ac      	ldr	r4, [r5, #8]
 8005388:	e7cf      	b.n	800532a <__swbuf_r+0x1a>
 800538a:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <__swbuf_r+0xa0>)
 800538c:	429c      	cmp	r4, r3
 800538e:	bf08      	it	eq
 8005390:	68ec      	ldreq	r4, [r5, #12]
 8005392:	e7ca      	b.n	800532a <__swbuf_r+0x1a>
 8005394:	4621      	mov	r1, r4
 8005396:	4628      	mov	r0, r5
 8005398:	f000 f80c 	bl	80053b4 <__swsetup_r>
 800539c:	2800      	cmp	r0, #0
 800539e:	d0cb      	beq.n	8005338 <__swbuf_r+0x28>
 80053a0:	f04f 37ff 	mov.w	r7, #4294967295
 80053a4:	e7ea      	b.n	800537c <__swbuf_r+0x6c>
 80053a6:	bf00      	nop
 80053a8:	08006334 	.word	0x08006334
 80053ac:	08006354 	.word	0x08006354
 80053b0:	08006314 	.word	0x08006314

080053b4 <__swsetup_r>:
 80053b4:	4b32      	ldr	r3, [pc, #200]	; (8005480 <__swsetup_r+0xcc>)
 80053b6:	b570      	push	{r4, r5, r6, lr}
 80053b8:	681d      	ldr	r5, [r3, #0]
 80053ba:	4606      	mov	r6, r0
 80053bc:	460c      	mov	r4, r1
 80053be:	b125      	cbz	r5, 80053ca <__swsetup_r+0x16>
 80053c0:	69ab      	ldr	r3, [r5, #24]
 80053c2:	b913      	cbnz	r3, 80053ca <__swsetup_r+0x16>
 80053c4:	4628      	mov	r0, r5
 80053c6:	f000 f97d 	bl	80056c4 <__sinit>
 80053ca:	4b2e      	ldr	r3, [pc, #184]	; (8005484 <__swsetup_r+0xd0>)
 80053cc:	429c      	cmp	r4, r3
 80053ce:	d10f      	bne.n	80053f0 <__swsetup_r+0x3c>
 80053d0:	686c      	ldr	r4, [r5, #4]
 80053d2:	89a3      	ldrh	r3, [r4, #12]
 80053d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053d8:	0719      	lsls	r1, r3, #28
 80053da:	d42c      	bmi.n	8005436 <__swsetup_r+0x82>
 80053dc:	06dd      	lsls	r5, r3, #27
 80053de:	d411      	bmi.n	8005404 <__swsetup_r+0x50>
 80053e0:	2309      	movs	r3, #9
 80053e2:	6033      	str	r3, [r6, #0]
 80053e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053e8:	81a3      	strh	r3, [r4, #12]
 80053ea:	f04f 30ff 	mov.w	r0, #4294967295
 80053ee:	e03e      	b.n	800546e <__swsetup_r+0xba>
 80053f0:	4b25      	ldr	r3, [pc, #148]	; (8005488 <__swsetup_r+0xd4>)
 80053f2:	429c      	cmp	r4, r3
 80053f4:	d101      	bne.n	80053fa <__swsetup_r+0x46>
 80053f6:	68ac      	ldr	r4, [r5, #8]
 80053f8:	e7eb      	b.n	80053d2 <__swsetup_r+0x1e>
 80053fa:	4b24      	ldr	r3, [pc, #144]	; (800548c <__swsetup_r+0xd8>)
 80053fc:	429c      	cmp	r4, r3
 80053fe:	bf08      	it	eq
 8005400:	68ec      	ldreq	r4, [r5, #12]
 8005402:	e7e6      	b.n	80053d2 <__swsetup_r+0x1e>
 8005404:	0758      	lsls	r0, r3, #29
 8005406:	d512      	bpl.n	800542e <__swsetup_r+0x7a>
 8005408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800540a:	b141      	cbz	r1, 800541e <__swsetup_r+0x6a>
 800540c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005410:	4299      	cmp	r1, r3
 8005412:	d002      	beq.n	800541a <__swsetup_r+0x66>
 8005414:	4630      	mov	r0, r6
 8005416:	f000 fa59 	bl	80058cc <_free_r>
 800541a:	2300      	movs	r3, #0
 800541c:	6363      	str	r3, [r4, #52]	; 0x34
 800541e:	89a3      	ldrh	r3, [r4, #12]
 8005420:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005424:	81a3      	strh	r3, [r4, #12]
 8005426:	2300      	movs	r3, #0
 8005428:	6063      	str	r3, [r4, #4]
 800542a:	6923      	ldr	r3, [r4, #16]
 800542c:	6023      	str	r3, [r4, #0]
 800542e:	89a3      	ldrh	r3, [r4, #12]
 8005430:	f043 0308 	orr.w	r3, r3, #8
 8005434:	81a3      	strh	r3, [r4, #12]
 8005436:	6923      	ldr	r3, [r4, #16]
 8005438:	b94b      	cbnz	r3, 800544e <__swsetup_r+0x9a>
 800543a:	89a3      	ldrh	r3, [r4, #12]
 800543c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005444:	d003      	beq.n	800544e <__swsetup_r+0x9a>
 8005446:	4621      	mov	r1, r4
 8005448:	4630      	mov	r0, r6
 800544a:	f000 f9ff 	bl	800584c <__smakebuf_r>
 800544e:	89a0      	ldrh	r0, [r4, #12]
 8005450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005454:	f010 0301 	ands.w	r3, r0, #1
 8005458:	d00a      	beq.n	8005470 <__swsetup_r+0xbc>
 800545a:	2300      	movs	r3, #0
 800545c:	60a3      	str	r3, [r4, #8]
 800545e:	6963      	ldr	r3, [r4, #20]
 8005460:	425b      	negs	r3, r3
 8005462:	61a3      	str	r3, [r4, #24]
 8005464:	6923      	ldr	r3, [r4, #16]
 8005466:	b943      	cbnz	r3, 800547a <__swsetup_r+0xc6>
 8005468:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800546c:	d1ba      	bne.n	80053e4 <__swsetup_r+0x30>
 800546e:	bd70      	pop	{r4, r5, r6, pc}
 8005470:	0781      	lsls	r1, r0, #30
 8005472:	bf58      	it	pl
 8005474:	6963      	ldrpl	r3, [r4, #20]
 8005476:	60a3      	str	r3, [r4, #8]
 8005478:	e7f4      	b.n	8005464 <__swsetup_r+0xb0>
 800547a:	2000      	movs	r0, #0
 800547c:	e7f7      	b.n	800546e <__swsetup_r+0xba>
 800547e:	bf00      	nop
 8005480:	2000000c 	.word	0x2000000c
 8005484:	08006334 	.word	0x08006334
 8005488:	08006354 	.word	0x08006354
 800548c:	08006314 	.word	0x08006314

08005490 <__sflush_r>:
 8005490:	898a      	ldrh	r2, [r1, #12]
 8005492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005496:	4605      	mov	r5, r0
 8005498:	0710      	lsls	r0, r2, #28
 800549a:	460c      	mov	r4, r1
 800549c:	d458      	bmi.n	8005550 <__sflush_r+0xc0>
 800549e:	684b      	ldr	r3, [r1, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	dc05      	bgt.n	80054b0 <__sflush_r+0x20>
 80054a4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	dc02      	bgt.n	80054b0 <__sflush_r+0x20>
 80054aa:	2000      	movs	r0, #0
 80054ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054b2:	2e00      	cmp	r6, #0
 80054b4:	d0f9      	beq.n	80054aa <__sflush_r+0x1a>
 80054b6:	2300      	movs	r3, #0
 80054b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054bc:	682f      	ldr	r7, [r5, #0]
 80054be:	602b      	str	r3, [r5, #0]
 80054c0:	d032      	beq.n	8005528 <__sflush_r+0x98>
 80054c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054c4:	89a3      	ldrh	r3, [r4, #12]
 80054c6:	075a      	lsls	r2, r3, #29
 80054c8:	d505      	bpl.n	80054d6 <__sflush_r+0x46>
 80054ca:	6863      	ldr	r3, [r4, #4]
 80054cc:	1ac0      	subs	r0, r0, r3
 80054ce:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054d0:	b10b      	cbz	r3, 80054d6 <__sflush_r+0x46>
 80054d2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054d4:	1ac0      	subs	r0, r0, r3
 80054d6:	2300      	movs	r3, #0
 80054d8:	4602      	mov	r2, r0
 80054da:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054dc:	6a21      	ldr	r1, [r4, #32]
 80054de:	4628      	mov	r0, r5
 80054e0:	47b0      	blx	r6
 80054e2:	1c43      	adds	r3, r0, #1
 80054e4:	89a3      	ldrh	r3, [r4, #12]
 80054e6:	d106      	bne.n	80054f6 <__sflush_r+0x66>
 80054e8:	6829      	ldr	r1, [r5, #0]
 80054ea:	291d      	cmp	r1, #29
 80054ec:	d82c      	bhi.n	8005548 <__sflush_r+0xb8>
 80054ee:	4a2a      	ldr	r2, [pc, #168]	; (8005598 <__sflush_r+0x108>)
 80054f0:	40ca      	lsrs	r2, r1
 80054f2:	07d6      	lsls	r6, r2, #31
 80054f4:	d528      	bpl.n	8005548 <__sflush_r+0xb8>
 80054f6:	2200      	movs	r2, #0
 80054f8:	6062      	str	r2, [r4, #4]
 80054fa:	04d9      	lsls	r1, r3, #19
 80054fc:	6922      	ldr	r2, [r4, #16]
 80054fe:	6022      	str	r2, [r4, #0]
 8005500:	d504      	bpl.n	800550c <__sflush_r+0x7c>
 8005502:	1c42      	adds	r2, r0, #1
 8005504:	d101      	bne.n	800550a <__sflush_r+0x7a>
 8005506:	682b      	ldr	r3, [r5, #0]
 8005508:	b903      	cbnz	r3, 800550c <__sflush_r+0x7c>
 800550a:	6560      	str	r0, [r4, #84]	; 0x54
 800550c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800550e:	602f      	str	r7, [r5, #0]
 8005510:	2900      	cmp	r1, #0
 8005512:	d0ca      	beq.n	80054aa <__sflush_r+0x1a>
 8005514:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005518:	4299      	cmp	r1, r3
 800551a:	d002      	beq.n	8005522 <__sflush_r+0x92>
 800551c:	4628      	mov	r0, r5
 800551e:	f000 f9d5 	bl	80058cc <_free_r>
 8005522:	2000      	movs	r0, #0
 8005524:	6360      	str	r0, [r4, #52]	; 0x34
 8005526:	e7c1      	b.n	80054ac <__sflush_r+0x1c>
 8005528:	6a21      	ldr	r1, [r4, #32]
 800552a:	2301      	movs	r3, #1
 800552c:	4628      	mov	r0, r5
 800552e:	47b0      	blx	r6
 8005530:	1c41      	adds	r1, r0, #1
 8005532:	d1c7      	bne.n	80054c4 <__sflush_r+0x34>
 8005534:	682b      	ldr	r3, [r5, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d0c4      	beq.n	80054c4 <__sflush_r+0x34>
 800553a:	2b1d      	cmp	r3, #29
 800553c:	d001      	beq.n	8005542 <__sflush_r+0xb2>
 800553e:	2b16      	cmp	r3, #22
 8005540:	d101      	bne.n	8005546 <__sflush_r+0xb6>
 8005542:	602f      	str	r7, [r5, #0]
 8005544:	e7b1      	b.n	80054aa <__sflush_r+0x1a>
 8005546:	89a3      	ldrh	r3, [r4, #12]
 8005548:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800554c:	81a3      	strh	r3, [r4, #12]
 800554e:	e7ad      	b.n	80054ac <__sflush_r+0x1c>
 8005550:	690f      	ldr	r7, [r1, #16]
 8005552:	2f00      	cmp	r7, #0
 8005554:	d0a9      	beq.n	80054aa <__sflush_r+0x1a>
 8005556:	0793      	lsls	r3, r2, #30
 8005558:	680e      	ldr	r6, [r1, #0]
 800555a:	bf08      	it	eq
 800555c:	694b      	ldreq	r3, [r1, #20]
 800555e:	600f      	str	r7, [r1, #0]
 8005560:	bf18      	it	ne
 8005562:	2300      	movne	r3, #0
 8005564:	eba6 0807 	sub.w	r8, r6, r7
 8005568:	608b      	str	r3, [r1, #8]
 800556a:	f1b8 0f00 	cmp.w	r8, #0
 800556e:	dd9c      	ble.n	80054aa <__sflush_r+0x1a>
 8005570:	6a21      	ldr	r1, [r4, #32]
 8005572:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005574:	4643      	mov	r3, r8
 8005576:	463a      	mov	r2, r7
 8005578:	4628      	mov	r0, r5
 800557a:	47b0      	blx	r6
 800557c:	2800      	cmp	r0, #0
 800557e:	dc06      	bgt.n	800558e <__sflush_r+0xfe>
 8005580:	89a3      	ldrh	r3, [r4, #12]
 8005582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005586:	81a3      	strh	r3, [r4, #12]
 8005588:	f04f 30ff 	mov.w	r0, #4294967295
 800558c:	e78e      	b.n	80054ac <__sflush_r+0x1c>
 800558e:	4407      	add	r7, r0
 8005590:	eba8 0800 	sub.w	r8, r8, r0
 8005594:	e7e9      	b.n	800556a <__sflush_r+0xda>
 8005596:	bf00      	nop
 8005598:	20400001 	.word	0x20400001

0800559c <_fflush_r>:
 800559c:	b538      	push	{r3, r4, r5, lr}
 800559e:	690b      	ldr	r3, [r1, #16]
 80055a0:	4605      	mov	r5, r0
 80055a2:	460c      	mov	r4, r1
 80055a4:	b913      	cbnz	r3, 80055ac <_fflush_r+0x10>
 80055a6:	2500      	movs	r5, #0
 80055a8:	4628      	mov	r0, r5
 80055aa:	bd38      	pop	{r3, r4, r5, pc}
 80055ac:	b118      	cbz	r0, 80055b6 <_fflush_r+0x1a>
 80055ae:	6983      	ldr	r3, [r0, #24]
 80055b0:	b90b      	cbnz	r3, 80055b6 <_fflush_r+0x1a>
 80055b2:	f000 f887 	bl	80056c4 <__sinit>
 80055b6:	4b14      	ldr	r3, [pc, #80]	; (8005608 <_fflush_r+0x6c>)
 80055b8:	429c      	cmp	r4, r3
 80055ba:	d11b      	bne.n	80055f4 <_fflush_r+0x58>
 80055bc:	686c      	ldr	r4, [r5, #4]
 80055be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0ef      	beq.n	80055a6 <_fflush_r+0xa>
 80055c6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055c8:	07d0      	lsls	r0, r2, #31
 80055ca:	d404      	bmi.n	80055d6 <_fflush_r+0x3a>
 80055cc:	0599      	lsls	r1, r3, #22
 80055ce:	d402      	bmi.n	80055d6 <_fflush_r+0x3a>
 80055d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055d2:	f000 f915 	bl	8005800 <__retarget_lock_acquire_recursive>
 80055d6:	4628      	mov	r0, r5
 80055d8:	4621      	mov	r1, r4
 80055da:	f7ff ff59 	bl	8005490 <__sflush_r>
 80055de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055e0:	07da      	lsls	r2, r3, #31
 80055e2:	4605      	mov	r5, r0
 80055e4:	d4e0      	bmi.n	80055a8 <_fflush_r+0xc>
 80055e6:	89a3      	ldrh	r3, [r4, #12]
 80055e8:	059b      	lsls	r3, r3, #22
 80055ea:	d4dd      	bmi.n	80055a8 <_fflush_r+0xc>
 80055ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ee:	f000 f908 	bl	8005802 <__retarget_lock_release_recursive>
 80055f2:	e7d9      	b.n	80055a8 <_fflush_r+0xc>
 80055f4:	4b05      	ldr	r3, [pc, #20]	; (800560c <_fflush_r+0x70>)
 80055f6:	429c      	cmp	r4, r3
 80055f8:	d101      	bne.n	80055fe <_fflush_r+0x62>
 80055fa:	68ac      	ldr	r4, [r5, #8]
 80055fc:	e7df      	b.n	80055be <_fflush_r+0x22>
 80055fe:	4b04      	ldr	r3, [pc, #16]	; (8005610 <_fflush_r+0x74>)
 8005600:	429c      	cmp	r4, r3
 8005602:	bf08      	it	eq
 8005604:	68ec      	ldreq	r4, [r5, #12]
 8005606:	e7da      	b.n	80055be <_fflush_r+0x22>
 8005608:	08006334 	.word	0x08006334
 800560c:	08006354 	.word	0x08006354
 8005610:	08006314 	.word	0x08006314

08005614 <std>:
 8005614:	2300      	movs	r3, #0
 8005616:	b510      	push	{r4, lr}
 8005618:	4604      	mov	r4, r0
 800561a:	e9c0 3300 	strd	r3, r3, [r0]
 800561e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005622:	6083      	str	r3, [r0, #8]
 8005624:	8181      	strh	r1, [r0, #12]
 8005626:	6643      	str	r3, [r0, #100]	; 0x64
 8005628:	81c2      	strh	r2, [r0, #14]
 800562a:	6183      	str	r3, [r0, #24]
 800562c:	4619      	mov	r1, r3
 800562e:	2208      	movs	r2, #8
 8005630:	305c      	adds	r0, #92	; 0x5c
 8005632:	f7ff fdd7 	bl	80051e4 <memset>
 8005636:	4b05      	ldr	r3, [pc, #20]	; (800564c <std+0x38>)
 8005638:	6263      	str	r3, [r4, #36]	; 0x24
 800563a:	4b05      	ldr	r3, [pc, #20]	; (8005650 <std+0x3c>)
 800563c:	62a3      	str	r3, [r4, #40]	; 0x28
 800563e:	4b05      	ldr	r3, [pc, #20]	; (8005654 <std+0x40>)
 8005640:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005642:	4b05      	ldr	r3, [pc, #20]	; (8005658 <std+0x44>)
 8005644:	6224      	str	r4, [r4, #32]
 8005646:	6323      	str	r3, [r4, #48]	; 0x30
 8005648:	bd10      	pop	{r4, pc}
 800564a:	bf00      	nop
 800564c:	0800601d 	.word	0x0800601d
 8005650:	0800603f 	.word	0x0800603f
 8005654:	08006077 	.word	0x08006077
 8005658:	0800609b 	.word	0x0800609b

0800565c <_cleanup_r>:
 800565c:	4901      	ldr	r1, [pc, #4]	; (8005664 <_cleanup_r+0x8>)
 800565e:	f000 b8af 	b.w	80057c0 <_fwalk_reent>
 8005662:	bf00      	nop
 8005664:	0800559d 	.word	0x0800559d

08005668 <__sfmoreglue>:
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	1e4a      	subs	r2, r1, #1
 800566c:	2568      	movs	r5, #104	; 0x68
 800566e:	4355      	muls	r5, r2
 8005670:	460e      	mov	r6, r1
 8005672:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005676:	f000 f979 	bl	800596c <_malloc_r>
 800567a:	4604      	mov	r4, r0
 800567c:	b140      	cbz	r0, 8005690 <__sfmoreglue+0x28>
 800567e:	2100      	movs	r1, #0
 8005680:	e9c0 1600 	strd	r1, r6, [r0]
 8005684:	300c      	adds	r0, #12
 8005686:	60a0      	str	r0, [r4, #8]
 8005688:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800568c:	f7ff fdaa 	bl	80051e4 <memset>
 8005690:	4620      	mov	r0, r4
 8005692:	bd70      	pop	{r4, r5, r6, pc}

08005694 <__sfp_lock_acquire>:
 8005694:	4801      	ldr	r0, [pc, #4]	; (800569c <__sfp_lock_acquire+0x8>)
 8005696:	f000 b8b3 	b.w	8005800 <__retarget_lock_acquire_recursive>
 800569a:	bf00      	nop
 800569c:	200021ec 	.word	0x200021ec

080056a0 <__sfp_lock_release>:
 80056a0:	4801      	ldr	r0, [pc, #4]	; (80056a8 <__sfp_lock_release+0x8>)
 80056a2:	f000 b8ae 	b.w	8005802 <__retarget_lock_release_recursive>
 80056a6:	bf00      	nop
 80056a8:	200021ec 	.word	0x200021ec

080056ac <__sinit_lock_acquire>:
 80056ac:	4801      	ldr	r0, [pc, #4]	; (80056b4 <__sinit_lock_acquire+0x8>)
 80056ae:	f000 b8a7 	b.w	8005800 <__retarget_lock_acquire_recursive>
 80056b2:	bf00      	nop
 80056b4:	200021e7 	.word	0x200021e7

080056b8 <__sinit_lock_release>:
 80056b8:	4801      	ldr	r0, [pc, #4]	; (80056c0 <__sinit_lock_release+0x8>)
 80056ba:	f000 b8a2 	b.w	8005802 <__retarget_lock_release_recursive>
 80056be:	bf00      	nop
 80056c0:	200021e7 	.word	0x200021e7

080056c4 <__sinit>:
 80056c4:	b510      	push	{r4, lr}
 80056c6:	4604      	mov	r4, r0
 80056c8:	f7ff fff0 	bl	80056ac <__sinit_lock_acquire>
 80056cc:	69a3      	ldr	r3, [r4, #24]
 80056ce:	b11b      	cbz	r3, 80056d8 <__sinit+0x14>
 80056d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d4:	f7ff bff0 	b.w	80056b8 <__sinit_lock_release>
 80056d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80056dc:	6523      	str	r3, [r4, #80]	; 0x50
 80056de:	4b13      	ldr	r3, [pc, #76]	; (800572c <__sinit+0x68>)
 80056e0:	4a13      	ldr	r2, [pc, #76]	; (8005730 <__sinit+0x6c>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80056e6:	42a3      	cmp	r3, r4
 80056e8:	bf04      	itt	eq
 80056ea:	2301      	moveq	r3, #1
 80056ec:	61a3      	streq	r3, [r4, #24]
 80056ee:	4620      	mov	r0, r4
 80056f0:	f000 f820 	bl	8005734 <__sfp>
 80056f4:	6060      	str	r0, [r4, #4]
 80056f6:	4620      	mov	r0, r4
 80056f8:	f000 f81c 	bl	8005734 <__sfp>
 80056fc:	60a0      	str	r0, [r4, #8]
 80056fe:	4620      	mov	r0, r4
 8005700:	f000 f818 	bl	8005734 <__sfp>
 8005704:	2200      	movs	r2, #0
 8005706:	60e0      	str	r0, [r4, #12]
 8005708:	2104      	movs	r1, #4
 800570a:	6860      	ldr	r0, [r4, #4]
 800570c:	f7ff ff82 	bl	8005614 <std>
 8005710:	68a0      	ldr	r0, [r4, #8]
 8005712:	2201      	movs	r2, #1
 8005714:	2109      	movs	r1, #9
 8005716:	f7ff ff7d 	bl	8005614 <std>
 800571a:	68e0      	ldr	r0, [r4, #12]
 800571c:	2202      	movs	r2, #2
 800571e:	2112      	movs	r1, #18
 8005720:	f7ff ff78 	bl	8005614 <std>
 8005724:	2301      	movs	r3, #1
 8005726:	61a3      	str	r3, [r4, #24]
 8005728:	e7d2      	b.n	80056d0 <__sinit+0xc>
 800572a:	bf00      	nop
 800572c:	08006310 	.word	0x08006310
 8005730:	0800565d 	.word	0x0800565d

08005734 <__sfp>:
 8005734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005736:	4607      	mov	r7, r0
 8005738:	f7ff ffac 	bl	8005694 <__sfp_lock_acquire>
 800573c:	4b1e      	ldr	r3, [pc, #120]	; (80057b8 <__sfp+0x84>)
 800573e:	681e      	ldr	r6, [r3, #0]
 8005740:	69b3      	ldr	r3, [r6, #24]
 8005742:	b913      	cbnz	r3, 800574a <__sfp+0x16>
 8005744:	4630      	mov	r0, r6
 8005746:	f7ff ffbd 	bl	80056c4 <__sinit>
 800574a:	3648      	adds	r6, #72	; 0x48
 800574c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005750:	3b01      	subs	r3, #1
 8005752:	d503      	bpl.n	800575c <__sfp+0x28>
 8005754:	6833      	ldr	r3, [r6, #0]
 8005756:	b30b      	cbz	r3, 800579c <__sfp+0x68>
 8005758:	6836      	ldr	r6, [r6, #0]
 800575a:	e7f7      	b.n	800574c <__sfp+0x18>
 800575c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005760:	b9d5      	cbnz	r5, 8005798 <__sfp+0x64>
 8005762:	4b16      	ldr	r3, [pc, #88]	; (80057bc <__sfp+0x88>)
 8005764:	60e3      	str	r3, [r4, #12]
 8005766:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800576a:	6665      	str	r5, [r4, #100]	; 0x64
 800576c:	f000 f847 	bl	80057fe <__retarget_lock_init_recursive>
 8005770:	f7ff ff96 	bl	80056a0 <__sfp_lock_release>
 8005774:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005778:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800577c:	6025      	str	r5, [r4, #0]
 800577e:	61a5      	str	r5, [r4, #24]
 8005780:	2208      	movs	r2, #8
 8005782:	4629      	mov	r1, r5
 8005784:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005788:	f7ff fd2c 	bl	80051e4 <memset>
 800578c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005790:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005794:	4620      	mov	r0, r4
 8005796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005798:	3468      	adds	r4, #104	; 0x68
 800579a:	e7d9      	b.n	8005750 <__sfp+0x1c>
 800579c:	2104      	movs	r1, #4
 800579e:	4638      	mov	r0, r7
 80057a0:	f7ff ff62 	bl	8005668 <__sfmoreglue>
 80057a4:	4604      	mov	r4, r0
 80057a6:	6030      	str	r0, [r6, #0]
 80057a8:	2800      	cmp	r0, #0
 80057aa:	d1d5      	bne.n	8005758 <__sfp+0x24>
 80057ac:	f7ff ff78 	bl	80056a0 <__sfp_lock_release>
 80057b0:	230c      	movs	r3, #12
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	e7ee      	b.n	8005794 <__sfp+0x60>
 80057b6:	bf00      	nop
 80057b8:	08006310 	.word	0x08006310
 80057bc:	ffff0001 	.word	0xffff0001

080057c0 <_fwalk_reent>:
 80057c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057c4:	4606      	mov	r6, r0
 80057c6:	4688      	mov	r8, r1
 80057c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057cc:	2700      	movs	r7, #0
 80057ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057d2:	f1b9 0901 	subs.w	r9, r9, #1
 80057d6:	d505      	bpl.n	80057e4 <_fwalk_reent+0x24>
 80057d8:	6824      	ldr	r4, [r4, #0]
 80057da:	2c00      	cmp	r4, #0
 80057dc:	d1f7      	bne.n	80057ce <_fwalk_reent+0xe>
 80057de:	4638      	mov	r0, r7
 80057e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057e4:	89ab      	ldrh	r3, [r5, #12]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d907      	bls.n	80057fa <_fwalk_reent+0x3a>
 80057ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057ee:	3301      	adds	r3, #1
 80057f0:	d003      	beq.n	80057fa <_fwalk_reent+0x3a>
 80057f2:	4629      	mov	r1, r5
 80057f4:	4630      	mov	r0, r6
 80057f6:	47c0      	blx	r8
 80057f8:	4307      	orrs	r7, r0
 80057fa:	3568      	adds	r5, #104	; 0x68
 80057fc:	e7e9      	b.n	80057d2 <_fwalk_reent+0x12>

080057fe <__retarget_lock_init_recursive>:
 80057fe:	4770      	bx	lr

08005800 <__retarget_lock_acquire_recursive>:
 8005800:	4770      	bx	lr

08005802 <__retarget_lock_release_recursive>:
 8005802:	4770      	bx	lr

08005804 <__swhatbuf_r>:
 8005804:	b570      	push	{r4, r5, r6, lr}
 8005806:	460e      	mov	r6, r1
 8005808:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800580c:	2900      	cmp	r1, #0
 800580e:	b096      	sub	sp, #88	; 0x58
 8005810:	4614      	mov	r4, r2
 8005812:	461d      	mov	r5, r3
 8005814:	da07      	bge.n	8005826 <__swhatbuf_r+0x22>
 8005816:	2300      	movs	r3, #0
 8005818:	602b      	str	r3, [r5, #0]
 800581a:	89b3      	ldrh	r3, [r6, #12]
 800581c:	061a      	lsls	r2, r3, #24
 800581e:	d410      	bmi.n	8005842 <__swhatbuf_r+0x3e>
 8005820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005824:	e00e      	b.n	8005844 <__swhatbuf_r+0x40>
 8005826:	466a      	mov	r2, sp
 8005828:	f000 fc5e 	bl	80060e8 <_fstat_r>
 800582c:	2800      	cmp	r0, #0
 800582e:	dbf2      	blt.n	8005816 <__swhatbuf_r+0x12>
 8005830:	9a01      	ldr	r2, [sp, #4]
 8005832:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005836:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800583a:	425a      	negs	r2, r3
 800583c:	415a      	adcs	r2, r3
 800583e:	602a      	str	r2, [r5, #0]
 8005840:	e7ee      	b.n	8005820 <__swhatbuf_r+0x1c>
 8005842:	2340      	movs	r3, #64	; 0x40
 8005844:	2000      	movs	r0, #0
 8005846:	6023      	str	r3, [r4, #0]
 8005848:	b016      	add	sp, #88	; 0x58
 800584a:	bd70      	pop	{r4, r5, r6, pc}

0800584c <__smakebuf_r>:
 800584c:	898b      	ldrh	r3, [r1, #12]
 800584e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005850:	079d      	lsls	r5, r3, #30
 8005852:	4606      	mov	r6, r0
 8005854:	460c      	mov	r4, r1
 8005856:	d507      	bpl.n	8005868 <__smakebuf_r+0x1c>
 8005858:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800585c:	6023      	str	r3, [r4, #0]
 800585e:	6123      	str	r3, [r4, #16]
 8005860:	2301      	movs	r3, #1
 8005862:	6163      	str	r3, [r4, #20]
 8005864:	b002      	add	sp, #8
 8005866:	bd70      	pop	{r4, r5, r6, pc}
 8005868:	ab01      	add	r3, sp, #4
 800586a:	466a      	mov	r2, sp
 800586c:	f7ff ffca 	bl	8005804 <__swhatbuf_r>
 8005870:	9900      	ldr	r1, [sp, #0]
 8005872:	4605      	mov	r5, r0
 8005874:	4630      	mov	r0, r6
 8005876:	f000 f879 	bl	800596c <_malloc_r>
 800587a:	b948      	cbnz	r0, 8005890 <__smakebuf_r+0x44>
 800587c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005880:	059a      	lsls	r2, r3, #22
 8005882:	d4ef      	bmi.n	8005864 <__smakebuf_r+0x18>
 8005884:	f023 0303 	bic.w	r3, r3, #3
 8005888:	f043 0302 	orr.w	r3, r3, #2
 800588c:	81a3      	strh	r3, [r4, #12]
 800588e:	e7e3      	b.n	8005858 <__smakebuf_r+0xc>
 8005890:	4b0d      	ldr	r3, [pc, #52]	; (80058c8 <__smakebuf_r+0x7c>)
 8005892:	62b3      	str	r3, [r6, #40]	; 0x28
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	6020      	str	r0, [r4, #0]
 8005898:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800589c:	81a3      	strh	r3, [r4, #12]
 800589e:	9b00      	ldr	r3, [sp, #0]
 80058a0:	6163      	str	r3, [r4, #20]
 80058a2:	9b01      	ldr	r3, [sp, #4]
 80058a4:	6120      	str	r0, [r4, #16]
 80058a6:	b15b      	cbz	r3, 80058c0 <__smakebuf_r+0x74>
 80058a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058ac:	4630      	mov	r0, r6
 80058ae:	f000 fc2d 	bl	800610c <_isatty_r>
 80058b2:	b128      	cbz	r0, 80058c0 <__smakebuf_r+0x74>
 80058b4:	89a3      	ldrh	r3, [r4, #12]
 80058b6:	f023 0303 	bic.w	r3, r3, #3
 80058ba:	f043 0301 	orr.w	r3, r3, #1
 80058be:	81a3      	strh	r3, [r4, #12]
 80058c0:	89a0      	ldrh	r0, [r4, #12]
 80058c2:	4305      	orrs	r5, r0
 80058c4:	81a5      	strh	r5, [r4, #12]
 80058c6:	e7cd      	b.n	8005864 <__smakebuf_r+0x18>
 80058c8:	0800565d 	.word	0x0800565d

080058cc <_free_r>:
 80058cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058ce:	2900      	cmp	r1, #0
 80058d0:	d048      	beq.n	8005964 <_free_r+0x98>
 80058d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058d6:	9001      	str	r0, [sp, #4]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	f1a1 0404 	sub.w	r4, r1, #4
 80058de:	bfb8      	it	lt
 80058e0:	18e4      	addlt	r4, r4, r3
 80058e2:	f000 fc35 	bl	8006150 <__malloc_lock>
 80058e6:	4a20      	ldr	r2, [pc, #128]	; (8005968 <_free_r+0x9c>)
 80058e8:	9801      	ldr	r0, [sp, #4]
 80058ea:	6813      	ldr	r3, [r2, #0]
 80058ec:	4615      	mov	r5, r2
 80058ee:	b933      	cbnz	r3, 80058fe <_free_r+0x32>
 80058f0:	6063      	str	r3, [r4, #4]
 80058f2:	6014      	str	r4, [r2, #0]
 80058f4:	b003      	add	sp, #12
 80058f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058fa:	f000 bc2f 	b.w	800615c <__malloc_unlock>
 80058fe:	42a3      	cmp	r3, r4
 8005900:	d90b      	bls.n	800591a <_free_r+0x4e>
 8005902:	6821      	ldr	r1, [r4, #0]
 8005904:	1862      	adds	r2, r4, r1
 8005906:	4293      	cmp	r3, r2
 8005908:	bf04      	itt	eq
 800590a:	681a      	ldreq	r2, [r3, #0]
 800590c:	685b      	ldreq	r3, [r3, #4]
 800590e:	6063      	str	r3, [r4, #4]
 8005910:	bf04      	itt	eq
 8005912:	1852      	addeq	r2, r2, r1
 8005914:	6022      	streq	r2, [r4, #0]
 8005916:	602c      	str	r4, [r5, #0]
 8005918:	e7ec      	b.n	80058f4 <_free_r+0x28>
 800591a:	461a      	mov	r2, r3
 800591c:	685b      	ldr	r3, [r3, #4]
 800591e:	b10b      	cbz	r3, 8005924 <_free_r+0x58>
 8005920:	42a3      	cmp	r3, r4
 8005922:	d9fa      	bls.n	800591a <_free_r+0x4e>
 8005924:	6811      	ldr	r1, [r2, #0]
 8005926:	1855      	adds	r5, r2, r1
 8005928:	42a5      	cmp	r5, r4
 800592a:	d10b      	bne.n	8005944 <_free_r+0x78>
 800592c:	6824      	ldr	r4, [r4, #0]
 800592e:	4421      	add	r1, r4
 8005930:	1854      	adds	r4, r2, r1
 8005932:	42a3      	cmp	r3, r4
 8005934:	6011      	str	r1, [r2, #0]
 8005936:	d1dd      	bne.n	80058f4 <_free_r+0x28>
 8005938:	681c      	ldr	r4, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	6053      	str	r3, [r2, #4]
 800593e:	4421      	add	r1, r4
 8005940:	6011      	str	r1, [r2, #0]
 8005942:	e7d7      	b.n	80058f4 <_free_r+0x28>
 8005944:	d902      	bls.n	800594c <_free_r+0x80>
 8005946:	230c      	movs	r3, #12
 8005948:	6003      	str	r3, [r0, #0]
 800594a:	e7d3      	b.n	80058f4 <_free_r+0x28>
 800594c:	6825      	ldr	r5, [r4, #0]
 800594e:	1961      	adds	r1, r4, r5
 8005950:	428b      	cmp	r3, r1
 8005952:	bf04      	itt	eq
 8005954:	6819      	ldreq	r1, [r3, #0]
 8005956:	685b      	ldreq	r3, [r3, #4]
 8005958:	6063      	str	r3, [r4, #4]
 800595a:	bf04      	itt	eq
 800595c:	1949      	addeq	r1, r1, r5
 800595e:	6021      	streq	r1, [r4, #0]
 8005960:	6054      	str	r4, [r2, #4]
 8005962:	e7c7      	b.n	80058f4 <_free_r+0x28>
 8005964:	b003      	add	sp, #12
 8005966:	bd30      	pop	{r4, r5, pc}
 8005968:	20000090 	.word	0x20000090

0800596c <_malloc_r>:
 800596c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596e:	1ccd      	adds	r5, r1, #3
 8005970:	f025 0503 	bic.w	r5, r5, #3
 8005974:	3508      	adds	r5, #8
 8005976:	2d0c      	cmp	r5, #12
 8005978:	bf38      	it	cc
 800597a:	250c      	movcc	r5, #12
 800597c:	2d00      	cmp	r5, #0
 800597e:	4606      	mov	r6, r0
 8005980:	db01      	blt.n	8005986 <_malloc_r+0x1a>
 8005982:	42a9      	cmp	r1, r5
 8005984:	d903      	bls.n	800598e <_malloc_r+0x22>
 8005986:	230c      	movs	r3, #12
 8005988:	6033      	str	r3, [r6, #0]
 800598a:	2000      	movs	r0, #0
 800598c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800598e:	f000 fbdf 	bl	8006150 <__malloc_lock>
 8005992:	4921      	ldr	r1, [pc, #132]	; (8005a18 <_malloc_r+0xac>)
 8005994:	680a      	ldr	r2, [r1, #0]
 8005996:	4614      	mov	r4, r2
 8005998:	b99c      	cbnz	r4, 80059c2 <_malloc_r+0x56>
 800599a:	4f20      	ldr	r7, [pc, #128]	; (8005a1c <_malloc_r+0xb0>)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	b923      	cbnz	r3, 80059aa <_malloc_r+0x3e>
 80059a0:	4621      	mov	r1, r4
 80059a2:	4630      	mov	r0, r6
 80059a4:	f000 fb2a 	bl	8005ffc <_sbrk_r>
 80059a8:	6038      	str	r0, [r7, #0]
 80059aa:	4629      	mov	r1, r5
 80059ac:	4630      	mov	r0, r6
 80059ae:	f000 fb25 	bl	8005ffc <_sbrk_r>
 80059b2:	1c43      	adds	r3, r0, #1
 80059b4:	d123      	bne.n	80059fe <_malloc_r+0x92>
 80059b6:	230c      	movs	r3, #12
 80059b8:	6033      	str	r3, [r6, #0]
 80059ba:	4630      	mov	r0, r6
 80059bc:	f000 fbce 	bl	800615c <__malloc_unlock>
 80059c0:	e7e3      	b.n	800598a <_malloc_r+0x1e>
 80059c2:	6823      	ldr	r3, [r4, #0]
 80059c4:	1b5b      	subs	r3, r3, r5
 80059c6:	d417      	bmi.n	80059f8 <_malloc_r+0x8c>
 80059c8:	2b0b      	cmp	r3, #11
 80059ca:	d903      	bls.n	80059d4 <_malloc_r+0x68>
 80059cc:	6023      	str	r3, [r4, #0]
 80059ce:	441c      	add	r4, r3
 80059d0:	6025      	str	r5, [r4, #0]
 80059d2:	e004      	b.n	80059de <_malloc_r+0x72>
 80059d4:	6863      	ldr	r3, [r4, #4]
 80059d6:	42a2      	cmp	r2, r4
 80059d8:	bf0c      	ite	eq
 80059da:	600b      	streq	r3, [r1, #0]
 80059dc:	6053      	strne	r3, [r2, #4]
 80059de:	4630      	mov	r0, r6
 80059e0:	f000 fbbc 	bl	800615c <__malloc_unlock>
 80059e4:	f104 000b 	add.w	r0, r4, #11
 80059e8:	1d23      	adds	r3, r4, #4
 80059ea:	f020 0007 	bic.w	r0, r0, #7
 80059ee:	1ac2      	subs	r2, r0, r3
 80059f0:	d0cc      	beq.n	800598c <_malloc_r+0x20>
 80059f2:	1a1b      	subs	r3, r3, r0
 80059f4:	50a3      	str	r3, [r4, r2]
 80059f6:	e7c9      	b.n	800598c <_malloc_r+0x20>
 80059f8:	4622      	mov	r2, r4
 80059fa:	6864      	ldr	r4, [r4, #4]
 80059fc:	e7cc      	b.n	8005998 <_malloc_r+0x2c>
 80059fe:	1cc4      	adds	r4, r0, #3
 8005a00:	f024 0403 	bic.w	r4, r4, #3
 8005a04:	42a0      	cmp	r0, r4
 8005a06:	d0e3      	beq.n	80059d0 <_malloc_r+0x64>
 8005a08:	1a21      	subs	r1, r4, r0
 8005a0a:	4630      	mov	r0, r6
 8005a0c:	f000 faf6 	bl	8005ffc <_sbrk_r>
 8005a10:	3001      	adds	r0, #1
 8005a12:	d1dd      	bne.n	80059d0 <_malloc_r+0x64>
 8005a14:	e7cf      	b.n	80059b6 <_malloc_r+0x4a>
 8005a16:	bf00      	nop
 8005a18:	20000090 	.word	0x20000090
 8005a1c:	20000094 	.word	0x20000094

08005a20 <__sfputc_r>:
 8005a20:	6893      	ldr	r3, [r2, #8]
 8005a22:	3b01      	subs	r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	b410      	push	{r4}
 8005a28:	6093      	str	r3, [r2, #8]
 8005a2a:	da08      	bge.n	8005a3e <__sfputc_r+0x1e>
 8005a2c:	6994      	ldr	r4, [r2, #24]
 8005a2e:	42a3      	cmp	r3, r4
 8005a30:	db01      	blt.n	8005a36 <__sfputc_r+0x16>
 8005a32:	290a      	cmp	r1, #10
 8005a34:	d103      	bne.n	8005a3e <__sfputc_r+0x1e>
 8005a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a3a:	f7ff bc69 	b.w	8005310 <__swbuf_r>
 8005a3e:	6813      	ldr	r3, [r2, #0]
 8005a40:	1c58      	adds	r0, r3, #1
 8005a42:	6010      	str	r0, [r2, #0]
 8005a44:	7019      	strb	r1, [r3, #0]
 8005a46:	4608      	mov	r0, r1
 8005a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <__sfputs_r>:
 8005a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a50:	4606      	mov	r6, r0
 8005a52:	460f      	mov	r7, r1
 8005a54:	4614      	mov	r4, r2
 8005a56:	18d5      	adds	r5, r2, r3
 8005a58:	42ac      	cmp	r4, r5
 8005a5a:	d101      	bne.n	8005a60 <__sfputs_r+0x12>
 8005a5c:	2000      	movs	r0, #0
 8005a5e:	e007      	b.n	8005a70 <__sfputs_r+0x22>
 8005a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a64:	463a      	mov	r2, r7
 8005a66:	4630      	mov	r0, r6
 8005a68:	f7ff ffda 	bl	8005a20 <__sfputc_r>
 8005a6c:	1c43      	adds	r3, r0, #1
 8005a6e:	d1f3      	bne.n	8005a58 <__sfputs_r+0xa>
 8005a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005a74 <_vfiprintf_r>:
 8005a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a78:	460d      	mov	r5, r1
 8005a7a:	b09d      	sub	sp, #116	; 0x74
 8005a7c:	4614      	mov	r4, r2
 8005a7e:	4698      	mov	r8, r3
 8005a80:	4606      	mov	r6, r0
 8005a82:	b118      	cbz	r0, 8005a8c <_vfiprintf_r+0x18>
 8005a84:	6983      	ldr	r3, [r0, #24]
 8005a86:	b90b      	cbnz	r3, 8005a8c <_vfiprintf_r+0x18>
 8005a88:	f7ff fe1c 	bl	80056c4 <__sinit>
 8005a8c:	4b89      	ldr	r3, [pc, #548]	; (8005cb4 <_vfiprintf_r+0x240>)
 8005a8e:	429d      	cmp	r5, r3
 8005a90:	d11b      	bne.n	8005aca <_vfiprintf_r+0x56>
 8005a92:	6875      	ldr	r5, [r6, #4]
 8005a94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a96:	07d9      	lsls	r1, r3, #31
 8005a98:	d405      	bmi.n	8005aa6 <_vfiprintf_r+0x32>
 8005a9a:	89ab      	ldrh	r3, [r5, #12]
 8005a9c:	059a      	lsls	r2, r3, #22
 8005a9e:	d402      	bmi.n	8005aa6 <_vfiprintf_r+0x32>
 8005aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005aa2:	f7ff fead 	bl	8005800 <__retarget_lock_acquire_recursive>
 8005aa6:	89ab      	ldrh	r3, [r5, #12]
 8005aa8:	071b      	lsls	r3, r3, #28
 8005aaa:	d501      	bpl.n	8005ab0 <_vfiprintf_r+0x3c>
 8005aac:	692b      	ldr	r3, [r5, #16]
 8005aae:	b9eb      	cbnz	r3, 8005aec <_vfiprintf_r+0x78>
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	4630      	mov	r0, r6
 8005ab4:	f7ff fc7e 	bl	80053b4 <__swsetup_r>
 8005ab8:	b1c0      	cbz	r0, 8005aec <_vfiprintf_r+0x78>
 8005aba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005abc:	07dc      	lsls	r4, r3, #31
 8005abe:	d50e      	bpl.n	8005ade <_vfiprintf_r+0x6a>
 8005ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ac4:	b01d      	add	sp, #116	; 0x74
 8005ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aca:	4b7b      	ldr	r3, [pc, #492]	; (8005cb8 <_vfiprintf_r+0x244>)
 8005acc:	429d      	cmp	r5, r3
 8005ace:	d101      	bne.n	8005ad4 <_vfiprintf_r+0x60>
 8005ad0:	68b5      	ldr	r5, [r6, #8]
 8005ad2:	e7df      	b.n	8005a94 <_vfiprintf_r+0x20>
 8005ad4:	4b79      	ldr	r3, [pc, #484]	; (8005cbc <_vfiprintf_r+0x248>)
 8005ad6:	429d      	cmp	r5, r3
 8005ad8:	bf08      	it	eq
 8005ada:	68f5      	ldreq	r5, [r6, #12]
 8005adc:	e7da      	b.n	8005a94 <_vfiprintf_r+0x20>
 8005ade:	89ab      	ldrh	r3, [r5, #12]
 8005ae0:	0598      	lsls	r0, r3, #22
 8005ae2:	d4ed      	bmi.n	8005ac0 <_vfiprintf_r+0x4c>
 8005ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ae6:	f7ff fe8c 	bl	8005802 <__retarget_lock_release_recursive>
 8005aea:	e7e9      	b.n	8005ac0 <_vfiprintf_r+0x4c>
 8005aec:	2300      	movs	r3, #0
 8005aee:	9309      	str	r3, [sp, #36]	; 0x24
 8005af0:	2320      	movs	r3, #32
 8005af2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005afa:	2330      	movs	r3, #48	; 0x30
 8005afc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005cc0 <_vfiprintf_r+0x24c>
 8005b00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b04:	f04f 0901 	mov.w	r9, #1
 8005b08:	4623      	mov	r3, r4
 8005b0a:	469a      	mov	sl, r3
 8005b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b10:	b10a      	cbz	r2, 8005b16 <_vfiprintf_r+0xa2>
 8005b12:	2a25      	cmp	r2, #37	; 0x25
 8005b14:	d1f9      	bne.n	8005b0a <_vfiprintf_r+0x96>
 8005b16:	ebba 0b04 	subs.w	fp, sl, r4
 8005b1a:	d00b      	beq.n	8005b34 <_vfiprintf_r+0xc0>
 8005b1c:	465b      	mov	r3, fp
 8005b1e:	4622      	mov	r2, r4
 8005b20:	4629      	mov	r1, r5
 8005b22:	4630      	mov	r0, r6
 8005b24:	f7ff ff93 	bl	8005a4e <__sfputs_r>
 8005b28:	3001      	adds	r0, #1
 8005b2a:	f000 80aa 	beq.w	8005c82 <_vfiprintf_r+0x20e>
 8005b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b30:	445a      	add	r2, fp
 8005b32:	9209      	str	r2, [sp, #36]	; 0x24
 8005b34:	f89a 3000 	ldrb.w	r3, [sl]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 80a2 	beq.w	8005c82 <_vfiprintf_r+0x20e>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f04f 32ff 	mov.w	r2, #4294967295
 8005b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b48:	f10a 0a01 	add.w	sl, sl, #1
 8005b4c:	9304      	str	r3, [sp, #16]
 8005b4e:	9307      	str	r3, [sp, #28]
 8005b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b54:	931a      	str	r3, [sp, #104]	; 0x68
 8005b56:	4654      	mov	r4, sl
 8005b58:	2205      	movs	r2, #5
 8005b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b5e:	4858      	ldr	r0, [pc, #352]	; (8005cc0 <_vfiprintf_r+0x24c>)
 8005b60:	f7fa fb56 	bl	8000210 <memchr>
 8005b64:	9a04      	ldr	r2, [sp, #16]
 8005b66:	b9d8      	cbnz	r0, 8005ba0 <_vfiprintf_r+0x12c>
 8005b68:	06d1      	lsls	r1, r2, #27
 8005b6a:	bf44      	itt	mi
 8005b6c:	2320      	movmi	r3, #32
 8005b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b72:	0713      	lsls	r3, r2, #28
 8005b74:	bf44      	itt	mi
 8005b76:	232b      	movmi	r3, #43	; 0x2b
 8005b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b80:	2b2a      	cmp	r3, #42	; 0x2a
 8005b82:	d015      	beq.n	8005bb0 <_vfiprintf_r+0x13c>
 8005b84:	9a07      	ldr	r2, [sp, #28]
 8005b86:	4654      	mov	r4, sl
 8005b88:	2000      	movs	r0, #0
 8005b8a:	f04f 0c0a 	mov.w	ip, #10
 8005b8e:	4621      	mov	r1, r4
 8005b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b94:	3b30      	subs	r3, #48	; 0x30
 8005b96:	2b09      	cmp	r3, #9
 8005b98:	d94e      	bls.n	8005c38 <_vfiprintf_r+0x1c4>
 8005b9a:	b1b0      	cbz	r0, 8005bca <_vfiprintf_r+0x156>
 8005b9c:	9207      	str	r2, [sp, #28]
 8005b9e:	e014      	b.n	8005bca <_vfiprintf_r+0x156>
 8005ba0:	eba0 0308 	sub.w	r3, r0, r8
 8005ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	9304      	str	r3, [sp, #16]
 8005bac:	46a2      	mov	sl, r4
 8005bae:	e7d2      	b.n	8005b56 <_vfiprintf_r+0xe2>
 8005bb0:	9b03      	ldr	r3, [sp, #12]
 8005bb2:	1d19      	adds	r1, r3, #4
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	9103      	str	r1, [sp, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	bfbb      	ittet	lt
 8005bbc:	425b      	neglt	r3, r3
 8005bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8005bc2:	9307      	strge	r3, [sp, #28]
 8005bc4:	9307      	strlt	r3, [sp, #28]
 8005bc6:	bfb8      	it	lt
 8005bc8:	9204      	strlt	r2, [sp, #16]
 8005bca:	7823      	ldrb	r3, [r4, #0]
 8005bcc:	2b2e      	cmp	r3, #46	; 0x2e
 8005bce:	d10c      	bne.n	8005bea <_vfiprintf_r+0x176>
 8005bd0:	7863      	ldrb	r3, [r4, #1]
 8005bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8005bd4:	d135      	bne.n	8005c42 <_vfiprintf_r+0x1ce>
 8005bd6:	9b03      	ldr	r3, [sp, #12]
 8005bd8:	1d1a      	adds	r2, r3, #4
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	9203      	str	r2, [sp, #12]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	bfb8      	it	lt
 8005be2:	f04f 33ff 	movlt.w	r3, #4294967295
 8005be6:	3402      	adds	r4, #2
 8005be8:	9305      	str	r3, [sp, #20]
 8005bea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005cd0 <_vfiprintf_r+0x25c>
 8005bee:	7821      	ldrb	r1, [r4, #0]
 8005bf0:	2203      	movs	r2, #3
 8005bf2:	4650      	mov	r0, sl
 8005bf4:	f7fa fb0c 	bl	8000210 <memchr>
 8005bf8:	b140      	cbz	r0, 8005c0c <_vfiprintf_r+0x198>
 8005bfa:	2340      	movs	r3, #64	; 0x40
 8005bfc:	eba0 000a 	sub.w	r0, r0, sl
 8005c00:	fa03 f000 	lsl.w	r0, r3, r0
 8005c04:	9b04      	ldr	r3, [sp, #16]
 8005c06:	4303      	orrs	r3, r0
 8005c08:	3401      	adds	r4, #1
 8005c0a:	9304      	str	r3, [sp, #16]
 8005c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c10:	482c      	ldr	r0, [pc, #176]	; (8005cc4 <_vfiprintf_r+0x250>)
 8005c12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c16:	2206      	movs	r2, #6
 8005c18:	f7fa fafa 	bl	8000210 <memchr>
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	d03f      	beq.n	8005ca0 <_vfiprintf_r+0x22c>
 8005c20:	4b29      	ldr	r3, [pc, #164]	; (8005cc8 <_vfiprintf_r+0x254>)
 8005c22:	bb1b      	cbnz	r3, 8005c6c <_vfiprintf_r+0x1f8>
 8005c24:	9b03      	ldr	r3, [sp, #12]
 8005c26:	3307      	adds	r3, #7
 8005c28:	f023 0307 	bic.w	r3, r3, #7
 8005c2c:	3308      	adds	r3, #8
 8005c2e:	9303      	str	r3, [sp, #12]
 8005c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c32:	443b      	add	r3, r7
 8005c34:	9309      	str	r3, [sp, #36]	; 0x24
 8005c36:	e767      	b.n	8005b08 <_vfiprintf_r+0x94>
 8005c38:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c3c:	460c      	mov	r4, r1
 8005c3e:	2001      	movs	r0, #1
 8005c40:	e7a5      	b.n	8005b8e <_vfiprintf_r+0x11a>
 8005c42:	2300      	movs	r3, #0
 8005c44:	3401      	adds	r4, #1
 8005c46:	9305      	str	r3, [sp, #20]
 8005c48:	4619      	mov	r1, r3
 8005c4a:	f04f 0c0a 	mov.w	ip, #10
 8005c4e:	4620      	mov	r0, r4
 8005c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c54:	3a30      	subs	r2, #48	; 0x30
 8005c56:	2a09      	cmp	r2, #9
 8005c58:	d903      	bls.n	8005c62 <_vfiprintf_r+0x1ee>
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0c5      	beq.n	8005bea <_vfiprintf_r+0x176>
 8005c5e:	9105      	str	r1, [sp, #20]
 8005c60:	e7c3      	b.n	8005bea <_vfiprintf_r+0x176>
 8005c62:	fb0c 2101 	mla	r1, ip, r1, r2
 8005c66:	4604      	mov	r4, r0
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e7f0      	b.n	8005c4e <_vfiprintf_r+0x1da>
 8005c6c:	ab03      	add	r3, sp, #12
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	462a      	mov	r2, r5
 8005c72:	4b16      	ldr	r3, [pc, #88]	; (8005ccc <_vfiprintf_r+0x258>)
 8005c74:	a904      	add	r1, sp, #16
 8005c76:	4630      	mov	r0, r6
 8005c78:	f3af 8000 	nop.w
 8005c7c:	4607      	mov	r7, r0
 8005c7e:	1c78      	adds	r0, r7, #1
 8005c80:	d1d6      	bne.n	8005c30 <_vfiprintf_r+0x1bc>
 8005c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005c84:	07d9      	lsls	r1, r3, #31
 8005c86:	d405      	bmi.n	8005c94 <_vfiprintf_r+0x220>
 8005c88:	89ab      	ldrh	r3, [r5, #12]
 8005c8a:	059a      	lsls	r2, r3, #22
 8005c8c:	d402      	bmi.n	8005c94 <_vfiprintf_r+0x220>
 8005c8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005c90:	f7ff fdb7 	bl	8005802 <__retarget_lock_release_recursive>
 8005c94:	89ab      	ldrh	r3, [r5, #12]
 8005c96:	065b      	lsls	r3, r3, #25
 8005c98:	f53f af12 	bmi.w	8005ac0 <_vfiprintf_r+0x4c>
 8005c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c9e:	e711      	b.n	8005ac4 <_vfiprintf_r+0x50>
 8005ca0:	ab03      	add	r3, sp, #12
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	462a      	mov	r2, r5
 8005ca6:	4b09      	ldr	r3, [pc, #36]	; (8005ccc <_vfiprintf_r+0x258>)
 8005ca8:	a904      	add	r1, sp, #16
 8005caa:	4630      	mov	r0, r6
 8005cac:	f000 f880 	bl	8005db0 <_printf_i>
 8005cb0:	e7e4      	b.n	8005c7c <_vfiprintf_r+0x208>
 8005cb2:	bf00      	nop
 8005cb4:	08006334 	.word	0x08006334
 8005cb8:	08006354 	.word	0x08006354
 8005cbc:	08006314 	.word	0x08006314
 8005cc0:	08006374 	.word	0x08006374
 8005cc4:	0800637e 	.word	0x0800637e
 8005cc8:	00000000 	.word	0x00000000
 8005ccc:	08005a4f 	.word	0x08005a4f
 8005cd0:	0800637a 	.word	0x0800637a

08005cd4 <_printf_common>:
 8005cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd8:	4616      	mov	r6, r2
 8005cda:	4699      	mov	r9, r3
 8005cdc:	688a      	ldr	r2, [r1, #8]
 8005cde:	690b      	ldr	r3, [r1, #16]
 8005ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	bfb8      	it	lt
 8005ce8:	4613      	movlt	r3, r2
 8005cea:	6033      	str	r3, [r6, #0]
 8005cec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005cf0:	4607      	mov	r7, r0
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	b10a      	cbz	r2, 8005cfa <_printf_common+0x26>
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	6033      	str	r3, [r6, #0]
 8005cfa:	6823      	ldr	r3, [r4, #0]
 8005cfc:	0699      	lsls	r1, r3, #26
 8005cfe:	bf42      	ittt	mi
 8005d00:	6833      	ldrmi	r3, [r6, #0]
 8005d02:	3302      	addmi	r3, #2
 8005d04:	6033      	strmi	r3, [r6, #0]
 8005d06:	6825      	ldr	r5, [r4, #0]
 8005d08:	f015 0506 	ands.w	r5, r5, #6
 8005d0c:	d106      	bne.n	8005d1c <_printf_common+0x48>
 8005d0e:	f104 0a19 	add.w	sl, r4, #25
 8005d12:	68e3      	ldr	r3, [r4, #12]
 8005d14:	6832      	ldr	r2, [r6, #0]
 8005d16:	1a9b      	subs	r3, r3, r2
 8005d18:	42ab      	cmp	r3, r5
 8005d1a:	dc26      	bgt.n	8005d6a <_printf_common+0x96>
 8005d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d20:	1e13      	subs	r3, r2, #0
 8005d22:	6822      	ldr	r2, [r4, #0]
 8005d24:	bf18      	it	ne
 8005d26:	2301      	movne	r3, #1
 8005d28:	0692      	lsls	r2, r2, #26
 8005d2a:	d42b      	bmi.n	8005d84 <_printf_common+0xb0>
 8005d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d30:	4649      	mov	r1, r9
 8005d32:	4638      	mov	r0, r7
 8005d34:	47c0      	blx	r8
 8005d36:	3001      	adds	r0, #1
 8005d38:	d01e      	beq.n	8005d78 <_printf_common+0xa4>
 8005d3a:	6823      	ldr	r3, [r4, #0]
 8005d3c:	68e5      	ldr	r5, [r4, #12]
 8005d3e:	6832      	ldr	r2, [r6, #0]
 8005d40:	f003 0306 	and.w	r3, r3, #6
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	bf08      	it	eq
 8005d48:	1aad      	subeq	r5, r5, r2
 8005d4a:	68a3      	ldr	r3, [r4, #8]
 8005d4c:	6922      	ldr	r2, [r4, #16]
 8005d4e:	bf0c      	ite	eq
 8005d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d54:	2500      	movne	r5, #0
 8005d56:	4293      	cmp	r3, r2
 8005d58:	bfc4      	itt	gt
 8005d5a:	1a9b      	subgt	r3, r3, r2
 8005d5c:	18ed      	addgt	r5, r5, r3
 8005d5e:	2600      	movs	r6, #0
 8005d60:	341a      	adds	r4, #26
 8005d62:	42b5      	cmp	r5, r6
 8005d64:	d11a      	bne.n	8005d9c <_printf_common+0xc8>
 8005d66:	2000      	movs	r0, #0
 8005d68:	e008      	b.n	8005d7c <_printf_common+0xa8>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	4652      	mov	r2, sl
 8005d6e:	4649      	mov	r1, r9
 8005d70:	4638      	mov	r0, r7
 8005d72:	47c0      	blx	r8
 8005d74:	3001      	adds	r0, #1
 8005d76:	d103      	bne.n	8005d80 <_printf_common+0xac>
 8005d78:	f04f 30ff 	mov.w	r0, #4294967295
 8005d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d80:	3501      	adds	r5, #1
 8005d82:	e7c6      	b.n	8005d12 <_printf_common+0x3e>
 8005d84:	18e1      	adds	r1, r4, r3
 8005d86:	1c5a      	adds	r2, r3, #1
 8005d88:	2030      	movs	r0, #48	; 0x30
 8005d8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005d8e:	4422      	add	r2, r4
 8005d90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005d94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005d98:	3302      	adds	r3, #2
 8005d9a:	e7c7      	b.n	8005d2c <_printf_common+0x58>
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	4622      	mov	r2, r4
 8005da0:	4649      	mov	r1, r9
 8005da2:	4638      	mov	r0, r7
 8005da4:	47c0      	blx	r8
 8005da6:	3001      	adds	r0, #1
 8005da8:	d0e6      	beq.n	8005d78 <_printf_common+0xa4>
 8005daa:	3601      	adds	r6, #1
 8005dac:	e7d9      	b.n	8005d62 <_printf_common+0x8e>
	...

08005db0 <_printf_i>:
 8005db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005db4:	460c      	mov	r4, r1
 8005db6:	4691      	mov	r9, r2
 8005db8:	7e27      	ldrb	r7, [r4, #24]
 8005dba:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005dbc:	2f78      	cmp	r7, #120	; 0x78
 8005dbe:	4680      	mov	r8, r0
 8005dc0:	469a      	mov	sl, r3
 8005dc2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dc6:	d807      	bhi.n	8005dd8 <_printf_i+0x28>
 8005dc8:	2f62      	cmp	r7, #98	; 0x62
 8005dca:	d80a      	bhi.n	8005de2 <_printf_i+0x32>
 8005dcc:	2f00      	cmp	r7, #0
 8005dce:	f000 80d8 	beq.w	8005f82 <_printf_i+0x1d2>
 8005dd2:	2f58      	cmp	r7, #88	; 0x58
 8005dd4:	f000 80a3 	beq.w	8005f1e <_printf_i+0x16e>
 8005dd8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005de0:	e03a      	b.n	8005e58 <_printf_i+0xa8>
 8005de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005de6:	2b15      	cmp	r3, #21
 8005de8:	d8f6      	bhi.n	8005dd8 <_printf_i+0x28>
 8005dea:	a001      	add	r0, pc, #4	; (adr r0, 8005df0 <_printf_i+0x40>)
 8005dec:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005df0:	08005e49 	.word	0x08005e49
 8005df4:	08005e5d 	.word	0x08005e5d
 8005df8:	08005dd9 	.word	0x08005dd9
 8005dfc:	08005dd9 	.word	0x08005dd9
 8005e00:	08005dd9 	.word	0x08005dd9
 8005e04:	08005dd9 	.word	0x08005dd9
 8005e08:	08005e5d 	.word	0x08005e5d
 8005e0c:	08005dd9 	.word	0x08005dd9
 8005e10:	08005dd9 	.word	0x08005dd9
 8005e14:	08005dd9 	.word	0x08005dd9
 8005e18:	08005dd9 	.word	0x08005dd9
 8005e1c:	08005f69 	.word	0x08005f69
 8005e20:	08005e8d 	.word	0x08005e8d
 8005e24:	08005f4b 	.word	0x08005f4b
 8005e28:	08005dd9 	.word	0x08005dd9
 8005e2c:	08005dd9 	.word	0x08005dd9
 8005e30:	08005f8b 	.word	0x08005f8b
 8005e34:	08005dd9 	.word	0x08005dd9
 8005e38:	08005e8d 	.word	0x08005e8d
 8005e3c:	08005dd9 	.word	0x08005dd9
 8005e40:	08005dd9 	.word	0x08005dd9
 8005e44:	08005f53 	.word	0x08005f53
 8005e48:	680b      	ldr	r3, [r1, #0]
 8005e4a:	1d1a      	adds	r2, r3, #4
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	600a      	str	r2, [r1, #0]
 8005e50:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e0a3      	b.n	8005fa4 <_printf_i+0x1f4>
 8005e5c:	6825      	ldr	r5, [r4, #0]
 8005e5e:	6808      	ldr	r0, [r1, #0]
 8005e60:	062e      	lsls	r6, r5, #24
 8005e62:	f100 0304 	add.w	r3, r0, #4
 8005e66:	d50a      	bpl.n	8005e7e <_printf_i+0xce>
 8005e68:	6805      	ldr	r5, [r0, #0]
 8005e6a:	600b      	str	r3, [r1, #0]
 8005e6c:	2d00      	cmp	r5, #0
 8005e6e:	da03      	bge.n	8005e78 <_printf_i+0xc8>
 8005e70:	232d      	movs	r3, #45	; 0x2d
 8005e72:	426d      	negs	r5, r5
 8005e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e78:	485e      	ldr	r0, [pc, #376]	; (8005ff4 <_printf_i+0x244>)
 8005e7a:	230a      	movs	r3, #10
 8005e7c:	e019      	b.n	8005eb2 <_printf_i+0x102>
 8005e7e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005e82:	6805      	ldr	r5, [r0, #0]
 8005e84:	600b      	str	r3, [r1, #0]
 8005e86:	bf18      	it	ne
 8005e88:	b22d      	sxthne	r5, r5
 8005e8a:	e7ef      	b.n	8005e6c <_printf_i+0xbc>
 8005e8c:	680b      	ldr	r3, [r1, #0]
 8005e8e:	6825      	ldr	r5, [r4, #0]
 8005e90:	1d18      	adds	r0, r3, #4
 8005e92:	6008      	str	r0, [r1, #0]
 8005e94:	0628      	lsls	r0, r5, #24
 8005e96:	d501      	bpl.n	8005e9c <_printf_i+0xec>
 8005e98:	681d      	ldr	r5, [r3, #0]
 8005e9a:	e002      	b.n	8005ea2 <_printf_i+0xf2>
 8005e9c:	0669      	lsls	r1, r5, #25
 8005e9e:	d5fb      	bpl.n	8005e98 <_printf_i+0xe8>
 8005ea0:	881d      	ldrh	r5, [r3, #0]
 8005ea2:	4854      	ldr	r0, [pc, #336]	; (8005ff4 <_printf_i+0x244>)
 8005ea4:	2f6f      	cmp	r7, #111	; 0x6f
 8005ea6:	bf0c      	ite	eq
 8005ea8:	2308      	moveq	r3, #8
 8005eaa:	230a      	movne	r3, #10
 8005eac:	2100      	movs	r1, #0
 8005eae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005eb2:	6866      	ldr	r6, [r4, #4]
 8005eb4:	60a6      	str	r6, [r4, #8]
 8005eb6:	2e00      	cmp	r6, #0
 8005eb8:	bfa2      	ittt	ge
 8005eba:	6821      	ldrge	r1, [r4, #0]
 8005ebc:	f021 0104 	bicge.w	r1, r1, #4
 8005ec0:	6021      	strge	r1, [r4, #0]
 8005ec2:	b90d      	cbnz	r5, 8005ec8 <_printf_i+0x118>
 8005ec4:	2e00      	cmp	r6, #0
 8005ec6:	d04d      	beq.n	8005f64 <_printf_i+0x1b4>
 8005ec8:	4616      	mov	r6, r2
 8005eca:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ece:	fb03 5711 	mls	r7, r3, r1, r5
 8005ed2:	5dc7      	ldrb	r7, [r0, r7]
 8005ed4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ed8:	462f      	mov	r7, r5
 8005eda:	42bb      	cmp	r3, r7
 8005edc:	460d      	mov	r5, r1
 8005ede:	d9f4      	bls.n	8005eca <_printf_i+0x11a>
 8005ee0:	2b08      	cmp	r3, #8
 8005ee2:	d10b      	bne.n	8005efc <_printf_i+0x14c>
 8005ee4:	6823      	ldr	r3, [r4, #0]
 8005ee6:	07df      	lsls	r7, r3, #31
 8005ee8:	d508      	bpl.n	8005efc <_printf_i+0x14c>
 8005eea:	6923      	ldr	r3, [r4, #16]
 8005eec:	6861      	ldr	r1, [r4, #4]
 8005eee:	4299      	cmp	r1, r3
 8005ef0:	bfde      	ittt	le
 8005ef2:	2330      	movle	r3, #48	; 0x30
 8005ef4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ef8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005efc:	1b92      	subs	r2, r2, r6
 8005efe:	6122      	str	r2, [r4, #16]
 8005f00:	f8cd a000 	str.w	sl, [sp]
 8005f04:	464b      	mov	r3, r9
 8005f06:	aa03      	add	r2, sp, #12
 8005f08:	4621      	mov	r1, r4
 8005f0a:	4640      	mov	r0, r8
 8005f0c:	f7ff fee2 	bl	8005cd4 <_printf_common>
 8005f10:	3001      	adds	r0, #1
 8005f12:	d14c      	bne.n	8005fae <_printf_i+0x1fe>
 8005f14:	f04f 30ff 	mov.w	r0, #4294967295
 8005f18:	b004      	add	sp, #16
 8005f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f1e:	4835      	ldr	r0, [pc, #212]	; (8005ff4 <_printf_i+0x244>)
 8005f20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005f24:	6823      	ldr	r3, [r4, #0]
 8005f26:	680e      	ldr	r6, [r1, #0]
 8005f28:	061f      	lsls	r7, r3, #24
 8005f2a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005f2e:	600e      	str	r6, [r1, #0]
 8005f30:	d514      	bpl.n	8005f5c <_printf_i+0x1ac>
 8005f32:	07d9      	lsls	r1, r3, #31
 8005f34:	bf44      	itt	mi
 8005f36:	f043 0320 	orrmi.w	r3, r3, #32
 8005f3a:	6023      	strmi	r3, [r4, #0]
 8005f3c:	b91d      	cbnz	r5, 8005f46 <_printf_i+0x196>
 8005f3e:	6823      	ldr	r3, [r4, #0]
 8005f40:	f023 0320 	bic.w	r3, r3, #32
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	2310      	movs	r3, #16
 8005f48:	e7b0      	b.n	8005eac <_printf_i+0xfc>
 8005f4a:	6823      	ldr	r3, [r4, #0]
 8005f4c:	f043 0320 	orr.w	r3, r3, #32
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	2378      	movs	r3, #120	; 0x78
 8005f54:	4828      	ldr	r0, [pc, #160]	; (8005ff8 <_printf_i+0x248>)
 8005f56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f5a:	e7e3      	b.n	8005f24 <_printf_i+0x174>
 8005f5c:	065e      	lsls	r6, r3, #25
 8005f5e:	bf48      	it	mi
 8005f60:	b2ad      	uxthmi	r5, r5
 8005f62:	e7e6      	b.n	8005f32 <_printf_i+0x182>
 8005f64:	4616      	mov	r6, r2
 8005f66:	e7bb      	b.n	8005ee0 <_printf_i+0x130>
 8005f68:	680b      	ldr	r3, [r1, #0]
 8005f6a:	6826      	ldr	r6, [r4, #0]
 8005f6c:	6960      	ldr	r0, [r4, #20]
 8005f6e:	1d1d      	adds	r5, r3, #4
 8005f70:	600d      	str	r5, [r1, #0]
 8005f72:	0635      	lsls	r5, r6, #24
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	d501      	bpl.n	8005f7c <_printf_i+0x1cc>
 8005f78:	6018      	str	r0, [r3, #0]
 8005f7a:	e002      	b.n	8005f82 <_printf_i+0x1d2>
 8005f7c:	0671      	lsls	r1, r6, #25
 8005f7e:	d5fb      	bpl.n	8005f78 <_printf_i+0x1c8>
 8005f80:	8018      	strh	r0, [r3, #0]
 8005f82:	2300      	movs	r3, #0
 8005f84:	6123      	str	r3, [r4, #16]
 8005f86:	4616      	mov	r6, r2
 8005f88:	e7ba      	b.n	8005f00 <_printf_i+0x150>
 8005f8a:	680b      	ldr	r3, [r1, #0]
 8005f8c:	1d1a      	adds	r2, r3, #4
 8005f8e:	600a      	str	r2, [r1, #0]
 8005f90:	681e      	ldr	r6, [r3, #0]
 8005f92:	6862      	ldr	r2, [r4, #4]
 8005f94:	2100      	movs	r1, #0
 8005f96:	4630      	mov	r0, r6
 8005f98:	f7fa f93a 	bl	8000210 <memchr>
 8005f9c:	b108      	cbz	r0, 8005fa2 <_printf_i+0x1f2>
 8005f9e:	1b80      	subs	r0, r0, r6
 8005fa0:	6060      	str	r0, [r4, #4]
 8005fa2:	6863      	ldr	r3, [r4, #4]
 8005fa4:	6123      	str	r3, [r4, #16]
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fac:	e7a8      	b.n	8005f00 <_printf_i+0x150>
 8005fae:	6923      	ldr	r3, [r4, #16]
 8005fb0:	4632      	mov	r2, r6
 8005fb2:	4649      	mov	r1, r9
 8005fb4:	4640      	mov	r0, r8
 8005fb6:	47d0      	blx	sl
 8005fb8:	3001      	adds	r0, #1
 8005fba:	d0ab      	beq.n	8005f14 <_printf_i+0x164>
 8005fbc:	6823      	ldr	r3, [r4, #0]
 8005fbe:	079b      	lsls	r3, r3, #30
 8005fc0:	d413      	bmi.n	8005fea <_printf_i+0x23a>
 8005fc2:	68e0      	ldr	r0, [r4, #12]
 8005fc4:	9b03      	ldr	r3, [sp, #12]
 8005fc6:	4298      	cmp	r0, r3
 8005fc8:	bfb8      	it	lt
 8005fca:	4618      	movlt	r0, r3
 8005fcc:	e7a4      	b.n	8005f18 <_printf_i+0x168>
 8005fce:	2301      	movs	r3, #1
 8005fd0:	4632      	mov	r2, r6
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	4640      	mov	r0, r8
 8005fd6:	47d0      	blx	sl
 8005fd8:	3001      	adds	r0, #1
 8005fda:	d09b      	beq.n	8005f14 <_printf_i+0x164>
 8005fdc:	3501      	adds	r5, #1
 8005fde:	68e3      	ldr	r3, [r4, #12]
 8005fe0:	9903      	ldr	r1, [sp, #12]
 8005fe2:	1a5b      	subs	r3, r3, r1
 8005fe4:	42ab      	cmp	r3, r5
 8005fe6:	dcf2      	bgt.n	8005fce <_printf_i+0x21e>
 8005fe8:	e7eb      	b.n	8005fc2 <_printf_i+0x212>
 8005fea:	2500      	movs	r5, #0
 8005fec:	f104 0619 	add.w	r6, r4, #25
 8005ff0:	e7f5      	b.n	8005fde <_printf_i+0x22e>
 8005ff2:	bf00      	nop
 8005ff4:	08006385 	.word	0x08006385
 8005ff8:	08006396 	.word	0x08006396

08005ffc <_sbrk_r>:
 8005ffc:	b538      	push	{r3, r4, r5, lr}
 8005ffe:	4d06      	ldr	r5, [pc, #24]	; (8006018 <_sbrk_r+0x1c>)
 8006000:	2300      	movs	r3, #0
 8006002:	4604      	mov	r4, r0
 8006004:	4608      	mov	r0, r1
 8006006:	602b      	str	r3, [r5, #0]
 8006008:	f7fb fc94 	bl	8001934 <_sbrk>
 800600c:	1c43      	adds	r3, r0, #1
 800600e:	d102      	bne.n	8006016 <_sbrk_r+0x1a>
 8006010:	682b      	ldr	r3, [r5, #0]
 8006012:	b103      	cbz	r3, 8006016 <_sbrk_r+0x1a>
 8006014:	6023      	str	r3, [r4, #0]
 8006016:	bd38      	pop	{r3, r4, r5, pc}
 8006018:	200021f0 	.word	0x200021f0

0800601c <__sread>:
 800601c:	b510      	push	{r4, lr}
 800601e:	460c      	mov	r4, r1
 8006020:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006024:	f000 f8a0 	bl	8006168 <_read_r>
 8006028:	2800      	cmp	r0, #0
 800602a:	bfab      	itete	ge
 800602c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800602e:	89a3      	ldrhlt	r3, [r4, #12]
 8006030:	181b      	addge	r3, r3, r0
 8006032:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006036:	bfac      	ite	ge
 8006038:	6563      	strge	r3, [r4, #84]	; 0x54
 800603a:	81a3      	strhlt	r3, [r4, #12]
 800603c:	bd10      	pop	{r4, pc}

0800603e <__swrite>:
 800603e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006042:	461f      	mov	r7, r3
 8006044:	898b      	ldrh	r3, [r1, #12]
 8006046:	05db      	lsls	r3, r3, #23
 8006048:	4605      	mov	r5, r0
 800604a:	460c      	mov	r4, r1
 800604c:	4616      	mov	r6, r2
 800604e:	d505      	bpl.n	800605c <__swrite+0x1e>
 8006050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006054:	2302      	movs	r3, #2
 8006056:	2200      	movs	r2, #0
 8006058:	f000 f868 	bl	800612c <_lseek_r>
 800605c:	89a3      	ldrh	r3, [r4, #12]
 800605e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006062:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006066:	81a3      	strh	r3, [r4, #12]
 8006068:	4632      	mov	r2, r6
 800606a:	463b      	mov	r3, r7
 800606c:	4628      	mov	r0, r5
 800606e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006072:	f000 b817 	b.w	80060a4 <_write_r>

08006076 <__sseek>:
 8006076:	b510      	push	{r4, lr}
 8006078:	460c      	mov	r4, r1
 800607a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800607e:	f000 f855 	bl	800612c <_lseek_r>
 8006082:	1c43      	adds	r3, r0, #1
 8006084:	89a3      	ldrh	r3, [r4, #12]
 8006086:	bf15      	itete	ne
 8006088:	6560      	strne	r0, [r4, #84]	; 0x54
 800608a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800608e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006092:	81a3      	strheq	r3, [r4, #12]
 8006094:	bf18      	it	ne
 8006096:	81a3      	strhne	r3, [r4, #12]
 8006098:	bd10      	pop	{r4, pc}

0800609a <__sclose>:
 800609a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800609e:	f000 b813 	b.w	80060c8 <_close_r>
	...

080060a4 <_write_r>:
 80060a4:	b538      	push	{r3, r4, r5, lr}
 80060a6:	4d07      	ldr	r5, [pc, #28]	; (80060c4 <_write_r+0x20>)
 80060a8:	4604      	mov	r4, r0
 80060aa:	4608      	mov	r0, r1
 80060ac:	4611      	mov	r1, r2
 80060ae:	2200      	movs	r2, #0
 80060b0:	602a      	str	r2, [r5, #0]
 80060b2:	461a      	mov	r2, r3
 80060b4:	f7fb fa26 	bl	8001504 <_write>
 80060b8:	1c43      	adds	r3, r0, #1
 80060ba:	d102      	bne.n	80060c2 <_write_r+0x1e>
 80060bc:	682b      	ldr	r3, [r5, #0]
 80060be:	b103      	cbz	r3, 80060c2 <_write_r+0x1e>
 80060c0:	6023      	str	r3, [r4, #0]
 80060c2:	bd38      	pop	{r3, r4, r5, pc}
 80060c4:	200021f0 	.word	0x200021f0

080060c8 <_close_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	4d06      	ldr	r5, [pc, #24]	; (80060e4 <_close_r+0x1c>)
 80060cc:	2300      	movs	r3, #0
 80060ce:	4604      	mov	r4, r0
 80060d0:	4608      	mov	r0, r1
 80060d2:	602b      	str	r3, [r5, #0]
 80060d4:	f7fb fbf9 	bl	80018ca <_close>
 80060d8:	1c43      	adds	r3, r0, #1
 80060da:	d102      	bne.n	80060e2 <_close_r+0x1a>
 80060dc:	682b      	ldr	r3, [r5, #0]
 80060de:	b103      	cbz	r3, 80060e2 <_close_r+0x1a>
 80060e0:	6023      	str	r3, [r4, #0]
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	200021f0 	.word	0x200021f0

080060e8 <_fstat_r>:
 80060e8:	b538      	push	{r3, r4, r5, lr}
 80060ea:	4d07      	ldr	r5, [pc, #28]	; (8006108 <_fstat_r+0x20>)
 80060ec:	2300      	movs	r3, #0
 80060ee:	4604      	mov	r4, r0
 80060f0:	4608      	mov	r0, r1
 80060f2:	4611      	mov	r1, r2
 80060f4:	602b      	str	r3, [r5, #0]
 80060f6:	f7fb fbf4 	bl	80018e2 <_fstat>
 80060fa:	1c43      	adds	r3, r0, #1
 80060fc:	d102      	bne.n	8006104 <_fstat_r+0x1c>
 80060fe:	682b      	ldr	r3, [r5, #0]
 8006100:	b103      	cbz	r3, 8006104 <_fstat_r+0x1c>
 8006102:	6023      	str	r3, [r4, #0]
 8006104:	bd38      	pop	{r3, r4, r5, pc}
 8006106:	bf00      	nop
 8006108:	200021f0 	.word	0x200021f0

0800610c <_isatty_r>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	4d06      	ldr	r5, [pc, #24]	; (8006128 <_isatty_r+0x1c>)
 8006110:	2300      	movs	r3, #0
 8006112:	4604      	mov	r4, r0
 8006114:	4608      	mov	r0, r1
 8006116:	602b      	str	r3, [r5, #0]
 8006118:	f7fb fbf3 	bl	8001902 <_isatty>
 800611c:	1c43      	adds	r3, r0, #1
 800611e:	d102      	bne.n	8006126 <_isatty_r+0x1a>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	b103      	cbz	r3, 8006126 <_isatty_r+0x1a>
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	bd38      	pop	{r3, r4, r5, pc}
 8006128:	200021f0 	.word	0x200021f0

0800612c <_lseek_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	4d07      	ldr	r5, [pc, #28]	; (800614c <_lseek_r+0x20>)
 8006130:	4604      	mov	r4, r0
 8006132:	4608      	mov	r0, r1
 8006134:	4611      	mov	r1, r2
 8006136:	2200      	movs	r2, #0
 8006138:	602a      	str	r2, [r5, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	f7fb fbec 	bl	8001918 <_lseek>
 8006140:	1c43      	adds	r3, r0, #1
 8006142:	d102      	bne.n	800614a <_lseek_r+0x1e>
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	b103      	cbz	r3, 800614a <_lseek_r+0x1e>
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	bd38      	pop	{r3, r4, r5, pc}
 800614c:	200021f0 	.word	0x200021f0

08006150 <__malloc_lock>:
 8006150:	4801      	ldr	r0, [pc, #4]	; (8006158 <__malloc_lock+0x8>)
 8006152:	f7ff bb55 	b.w	8005800 <__retarget_lock_acquire_recursive>
 8006156:	bf00      	nop
 8006158:	200021e8 	.word	0x200021e8

0800615c <__malloc_unlock>:
 800615c:	4801      	ldr	r0, [pc, #4]	; (8006164 <__malloc_unlock+0x8>)
 800615e:	f7ff bb50 	b.w	8005802 <__retarget_lock_release_recursive>
 8006162:	bf00      	nop
 8006164:	200021e8 	.word	0x200021e8

08006168 <_read_r>:
 8006168:	b538      	push	{r3, r4, r5, lr}
 800616a:	4d07      	ldr	r5, [pc, #28]	; (8006188 <_read_r+0x20>)
 800616c:	4604      	mov	r4, r0
 800616e:	4608      	mov	r0, r1
 8006170:	4611      	mov	r1, r2
 8006172:	2200      	movs	r2, #0
 8006174:	602a      	str	r2, [r5, #0]
 8006176:	461a      	mov	r2, r3
 8006178:	f7fb fb8a 	bl	8001890 <_read>
 800617c:	1c43      	adds	r3, r0, #1
 800617e:	d102      	bne.n	8006186 <_read_r+0x1e>
 8006180:	682b      	ldr	r3, [r5, #0]
 8006182:	b103      	cbz	r3, 8006186 <_read_r+0x1e>
 8006184:	6023      	str	r3, [r4, #0]
 8006186:	bd38      	pop	{r3, r4, r5, pc}
 8006188:	200021f0 	.word	0x200021f0

0800618c <_init>:
 800618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800618e:	bf00      	nop
 8006190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006192:	bc08      	pop	{r3}
 8006194:	469e      	mov	lr, r3
 8006196:	4770      	bx	lr

08006198 <_fini>:
 8006198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800619a:	bf00      	nop
 800619c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800619e:	bc08      	pop	{r3}
 80061a0:	469e      	mov	lr, r3
 80061a2:	4770      	bx	lr
